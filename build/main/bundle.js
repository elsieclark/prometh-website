(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.main = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _ = require('lodash');
var createClass = require('create-react-class');
var React = require('react');

var stringList = ['Asynchronous Ethereum.', 'Reliable. And powerful.', 'Blockchain State Machines.', 'Trustless. Always.'];

var timeouts = [];

var AboutPage = createClass({
    getDefaultProps: function getDefaultProps() {
        return {};
    },

    getInitialState: function getInitialState() {
        return {
            cursorVisible: false,
            currentString: 'Asynchronous Ethereum',
            currentStringIndex: 0,
            editingString: true
        };
    },

    toggleCursor: function toggleCursor() {
        var _this = this;

        this.setState({
            cursorVisible: this.state.editingString ? true : !this.state.cursorVisible
        });
        timeouts[0] = setTimeout(function () {
            _this.toggleCursor();
        }, 600);
    },

    removeCharacters: function removeCharacters() {
        var _this2 = this;

        if (!this.state.currentString) {
            this.holdCharacters();
            this.setState({
                currentStringIndex: (this.state.currentStringIndex + 1) % stringList.length
            });
            return;
        }
        this.setState({
            currentString: this.state.currentString.slice(0, -1),
            editingString: true
        });
        timeouts[1] = setTimeout(function () {
            _this2.removeCharacters();
        }, 30);
    },

    addCharacters: function addCharacters() {
        var _this3 = this;

        if (this.state.currentString === stringList[this.state.currentStringIndex]) {
            this.holdCharacters();
            return;
        }
        this.setState({
            currentString: stringList[this.state.currentStringIndex].slice(0, this.state.currentString.length + 1),
            editingString: true
        });
        if (stringList[this.state.currentStringIndex][this.state.currentString.length - 1] == '.') {
            timeouts[1] = setTimeout(function () {
                _this3.addCharacters();
            }, 800);
        } else {
            timeouts[1] = setTimeout(function () {
                _this3.addCharacters();
            }, 90);
        }
    },

    holdCharacters: function holdCharacters() {
        var _this4 = this;

        this.setState({
            editingString: !this.state.editingString
        });

        if (this.state.currentString) {
            timeouts[1] = setTimeout(function () {
                _this4.removeCharacters();
            }, 4000);
        } else {
            timeouts[1] = setTimeout(function () {
                _this4.addCharacters();
            }, 400);
        }
    },

    componentDidMount: function componentDidMount() {
        var _this5 = this;

        setTimeout(function () {
            _this5.toggleCursor();
        }, 600);
        this.holdCharacters();
    },

    componentWillUnmount: function componentWillUnmount() {
        clearTimeout(timeouts[0]);
        clearTimeout(timeouts[1]);
    },

    render: function render() {
        return React.createElement(
            'div',
            { className: 'aboutpage' },
            React.createElement(
                'div',
                { className: 'standstill' },
                React.createElement(
                    'h3',
                    { className: 'tagline' },
                    'Prometheus ',
                    React.createElement(
                        'span',
                        null,
                        'is'
                    )
                ),
                React.createElement(
                    'h3',
                    { className: 'tagline second' },
                    this.state.currentString,
                    React.createElement('div', { className: 'cursor' + (this.state.cursorVisible ? '' : ' hidden') })
                )
            ),
            React.createElement(
                'div',
                { className: 'box part3' },
                React.createElement(
                    'div',
                    { className: 'para' },
                    React.createElement(
                        'div',
                        { className: 'subPara' },
                        React.createElement(
                            'h3',
                            null,
                            'Asynchronous Ethereum. Right now, and any other time.'
                        ),
                        React.createElement(
                            'p',
                            null,
                            'There\'s safety in numbers. By crowdsourcing asynchronous function calls across a wide enough population, we can build a callback marketplace.'
                        )
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'para' },
                    React.createElement(
                        'div',
                        { className: 'subPara' },
                        React.createElement(
                            'h3',
                            null,
                            'Unleash your DApp with the power of a State Machine.'
                        ),
                        React.createElement(
                            'p',
                            null,
                            'Prometheus gives your contracts the ability to act upon changes of state within the Ethereum network. With new oracles being created every day, that\'s a whole world of possibilities.'
                        )
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'para' },
                    React.createElement(
                        'div',
                        { className: 'subPara' },
                        React.createElement(
                            'h3',
                            null,
                            'Distributed. Trustless. Versatile. Prometheus.'
                        ),
                        React.createElement(
                            'p',
                            null,
                            'Prometheus contains all the neccesary safeguards to protect users and customers from each other, allowing for a stable, trustless, and open-source ecosystem. '
                        )
                    )
                )
            ),
            React.createElement(
                'div',
                { className: 'box diagram' },
                React.createElement('div', { className: 'backdrop' }),
                React.createElement(
                    'div',
                    { className: 'column' },
                    React.createElement(
                        'h3',
                        null,
                        'Agents'
                    ),
                    React.createElement(
                        'p',
                        { className: 'description' },
                        'Any of your contracts can be an agent. By defining a couple of functions, Agents can recieve asynchronous callbacks based on any possible function of its state.'
                    ),
                    React.createElement(
                        'div',
                        { className: 'boxes' },
                        React.createElement(
                            'div',
                            { className: 'agent' },
                            React.createElement('div', { className: 'line' })
                        ),
                        React.createElement(
                            'div',
                            { className: 'agent' },
                            React.createElement('div', { className: 'line' })
                        ),
                        React.createElement(
                            'div',
                            { className: 'agent' },
                            React.createElement('div', { className: 'line' })
                        ),
                        React.createElement(
                            'div',
                            { className: 'agent' },
                            React.createElement('div', { className: 'line' })
                        )
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'column' },
                    React.createElement(
                        'h3',
                        null,
                        'PromEths'
                    ),
                    React.createElement(
                        'p',
                        { className: 'description' },
                        'Each PromEth is bound to a single Agent, and it removes the need for trust. It stores the Ether rewards on your behalf, to ensure nobody can cheat, and people get the rewards they expect.'
                    ),
                    React.createElement(
                        'div',
                        { className: 'boxes' },
                        React.createElement('div', { className: 'prometh' }),
                        React.createElement('div', { className: 'prometh' }),
                        React.createElement('div', { className: 'prometh' }),
                        React.createElement('div', { className: 'prometh' })
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'column' },
                    React.createElement(
                        'h3',
                        null,
                        'Prometheus'
                    ),
                    React.createElement(
                        'p',
                        { className: 'description' },
                        'A single central contract. It\'s job is to build your Promeths, and keep track of them for the Ravens to find. Prometheus is open source, and independently verifiable.'
                    ),
                    React.createElement(
                        'div',
                        { className: 'boxes' },
                        React.createElement('div', { className: 'prometheus' })
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'column' },
                    React.createElement(
                        'h3',
                        null,
                        'Ravens'
                    ),
                    React.createElement(
                        'p',
                        { className: 'description' },
                        'A large pool of users running our open-source Node client, "Raven". They get paid to supply gas, when and where you want. It\'s an Ether payout for far less work than mining.'
                    ),
                    React.createElement(
                        'div',
                        { className: 'boxes' },
                        React.createElement('div', { className: 'spacer' }),
                        React.createElement(
                            'div',
                            { className: 'raven' },
                            React.createElement('div', { className: 'line' })
                        ),
                        React.createElement(
                            'div',
                            { className: 'raven' },
                            React.createElement('div', { className: 'line' })
                        ),
                        React.createElement(
                            'div',
                            { className: 'raven' },
                            React.createElement('div', { className: 'line' })
                        ),
                        React.createElement(
                            'div',
                            { className: 'raven' },
                            React.createElement('div', { className: 'line' })
                        ),
                        React.createElement(
                            'div',
                            { className: 'raven' },
                            React.createElement('div', { className: 'line' })
                        ),
                        React.createElement(
                            'div',
                            { className: 'raven' },
                            React.createElement('div', { className: 'line' })
                        ),
                        React.createElement('div', { className: 'spacer' })
                    )
                )
            ),
            React.createElement(
                'div',
                { className: 'box footer' },
                React.createElement(
                    'div',
                    { className: 'copyright' },
                    '\xA9 2017 Prometheus.'
                ),
                React.createElement(
                    'div',
                    { className: 'copyright' },
                    'Will Clark & Keyan Raahemifar'
                )
            )
        );
    }
});

module.exports = AboutPage;

},{"create-react-class":"create-react-class","lodash":"lodash","react":"react"}],2:[function(require,module,exports){
'use strict';

var _ = require('lodash');
var createClass = require('create-react-class');
var React = require('react');
var Web3 = require('web3');

var prometheusABI = require('../../../web3/prometheus.json').abi;
var promethABI = require('../../../web3/prometh.json').abi;
var agentABI = require('../../../web3/agent.json').abi;

var Agentpage = createClass({
    getDefaultProps: function getDefaultProps() {
        return {};
    },

    getInitialState: function getInitialState() {
        return {
            web3: false,
            prometheus: {},
            promethAddress: '',
            agentAddress: ''
        };
    },

    componentDidMount: function componentDidMount() {
        if (typeof web3 !== 'undefined') {
            web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
            var prometheus = web3.eth.contract(prometheusABI).at('0xf4bc679d2ae0421b376f9bb0eaae90dd2b47b6c2');
            this.setState({
                web3: true,
                prometheus: prometheus
            });
        }
    },

    createPrometh: function createPrometh() {
        if (!this.state.web3) {
            return;
        }
        var hash = this.state.prometheus.createPrometh.sendTransaction(this.state.agentAddress, { from: web3.eth.accounts[0], gas: 1000000 });
        var promethAddress = this.state.prometheus.promeths(this.state.prometheus.promethCount().toNumber() - 1);
        this.setState({ promethAddress: promethAddress });
    },

    handleAgentAddress: function handleAgentAddress(e) {
        this.setState({ agentAddress: e.target.value });
    },

    render: function render() {
        return React.createElement(
            'div',
            { className: 'agentpage' },
            React.createElement(
                'div',
                { className: 'box description' },
                React.createElement(
                    'div',
                    { className: 'textArea' },
                    React.createElement(
                        'h3',
                        { className: 'title' },
                        'Developing with Prometheus? It couldn\'t be easier!'
                    ),
                    React.createElement(
                        'p',
                        { className: 'para' },
                        'Simply implement an Agent contract with two headers matching those shown to the left, deploy it to the Ethereum blockchain, and then submit the address using the form below. That\'s it!'
                    ),
                    React.createElement(
                        'p',
                        { className: 'para' },
                        'In return, you\'ll get the address of your contract\'s very own Prometh. Make sure to keep its balance topped up, or else no-one in our global network of Ravens will want to execute the calls.'
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'codeArea' },
                    React.createElement(
                        'div',
                        { className: 'codeBlock' },
                        React.createElement(
                            'div',
                            { className: 'codeLine' },
                            'contract agent { '
                        ),
                        React.createElement(
                            'div',
                            { className: 'codeLine indent' },
                            'function promethCost() constant public returns (uint128, uint128) {}'
                        ),
                        React.createElement(
                            'div',
                            { className: 'codeLine indent' },
                            'function promethExecute() public {}'
                        ),
                        React.createElement(
                            'div',
                            { className: 'codeLine' },
                            '}'
                        )
                    )
                )
            ),
            React.createElement(
                'div',
                { className: 'box submit' },
                React.createElement(
                    'div',
                    { className: 'submissionArea' },
                    React.createElement('input', { type: 'text',
                        className: 'submissionBox',
                        placeholder: 'Agent address',
                        onChange: this.handleAgentAddress }),
                    React.createElement(
                        'div',
                        { className: 'submitButton',
                            onClick: this.createPrometh },
                        React.createElement(
                            'p',
                            null,
                            'Create Agent'
                        )
                    )
                ),
                React.createElement(
                    'div',
                    { className: 'addressDisplay' },
                    React.createElement(
                        'p',
                        null,
                        'Prometh address: ',
                        this.state.promethAddress
                    )
                )
            ),
            React.createElement(
                'div',
                { className: 'box footer' },
                React.createElement(
                    'div',
                    { className: 'copyright' },
                    '\xA9 2017 Prometheus'
                ),
                React.createElement(
                    'div',
                    { className: 'copyright' },
                    'Will Clark & Keyan Raahemifar'
                )
            )
        );
    }
});

module.exports = Agentpage;

},{"../../../web3/agent.json":247,"../../../web3/prometh.json":248,"../../../web3/prometheus.json":249,"create-react-class":"create-react-class","lodash":"lodash","react":"react","web3":195}],3:[function(require,module,exports){
'use strict';

var _ = require('lodash');
var createClass = require('create-react-class');
var React = require('react');

var Fourohfour = createClass({
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: 'fourohfour' },
            'Fourohfour Component Ready.'
        );
    }
});

module.exports = Fourohfour;

},{"create-react-class":"create-react-class","lodash":"lodash","react":"react"}],"/Users/willclark/Documents/repos/prometh-website/client/main/main.jsx":[function(require,module,exports){
'use strict';

var _ = require('lodash');
var createClass = require('create-react-class');
var createRouter = require('pico-router').createRouter;
var Link = require('pico-router').Link;
var React = require('react');

var AboutPage = require('./aboutpage/aboutpage.jsx');
var AgentPage = require('./agentpage/agentpage.jsx');
var RavenPage = require('./ravenpage/ravenpage.jsx');
var FourOhFour = require('./fourohfour/fourohfour.jsx');

var TopBar = require('../shared/topbar/topbar.jsx');

var Router = createRouter({
    '/': React.createElement(AboutPage, null),
    '/develop': React.createElement(AgentPage, null),
    '/*': React.createElement(FourOhFour, null)
});

var navBarLinks = [{
    name: 'About',
    link: '/'
}, {
    name: 'Develop',
    link: '/develop'
}];

var Main = createClass({
    getDefaultProps: function getDefaultProps() {
        return {
            url: '/'
        };
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: 'main' },
            React.createElement(TopBar, { pages: navBarLinks }),
            React.createElement(Router, { defaultUrl: this.props.url })
        );
    }
});

module.exports = Main;

},{"../shared/topbar/topbar.jsx":5,"./aboutpage/aboutpage.jsx":1,"./agentpage/agentpage.jsx":2,"./fourohfour/fourohfour.jsx":3,"./ravenpage/ravenpage.jsx":4,"create-react-class":"create-react-class","lodash":"lodash","pico-router":"pico-router","react":"react"}],4:[function(require,module,exports){
'use strict';

var _ = require('lodash');
var createClass = require('create-react-class');
var React = require('react');

var Ravenpage = createClass({
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: 'ravenpage' },
            'Ravenpage Component Ready.'
        );
    }
});

module.exports = Ravenpage;

},{"create-react-class":"create-react-class","lodash":"lodash","react":"react"}],5:[function(require,module,exports){
'use strict';

var _ = require('lodash');
var cx = require('classnames');
var createClass = require('create-react-class');
var React = require('react');
var Link = require('pico-router').Link;

var TopBar = createClass({
    getDefaultProps: function getDefaultProps() {
        return {
            pages: []
        };
    },
    getInitialState: function getInitialState() {
        return {
            currentPage: '/'
        };
    },
    getCurrentPage: function getCurrentPage(e) {
        this.setState({
            currentPage: decodeURI(e.currentTarget.href.split(window.location.origin)[1])
        });
    },

    componentDidMount: function componentDidMount() {
        this.setState({
            currentPage: decodeURI(window.location.href.split(window.location.origin)[1])
        });
    },

    renderPageLinks: function renderPageLinks() {
        var _this = this;

        return _.map(this.props.pages, function (page) {
            return React.createElement(
                Link,
                { className: cx('pageLink', { activePage: _this.state.currentPage === page.link }), href: '' + page.link, onClick: _this.getCurrentPage },
                page.name
            );
        });
    },

    render: function render() {
        return React.createElement(
            'div',
            { className: 'topbar' },
            React.createElement(
                'h3',
                { className: 'siteName' },
                'Prometheus'
            ),
            React.createElement(
                'nav',
                { className: 'pageLinkList' },
                this.renderPageLinks()
            )
        );
    }
});

module.exports = TopBar;

},{"classnames":"classnames","create-react-class":"create-react-class","lodash":"lodash","pico-router":"pico-router","react":"react"}],6:[function(require,module,exports){
'use strict';

var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":7,"./asn1/base":9,"./asn1/constants":13,"./asn1/decoders":15,"./asn1/encoders":18,"bn.js":21}],7:[function(require,module,exports){
'use strict';

var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext('(function ' + this.name + '(entity) {\n' + '  this._initNamed(entity);\n' + '})');
  } catch (e) {
    named = function named(entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":6,"inherits":140,"vm":194}],8:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);else return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function (item) {
      if (!(item instanceof EncoderBuffer)) item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff)) return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)));
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out) out = new Buffer(this.length);
  if (!offset) offset = 0;

  if (this.length === 0) return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function (item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number') out[offset] = this.value;else if (typeof this.value === 'string') out.write(this.value, offset);else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":9,"buffer":52,"inherits":140}],9:[function(require,module,exports){
'use strict';

var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":8,"./node":10,"./reporter":11}],10:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var DecoderBuffer = require('../base').DecoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = ['seq', 'seqof', 'set', 'setof', 'objid', 'bool', 'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc', 'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str', 'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'];

// Public methods list
var methods = ['key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice', 'any', 'contains'].concat(tags);

// Overrided methods list
var overrided = ['_peekTag', '_decodeTag', '_use', '_decodeStr', '_decodeObjid', '_decodeTime', '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList', '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime', '_encodeNull', '_encodeInt', '_encodeBool'];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = ['enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice', 'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit', 'implicit', 'contains'];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function (prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function (method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function (child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function (arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function (arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function (child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function (arg) {
      if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) !== 'object' || arg.constructor !== Object) return arg;

      var res = {};
      Object.keys(arg).forEach(function (key) {
        if (key == (key | 0)) key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function (method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function (tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0) this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function (key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null) prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null) tag = state.explicit;else if (state.implicit !== null) tag = state.implicit;else if (state.tag !== null) tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null) this._decodeGeneric(state.tag, input, options);else this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present)) return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present) prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit)) return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any) var save = input.save();
      var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
      if (input.isError(body)) return body;

      if (state.any) result = input.raw(save);else input = body;
    }

    if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any) result = result;else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);else result = this._decodeChoice(input, options);

    if (input.isError(result)) return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present) result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);else if (prevKey !== null) input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set') return null;
  if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);else if (tag === 'objid') return this._decodeObjid(input, null, null, options);else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);else if (tag === 'null_') return this._decodeNull(input, options);else if (tag === 'bool') return this._decodeBool(input, options);else if (tag === 'objDesc') return this._decodeStr(input, tag, options);else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function (key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value)) return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match) return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data) return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined) return;

  if (this._skipDefault(result, reporter, parent)) return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null) data = state['default'];else return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function (child) {
      if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);

      if (child._baseState.key === null) return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function (child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1)) return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function (item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null) reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag)) return this._encodeStr(data, tag);else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);else if (tag === 'objid') return this._encodeObjid(data, null, null);else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);else if (tag === 'null_') return this._encodeNull();else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);else if (tag === 'bool') return this._encodeBool(data);else if (tag === 'objDesc') return this._encodeStr(data, tag);else throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return (/^[0-9 ]*$/.test(str)
  );
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return (/^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str)
  );
};

},{"../base":9,"minimalistic-assert":146}],11:[function(require,module,exports){
'use strict';

var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null) state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function (elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial) throw err;

  if (!inherited) state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial) return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":140}],12:[function(require,module,exports){
'use strict';

var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":13}],13:[function(require,module,exports){
'use strict';

var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function (key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key) key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":12}],14:[function(require,module,exports){
'use strict';

var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer)) data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty()) return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag)) return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag)) return decodedTag;

  var len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len)) return len;

  if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res)) return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag)) return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len)) return len;

    var res;
    if (tag.primitive || len !== null) res = buffer.skip(len);else res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res)) return res;

    if (tag.tagStr === 'end') break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd)) return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd) break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused)) return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' + 'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' + 'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80) identifiers.push(ident);

  var first = identifiers[0] / 40 | 0;
  var second = identifiers[0] % 40;

  if (relative) result = identifiers;else result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined) tmp = values[result.join('.')];
    if (tmp !== undefined) result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70) year = 2000 + year;else year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res)) return res;else return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values) res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function') entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag)) return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct)) return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len)) return len;

  // Indefinite form
  if (!primitive && len === 0x80) return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4) return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j)) return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":6,"inherits":140}],15:[function(require,module,exports){
'use strict';

var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":14,"./pem":16}],16:[function(require,module,exports){
'use strict';

var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null) continue;

    if (match[2] !== label) continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN') break;
      start = i;
    } else {
      if (match[1] !== 'END') break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":14,"buffer":52,"inherits":140}],17:[function(require,module,exports){
'use strict';

var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([header, content]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8) {
    lenOctets++;
  }var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8) {
    header[i] = j & 0xff;
  }return this._createEncoderBuffer([header, content]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([str.unused | 0, str.data]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' + 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' + 'only latin upper and lower case letters, ' + 'digits, space, apostrophe, left and rigth ' + 'parenthesis, plus sign, comma, hyphen, ' + 'dot, slash, colon, equal sign, ' + 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values) return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++) {
      id[i] |= 0;
    }
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++) {
      id[i] |= 0;
    }
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' + 'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7) {
      size++;
    }
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0) {
      objid[offset--] = 0x80 | ident & 0x7f;
    }
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10) return '0' + num;else return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [two(date.getFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
  } else if (tag === 'utctime') {
    str = [two(date.getFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values) return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0) size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0) out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80) return this._createEncoderBuffer(num);

  if (num < 0x100) return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8) {
    size++;
  }var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if (out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function') entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null) return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length) return false;

  for (i = 0; i < data.length; i++) {
    if (data[i] !== state.defaultBuffer[i]) return false;
  }return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof') tag = 'seq';else if (tag === 'setof') tag = 'set';

  if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;else return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f) return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive) res |= 0x20;

  res |= der.tagClassByName[cls || 'universal'] << 6;

  return res;
}

},{"../../asn1":6,"buffer":52,"inherits":140}],18:[function(require,module,exports){
'use strict';

var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":17,"./pem":19}],19:[function(require,module,exports){
'use strict';

var inherits = require('inherits');

var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = ['-----BEGIN ' + options.label + '-----'];
  for (var i = 0; i < p.length; i += 64) {
    out.push(p.slice(i, i + 64));
  }out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":17,"inherits":140}],20:[function(require,module,exports){
'use strict';

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function placeHoldersCount(b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
}

function byteLength(b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64);
}

function toByteArray(b64) {
  var i, l, tmp, placeHolders, arr;
  var len = b64.length;
  placeHolders = placeHoldersCount(b64);

  arr = new Arr(len * 3 / 4 - placeHolders);

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0; i < l; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  var output = '';
  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('');
}

},{}],21:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (module, exports) {
  'use strict';

  // Utils

  function assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function TempCtor() {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN(number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buffer').Buffer;
  } catch (e) {}

  BN.isBN = function isBN(num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && (typeof num === 'undefined' ? 'undefined' : _typeof(num)) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max(left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min(left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init(number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if ((typeof number === 'undefined' ? 'undefined' : _typeof(number)) === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber(number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray(number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex(str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

        // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

        // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex(number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= w << off & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= w << off & 0x3ffffff;
      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
    }
    this.strip();
  };

  function parseBase(str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

        // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

        // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase(number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = limbPow / base | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy(dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone() {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand(size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip() {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign() {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect() {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*
   var zeros = [];
  var groupSizes = [];
  var groupBases = [];
   var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }
   */

  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];

  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];

  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

  BN.prototype.toString = function toString(base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = ((w << off | carry) & 0xffffff).toString(16);
        carry = w >>> 24 - off & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber() {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + this.words[1] * 0x4000000;
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return this.negative !== 0 ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON() {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer(endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray(endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits(w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits(w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits(w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength() {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray(num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = bit / 26 | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits() {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength() {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos(width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos(width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg() {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg() {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg() {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor(num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or(num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor(num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand(num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and(num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand(num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor(num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor(num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor(num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn(width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn(width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn(bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = bit / 26 | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | 1 << wbit;
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd(num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

      // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
      // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add(num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub(num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

      // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub(num) {
    return this.clone().isub(num);
  };

  function smallMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = self.length + num.length | 0;
    out.length = len;
    len = len - 1 | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = r / 0x4000000 | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += r / 0x4000000 | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo(self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = mid + Math.imul(ah0, bl0) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = mid + Math.imul(ah1, bl0) | 0;
    hi = Math.imul(ah1, bh0);
    lo = lo + Math.imul(al0, bl1) | 0;
    mid = mid + Math.imul(al0, bh1) | 0;
    mid = mid + Math.imul(ah0, bl1) | 0;
    hi = hi + Math.imul(ah0, bh1) | 0;
    var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = mid + Math.imul(ah2, bl0) | 0;
    hi = Math.imul(ah2, bh0);
    lo = lo + Math.imul(al1, bl1) | 0;
    mid = mid + Math.imul(al1, bh1) | 0;
    mid = mid + Math.imul(ah1, bl1) | 0;
    hi = hi + Math.imul(ah1, bh1) | 0;
    lo = lo + Math.imul(al0, bl2) | 0;
    mid = mid + Math.imul(al0, bh2) | 0;
    mid = mid + Math.imul(ah0, bl2) | 0;
    hi = hi + Math.imul(ah0, bh2) | 0;
    var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = mid + Math.imul(ah3, bl0) | 0;
    hi = Math.imul(ah3, bh0);
    lo = lo + Math.imul(al2, bl1) | 0;
    mid = mid + Math.imul(al2, bh1) | 0;
    mid = mid + Math.imul(ah2, bl1) | 0;
    hi = hi + Math.imul(ah2, bh1) | 0;
    lo = lo + Math.imul(al1, bl2) | 0;
    mid = mid + Math.imul(al1, bh2) | 0;
    mid = mid + Math.imul(ah1, bl2) | 0;
    hi = hi + Math.imul(ah1, bh2) | 0;
    lo = lo + Math.imul(al0, bl3) | 0;
    mid = mid + Math.imul(al0, bh3) | 0;
    mid = mid + Math.imul(ah0, bl3) | 0;
    hi = hi + Math.imul(ah0, bh3) | 0;
    var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = mid + Math.imul(ah4, bl0) | 0;
    hi = Math.imul(ah4, bh0);
    lo = lo + Math.imul(al3, bl1) | 0;
    mid = mid + Math.imul(al3, bh1) | 0;
    mid = mid + Math.imul(ah3, bl1) | 0;
    hi = hi + Math.imul(ah3, bh1) | 0;
    lo = lo + Math.imul(al2, bl2) | 0;
    mid = mid + Math.imul(al2, bh2) | 0;
    mid = mid + Math.imul(ah2, bl2) | 0;
    hi = hi + Math.imul(ah2, bh2) | 0;
    lo = lo + Math.imul(al1, bl3) | 0;
    mid = mid + Math.imul(al1, bh3) | 0;
    mid = mid + Math.imul(ah1, bl3) | 0;
    hi = hi + Math.imul(ah1, bh3) | 0;
    lo = lo + Math.imul(al0, bl4) | 0;
    mid = mid + Math.imul(al0, bh4) | 0;
    mid = mid + Math.imul(ah0, bl4) | 0;
    hi = hi + Math.imul(ah0, bh4) | 0;
    var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = mid + Math.imul(ah5, bl0) | 0;
    hi = Math.imul(ah5, bh0);
    lo = lo + Math.imul(al4, bl1) | 0;
    mid = mid + Math.imul(al4, bh1) | 0;
    mid = mid + Math.imul(ah4, bl1) | 0;
    hi = hi + Math.imul(ah4, bh1) | 0;
    lo = lo + Math.imul(al3, bl2) | 0;
    mid = mid + Math.imul(al3, bh2) | 0;
    mid = mid + Math.imul(ah3, bl2) | 0;
    hi = hi + Math.imul(ah3, bh2) | 0;
    lo = lo + Math.imul(al2, bl3) | 0;
    mid = mid + Math.imul(al2, bh3) | 0;
    mid = mid + Math.imul(ah2, bl3) | 0;
    hi = hi + Math.imul(ah2, bh3) | 0;
    lo = lo + Math.imul(al1, bl4) | 0;
    mid = mid + Math.imul(al1, bh4) | 0;
    mid = mid + Math.imul(ah1, bl4) | 0;
    hi = hi + Math.imul(ah1, bh4) | 0;
    lo = lo + Math.imul(al0, bl5) | 0;
    mid = mid + Math.imul(al0, bh5) | 0;
    mid = mid + Math.imul(ah0, bl5) | 0;
    hi = hi + Math.imul(ah0, bh5) | 0;
    var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = mid + Math.imul(ah6, bl0) | 0;
    hi = Math.imul(ah6, bh0);
    lo = lo + Math.imul(al5, bl1) | 0;
    mid = mid + Math.imul(al5, bh1) | 0;
    mid = mid + Math.imul(ah5, bl1) | 0;
    hi = hi + Math.imul(ah5, bh1) | 0;
    lo = lo + Math.imul(al4, bl2) | 0;
    mid = mid + Math.imul(al4, bh2) | 0;
    mid = mid + Math.imul(ah4, bl2) | 0;
    hi = hi + Math.imul(ah4, bh2) | 0;
    lo = lo + Math.imul(al3, bl3) | 0;
    mid = mid + Math.imul(al3, bh3) | 0;
    mid = mid + Math.imul(ah3, bl3) | 0;
    hi = hi + Math.imul(ah3, bh3) | 0;
    lo = lo + Math.imul(al2, bl4) | 0;
    mid = mid + Math.imul(al2, bh4) | 0;
    mid = mid + Math.imul(ah2, bl4) | 0;
    hi = hi + Math.imul(ah2, bh4) | 0;
    lo = lo + Math.imul(al1, bl5) | 0;
    mid = mid + Math.imul(al1, bh5) | 0;
    mid = mid + Math.imul(ah1, bl5) | 0;
    hi = hi + Math.imul(ah1, bh5) | 0;
    lo = lo + Math.imul(al0, bl6) | 0;
    mid = mid + Math.imul(al0, bh6) | 0;
    mid = mid + Math.imul(ah0, bl6) | 0;
    hi = hi + Math.imul(ah0, bh6) | 0;
    var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = mid + Math.imul(ah7, bl0) | 0;
    hi = Math.imul(ah7, bh0);
    lo = lo + Math.imul(al6, bl1) | 0;
    mid = mid + Math.imul(al6, bh1) | 0;
    mid = mid + Math.imul(ah6, bl1) | 0;
    hi = hi + Math.imul(ah6, bh1) | 0;
    lo = lo + Math.imul(al5, bl2) | 0;
    mid = mid + Math.imul(al5, bh2) | 0;
    mid = mid + Math.imul(ah5, bl2) | 0;
    hi = hi + Math.imul(ah5, bh2) | 0;
    lo = lo + Math.imul(al4, bl3) | 0;
    mid = mid + Math.imul(al4, bh3) | 0;
    mid = mid + Math.imul(ah4, bl3) | 0;
    hi = hi + Math.imul(ah4, bh3) | 0;
    lo = lo + Math.imul(al3, bl4) | 0;
    mid = mid + Math.imul(al3, bh4) | 0;
    mid = mid + Math.imul(ah3, bl4) | 0;
    hi = hi + Math.imul(ah3, bh4) | 0;
    lo = lo + Math.imul(al2, bl5) | 0;
    mid = mid + Math.imul(al2, bh5) | 0;
    mid = mid + Math.imul(ah2, bl5) | 0;
    hi = hi + Math.imul(ah2, bh5) | 0;
    lo = lo + Math.imul(al1, bl6) | 0;
    mid = mid + Math.imul(al1, bh6) | 0;
    mid = mid + Math.imul(ah1, bl6) | 0;
    hi = hi + Math.imul(ah1, bh6) | 0;
    lo = lo + Math.imul(al0, bl7) | 0;
    mid = mid + Math.imul(al0, bh7) | 0;
    mid = mid + Math.imul(ah0, bl7) | 0;
    hi = hi + Math.imul(ah0, bh7) | 0;
    var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = mid + Math.imul(ah8, bl0) | 0;
    hi = Math.imul(ah8, bh0);
    lo = lo + Math.imul(al7, bl1) | 0;
    mid = mid + Math.imul(al7, bh1) | 0;
    mid = mid + Math.imul(ah7, bl1) | 0;
    hi = hi + Math.imul(ah7, bh1) | 0;
    lo = lo + Math.imul(al6, bl2) | 0;
    mid = mid + Math.imul(al6, bh2) | 0;
    mid = mid + Math.imul(ah6, bl2) | 0;
    hi = hi + Math.imul(ah6, bh2) | 0;
    lo = lo + Math.imul(al5, bl3) | 0;
    mid = mid + Math.imul(al5, bh3) | 0;
    mid = mid + Math.imul(ah5, bl3) | 0;
    hi = hi + Math.imul(ah5, bh3) | 0;
    lo = lo + Math.imul(al4, bl4) | 0;
    mid = mid + Math.imul(al4, bh4) | 0;
    mid = mid + Math.imul(ah4, bl4) | 0;
    hi = hi + Math.imul(ah4, bh4) | 0;
    lo = lo + Math.imul(al3, bl5) | 0;
    mid = mid + Math.imul(al3, bh5) | 0;
    mid = mid + Math.imul(ah3, bl5) | 0;
    hi = hi + Math.imul(ah3, bh5) | 0;
    lo = lo + Math.imul(al2, bl6) | 0;
    mid = mid + Math.imul(al2, bh6) | 0;
    mid = mid + Math.imul(ah2, bl6) | 0;
    hi = hi + Math.imul(ah2, bh6) | 0;
    lo = lo + Math.imul(al1, bl7) | 0;
    mid = mid + Math.imul(al1, bh7) | 0;
    mid = mid + Math.imul(ah1, bl7) | 0;
    hi = hi + Math.imul(ah1, bh7) | 0;
    lo = lo + Math.imul(al0, bl8) | 0;
    mid = mid + Math.imul(al0, bh8) | 0;
    mid = mid + Math.imul(ah0, bl8) | 0;
    hi = hi + Math.imul(ah0, bh8) | 0;
    var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = mid + Math.imul(ah9, bl0) | 0;
    hi = Math.imul(ah9, bh0);
    lo = lo + Math.imul(al8, bl1) | 0;
    mid = mid + Math.imul(al8, bh1) | 0;
    mid = mid + Math.imul(ah8, bl1) | 0;
    hi = hi + Math.imul(ah8, bh1) | 0;
    lo = lo + Math.imul(al7, bl2) | 0;
    mid = mid + Math.imul(al7, bh2) | 0;
    mid = mid + Math.imul(ah7, bl2) | 0;
    hi = hi + Math.imul(ah7, bh2) | 0;
    lo = lo + Math.imul(al6, bl3) | 0;
    mid = mid + Math.imul(al6, bh3) | 0;
    mid = mid + Math.imul(ah6, bl3) | 0;
    hi = hi + Math.imul(ah6, bh3) | 0;
    lo = lo + Math.imul(al5, bl4) | 0;
    mid = mid + Math.imul(al5, bh4) | 0;
    mid = mid + Math.imul(ah5, bl4) | 0;
    hi = hi + Math.imul(ah5, bh4) | 0;
    lo = lo + Math.imul(al4, bl5) | 0;
    mid = mid + Math.imul(al4, bh5) | 0;
    mid = mid + Math.imul(ah4, bl5) | 0;
    hi = hi + Math.imul(ah4, bh5) | 0;
    lo = lo + Math.imul(al3, bl6) | 0;
    mid = mid + Math.imul(al3, bh6) | 0;
    mid = mid + Math.imul(ah3, bl6) | 0;
    hi = hi + Math.imul(ah3, bh6) | 0;
    lo = lo + Math.imul(al2, bl7) | 0;
    mid = mid + Math.imul(al2, bh7) | 0;
    mid = mid + Math.imul(ah2, bl7) | 0;
    hi = hi + Math.imul(ah2, bh7) | 0;
    lo = lo + Math.imul(al1, bl8) | 0;
    mid = mid + Math.imul(al1, bh8) | 0;
    mid = mid + Math.imul(ah1, bl8) | 0;
    hi = hi + Math.imul(ah1, bh8) | 0;
    lo = lo + Math.imul(al0, bl9) | 0;
    mid = mid + Math.imul(al0, bh9) | 0;
    mid = mid + Math.imul(ah0, bl9) | 0;
    hi = hi + Math.imul(ah0, bh9) | 0;
    var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = mid + Math.imul(ah9, bl1) | 0;
    hi = Math.imul(ah9, bh1);
    lo = lo + Math.imul(al8, bl2) | 0;
    mid = mid + Math.imul(al8, bh2) | 0;
    mid = mid + Math.imul(ah8, bl2) | 0;
    hi = hi + Math.imul(ah8, bh2) | 0;
    lo = lo + Math.imul(al7, bl3) | 0;
    mid = mid + Math.imul(al7, bh3) | 0;
    mid = mid + Math.imul(ah7, bl3) | 0;
    hi = hi + Math.imul(ah7, bh3) | 0;
    lo = lo + Math.imul(al6, bl4) | 0;
    mid = mid + Math.imul(al6, bh4) | 0;
    mid = mid + Math.imul(ah6, bl4) | 0;
    hi = hi + Math.imul(ah6, bh4) | 0;
    lo = lo + Math.imul(al5, bl5) | 0;
    mid = mid + Math.imul(al5, bh5) | 0;
    mid = mid + Math.imul(ah5, bl5) | 0;
    hi = hi + Math.imul(ah5, bh5) | 0;
    lo = lo + Math.imul(al4, bl6) | 0;
    mid = mid + Math.imul(al4, bh6) | 0;
    mid = mid + Math.imul(ah4, bl6) | 0;
    hi = hi + Math.imul(ah4, bh6) | 0;
    lo = lo + Math.imul(al3, bl7) | 0;
    mid = mid + Math.imul(al3, bh7) | 0;
    mid = mid + Math.imul(ah3, bl7) | 0;
    hi = hi + Math.imul(ah3, bh7) | 0;
    lo = lo + Math.imul(al2, bl8) | 0;
    mid = mid + Math.imul(al2, bh8) | 0;
    mid = mid + Math.imul(ah2, bl8) | 0;
    hi = hi + Math.imul(ah2, bh8) | 0;
    lo = lo + Math.imul(al1, bl9) | 0;
    mid = mid + Math.imul(al1, bh9) | 0;
    mid = mid + Math.imul(ah1, bl9) | 0;
    hi = hi + Math.imul(ah1, bh9) | 0;
    var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = mid + Math.imul(ah9, bl2) | 0;
    hi = Math.imul(ah9, bh2);
    lo = lo + Math.imul(al8, bl3) | 0;
    mid = mid + Math.imul(al8, bh3) | 0;
    mid = mid + Math.imul(ah8, bl3) | 0;
    hi = hi + Math.imul(ah8, bh3) | 0;
    lo = lo + Math.imul(al7, bl4) | 0;
    mid = mid + Math.imul(al7, bh4) | 0;
    mid = mid + Math.imul(ah7, bl4) | 0;
    hi = hi + Math.imul(ah7, bh4) | 0;
    lo = lo + Math.imul(al6, bl5) | 0;
    mid = mid + Math.imul(al6, bh5) | 0;
    mid = mid + Math.imul(ah6, bl5) | 0;
    hi = hi + Math.imul(ah6, bh5) | 0;
    lo = lo + Math.imul(al5, bl6) | 0;
    mid = mid + Math.imul(al5, bh6) | 0;
    mid = mid + Math.imul(ah5, bl6) | 0;
    hi = hi + Math.imul(ah5, bh6) | 0;
    lo = lo + Math.imul(al4, bl7) | 0;
    mid = mid + Math.imul(al4, bh7) | 0;
    mid = mid + Math.imul(ah4, bl7) | 0;
    hi = hi + Math.imul(ah4, bh7) | 0;
    lo = lo + Math.imul(al3, bl8) | 0;
    mid = mid + Math.imul(al3, bh8) | 0;
    mid = mid + Math.imul(ah3, bl8) | 0;
    hi = hi + Math.imul(ah3, bh8) | 0;
    lo = lo + Math.imul(al2, bl9) | 0;
    mid = mid + Math.imul(al2, bh9) | 0;
    mid = mid + Math.imul(ah2, bl9) | 0;
    hi = hi + Math.imul(ah2, bh9) | 0;
    var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = mid + Math.imul(ah9, bl3) | 0;
    hi = Math.imul(ah9, bh3);
    lo = lo + Math.imul(al8, bl4) | 0;
    mid = mid + Math.imul(al8, bh4) | 0;
    mid = mid + Math.imul(ah8, bl4) | 0;
    hi = hi + Math.imul(ah8, bh4) | 0;
    lo = lo + Math.imul(al7, bl5) | 0;
    mid = mid + Math.imul(al7, bh5) | 0;
    mid = mid + Math.imul(ah7, bl5) | 0;
    hi = hi + Math.imul(ah7, bh5) | 0;
    lo = lo + Math.imul(al6, bl6) | 0;
    mid = mid + Math.imul(al6, bh6) | 0;
    mid = mid + Math.imul(ah6, bl6) | 0;
    hi = hi + Math.imul(ah6, bh6) | 0;
    lo = lo + Math.imul(al5, bl7) | 0;
    mid = mid + Math.imul(al5, bh7) | 0;
    mid = mid + Math.imul(ah5, bl7) | 0;
    hi = hi + Math.imul(ah5, bh7) | 0;
    lo = lo + Math.imul(al4, bl8) | 0;
    mid = mid + Math.imul(al4, bh8) | 0;
    mid = mid + Math.imul(ah4, bl8) | 0;
    hi = hi + Math.imul(ah4, bh8) | 0;
    lo = lo + Math.imul(al3, bl9) | 0;
    mid = mid + Math.imul(al3, bh9) | 0;
    mid = mid + Math.imul(ah3, bl9) | 0;
    hi = hi + Math.imul(ah3, bh9) | 0;
    var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = mid + Math.imul(ah9, bl4) | 0;
    hi = Math.imul(ah9, bh4);
    lo = lo + Math.imul(al8, bl5) | 0;
    mid = mid + Math.imul(al8, bh5) | 0;
    mid = mid + Math.imul(ah8, bl5) | 0;
    hi = hi + Math.imul(ah8, bh5) | 0;
    lo = lo + Math.imul(al7, bl6) | 0;
    mid = mid + Math.imul(al7, bh6) | 0;
    mid = mid + Math.imul(ah7, bl6) | 0;
    hi = hi + Math.imul(ah7, bh6) | 0;
    lo = lo + Math.imul(al6, bl7) | 0;
    mid = mid + Math.imul(al6, bh7) | 0;
    mid = mid + Math.imul(ah6, bl7) | 0;
    hi = hi + Math.imul(ah6, bh7) | 0;
    lo = lo + Math.imul(al5, bl8) | 0;
    mid = mid + Math.imul(al5, bh8) | 0;
    mid = mid + Math.imul(ah5, bl8) | 0;
    hi = hi + Math.imul(ah5, bh8) | 0;
    lo = lo + Math.imul(al4, bl9) | 0;
    mid = mid + Math.imul(al4, bh9) | 0;
    mid = mid + Math.imul(ah4, bl9) | 0;
    hi = hi + Math.imul(ah4, bh9) | 0;
    var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = mid + Math.imul(ah9, bl5) | 0;
    hi = Math.imul(ah9, bh5);
    lo = lo + Math.imul(al8, bl6) | 0;
    mid = mid + Math.imul(al8, bh6) | 0;
    mid = mid + Math.imul(ah8, bl6) | 0;
    hi = hi + Math.imul(ah8, bh6) | 0;
    lo = lo + Math.imul(al7, bl7) | 0;
    mid = mid + Math.imul(al7, bh7) | 0;
    mid = mid + Math.imul(ah7, bl7) | 0;
    hi = hi + Math.imul(ah7, bh7) | 0;
    lo = lo + Math.imul(al6, bl8) | 0;
    mid = mid + Math.imul(al6, bh8) | 0;
    mid = mid + Math.imul(ah6, bl8) | 0;
    hi = hi + Math.imul(ah6, bh8) | 0;
    lo = lo + Math.imul(al5, bl9) | 0;
    mid = mid + Math.imul(al5, bh9) | 0;
    mid = mid + Math.imul(ah5, bl9) | 0;
    hi = hi + Math.imul(ah5, bh9) | 0;
    var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = mid + Math.imul(ah9, bl6) | 0;
    hi = Math.imul(ah9, bh6);
    lo = lo + Math.imul(al8, bl7) | 0;
    mid = mid + Math.imul(al8, bh7) | 0;
    mid = mid + Math.imul(ah8, bl7) | 0;
    hi = hi + Math.imul(ah8, bh7) | 0;
    lo = lo + Math.imul(al7, bl8) | 0;
    mid = mid + Math.imul(al7, bh8) | 0;
    mid = mid + Math.imul(ah7, bl8) | 0;
    hi = hi + Math.imul(ah7, bh8) | 0;
    lo = lo + Math.imul(al6, bl9) | 0;
    mid = mid + Math.imul(al6, bh9) | 0;
    mid = mid + Math.imul(ah6, bl9) | 0;
    hi = hi + Math.imul(ah6, bh9) | 0;
    var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = mid + Math.imul(ah9, bl7) | 0;
    hi = Math.imul(ah9, bh7);
    lo = lo + Math.imul(al8, bl8) | 0;
    mid = mid + Math.imul(al8, bh8) | 0;
    mid = mid + Math.imul(ah8, bl8) | 0;
    hi = hi + Math.imul(ah8, bh8) | 0;
    lo = lo + Math.imul(al7, bl9) | 0;
    mid = mid + Math.imul(al7, bh9) | 0;
    mid = mid + Math.imul(ah7, bl9) | 0;
    hi = hi + Math.imul(ah7, bh9) | 0;
    var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = mid + Math.imul(ah9, bl8) | 0;
    hi = Math.imul(ah9, bh8);
    lo = lo + Math.imul(al8, bl9) | 0;
    mid = mid + Math.imul(al8, bh9) | 0;
    mid = mid + Math.imul(ah8, bl9) | 0;
    hi = hi + Math.imul(ah8, bh9) | 0;
    var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = mid + Math.imul(ah9, bl9) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = ncarry + (r / 0x4000000 | 0) | 0;
        lo = lo + rword | 0;
        rword = lo & 0x3ffffff;
        ncarry = ncarry + (lo >>> 26) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo(self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo(num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM(x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT(N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin(x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << l - i - 1;
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b(ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff;carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff;carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub(N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp(x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul(num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += w / 0x4000000 | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln(num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr() {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr() {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow(num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = (this.words[i] | 0) - newCarry << r;
        this.words[i] = c | carry;
        carry = newCarry >>> 26 - r;
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln(bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - hint % 26) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = carry << 26 - r | word >>> r;
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln(bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln(bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn(bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn(bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn(bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn(bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn(num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn(num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn(num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs() {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs() {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - (right / 0x4000000 | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv(num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min(qj / bhi | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod(num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div(num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod(num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod(num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound(num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn(num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn(num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = w / num | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn(num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd(p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {}
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {}
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp(p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {}
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {}
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd(num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm(num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven() {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd() {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln(num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn(bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero() {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn(num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp(num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp(num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn(num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt(num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten(num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte(num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn(num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt(num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten(num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte(num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn(num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq(num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red(num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed() {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed(ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd(num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd(num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub(num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub(num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl(num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul(num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul(num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr() {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr() {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt() {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm() {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg() {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow(num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime(name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp() {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce(num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split(input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK(num) {
    return num.imul(this.k);
  };

  function K256() {
    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split(input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK(num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + (lo / 0x4000000 | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224() {
    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192() {
    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519() {
    // 2 ^ 255 - 19
    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK(num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime(name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red(m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1(a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2(a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red, 'red works only with red numbers');
  };

  Red.prototype.imod = function imod(a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg(a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add(a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd(a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub(a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub(a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl(a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul(a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul(a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr(a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr(a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt(a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm(a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow(a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = word >> j & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo(num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom(num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont(num) {
    return new Mont(num);
  };

  function Mont(m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - this.shift % 26;
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo(num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom(num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul(a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul(a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm(a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, undefined);

},{"buffer":23}],22:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var r;

module.exports = function rand(len) {
  if (!r) r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes) return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++) {
    res[i] = this.rand.getByte();
  }return res;
};

if ((typeof self === 'undefined' ? 'undefined' : _typeof(self)) === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

    // Safari's WebWorkers do not have `crypto`
  } else if ((typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object') {
    // Old junk
    Rand.prototype._rand = function () {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function') throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {}
}

},{"crypto":23}],23:[function(require,module,exports){
"use strict";

},{}],24:[function(require,module,exports){
'use strict';

// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer;

function asUInt32Array(buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);

  var len = buf.length / 4 | 0;
  var out = new Array(len);

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4);
  }

  return out;
}

function scrubVec(v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0;
  }
}

function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0];
  var SUB_MIX1 = SUB_MIX[1];
  var SUB_MIX2 = SUB_MIX[2];
  var SUB_MIX3 = SUB_MIX[3];

  var s0 = M[0] ^ keySchedule[0];
  var s1 = M[1] ^ keySchedule[1];
  var s2 = M[2] ^ keySchedule[2];
  var s3 = M[3] ^ keySchedule[3];
  var t0, t1, t2, t3;
  var ksRow = 4;

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
    s0 = t0;
    s1 = t1;
    s2 = t2;
    s3 = t3;
  }

  t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
  t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
  t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
  t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
  t0 = t0 >>> 0;
  t1 = t1 >>> 0;
  t2 = t2 >>> 0;
  t3 = t3 >>> 0;

  return [t0, t1, t2, t3];
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
var G = function () {
  // Compute double table
  var d = new Array(256);
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1;
    } else {
      d[j] = j << 1 ^ 0x11b;
    }
  }

  var SBOX = [];
  var INV_SBOX = [];
  var SUB_MIX = [[], [], [], []];
  var INV_SUB_MIX = [[], [], [], []];

  // Walk GF(2^8)
  var x = 0;
  var xi = 0;
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
    sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
    SBOX[x] = sx;
    INV_SBOX[sx] = x;

    // Compute multiplication
    var x2 = d[x];
    var x4 = d[x2];
    var x8 = d[x4];

    // Compute sub bytes, mix columns tables
    var t = d[sx] * 0x101 ^ sx * 0x1010100;
    SUB_MIX[0][x] = t << 24 | t >>> 8;
    SUB_MIX[1][x] = t << 16 | t >>> 16;
    SUB_MIX[2][x] = t << 8 | t >>> 24;
    SUB_MIX[3][x] = t;

    // Compute inv sub bytes, inv mix columns tables
    t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
    INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
    INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
    INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
    INV_SUB_MIX[3][sx] = t;

    if (x === 0) {
      x = xi = 1;
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]];
      xi ^= d[d[xi]];
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  };
}();

function AES(key) {
  this._key = asUInt32Array(key);
  this._reset();
}

AES.blockSize = 4 * 4;
AES.keySize = 256 / 8;
AES.prototype.blockSize = AES.blockSize;
AES.prototype.keySize = AES.keySize;
AES.prototype._reset = function () {
  var keyWords = this._key;
  var keySize = keyWords.length;
  var nRounds = keySize + 6;
  var ksRows = (nRounds + 1) * 4;

  var keySchedule = [];
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k];
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1];

    if (k % keySize === 0) {
      t = t << 8 | t >>> 24;
      t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];

      t ^= RCON[k / keySize | 0] << 24;
    } else if (keySize > 6 && k % keySize === 4) {
      t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t;
  }

  var invKeySchedule = [];
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik;
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt;
    } else {
      invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
    }
  }

  this._nRounds = nRounds;
  this._keySchedule = keySchedule;
  this._invKeySchedule = invKeySchedule;
};

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M);
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
};

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M);
  var buf = Buffer.allocUnsafe(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[1], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[3], 12);
  return buf;
};

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M);

  // swap
  var m1 = M[1];
  M[1] = M[3];
  M[3] = m1;

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
  var buf = Buffer.allocUnsafe(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[3], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[1], 12);
  return buf;
};

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule);
  scrubVec(this._invKeySchedule);
  scrubVec(this._key);
};

module.exports.AES = AES;

},{"safe-buffer":181}],25:[function(require,module,exports){
'use strict';

var aes = require('./aes');
var Buffer = require('safe-buffer').Buffer;
var Transform = require('cipher-base');
var inherits = require('inherits');
var GHASH = require('./ghash');
var xor = require('buffer-xor');
var incr32 = require('./incr32');

function xorTest(a, b) {
  var out = 0;
  if (a.length !== b.length) out++;

  var len = Math.min(a.length, b.length);
  for (var i = 0; i < len; ++i) {
    out += a[i] ^ b[i];
  }

  return out;
}

function calcIv(self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])]);
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])]);
  }
  var ghash = new GHASH(ck);
  var len = iv.length;
  var toPad = len % 16;
  ghash.update(iv);
  if (toPad) {
    toPad = 16 - toPad;
    ghash.update(Buffer.alloc(toPad, 0));
  }
  ghash.update(Buffer.alloc(8, 0));
  var ivBits = len * 8;
  var tail = Buffer.alloc(8);
  tail.writeUIntBE(ivBits, 0, 8);
  ghash.update(tail);
  self._finID = ghash.state;
  var out = Buffer.from(self._finID);
  incr32(out);
  return out;
}
function StreamCipher(mode, key, iv, decrypt) {
  Transform.call(this);

  var h = Buffer.alloc(4, 0);

  this._cipher = new aes.AES(key);
  var ck = this._cipher.encryptBlock(h);
  this._ghash = new GHASH(ck);
  iv = calcIv(this, iv, ck);

  this._prev = Buffer.from(iv);
  this._cache = Buffer.allocUnsafe(0);
  this._secCache = Buffer.allocUnsafe(0);
  this._decrypt = decrypt;
  this._alen = 0;
  this._len = 0;
  this._mode = mode;

  this._authTag = null;
  this._called = false;
}

inherits(StreamCipher, Transform);

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - this._alen % 16;
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0);
      this._ghash.update(rump);
    }
  }

  this._called = true;
  var out = this._mode.encrypt(this, chunk);
  if (this._decrypt) {
    this._ghash.update(chunk);
  } else {
    this._ghash.update(out);
  }
  this._len += chunk.length;
  return out;
};

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');

  this._authTag = tag;
  this._cipher.scrub();
};

StreamCipher.prototype.getAuthTag = function getAuthTag() {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');

  return this._authTag;
};

StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');

  this._authTag = tag;
};

StreamCipher.prototype.setAAD = function setAAD(buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state');

  this._ghash.update(buf);
  this._alen += buf.length;
};

module.exports = StreamCipher;

},{"./aes":24,"./ghash":29,"./incr32":30,"buffer-xor":51,"cipher-base":53,"inherits":140,"safe-buffer":181}],26:[function(require,module,exports){
'use strict';

var ciphers = require('./encrypter');
var deciphers = require('./decrypter');
var modes = require('./modes/list.json');

function getCiphers() {
  return Object.keys(modes);
}

exports.createCipher = exports.Cipher = ciphers.createCipher;
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
exports.createDecipher = exports.Decipher = deciphers.createDecipher;
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

},{"./decrypter":27,"./encrypter":28,"./modes/list.json":38}],27:[function(require,module,exports){
'use strict';

var AuthCipher = require('./authCipher');
var Buffer = require('safe-buffer').Buffer;
var MODES = require('./modes');
var StreamCipher = require('./streamCipher');
var Transform = require('cipher-base');
var aes = require('./aes');
var ebtk = require('evp_bytestokey');
var inherits = require('inherits');

function Decipher(mode, key, iv) {
  Transform.call(this);

  this._cache = new Splitter();
  this._last = void 0;
  this._cipher = new aes.AES(key);
  this._prev = Buffer.from(iv);
  this._mode = mode;
  this._autopadding = true;
}

inherits(Decipher, Transform);

Decipher.prototype._update = function (data) {
  this._cache.add(data);
  var chunk;
  var thing;
  var out = [];
  while (chunk = this._cache.get(this._autopadding)) {
    thing = this._mode.decrypt(this, chunk);
    out.push(thing);
  }
  return Buffer.concat(out);
};

Decipher.prototype._final = function () {
  var chunk = this._cache.flush();
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk));
  } else if (chunk) {
    throw new Error('data not multiple of block length');
  }
};

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
  return this;
};

function Splitter() {
  this.cache = Buffer.allocUnsafe(0);
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function (autoPadding) {
  var out;
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  }

  return null;
};

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache;
};

function unpad(last) {
  var padded = last[15];
  var i = -1;
  while (++i < padded) {
    if (last[i + (16 - padded)] !== padded) {
      throw new Error('unable to decrypt data');
    }
  }
  if (padded === 16) return;

  return last.slice(0, 16 - padded);
}

function createDecipheriv(suite, password, iv) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');

  if (typeof iv === 'string') iv = Buffer.from(iv);
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);

  if (typeof password === 'string') password = Buffer.from(password);
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true);
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true);
  }

  return new Decipher(config.module, password, iv);
}

function createDecipher(suite, password) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');

  var keys = ebtk(password, false, config.key, config.iv);
  return createDecipheriv(suite, keys.key, keys.iv);
}

exports.createDecipher = createDecipher;
exports.createDecipheriv = createDecipheriv;

},{"./aes":24,"./authCipher":25,"./modes":37,"./streamCipher":40,"cipher-base":53,"evp_bytestokey":123,"inherits":140,"safe-buffer":181}],28:[function(require,module,exports){
'use strict';

var MODES = require('./modes');
var AuthCipher = require('./authCipher');
var Buffer = require('safe-buffer').Buffer;
var StreamCipher = require('./streamCipher');
var Transform = require('cipher-base');
var aes = require('./aes');
var ebtk = require('evp_bytestokey');
var inherits = require('inherits');

function Cipher(mode, key, iv) {
  Transform.call(this);

  this._cache = new Splitter();
  this._cipher = new aes.AES(key);
  this._prev = Buffer.from(iv);
  this._mode = mode;
  this._autopadding = true;
}

inherits(Cipher, Transform);

Cipher.prototype._update = function (data) {
  this._cache.add(data);
  var chunk;
  var thing;
  var out = [];

  while (chunk = this._cache.get()) {
    thing = this._mode.encrypt(this, chunk);
    out.push(thing);
  }

  return Buffer.concat(out);
};

var PADDING = Buffer.alloc(16, 0x10);

Cipher.prototype._final = function () {
  var chunk = this._cache.flush();
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk);
    this._cipher.scrub();
    return chunk;
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub();
    throw new Error('data not multiple of block length');
  }
};

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
  return this;
};

function Splitter() {
  this.cache = Buffer.allocUnsafe(0);
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    return out;
  }
  return null;
};

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length;
  var padBuff = Buffer.allocUnsafe(len);

  var i = -1;
  while (++i < len) {
    padBuff.writeUInt8(len, i);
  }

  return Buffer.concat([this.cache, padBuff]);
};

function createCipheriv(suite, password, iv) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');

  if (typeof password === 'string') password = Buffer.from(password);
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);

  if (typeof iv === 'string') iv = Buffer.from(iv);
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv);
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv);
  }

  return new Cipher(config.module, password, iv);
}

function createCipher(suite, password) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');

  var keys = ebtk(password, false, config.key, config.iv);
  return createCipheriv(suite, keys.key, keys.iv);
}

exports.createCipheriv = createCipheriv;
exports.createCipher = createCipher;

},{"./aes":24,"./authCipher":25,"./modes":37,"./streamCipher":40,"cipher-base":53,"evp_bytestokey":123,"inherits":140,"safe-buffer":181}],29:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;
var ZEROES = Buffer.alloc(16, 0);

function toArray(buf) {
  return [buf.readUInt32BE(0), buf.readUInt32BE(4), buf.readUInt32BE(8), buf.readUInt32BE(12)];
}

function fromArray(out) {
  var buf = Buffer.allocUnsafe(16);
  buf.writeUInt32BE(out[0] >>> 0, 0);
  buf.writeUInt32BE(out[1] >>> 0, 4);
  buf.writeUInt32BE(out[2] >>> 0, 8);
  buf.writeUInt32BE(out[3] >>> 0, 12);
  return buf;
}

function GHASH(key) {
  this.h = key;
  this.state = Buffer.alloc(16, 0);
  this.cache = Buffer.allocUnsafe(0);
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1;
  while (++i < block.length) {
    this.state[i] ^= block[i];
  }
  this._multiply();
};

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h);
  var Zi = [0, 0, 0, 0];
  var j, xi, lsbVi;
  var i = -1;
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0];
      Zi[1] ^= Vi[1];
      Zi[2] ^= Vi[2];
      Zi[3] ^= Vi[3];
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0;

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
    }
    Vi[0] = Vi[0] >>> 1;

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ 0xe1 << 24;
    }
  }
  this.state = fromArray(Zi);
};

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf]);
  var chunk;
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    this.ghash(chunk);
  }
};

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16));
  }

  this.ghash(fromArray([0, abl, 0, bl]));
  return this.state;
};

module.exports = GHASH;

},{"safe-buffer":181}],30:[function(require,module,exports){
"use strict";

function incr32(iv) {
  var len = iv.length;
  var item;
  while (len--) {
    item = iv.readUInt8(len);
    if (item === 255) {
      iv.writeUInt8(0, len);
    } else {
      item++;
      iv.writeUInt8(item, len);
      break;
    }
  }
}
module.exports = incr32;

},{}],31:[function(require,module,exports){
'use strict';

var xor = require('buffer-xor');

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev);

  self._prev = self._cipher.encryptBlock(data);
  return self._prev;
};

exports.decrypt = function (self, block) {
  var pad = self._prev;

  self._prev = block;
  var out = self._cipher.decryptBlock(block);

  return xor(out, pad);
};

},{"buffer-xor":51}],32:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;
var xor = require('buffer-xor');

function encryptStart(self, data, decrypt) {
  var len = data.length;
  var out = xor(data, self._cache);
  self._cache = self._cache.slice(len);
  self._prev = Buffer.concat([self._prev, decrypt ? data : out]);
  return out;
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0);
  var len;

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev);
      self._prev = Buffer.allocUnsafe(0);
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length;
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
      data = data.slice(len);
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
      break;
    }
  }

  return out;
};

},{"buffer-xor":51,"safe-buffer":181}],33:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

function encryptByte(self, byteParam, decrypt) {
  var pad;
  var i = -1;
  var len = 8;
  var out = 0;
  var bit, value;
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev);
    bit = byteParam & 1 << 7 - i ? 0x80 : 0;
    value = pad[0] ^ bit;
    out += (value & 0x80) >> i % 8;
    self._prev = shiftIn(self._prev, decrypt ? bit : value);
  }
  return out;
}

function shiftIn(buffer, value) {
  var len = buffer.length;
  var i = -1;
  var out = Buffer.allocUnsafe(buffer.length);
  buffer = Buffer.concat([buffer, Buffer.from([value])]);

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
  }

  return out;
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length;
  var out = Buffer.allocUnsafe(len);
  var i = -1;

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt);
  }

  return out;
};

},{"safe-buffer":181}],34:[function(require,module,exports){
(function (Buffer){
"use strict";

function encryptByte(self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev);
  var out = pad[0] ^ byteParam;

  self._prev = Buffer.concat([self._prev.slice(1), Buffer.from([decrypt ? byteParam : out])]);

  return out;
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length;
  var out = Buffer.allocUnsafe(len);
  var i = -1;

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt);
  }

  return out;
};

}).call(this,require("buffer").Buffer)

},{"buffer":52}],35:[function(require,module,exports){
(function (Buffer){
'use strict';

var xor = require('buffer-xor');

var incr32 = require('../incr32');

function getBlock(self) {
  var out = self._cipher.encryptBlockRaw(self._prev);
  incr32(self._prev);
  return out;
}

var blockSize = 16;
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize);
  var start = self._cache.length;
  self._cache = Buffer.concat([self._cache, Buffer.allocUnsafe(chunkNum * blockSize)]);
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self);
    var offset = start + i * blockSize;
    self._cache.writeUInt32BE(out[0], offset + 0);
    self._cache.writeUInt32BE(out[1], offset + 4);
    self._cache.writeUInt32BE(out[2], offset + 8);
    self._cache.writeUInt32BE(out[3], offset + 12);
  }
  var pad = self._cache.slice(0, chunk.length);
  self._cache = self._cache.slice(chunk.length);
  return xor(chunk, pad);
};

}).call(this,require("buffer").Buffer)

},{"../incr32":30,"buffer":52,"buffer-xor":51}],36:[function(require,module,exports){
"use strict";

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block);
};

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block);
};

},{}],37:[function(require,module,exports){
'use strict';

var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
};

var modes = require('./list.json');

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode];
}

module.exports = modes;

},{"./cbc":31,"./cfb":32,"./cfb1":33,"./cfb8":34,"./ctr":35,"./ecb":36,"./list.json":38,"./ofb":39}],38:[function(require,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],39:[function(require,module,exports){
(function (Buffer){
'use strict';

var xor = require('buffer-xor');

function getBlock(self) {
  self._prev = self._cipher.encryptBlock(self._prev);
  return self._prev;
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)]);
  }

  var pad = self._cache.slice(0, chunk.length);
  self._cache = self._cache.slice(chunk.length);
  return xor(chunk, pad);
};

}).call(this,require("buffer").Buffer)

},{"buffer":52,"buffer-xor":51}],40:[function(require,module,exports){
'use strict';

var aes = require('./aes');
var Buffer = require('safe-buffer').Buffer;
var Transform = require('cipher-base');
var inherits = require('inherits');

function StreamCipher(mode, key, iv, decrypt) {
  Transform.call(this);

  this._cipher = new aes.AES(key);
  this._prev = Buffer.from(iv);
  this._cache = Buffer.allocUnsafe(0);
  this._secCache = Buffer.allocUnsafe(0);
  this._decrypt = decrypt;
  this._mode = mode;
}

inherits(StreamCipher, Transform);

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt);
};

StreamCipher.prototype._final = function () {
  this._cipher.scrub();
};

module.exports = StreamCipher;

},{"./aes":24,"cipher-base":53,"inherits":140,"safe-buffer":181}],41:[function(require,module,exports){
'use strict';

var ebtk = require('evp_bytestokey');
var aes = require('browserify-aes/browser');
var DES = require('browserify-des');
var desModes = require('browserify-des/modes');
var aesModes = require('browserify-aes/modes');
function createCipher(suite, password) {
  var keyLen, ivLen;
  suite = suite.toLowerCase();
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key;
    ivLen = aesModes[suite].iv;
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8;
    ivLen = desModes[suite].iv;
  } else {
    throw new TypeError('invalid suite type');
  }
  var keys = ebtk(password, false, keyLen, ivLen);
  return createCipheriv(suite, keys.key, keys.iv);
}
function createDecipher(suite, password) {
  var keyLen, ivLen;
  suite = suite.toLowerCase();
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key;
    ivLen = aesModes[suite].iv;
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8;
    ivLen = desModes[suite].iv;
  } else {
    throw new TypeError('invalid suite type');
  }
  var keys = ebtk(password, false, keyLen, ivLen);
  return createDecipheriv(suite, keys.key, keys.iv);
}

function createCipheriv(suite, key, iv) {
  suite = suite.toLowerCase();
  if (aesModes[suite]) {
    return aes.createCipheriv(suite, key, iv);
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite
    });
  } else {
    throw new TypeError('invalid suite type');
  }
}
function createDecipheriv(suite, key, iv) {
  suite = suite.toLowerCase();
  if (aesModes[suite]) {
    return aes.createDecipheriv(suite, key, iv);
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite,
      decrypt: true
    });
  } else {
    throw new TypeError('invalid suite type');
  }
}
exports.createCipher = exports.Cipher = createCipher;
exports.createCipheriv = exports.Cipheriv = createCipheriv;
exports.createDecipher = exports.Decipher = createDecipher;
exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
function getCiphers() {
  return Object.keys(desModes).concat(aes.getCiphers());
}
exports.listCiphers = exports.getCiphers = getCiphers;

},{"browserify-aes/browser":26,"browserify-aes/modes":37,"browserify-des":42,"browserify-des/modes":43,"evp_bytestokey":123}],42:[function(require,module,exports){
(function (Buffer){
'use strict';

var CipherBase = require('cipher-base');
var des = require('des.js');
var inherits = require('inherits');

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
};
modes.des = modes['des-cbc'];
modes.des3 = modes['des-ede3-cbc'];
module.exports = DES;
inherits(DES, CipherBase);
function DES(opts) {
  CipherBase.call(this);
  var modeName = opts.mode.toLowerCase();
  var mode = modes[modeName];
  var type;
  if (opts.decrypt) {
    type = 'decrypt';
  } else {
    type = 'encrypt';
  }
  var key = opts.key;
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)]);
  }
  var iv = opts.iv;
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  });
}
DES.prototype._update = function (data) {
  return new Buffer(this._des.update(data));
};
DES.prototype._final = function () {
  return new Buffer(this._des.final());
};

}).call(this,require("buffer").Buffer)

},{"buffer":52,"cipher-base":53,"des.js":96,"inherits":140}],43:[function(require,module,exports){
'use strict';

exports['des-ecb'] = {
  key: 8,
  iv: 0
};
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
};
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
};
exports['des-ede3'] = {
  key: 24,
  iv: 0
};
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
};
exports['des-ede'] = {
  key: 16,
  iv: 0
};

},{}],44:[function(require,module,exports){
(function (Buffer){
'use strict';

var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus)).redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder: r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

}).call(this,require("buffer").Buffer)

},{"bn.js":21,"buffer":52,"randombytes":166}],45:[function(require,module,exports){
'use strict';

module.exports = require('./browser/algorithms.json');

},{"./browser/algorithms.json":46}],46:[function(require,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],47:[function(require,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],48:[function(require,module,exports){
(function (Buffer){
'use strict';

var createHash = require('create-hash');
var stream = require('stream');
var inherits = require('inherits');
var sign = require('./sign');
var verify = require('./verify');

var algorithms = require('./algorithms.json');
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex');
  algorithms[key.toLowerCase()] = algorithms[key];
});

function Sign(algorithm) {
  stream.Writable.call(this);

  var data = algorithms[algorithm];
  if (!data) throw new Error('Unknown message digest');

  this._hashType = data.hash;
  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}
inherits(Sign, stream.Writable);

Sign.prototype._write = function _write(data, _, done) {
  this._hash.update(data);
  done();
};

Sign.prototype.update = function update(data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc);

  this._hash.update(data);
  return this;
};

Sign.prototype.sign = function signMethod(key, enc) {
  this.end();
  var hash = this._hash.digest();
  var sig = sign(hash, key, this._hashType, this._signType, this._tag);

  return enc ? sig.toString(enc) : sig;
};

function Verify(algorithm) {
  stream.Writable.call(this);

  var data = algorithms[algorithm];
  if (!data) throw new Error('Unknown message digest');

  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}
inherits(Verify, stream.Writable);

Verify.prototype._write = function _write(data, _, done) {
  this._hash.update(data);
  done();
};

Verify.prototype.update = function update(data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc);

  this._hash.update(data);
  return this;
};

Verify.prototype.verify = function verifyMethod(key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc);

  this.end();
  var hash = this._hash.digest();
  return verify(sig, hash, key, this._signType, this._tag);
};

function createSign(algorithm) {
  return new Sign(algorithm);
}

function createVerify(algorithm) {
  return new Verify(algorithm);
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
};

}).call(this,require("buffer").Buffer)

},{"./algorithms.json":46,"./sign":49,"./verify":50,"buffer":52,"create-hash":56,"inherits":140,"stream":190}],49:[function(require,module,exports){
(function (Buffer){
'use strict';

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = require('create-hmac');
var crt = require('browserify-rsa');
var EC = require('elliptic').ec;
var BN = require('bn.js');
var parseKeys = require('parse-asn1');
var curves = require('./curves.json');

function sign(hash, key, hashType, signType, tag) {
  var priv = parseKeys(key);
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
    return ecSign(hash, priv);
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type');
    return dsaSign(hash, priv, hashType);
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
  }
  hash = Buffer.concat([tag, hash]);
  var len = priv.modulus.byteLength();
  var pad = [0, 1];
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff);
  }pad.push(0x00);
  var i = -1;
  while (++i < hash.length) {
    pad.push(hash[i]);
  }var out = crt(pad, priv);
  return out;
}

function ecSign(hash, priv) {
  var curveId = curves[priv.curve.join('.')];
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));

  var curve = new EC(curveId);
  var key = curve.keyFromPrivate(priv.privateKey);
  var out = key.sign(hash);

  return new Buffer(out.toDER());
}

function dsaSign(hash, priv, algo) {
  var x = priv.params.priv_key;
  var p = priv.params.p;
  var q = priv.params.q;
  var g = priv.params.g;
  var r = new BN(0);
  var k;
  var H = bits2int(hash, q).mod(q);
  var s = false;
  var kv = getKey(x, q, hash, algo);
  while (s === false) {
    k = makeKey(q, kv, algo);
    r = makeR(g, k, p, q);
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
    if (s.cmpn(0) === 0) {
      s = false;
      r = new BN(0);
    }
  }
  return toDER(r, s);
}

function toDER(r, s) {
  r = r.toArray();
  s = s.toArray();

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r);
  if (s[0] & 0x80) s = [0].concat(s);

  var total = r.length + s.length + 4;
  var res = [0x30, total, 0x02, r.length];
  res = res.concat(r, [0x02, s.length], s);
  return new Buffer(res);
}

function getKey(x, q, hash, algo) {
  x = new Buffer(x.toArray());
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length);
    zeros.fill(0);
    x = Buffer.concat([zeros, x]);
  }
  var hlen = hash.length;
  var hbits = bits2octets(hash, q);
  var v = new Buffer(hlen);
  v.fill(1);
  var k = new Buffer(hlen);
  k.fill(0);
  k = createHmac(algo, k).update(v).update(new Buffer([0])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  k = createHmac(algo, k).update(v).update(new Buffer([1])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  return { k: k, v: v };
}

function bits2int(obits, q) {
  var bits = new BN(obits);
  var shift = (obits.length << 3) - q.bitLength();
  if (shift > 0) bits.ishrn(shift);
  return bits;
}

function bits2octets(bits, q) {
  bits = bits2int(bits, q);
  bits = bits.mod(q);
  var out = new Buffer(bits.toArray());
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length);
    zeros.fill(0);
    out = Buffer.concat([zeros, out]);
  }
  return out;
}

function makeKey(q, kv, algo) {
  var t;
  var k;

  do {
    t = new Buffer(0);

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest();
      t = Buffer.concat([t, kv.v]);
    }

    k = bits2int(t, q);
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([0])).digest();
    kv.v = createHmac(algo, kv.k).update(kv.v).digest();
  } while (k.cmp(q) !== -1);

  return k;
}

function makeR(g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
}

module.exports = sign;
module.exports.getKey = getKey;
module.exports.makeKey = makeKey;

}).call(this,require("buffer").Buffer)

},{"./curves.json":47,"bn.js":21,"browserify-rsa":44,"buffer":52,"create-hmac":59,"elliptic":106,"parse-asn1":152}],50:[function(require,module,exports){
(function (Buffer){
'use strict';

// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = require('bn.js');
var EC = require('elliptic').ec;
var parseKeys = require('parse-asn1');
var curves = require('./curves.json');

function verify(sig, hash, key, signType, tag) {
  var pub = parseKeys(key);
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
    return ecVerify(sig, hash, pub);
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type');
    return dsaVerify(sig, hash, pub);
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
  }
  hash = Buffer.concat([tag, hash]);
  var len = pub.modulus.byteLength();
  var pad = [1];
  var padNum = 0;
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff);
    padNum++;
  }
  pad.push(0x00);
  var i = -1;
  while (++i < hash.length) {
    pad.push(hash[i]);
  }
  pad = new Buffer(pad);
  var red = BN.mont(pub.modulus);
  sig = new BN(sig).toRed(red);

  sig = sig.redPow(new BN(pub.publicExponent));
  sig = new Buffer(sig.fromRed().toArray());
  var out = padNum < 8 ? 1 : 0;
  len = Math.min(sig.length, pad.length);
  if (sig.length !== pad.length) out = 1;

  i = -1;
  while (++i < len) {
    out |= sig[i] ^ pad[i];
  }return out === 0;
}

function ecVerify(sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')];
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));

  var curve = new EC(curveId);
  var pubkey = pub.data.subjectPrivateKey.data;

  return curve.verify(hash, sig, pubkey);
}

function dsaVerify(sig, hash, pub) {
  var p = pub.data.p;
  var q = pub.data.q;
  var g = pub.data.g;
  var y = pub.data.pub_key;
  var unpacked = parseKeys.signature.decode(sig, 'der');
  var s = unpacked.s;
  var r = unpacked.r;
  checkValue(s, q);
  checkValue(r, q);
  var montp = BN.mont(p);
  var w = s.invm(q);
  var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
  return v.cmp(r) === 0;
}

function checkValue(b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig');
  if (b.cmp(q) >= q) throw new Error('invalid sig');
}

module.exports = verify;

}).call(this,require("buffer").Buffer)

},{"./curves.json":47,"bn.js":21,"buffer":52,"elliptic":106,"parse-asn1":152}],51:[function(require,module,exports){
(function (Buffer){
"use strict";

module.exports = function xor(a, b) {
  var length = Math.min(a.length, b.length);
  var buffer = new Buffer(length);

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i];
  }

  return buffer;
};

}).call(this,require("buffer").Buffer)

},{"buffer":52}],52:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict';

var base64 = require('base64-js');
var ieee754 = require('ieee754');

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;

var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
  console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
}

function typedArraySupport() {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {
        return 42;
      } };
    return arr.foo() === 42;
  } catch (e) {
    return false;
  }
}

function createBuffer(length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length');
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length);
  buf.__proto__ = Buffer.prototype;
  return buf;
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer(arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }
    return allocUnsafe(arg);
  }
  return from(arg, encodingOrOffset, length);
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  });
}

Buffer.poolSize = 8192; // not used by this implementation

function from(value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset);
  }

  return fromObject(value);
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length);
};

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype;
Buffer.__proto__ = Uint8Array;

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(size);
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
  }
  return createBuffer(size);
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding);
};

function allocUnsafe(size) {
  assertSize(size);
  return createBuffer(size < 0 ? 0 : checked(size) | 0);
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size);
};

function fromString(string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  var buf = createBuffer(length);

  var actual = buf.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
  }

  return buf;
}

function fromArrayLike(array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  var buf = createBuffer(length);
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255;
  }
  return buf;
}

function fromArrayBuffer(array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  var buf;
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array);
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset);
  } else {
    buf = new Uint8Array(array, byteOffset, length);
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype;
  return buf;
}

function fromObject(obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    var buf = createBuffer(len);

    if (buf.length === 0) {
      return buf;
    }

    obj.copy(buf, 0, 0, len);
    return buf;
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0);
      }
      return fromArrayLike(obj);
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
  }
  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return b != null && b._isBuffer === true;
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;
    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;
  for (i = 0; i < list.length; ++i) {
    var buf = list[i];
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength;
  }
  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0;

  // Use a for loop to avoid recursion
  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;
      case 'hex':
        return len >>> 1;
      case 'base64':
        return base64ToBytes(string).length;
      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }
  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0;

  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);

  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1;

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;
  if (dir) {
    var foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      var found = true;
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }
      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (numberIsNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }
  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
    // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0;
    if (isFinite(length)) {
      length = length >>> 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';

  var loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];

  var i = start;
  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break;
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break;
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = '';
  var i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }
  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }
  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }
  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  var newBuf = this.subarray(start, end);
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype;
  return newBuf;
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var val = this[offset];
  var mul = 1;
  var i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset + 3] = value >>> 24;
  this[offset + 2] = value >>> 16;
  this[offset + 1] = value >>> 8;
  this[offset] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  this[offset] = value >>> 8;
  this[offset + 1] = value & 0xff;
  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  this[offset] = value & 0xff;
  this[offset + 1] = value >>> 8;
  this[offset + 2] = value >>> 16;
  this[offset + 3] = value >>> 24;
  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;
  this[offset] = value >>> 24;
  this[offset + 1] = value >>> 16;
  this[offset + 2] = value >>> 8;
  this[offset + 3] = value & 0xff;
  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0;

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds');

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0);
      if (code < 256) {
        val = code;
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  var i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : new Buffer(val, encoding);
    var len = bytes.length;
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
};

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return '';
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str;
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        }

        // valid lead
        leadSurrogate = codePoint;

        continue;
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }
  return i;
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer(obj) {
  return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' && typeof obj.byteLength === 'number';
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView(obj) {
  return typeof ArrayBuffer.isView === 'function' && ArrayBuffer.isView(obj);
}

function numberIsNaN(obj) {
  return obj !== obj; // eslint-disable-line no-self-compare
}

},{"base64-js":20,"ieee754":138}],53:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;
var Transform = require('stream').Transform;
var StringDecoder = require('string_decoder').StringDecoder;
var inherits = require('inherits');

function CipherBase(hashMode) {
  Transform.call(this);
  this.hashMode = typeof hashMode === 'string';
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest;
  } else {
    this.final = this._finalOrDigest;
  }
  if (this._final) {
    this.__final = this._final;
    this._final = null;
  }
  this._decoder = null;
  this._encoding = null;
}
inherits(CipherBase, Transform);

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc);
  }

  var outData = this._update(data);
  if (this.hashMode) return this;

  if (outputEnc) {
    outData = this._toString(outData, outputEnc);
  }

  return outData;
};

CipherBase.prototype.setAutoPadding = function () {};
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state');
};

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state');
};

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state');
};

CipherBase.prototype._transform = function (data, _, next) {
  var err;
  try {
    if (this.hashMode) {
      this._update(data);
    } else {
      this.push(this._update(data));
    }
  } catch (e) {
    err = e;
  } finally {
    next(err);
  }
};
CipherBase.prototype._flush = function (done) {
  var err;
  try {
    this.push(this.__final());
  } catch (e) {
    err = e;
  }

  done(err);
};
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0);
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true);
  }
  return outData;
};

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc);
    this._encoding = enc;
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings');

  var out = this._decoder.write(value);
  if (fin) {
    out += this._decoder.end();
  }

  return out;
};

module.exports = CipherBase;

},{"inherits":140,"safe-buffer":181,"stream":190,"string_decoder":191}],54:[function(require,module,exports){
(function (Buffer){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return objectToString(e) === '[object Error]' || e instanceof Error;
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})

},{"../../is-buffer/index.js":141}],55:[function(require,module,exports){
(function (Buffer){
'use strict';

var elliptic = require('elliptic');
var BN = require('bn.js');

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	},
	secp384r1: {
		name: 'p384',
		byteLength: 48
	},
	secp521r1: {
		name: 'p521',
		byteLength: 66
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key[0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

}).call(this,require("buffer").Buffer)

},{"bn.js":21,"buffer":52,"elliptic":106}],56:[function(require,module,exports){
(function (Buffer){
'use strict';

var inherits = require('inherits');
var md5 = require('./md5');
var RIPEMD160 = require('ripemd160');
var sha = require('sha.js');

var Base = require('cipher-base');

function HashNoConstructor(hash) {
  Base.call(this, 'digest');

  this._hash = hash;
  this.buffers = [];
}

inherits(HashNoConstructor, Base);

HashNoConstructor.prototype._update = function (data) {
  this.buffers.push(data);
};

HashNoConstructor.prototype._final = function () {
  var buf = Buffer.concat(this.buffers);
  var r = this._hash(buf);
  this.buffers = null;

  return r;
};

function Hash(hash) {
  Base.call(this, 'digest');

  this._hash = hash;
}

inherits(Hash, Base);

Hash.prototype._update = function (data) {
  this._hash.update(data);
};

Hash.prototype._final = function () {
  return this._hash.digest();
};

module.exports = function createHash(alg) {
  alg = alg.toLowerCase();
  if (alg === 'md5') return new HashNoConstructor(md5);
  if (alg === 'rmd160' || alg === 'ripemd160') return new Hash(new RIPEMD160());

  return new Hash(sha(alg));
};

}).call(this,require("buffer").Buffer)

},{"./md5":58,"buffer":52,"cipher-base":53,"inherits":140,"ripemd160":180,"sha.js":183}],57:[function(require,module,exports){
(function (Buffer){
'use strict';

var intSize = 4;
var zeroBuffer = new Buffer(intSize);
zeroBuffer.fill(0);

var charSize = 8;
var hashSize = 16;

function toArray(buf) {
  if (buf.length % intSize !== 0) {
    var len = buf.length + (intSize - buf.length % intSize);
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = new Array(buf.length >>> 2);
  for (var i = 0, j = 0; i < buf.length; i += intSize, j++) {
    arr[j] = buf.readInt32LE(i);
  }

  return arr;
}

module.exports = function hash(buf, fn) {
  var arr = fn(toArray(buf), buf.length * charSize);
  buf = new Buffer(hashSize);
  for (var i = 0; i < arr.length; i++) {
    buf.writeInt32LE(arr[i], i << 2, true);
  }
  return buf;
};

}).call(this,require("buffer").Buffer)

},{"buffer":52}],58:[function(require,module,exports){
'use strict';
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var makeHash = require('./make-hash');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[(len + 64 >>> 9 << 4) + 14] = len;

  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
    d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);

    a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }

  return [a, b, c, d];
}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t) {
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}

function md5_ff(a, b, c, d, x, s, t) {
  return md5_cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5_gg(a, b, c, d, x, s, t) {
  return md5_cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5_hh(a, b, c, d, x, s, t) {
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5_ii(a, b, c, d, x, s, t) {
  return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y) {
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xFFFF;
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}

module.exports = function md5(buf) {
  return makeHash(buf, core_md5);
};

},{"./make-hash":57}],59:[function(require,module,exports){
'use strict';

var inherits = require('inherits');
var Legacy = require('./legacy');
var Base = require('cipher-base');
var Buffer = require('safe-buffer').Buffer;
var md5 = require('create-hash/md5');
var RIPEMD160 = require('ripemd160');

var sha = require('sha.js');

var ZEROS = Buffer.alloc(128);

function Hmac(alg, key) {
  Base.call(this, 'digest');
  if (typeof key === 'string') {
    key = Buffer.from(key);
  }

  var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;

  this._alg = alg;
  this._key = key;
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
    key = hash.update(key).digest();
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize);
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
  var opad = this._opad = Buffer.allocUnsafe(blocksize);

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
  this._hash.update(ipad);
}

inherits(Hmac, Base);

Hmac.prototype._update = function (data) {
  this._hash.update(data);
};

Hmac.prototype._final = function () {
  var h = this._hash.digest();
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg);
  return hash.update(this._opad).update(h).digest();
};

module.exports = function createHmac(alg, key) {
  alg = alg.toLowerCase();
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key);
  }
  if (alg === 'md5') {
    return new Legacy(md5, key);
  }
  return new Hmac(alg, key);
};

},{"./legacy":60,"cipher-base":53,"create-hash/md5":58,"inherits":140,"ripemd160":180,"safe-buffer":181,"sha.js":183}],60:[function(require,module,exports){
'use strict';

var inherits = require('inherits');
var Buffer = require('safe-buffer').Buffer;

var Base = require('cipher-base');

var ZEROS = Buffer.alloc(128);
var blocksize = 64;

function Hmac(alg, key) {
  Base.call(this, 'digest');
  if (typeof key === 'string') {
    key = Buffer.from(key);
  }

  this._alg = alg;
  this._key = key;

  if (key.length > blocksize) {
    key = alg(key);
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize);
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
  var opad = this._opad = Buffer.allocUnsafe(blocksize);

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }

  this._hash = [ipad];
}

inherits(Hmac, Base);

Hmac.prototype._update = function (data) {
  this._hash.push(data);
};

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash));
  return this._alg(Buffer.concat([this._opad, h]));
};
module.exports = Hmac;

},{"cipher-base":53,"inherits":140,"safe-buffer":181}],61:[function(require,module,exports){
'use strict';

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes');
exports.createHash = exports.Hash = require('create-hash');
exports.createHmac = exports.Hmac = require('create-hmac');

var algos = require('browserify-sign/algos');
var algoKeys = Object.keys(algos);
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys);
exports.getHashes = function () {
  return hashes;
};

var p = require('pbkdf2');
exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;

var aes = require('browserify-cipher');

exports.Cipher = aes.Cipher;
exports.createCipher = aes.createCipher;
exports.Cipheriv = aes.Cipheriv;
exports.createCipheriv = aes.createCipheriv;
exports.Decipher = aes.Decipher;
exports.createDecipher = aes.createDecipher;
exports.Decipheriv = aes.Decipheriv;
exports.createDecipheriv = aes.createDecipheriv;
exports.getCiphers = aes.getCiphers;
exports.listCiphers = aes.listCiphers;

var dh = require('diffie-hellman');

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
exports.getDiffieHellman = dh.getDiffieHellman;
exports.createDiffieHellman = dh.createDiffieHellman;
exports.DiffieHellman = dh.DiffieHellman;

var sign = require('browserify-sign');

exports.createSign = sign.createSign;
exports.Sign = sign.Sign;
exports.createVerify = sign.createVerify;
exports.Verify = sign.Verify;

exports.createECDH = require('create-ecdh');

var publicEncrypt = require('public-encrypt');

exports.publicEncrypt = publicEncrypt.publicEncrypt;
exports.privateEncrypt = publicEncrypt.privateEncrypt;
exports.publicDecrypt = publicEncrypt.publicDecrypt;
exports.privateDecrypt = publicEncrypt.privateDecrypt;

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

exports.createCredentials = function () {
  throw new Error(['sorry, createCredentials is not implemented yet', 'we accept pull requests', 'https://github.com/crypto-browserify/crypto-browserify'].join('\n'));
};

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
};

},{"browserify-cipher":41,"browserify-sign":48,"browserify-sign/algos":45,"create-ecdh":55,"create-hash":56,"create-hmac":59,"diffie-hellman":102,"pbkdf2":153,"public-encrypt":160,"randombytes":166}],62:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var BlockCipher = C_lib.BlockCipher;
		var C_algo = C.algo;

		// Lookup tables
		var SBOX = [];
		var INV_SBOX = [];
		var SUB_MIX_0 = [];
		var SUB_MIX_1 = [];
		var SUB_MIX_2 = [];
		var SUB_MIX_3 = [];
		var INV_SUB_MIX_0 = [];
		var INV_SUB_MIX_1 = [];
		var INV_SUB_MIX_2 = [];
		var INV_SUB_MIX_3 = [];

		// Compute lookup tables
		(function () {
			// Compute double table
			var d = [];
			for (var i = 0; i < 256; i++) {
				if (i < 128) {
					d[i] = i << 1;
				} else {
					d[i] = i << 1 ^ 0x11b;
				}
			}

			// Walk GF(2^8)
			var x = 0;
			var xi = 0;
			for (var i = 0; i < 256; i++) {
				// Compute sbox
				var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
				sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
				SBOX[x] = sx;
				INV_SBOX[sx] = x;

				// Compute multiplication
				var x2 = d[x];
				var x4 = d[x2];
				var x8 = d[x4];

				// Compute sub bytes, mix columns tables
				var t = d[sx] * 0x101 ^ sx * 0x1010100;
				SUB_MIX_0[x] = t << 24 | t >>> 8;
				SUB_MIX_1[x] = t << 16 | t >>> 16;
				SUB_MIX_2[x] = t << 8 | t >>> 24;
				SUB_MIX_3[x] = t;

				// Compute inv sub bytes, inv mix columns tables
				var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
				INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
				INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
				INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
				INV_SUB_MIX_3[sx] = t;

				// Compute next counter
				if (!x) {
					x = xi = 1;
				} else {
					x = x2 ^ d[d[d[x8 ^ x2]]];
					xi ^= d[d[xi]];
				}
			}
		})();

		// Precomputed Rcon lookup
		var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

		/**
   * AES block cipher algorithm.
   */
		var AES = C_algo.AES = BlockCipher.extend({
			_doReset: function _doReset() {
				// Skip reset of nRounds has been set before and key did not change
				if (this._nRounds && this._keyPriorReset === this._key) {
					return;
				}

				// Shortcuts
				var key = this._keyPriorReset = this._key;
				var keyWords = key.words;
				var keySize = key.sigBytes / 4;

				// Compute number of rounds
				var nRounds = this._nRounds = keySize + 6;

				// Compute number of key schedule rows
				var ksRows = (nRounds + 1) * 4;

				// Compute key schedule
				var keySchedule = this._keySchedule = [];
				for (var ksRow = 0; ksRow < ksRows; ksRow++) {
					if (ksRow < keySize) {
						keySchedule[ksRow] = keyWords[ksRow];
					} else {
						var t = keySchedule[ksRow - 1];

						if (!(ksRow % keySize)) {
							// Rot word
							t = t << 8 | t >>> 24;

							// Sub word
							t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];

							// Mix Rcon
							t ^= RCON[ksRow / keySize | 0] << 24;
						} else if (keySize > 6 && ksRow % keySize == 4) {
							// Sub word
							t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
						}

						keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
					}
				}

				// Compute inv key schedule
				var invKeySchedule = this._invKeySchedule = [];
				for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
					var ksRow = ksRows - invKsRow;

					if (invKsRow % 4) {
						var t = keySchedule[ksRow];
					} else {
						var t = keySchedule[ksRow - 4];
					}

					if (invKsRow < 4 || ksRow <= 4) {
						invKeySchedule[invKsRow] = t;
					} else {
						invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
					}
				}
			},

			encryptBlock: function encryptBlock(M, offset) {
				this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
			},

			decryptBlock: function decryptBlock(M, offset) {
				// Swap 2nd and 4th rows
				var t = M[offset + 1];
				M[offset + 1] = M[offset + 3];
				M[offset + 3] = t;

				this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

				// Inv swap 2nd and 4th rows
				var t = M[offset + 1];
				M[offset + 1] = M[offset + 3];
				M[offset + 3] = t;
			},

			_doCryptBlock: function _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
				// Shortcut
				var nRounds = this._nRounds;

				// Get input, add round key
				var s0 = M[offset] ^ keySchedule[0];
				var s1 = M[offset + 1] ^ keySchedule[1];
				var s2 = M[offset + 2] ^ keySchedule[2];
				var s3 = M[offset + 3] ^ keySchedule[3];

				// Key schedule row counter
				var ksRow = 4;

				// Rounds
				for (var round = 1; round < nRounds; round++) {
					// Shift rows, sub bytes, mix columns, add round key
					var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
					var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
					var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
					var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

					// Update state
					s0 = t0;
					s1 = t1;
					s2 = t2;
					s3 = t3;
				}

				// Shift rows, sub bytes, add round key
				var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
				var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
				var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
				var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

				// Set output
				M[offset] = t0;
				M[offset + 1] = t1;
				M[offset + 2] = t2;
				M[offset + 3] = t3;
			},

			keySize: 256 / 32
		});

		/**
   * Shortcut functions to the cipher's object interface.
   *
   * @example
   *
   *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
   *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
   */
		C.AES = BlockCipher._createHelper(AES);
	})();

	return CryptoJS.AES;
});

},{"./cipher-core":63,"./core":64,"./enc-base64":65,"./evpkdf":67,"./md5":72}],63:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	/**
  * Cipher core components.
  */
	CryptoJS.lib.Cipher || function (undefined) {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var Base = C_lib.Base;
		var WordArray = C_lib.WordArray;
		var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
		var C_enc = C.enc;
		var Utf8 = C_enc.Utf8;
		var Base64 = C_enc.Base64;
		var C_algo = C.algo;
		var EvpKDF = C_algo.EvpKDF;

		/**
   * Abstract base cipher template.
   *
   * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
   * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
   * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
   * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
   */
		var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
			/**
    * Configuration options.
    *
    * @property {WordArray} iv The IV to use for this operation.
    */
			cfg: Base.extend(),

			/**
    * Creates this cipher in encryption mode.
    *
    * @param {WordArray} key The key.
    * @param {Object} cfg (Optional) The configuration options to use for this operation.
    *
    * @return {Cipher} A cipher instance.
    *
    * @static
    *
    * @example
    *
    *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
    */
			createEncryptor: function createEncryptor(key, cfg) {
				return this.create(this._ENC_XFORM_MODE, key, cfg);
			},

			/**
    * Creates this cipher in decryption mode.
    *
    * @param {WordArray} key The key.
    * @param {Object} cfg (Optional) The configuration options to use for this operation.
    *
    * @return {Cipher} A cipher instance.
    *
    * @static
    *
    * @example
    *
    *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
    */
			createDecryptor: function createDecryptor(key, cfg) {
				return this.create(this._DEC_XFORM_MODE, key, cfg);
			},

			/**
    * Initializes a newly created cipher.
    *
    * @param {number} xformMode Either the encryption or decryption transormation mode constant.
    * @param {WordArray} key The key.
    * @param {Object} cfg (Optional) The configuration options to use for this operation.
    *
    * @example
    *
    *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
    */
			init: function init(xformMode, key, cfg) {
				// Apply config defaults
				this.cfg = this.cfg.extend(cfg);

				// Store transform mode and key
				this._xformMode = xformMode;
				this._key = key;

				// Set initial values
				this.reset();
			},

			/**
    * Resets this cipher to its initial state.
    *
    * @example
    *
    *     cipher.reset();
    */
			reset: function reset() {
				// Reset data buffer
				BufferedBlockAlgorithm.reset.call(this);

				// Perform concrete-cipher logic
				this._doReset();
			},

			/**
    * Adds data to be encrypted or decrypted.
    *
    * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
    *
    * @return {WordArray} The data after processing.
    *
    * @example
    *
    *     var encrypted = cipher.process('data');
    *     var encrypted = cipher.process(wordArray);
    */
			process: function process(dataUpdate) {
				// Append
				this._append(dataUpdate);

				// Process available blocks
				return this._process();
			},

			/**
    * Finalizes the encryption or decryption process.
    * Note that the finalize operation is effectively a destructive, read-once operation.
    *
    * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
    *
    * @return {WordArray} The data after final processing.
    *
    * @example
    *
    *     var encrypted = cipher.finalize();
    *     var encrypted = cipher.finalize('data');
    *     var encrypted = cipher.finalize(wordArray);
    */
			finalize: function finalize(dataUpdate) {
				// Final data update
				if (dataUpdate) {
					this._append(dataUpdate);
				}

				// Perform concrete-cipher logic
				var finalProcessedData = this._doFinalize();

				return finalProcessedData;
			},

			keySize: 128 / 32,

			ivSize: 128 / 32,

			_ENC_XFORM_MODE: 1,

			_DEC_XFORM_MODE: 2,

			/**
    * Creates shortcut functions to a cipher's object interface.
    *
    * @param {Cipher} cipher The cipher to create a helper for.
    *
    * @return {Object} An object with encrypt and decrypt shortcut functions.
    *
    * @static
    *
    * @example
    *
    *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
    */
			_createHelper: function () {
				function selectCipherStrategy(key) {
					if (typeof key == 'string') {
						return PasswordBasedCipher;
					} else {
						return SerializableCipher;
					}
				}

				return function (cipher) {
					return {
						encrypt: function encrypt(message, key, cfg) {
							return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
						},

						decrypt: function decrypt(ciphertext, key, cfg) {
							return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
						}
					};
				};
			}()
		});

		/**
   * Abstract base stream cipher template.
   *
   * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
   */
		var StreamCipher = C_lib.StreamCipher = Cipher.extend({
			_doFinalize: function _doFinalize() {
				// Process partial blocks
				var finalProcessedBlocks = this._process(!!'flush');

				return finalProcessedBlocks;
			},

			blockSize: 1
		});

		/**
   * Mode namespace.
   */
		var C_mode = C.mode = {};

		/**
   * Abstract base block cipher mode template.
   */
		var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
			/**
    * Creates this mode for encryption.
    *
    * @param {Cipher} cipher A block cipher instance.
    * @param {Array} iv The IV words.
    *
    * @static
    *
    * @example
    *
    *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
    */
			createEncryptor: function createEncryptor(cipher, iv) {
				return this.Encryptor.create(cipher, iv);
			},

			/**
    * Creates this mode for decryption.
    *
    * @param {Cipher} cipher A block cipher instance.
    * @param {Array} iv The IV words.
    *
    * @static
    *
    * @example
    *
    *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
    */
			createDecryptor: function createDecryptor(cipher, iv) {
				return this.Decryptor.create(cipher, iv);
			},

			/**
    * Initializes a newly created mode.
    *
    * @param {Cipher} cipher A block cipher instance.
    * @param {Array} iv The IV words.
    *
    * @example
    *
    *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
    */
			init: function init(cipher, iv) {
				this._cipher = cipher;
				this._iv = iv;
			}
		});

		/**
   * Cipher Block Chaining mode.
   */
		var CBC = C_mode.CBC = function () {
			/**
    * Abstract base CBC mode.
    */
			var CBC = BlockCipherMode.extend();

			/**
    * CBC encryptor.
    */
			CBC.Encryptor = CBC.extend({
				/**
     * Processes the data block at offset.
     *
     * @param {Array} words The data words to operate on.
     * @param {number} offset The offset where the block starts.
     *
     * @example
     *
     *     mode.processBlock(data.words, offset);
     */
				processBlock: function processBlock(words, offset) {
					// Shortcuts
					var cipher = this._cipher;
					var blockSize = cipher.blockSize;

					// XOR and encrypt
					xorBlock.call(this, words, offset, blockSize);
					cipher.encryptBlock(words, offset);

					// Remember this block to use with next block
					this._prevBlock = words.slice(offset, offset + blockSize);
				}
			});

			/**
    * CBC decryptor.
    */
			CBC.Decryptor = CBC.extend({
				/**
     * Processes the data block at offset.
     *
     * @param {Array} words The data words to operate on.
     * @param {number} offset The offset where the block starts.
     *
     * @example
     *
     *     mode.processBlock(data.words, offset);
     */
				processBlock: function processBlock(words, offset) {
					// Shortcuts
					var cipher = this._cipher;
					var blockSize = cipher.blockSize;

					// Remember this block to use with next block
					var thisBlock = words.slice(offset, offset + blockSize);

					// Decrypt and XOR
					cipher.decryptBlock(words, offset);
					xorBlock.call(this, words, offset, blockSize);

					// This block becomes the previous block
					this._prevBlock = thisBlock;
				}
			});

			function xorBlock(words, offset, blockSize) {
				// Shortcut
				var iv = this._iv;

				// Choose mixing block
				if (iv) {
					var block = iv;

					// Remove IV for subsequent blocks
					this._iv = undefined;
				} else {
					var block = this._prevBlock;
				}

				// XOR blocks
				for (var i = 0; i < blockSize; i++) {
					words[offset + i] ^= block[i];
				}
			}

			return CBC;
		}();

		/**
   * Padding namespace.
   */
		var C_pad = C.pad = {};

		/**
   * PKCS #5/7 padding strategy.
   */
		var Pkcs7 = C_pad.Pkcs7 = {
			/**
    * Pads data using the algorithm defined in PKCS #5/7.
    *
    * @param {WordArray} data The data to pad.
    * @param {number} blockSize The multiple that the data should be padded to.
    *
    * @static
    *
    * @example
    *
    *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
    */
			pad: function pad(data, blockSize) {
				// Shortcut
				var blockSizeBytes = blockSize * 4;

				// Count padding bytes
				var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

				// Create padding word
				var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;

				// Create padding
				var paddingWords = [];
				for (var i = 0; i < nPaddingBytes; i += 4) {
					paddingWords.push(paddingWord);
				}
				var padding = WordArray.create(paddingWords, nPaddingBytes);

				// Add padding
				data.concat(padding);
			},

			/**
    * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
    *
    * @param {WordArray} data The data to unpad.
    *
    * @static
    *
    * @example
    *
    *     CryptoJS.pad.Pkcs7.unpad(wordArray);
    */
			unpad: function unpad(data) {
				// Get number of padding bytes from last byte
				var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

				// Remove padding
				data.sigBytes -= nPaddingBytes;
			}
		};

		/**
   * Abstract base block cipher template.
   *
   * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
   */
		var BlockCipher = C_lib.BlockCipher = Cipher.extend({
			/**
    * Configuration options.
    *
    * @property {Mode} mode The block mode to use. Default: CBC
    * @property {Padding} padding The padding strategy to use. Default: Pkcs7
    */
			cfg: Cipher.cfg.extend({
				mode: CBC,
				padding: Pkcs7
			}),

			reset: function reset() {
				// Reset cipher
				Cipher.reset.call(this);

				// Shortcuts
				var cfg = this.cfg;
				var iv = cfg.iv;
				var mode = cfg.mode;

				// Reset block mode
				if (this._xformMode == this._ENC_XFORM_MODE) {
					var modeCreator = mode.createEncryptor;
				} else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
						var modeCreator = mode.createDecryptor;

						// Keep at least one block in the buffer for unpadding
						this._minBufferSize = 1;
					}
				this._mode = modeCreator.call(mode, this, iv && iv.words);
			},

			_doProcessBlock: function _doProcessBlock(words, offset) {
				this._mode.processBlock(words, offset);
			},

			_doFinalize: function _doFinalize() {
				// Shortcut
				var padding = this.cfg.padding;

				// Finalize
				if (this._xformMode == this._ENC_XFORM_MODE) {
					// Pad data
					padding.pad(this._data, this.blockSize);

					// Process final blocks
					var finalProcessedBlocks = this._process(!!'flush');
				} else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
						// Process final blocks
						var finalProcessedBlocks = this._process(!!'flush');

						// Unpad data
						padding.unpad(finalProcessedBlocks);
					}

				return finalProcessedBlocks;
			},

			blockSize: 128 / 32
		});

		/**
   * A collection of cipher parameters.
   *
   * @property {WordArray} ciphertext The raw ciphertext.
   * @property {WordArray} key The key to this ciphertext.
   * @property {WordArray} iv The IV used in the ciphering operation.
   * @property {WordArray} salt The salt used with a key derivation function.
   * @property {Cipher} algorithm The cipher algorithm.
   * @property {Mode} mode The block mode used in the ciphering operation.
   * @property {Padding} padding The padding scheme used in the ciphering operation.
   * @property {number} blockSize The block size of the cipher.
   * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
   */
		var CipherParams = C_lib.CipherParams = Base.extend({
			/**
    * Initializes a newly created cipher params object.
    *
    * @param {Object} cipherParams An object with any of the possible cipher parameters.
    *
    * @example
    *
    *     var cipherParams = CryptoJS.lib.CipherParams.create({
    *         ciphertext: ciphertextWordArray,
    *         key: keyWordArray,
    *         iv: ivWordArray,
    *         salt: saltWordArray,
    *         algorithm: CryptoJS.algo.AES,
    *         mode: CryptoJS.mode.CBC,
    *         padding: CryptoJS.pad.PKCS7,
    *         blockSize: 4,
    *         formatter: CryptoJS.format.OpenSSL
    *     });
    */
			init: function init(cipherParams) {
				this.mixIn(cipherParams);
			},

			/**
    * Converts this cipher params object to a string.
    *
    * @param {Format} formatter (Optional) The formatting strategy to use.
    *
    * @return {string} The stringified cipher params.
    *
    * @throws Error If neither the formatter nor the default formatter is set.
    *
    * @example
    *
    *     var string = cipherParams + '';
    *     var string = cipherParams.toString();
    *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
    */
			toString: function toString(formatter) {
				return (formatter || this.formatter).stringify(this);
			}
		});

		/**
   * Format namespace.
   */
		var C_format = C.format = {};

		/**
   * OpenSSL formatting strategy.
   */
		var OpenSSLFormatter = C_format.OpenSSL = {
			/**
    * Converts a cipher params object to an OpenSSL-compatible string.
    *
    * @param {CipherParams} cipherParams The cipher params object.
    *
    * @return {string} The OpenSSL-compatible string.
    *
    * @static
    *
    * @example
    *
    *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
    */
			stringify: function stringify(cipherParams) {
				// Shortcuts
				var ciphertext = cipherParams.ciphertext;
				var salt = cipherParams.salt;

				// Format
				if (salt) {
					var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
				} else {
					var wordArray = ciphertext;
				}

				return wordArray.toString(Base64);
			},

			/**
    * Converts an OpenSSL-compatible string to a cipher params object.
    *
    * @param {string} openSSLStr The OpenSSL-compatible string.
    *
    * @return {CipherParams} The cipher params object.
    *
    * @static
    *
    * @example
    *
    *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
    */
			parse: function parse(openSSLStr) {
				// Parse base64
				var ciphertext = Base64.parse(openSSLStr);

				// Shortcut
				var ciphertextWords = ciphertext.words;

				// Test for salt
				if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
					// Extract salt
					var salt = WordArray.create(ciphertextWords.slice(2, 4));

					// Remove salt from ciphertext
					ciphertextWords.splice(0, 4);
					ciphertext.sigBytes -= 16;
				}

				return CipherParams.create({ ciphertext: ciphertext, salt: salt });
			}
		};

		/**
   * A cipher wrapper that returns ciphertext as a serializable cipher params object.
   */
		var SerializableCipher = C_lib.SerializableCipher = Base.extend({
			/**
    * Configuration options.
    *
    * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
    */
			cfg: Base.extend({
				format: OpenSSLFormatter
			}),

			/**
    * Encrypts a message.
    *
    * @param {Cipher} cipher The cipher algorithm to use.
    * @param {WordArray|string} message The message to encrypt.
    * @param {WordArray} key The key.
    * @param {Object} cfg (Optional) The configuration options to use for this operation.
    *
    * @return {CipherParams} A cipher params object.
    *
    * @static
    *
    * @example
    *
    *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
    *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
    *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
    */
			encrypt: function encrypt(cipher, message, key, cfg) {
				// Apply config defaults
				cfg = this.cfg.extend(cfg);

				// Encrypt
				var encryptor = cipher.createEncryptor(key, cfg);
				var ciphertext = encryptor.finalize(message);

				// Shortcut
				var cipherCfg = encryptor.cfg;

				// Create and return serializable cipher params
				return CipherParams.create({
					ciphertext: ciphertext,
					key: key,
					iv: cipherCfg.iv,
					algorithm: cipher,
					mode: cipherCfg.mode,
					padding: cipherCfg.padding,
					blockSize: cipher.blockSize,
					formatter: cfg.format
				});
			},

			/**
    * Decrypts serialized ciphertext.
    *
    * @param {Cipher} cipher The cipher algorithm to use.
    * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
    * @param {WordArray} key The key.
    * @param {Object} cfg (Optional) The configuration options to use for this operation.
    *
    * @return {WordArray} The plaintext.
    *
    * @static
    *
    * @example
    *
    *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
    *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
    */
			decrypt: function decrypt(cipher, ciphertext, key, cfg) {
				// Apply config defaults
				cfg = this.cfg.extend(cfg);

				// Convert string to CipherParams
				ciphertext = this._parse(ciphertext, cfg.format);

				// Decrypt
				var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

				return plaintext;
			},

			/**
    * Converts serialized ciphertext to CipherParams,
    * else assumed CipherParams already and returns ciphertext unchanged.
    *
    * @param {CipherParams|string} ciphertext The ciphertext.
    * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
    *
    * @return {CipherParams} The unserialized ciphertext.
    *
    * @static
    *
    * @example
    *
    *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
    */
			_parse: function _parse(ciphertext, format) {
				if (typeof ciphertext == 'string') {
					return format.parse(ciphertext, this);
				} else {
					return ciphertext;
				}
			}
		});

		/**
   * Key derivation function namespace.
   */
		var C_kdf = C.kdf = {};

		/**
   * OpenSSL key derivation function.
   */
		var OpenSSLKdf = C_kdf.OpenSSL = {
			/**
    * Derives a key and IV from a password.
    *
    * @param {string} password The password to derive from.
    * @param {number} keySize The size in words of the key to generate.
    * @param {number} ivSize The size in words of the IV to generate.
    * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
    *
    * @return {CipherParams} A cipher params object with the key, IV, and salt.
    *
    * @static
    *
    * @example
    *
    *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
    *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
    */
			execute: function execute(password, keySize, ivSize, salt) {
				// Generate random salt
				if (!salt) {
					salt = WordArray.random(64 / 8);
				}

				// Derive key and IV
				var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);

				// Separate key and IV
				var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
				key.sigBytes = keySize * 4;

				// Return params
				return CipherParams.create({ key: key, iv: iv, salt: salt });
			}
		};

		/**
   * A serializable cipher wrapper that derives the key from a password,
   * and returns ciphertext as a serializable cipher params object.
   */
		var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
			/**
    * Configuration options.
    *
    * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
    */
			cfg: SerializableCipher.cfg.extend({
				kdf: OpenSSLKdf
			}),

			/**
    * Encrypts a message using a password.
    *
    * @param {Cipher} cipher The cipher algorithm to use.
    * @param {WordArray|string} message The message to encrypt.
    * @param {string} password The password.
    * @param {Object} cfg (Optional) The configuration options to use for this operation.
    *
    * @return {CipherParams} A cipher params object.
    *
    * @static
    *
    * @example
    *
    *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
    *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
    */
			encrypt: function encrypt(cipher, message, password, cfg) {
				// Apply config defaults
				cfg = this.cfg.extend(cfg);

				// Derive key and other params
				var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

				// Add IV to config
				cfg.iv = derivedParams.iv;

				// Encrypt
				var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

				// Mix in derived params
				ciphertext.mixIn(derivedParams);

				return ciphertext;
			},

			/**
    * Decrypts serialized ciphertext using a password.
    *
    * @param {Cipher} cipher The cipher algorithm to use.
    * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
    * @param {string} password The password.
    * @param {Object} cfg (Optional) The configuration options to use for this operation.
    *
    * @return {WordArray} The plaintext.
    *
    * @static
    *
    * @example
    *
    *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
    *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
    */
			decrypt: function decrypt(cipher, ciphertext, password, cfg) {
				// Apply config defaults
				cfg = this.cfg.extend(cfg);

				// Convert string to CipherParams
				ciphertext = this._parse(ciphertext, cfg.format);

				// Derive key and other params
				var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

				// Add IV to config
				cfg.iv = derivedParams.iv;

				// Decrypt
				var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

				return plaintext;
			}
		});
	}();
});

},{"./core":64}],64:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory();
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define([], factory);
	} else {
		// Global (browser)
		root.CryptoJS = factory();
	}
})(undefined, function () {

	/**
  * CryptoJS core components.
  */
	var CryptoJS = CryptoJS || function (Math, undefined) {
		/*
   * Local polyfil of Object.create
   */
		var create = Object.create || function () {
			function F() {};

			return function (obj) {
				var subtype;

				F.prototype = obj;

				subtype = new F();

				F.prototype = null;

				return subtype;
			};
		}();

		/**
   * CryptoJS namespace.
   */
		var C = {};

		/**
   * Library namespace.
   */
		var C_lib = C.lib = {};

		/**
   * Base object for prototypal inheritance.
   */
		var Base = C_lib.Base = function () {

			return {
				/**
     * Creates a new object that inherits from this object.
     *
     * @param {Object} overrides Properties to copy into the new object.
     *
     * @return {Object} The new object.
     *
     * @static
     *
     * @example
     *
     *     var MyType = CryptoJS.lib.Base.extend({
     *         field: 'value',
     *
     *         method: function () {
     *         }
     *     });
     */
				extend: function extend(overrides) {
					// Spawn
					var subtype = create(this);

					// Augment
					if (overrides) {
						subtype.mixIn(overrides);
					}

					// Create default initializer
					if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
						subtype.init = function () {
							subtype.$super.init.apply(this, arguments);
						};
					}

					// Initializer's prototype is the subtype object
					subtype.init.prototype = subtype;

					// Reference supertype
					subtype.$super = this;

					return subtype;
				},

				/**
     * Extends this object and runs the init method.
     * Arguments to create() will be passed to init().
     *
     * @return {Object} The new object.
     *
     * @static
     *
     * @example
     *
     *     var instance = MyType.create();
     */
				create: function create() {
					var instance = this.extend();
					instance.init.apply(instance, arguments);

					return instance;
				},

				/**
     * Initializes a newly created object.
     * Override this method to add some logic when your objects are created.
     *
     * @example
     *
     *     var MyType = CryptoJS.lib.Base.extend({
     *         init: function () {
     *             // ...
     *         }
     *     });
     */
				init: function init() {},

				/**
     * Copies properties into this object.
     *
     * @param {Object} properties The properties to mix in.
     *
     * @example
     *
     *     MyType.mixIn({
     *         field: 'value'
     *     });
     */
				mixIn: function mixIn(properties) {
					for (var propertyName in properties) {
						if (properties.hasOwnProperty(propertyName)) {
							this[propertyName] = properties[propertyName];
						}
					}

					// IE won't copy toString using the loop above
					if (properties.hasOwnProperty('toString')) {
						this.toString = properties.toString;
					}
				},

				/**
     * Creates a copy of this object.
     *
     * @return {Object} The clone.
     *
     * @example
     *
     *     var clone = instance.clone();
     */
				clone: function clone() {
					return this.init.prototype.extend(this);
				}
			};
		}();

		/**
   * An array of 32-bit words.
   *
   * @property {Array} words The array of 32-bit words.
   * @property {number} sigBytes The number of significant bytes in this word array.
   */
		var WordArray = C_lib.WordArray = Base.extend({
			/**
    * Initializes a newly created word array.
    *
    * @param {Array} words (Optional) An array of 32-bit words.
    * @param {number} sigBytes (Optional) The number of significant bytes in the words.
    *
    * @example
    *
    *     var wordArray = CryptoJS.lib.WordArray.create();
    *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
    *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
    */
			init: function init(words, sigBytes) {
				words = this.words = words || [];

				if (sigBytes != undefined) {
					this.sigBytes = sigBytes;
				} else {
					this.sigBytes = words.length * 4;
				}
			},

			/**
    * Converts this word array to a string.
    *
    * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
    *
    * @return {string} The stringified word array.
    *
    * @example
    *
    *     var string = wordArray + '';
    *     var string = wordArray.toString();
    *     var string = wordArray.toString(CryptoJS.enc.Utf8);
    */
			toString: function toString(encoder) {
				return (encoder || Hex).stringify(this);
			},

			/**
    * Concatenates a word array to this word array.
    *
    * @param {WordArray} wordArray The word array to append.
    *
    * @return {WordArray} This word array.
    *
    * @example
    *
    *     wordArray1.concat(wordArray2);
    */
			concat: function concat(wordArray) {
				// Shortcuts
				var thisWords = this.words;
				var thatWords = wordArray.words;
				var thisSigBytes = this.sigBytes;
				var thatSigBytes = wordArray.sigBytes;

				// Clamp excess bits
				this.clamp();

				// Concat
				if (thisSigBytes % 4) {
					// Copy one byte at a time
					for (var i = 0; i < thatSigBytes; i++) {
						var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
						thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
					}
				} else {
					// Copy one word at a time
					for (var i = 0; i < thatSigBytes; i += 4) {
						thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
					}
				}
				this.sigBytes += thatSigBytes;

				// Chainable
				return this;
			},

			/**
    * Removes insignificant bits.
    *
    * @example
    *
    *     wordArray.clamp();
    */
			clamp: function clamp() {
				// Shortcuts
				var words = this.words;
				var sigBytes = this.sigBytes;

				// Clamp
				words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
				words.length = Math.ceil(sigBytes / 4);
			},

			/**
    * Creates a copy of this word array.
    *
    * @return {WordArray} The clone.
    *
    * @example
    *
    *     var clone = wordArray.clone();
    */
			clone: function clone() {
				var clone = Base.clone.call(this);
				clone.words = this.words.slice(0);

				return clone;
			},

			/**
    * Creates a word array filled with random bytes.
    *
    * @param {number} nBytes The number of random bytes to generate.
    *
    * @return {WordArray} The random word array.
    *
    * @static
    *
    * @example
    *
    *     var wordArray = CryptoJS.lib.WordArray.random(16);
    */
			random: function random(nBytes) {
				var words = [];

				var r = function r(m_w) {
					var m_w = m_w;
					var m_z = 0x3ade68b1;
					var mask = 0xffffffff;

					return function () {
						m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;
						m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;
						var result = (m_z << 0x10) + m_w & mask;
						result /= 0x100000000;
						result += 0.5;
						return result * (Math.random() > .5 ? 1 : -1);
					};
				};

				for (var i = 0, rcache; i < nBytes; i += 4) {
					var _r = r((rcache || Math.random()) * 0x100000000);

					rcache = _r() * 0x3ade67b7;
					words.push(_r() * 0x100000000 | 0);
				}

				return new WordArray.init(words, nBytes);
			}
		});

		/**
   * Encoder namespace.
   */
		var C_enc = C.enc = {};

		/**
   * Hex encoding strategy.
   */
		var Hex = C_enc.Hex = {
			/**
    * Converts a word array to a hex string.
    *
    * @param {WordArray} wordArray The word array.
    *
    * @return {string} The hex string.
    *
    * @static
    *
    * @example
    *
    *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
    */
			stringify: function stringify(wordArray) {
				// Shortcuts
				var words = wordArray.words;
				var sigBytes = wordArray.sigBytes;

				// Convert
				var hexChars = [];
				for (var i = 0; i < sigBytes; i++) {
					var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
					hexChars.push((bite >>> 4).toString(16));
					hexChars.push((bite & 0x0f).toString(16));
				}

				return hexChars.join('');
			},

			/**
    * Converts a hex string to a word array.
    *
    * @param {string} hexStr The hex string.
    *
    * @return {WordArray} The word array.
    *
    * @static
    *
    * @example
    *
    *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
    */
			parse: function parse(hexStr) {
				// Shortcut
				var hexStrLength = hexStr.length;

				// Convert
				var words = [];
				for (var i = 0; i < hexStrLength; i += 2) {
					words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
				}

				return new WordArray.init(words, hexStrLength / 2);
			}
		};

		/**
   * Latin1 encoding strategy.
   */
		var Latin1 = C_enc.Latin1 = {
			/**
    * Converts a word array to a Latin1 string.
    *
    * @param {WordArray} wordArray The word array.
    *
    * @return {string} The Latin1 string.
    *
    * @static
    *
    * @example
    *
    *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
    */
			stringify: function stringify(wordArray) {
				// Shortcuts
				var words = wordArray.words;
				var sigBytes = wordArray.sigBytes;

				// Convert
				var latin1Chars = [];
				for (var i = 0; i < sigBytes; i++) {
					var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
					latin1Chars.push(String.fromCharCode(bite));
				}

				return latin1Chars.join('');
			},

			/**
    * Converts a Latin1 string to a word array.
    *
    * @param {string} latin1Str The Latin1 string.
    *
    * @return {WordArray} The word array.
    *
    * @static
    *
    * @example
    *
    *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
    */
			parse: function parse(latin1Str) {
				// Shortcut
				var latin1StrLength = latin1Str.length;

				// Convert
				var words = [];
				for (var i = 0; i < latin1StrLength; i++) {
					words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
				}

				return new WordArray.init(words, latin1StrLength);
			}
		};

		/**
   * UTF-8 encoding strategy.
   */
		var Utf8 = C_enc.Utf8 = {
			/**
    * Converts a word array to a UTF-8 string.
    *
    * @param {WordArray} wordArray The word array.
    *
    * @return {string} The UTF-8 string.
    *
    * @static
    *
    * @example
    *
    *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
    */
			stringify: function stringify(wordArray) {
				try {
					return decodeURIComponent(escape(Latin1.stringify(wordArray)));
				} catch (e) {
					throw new Error('Malformed UTF-8 data');
				}
			},

			/**
    * Converts a UTF-8 string to a word array.
    *
    * @param {string} utf8Str The UTF-8 string.
    *
    * @return {WordArray} The word array.
    *
    * @static
    *
    * @example
    *
    *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
    */
			parse: function parse(utf8Str) {
				return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
			}
		};

		/**
   * Abstract buffered block algorithm template.
   *
   * The property blockSize must be implemented in a concrete subtype.
   *
   * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
   */
		var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
			/**
    * Resets this block algorithm's data buffer to its initial state.
    *
    * @example
    *
    *     bufferedBlockAlgorithm.reset();
    */
			reset: function reset() {
				// Initial values
				this._data = new WordArray.init();
				this._nDataBytes = 0;
			},

			/**
    * Adds new data to this block algorithm's buffer.
    *
    * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
    *
    * @example
    *
    *     bufferedBlockAlgorithm._append('data');
    *     bufferedBlockAlgorithm._append(wordArray);
    */
			_append: function _append(data) {
				// Convert string to WordArray, else assume WordArray already
				if (typeof data == 'string') {
					data = Utf8.parse(data);
				}

				// Append
				this._data.concat(data);
				this._nDataBytes += data.sigBytes;
			},

			/**
    * Processes available data blocks.
    *
    * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
    *
    * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
    *
    * @return {WordArray} The processed data.
    *
    * @example
    *
    *     var processedData = bufferedBlockAlgorithm._process();
    *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
    */
			_process: function _process(doFlush) {
				// Shortcuts
				var data = this._data;
				var dataWords = data.words;
				var dataSigBytes = data.sigBytes;
				var blockSize = this.blockSize;
				var blockSizeBytes = blockSize * 4;

				// Count blocks ready
				var nBlocksReady = dataSigBytes / blockSizeBytes;
				if (doFlush) {
					// Round up to include partial blocks
					nBlocksReady = Math.ceil(nBlocksReady);
				} else {
					// Round down to include only full blocks,
					// less the number of blocks that must remain in the buffer
					nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
				}

				// Count words ready
				var nWordsReady = nBlocksReady * blockSize;

				// Count bytes ready
				var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

				// Process blocks
				if (nWordsReady) {
					for (var offset = 0; offset < nWordsReady; offset += blockSize) {
						// Perform concrete-algorithm logic
						this._doProcessBlock(dataWords, offset);
					}

					// Remove processed words
					var processedWords = dataWords.splice(0, nWordsReady);
					data.sigBytes -= nBytesReady;
				}

				// Return processed words
				return new WordArray.init(processedWords, nBytesReady);
			},

			/**
    * Creates a copy of this object.
    *
    * @return {Object} The clone.
    *
    * @example
    *
    *     var clone = bufferedBlockAlgorithm.clone();
    */
			clone: function clone() {
				var clone = Base.clone.call(this);
				clone._data = this._data.clone();

				return clone;
			},

			_minBufferSize: 0
		});

		/**
   * Abstract hasher template.
   *
   * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
   */
		var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
			/**
    * Configuration options.
    */
			cfg: Base.extend(),

			/**
    * Initializes a newly created hasher.
    *
    * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
    *
    * @example
    *
    *     var hasher = CryptoJS.algo.SHA256.create();
    */
			init: function init(cfg) {
				// Apply config defaults
				this.cfg = this.cfg.extend(cfg);

				// Set initial values
				this.reset();
			},

			/**
    * Resets this hasher to its initial state.
    *
    * @example
    *
    *     hasher.reset();
    */
			reset: function reset() {
				// Reset data buffer
				BufferedBlockAlgorithm.reset.call(this);

				// Perform concrete-hasher logic
				this._doReset();
			},

			/**
    * Updates this hasher with a message.
    *
    * @param {WordArray|string} messageUpdate The message to append.
    *
    * @return {Hasher} This hasher.
    *
    * @example
    *
    *     hasher.update('message');
    *     hasher.update(wordArray);
    */
			update: function update(messageUpdate) {
				// Append
				this._append(messageUpdate);

				// Update the hash
				this._process();

				// Chainable
				return this;
			},

			/**
    * Finalizes the hash computation.
    * Note that the finalize operation is effectively a destructive, read-once operation.
    *
    * @param {WordArray|string} messageUpdate (Optional) A final message update.
    *
    * @return {WordArray} The hash.
    *
    * @example
    *
    *     var hash = hasher.finalize();
    *     var hash = hasher.finalize('message');
    *     var hash = hasher.finalize(wordArray);
    */
			finalize: function finalize(messageUpdate) {
				// Final message update
				if (messageUpdate) {
					this._append(messageUpdate);
				}

				// Perform concrete-hasher logic
				var hash = this._doFinalize();

				return hash;
			},

			blockSize: 512 / 32,

			/**
    * Creates a shortcut function to a hasher's object interface.
    *
    * @param {Hasher} hasher The hasher to create a helper for.
    *
    * @return {Function} The shortcut function.
    *
    * @static
    *
    * @example
    *
    *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
    */
			_createHelper: function _createHelper(hasher) {
				return function (message, cfg) {
					return new hasher.init(cfg).finalize(message);
				};
			},

			/**
    * Creates a shortcut function to the HMAC's object interface.
    *
    * @param {Hasher} hasher The hasher to use in this HMAC helper.
    *
    * @return {Function} The shortcut function.
    *
    * @static
    *
    * @example
    *
    *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
    */
			_createHmacHelper: function _createHmacHelper(hasher) {
				return function (message, key) {
					return new C_algo.HMAC.init(hasher, key).finalize(message);
				};
			}
		});

		/**
   * Algorithm namespace.
   */
		var C_algo = C.algo = {};

		return C;
	}(Math);

	return CryptoJS;
});

},{}],65:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var WordArray = C_lib.WordArray;
		var C_enc = C.enc;

		/**
   * Base64 encoding strategy.
   */
		var Base64 = C_enc.Base64 = {
			/**
    * Converts a word array to a Base64 string.
    *
    * @param {WordArray} wordArray The word array.
    *
    * @return {string} The Base64 string.
    *
    * @static
    *
    * @example
    *
    *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
    */
			stringify: function stringify(wordArray) {
				// Shortcuts
				var words = wordArray.words;
				var sigBytes = wordArray.sigBytes;
				var map = this._map;

				// Clamp excess bits
				wordArray.clamp();

				// Convert
				var base64Chars = [];
				for (var i = 0; i < sigBytes; i += 3) {
					var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
					var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
					var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;

					var triplet = byte1 << 16 | byte2 << 8 | byte3;

					for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
						base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
					}
				}

				// Add padding
				var paddingChar = map.charAt(64);
				if (paddingChar) {
					while (base64Chars.length % 4) {
						base64Chars.push(paddingChar);
					}
				}

				return base64Chars.join('');
			},

			/**
    * Converts a Base64 string to a word array.
    *
    * @param {string} base64Str The Base64 string.
    *
    * @return {WordArray} The word array.
    *
    * @static
    *
    * @example
    *
    *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
    */
			parse: function parse(base64Str) {
				// Shortcuts
				var base64StrLength = base64Str.length;
				var map = this._map;
				var reverseMap = this._reverseMap;

				if (!reverseMap) {
					reverseMap = this._reverseMap = [];
					for (var j = 0; j < map.length; j++) {
						reverseMap[map.charCodeAt(j)] = j;
					}
				}

				// Ignore padding
				var paddingChar = map.charAt(64);
				if (paddingChar) {
					var paddingIndex = base64Str.indexOf(paddingChar);
					if (paddingIndex !== -1) {
						base64StrLength = paddingIndex;
					}
				}

				// Convert
				return parseLoop(base64Str, base64StrLength, reverseMap);
			},

			_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='
		};

		function parseLoop(base64Str, base64StrLength, reverseMap) {
			var words = [];
			var nBytes = 0;
			for (var i = 0; i < base64StrLength; i++) {
				if (i % 4) {
					var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
					var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
					words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
					nBytes++;
				}
			}
			return WordArray.create(words, nBytes);
		}
	})();

	return CryptoJS.enc.Base64;
});

},{"./core":64}],66:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var WordArray = C_lib.WordArray;
		var C_enc = C.enc;

		/**
   * UTF-16 BE encoding strategy.
   */
		var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
			/**
    * Converts a word array to a UTF-16 BE string.
    *
    * @param {WordArray} wordArray The word array.
    *
    * @return {string} The UTF-16 BE string.
    *
    * @static
    *
    * @example
    *
    *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
    */
			stringify: function stringify(wordArray) {
				// Shortcuts
				var words = wordArray.words;
				var sigBytes = wordArray.sigBytes;

				// Convert
				var utf16Chars = [];
				for (var i = 0; i < sigBytes; i += 2) {
					var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;
					utf16Chars.push(String.fromCharCode(codePoint));
				}

				return utf16Chars.join('');
			},

			/**
    * Converts a UTF-16 BE string to a word array.
    *
    * @param {string} utf16Str The UTF-16 BE string.
    *
    * @return {WordArray} The word array.
    *
    * @static
    *
    * @example
    *
    *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
    */
			parse: function parse(utf16Str) {
				// Shortcut
				var utf16StrLength = utf16Str.length;

				// Convert
				var words = [];
				for (var i = 0; i < utf16StrLength; i++) {
					words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
				}

				return WordArray.create(words, utf16StrLength * 2);
			}
		};

		/**
   * UTF-16 LE encoding strategy.
   */
		C_enc.Utf16LE = {
			/**
    * Converts a word array to a UTF-16 LE string.
    *
    * @param {WordArray} wordArray The word array.
    *
    * @return {string} The UTF-16 LE string.
    *
    * @static
    *
    * @example
    *
    *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
    */
			stringify: function stringify(wordArray) {
				// Shortcuts
				var words = wordArray.words;
				var sigBytes = wordArray.sigBytes;

				// Convert
				var utf16Chars = [];
				for (var i = 0; i < sigBytes; i += 2) {
					var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);
					utf16Chars.push(String.fromCharCode(codePoint));
				}

				return utf16Chars.join('');
			},

			/**
    * Converts a UTF-16 LE string to a word array.
    *
    * @param {string} utf16Str The UTF-16 LE string.
    *
    * @return {WordArray} The word array.
    *
    * @static
    *
    * @example
    *
    *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
    */
			parse: function parse(utf16Str) {
				// Shortcut
				var utf16StrLength = utf16Str.length;

				// Convert
				var words = [];
				for (var i = 0; i < utf16StrLength; i++) {
					words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
				}

				return WordArray.create(words, utf16StrLength * 2);
			}
		};

		function swapEndian(word) {
			return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;
		}
	})();

	return CryptoJS.enc.Utf16;
});

},{"./core":64}],67:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./sha1", "./hmac"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var Base = C_lib.Base;
		var WordArray = C_lib.WordArray;
		var C_algo = C.algo;
		var MD5 = C_algo.MD5;

		/**
   * This key derivation function is meant to conform with EVP_BytesToKey.
   * www.openssl.org/docs/crypto/EVP_BytesToKey.html
   */
		var EvpKDF = C_algo.EvpKDF = Base.extend({
			/**
    * Configuration options.
    *
    * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
    * @property {Hasher} hasher The hash algorithm to use. Default: MD5
    * @property {number} iterations The number of iterations to perform. Default: 1
    */
			cfg: Base.extend({
				keySize: 128 / 32,
				hasher: MD5,
				iterations: 1
			}),

			/**
    * Initializes a newly created key derivation function.
    *
    * @param {Object} cfg (Optional) The configuration options to use for the derivation.
    *
    * @example
    *
    *     var kdf = CryptoJS.algo.EvpKDF.create();
    *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
    *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
    */
			init: function init(cfg) {
				this.cfg = this.cfg.extend(cfg);
			},

			/**
    * Derives a key from a password.
    *
    * @param {WordArray|string} password The password.
    * @param {WordArray|string} salt A salt.
    *
    * @return {WordArray} The derived key.
    *
    * @example
    *
    *     var key = kdf.compute(password, salt);
    */
			compute: function compute(password, salt) {
				// Shortcut
				var cfg = this.cfg;

				// Init hasher
				var hasher = cfg.hasher.create();

				// Initial values
				var derivedKey = WordArray.create();

				// Shortcuts
				var derivedKeyWords = derivedKey.words;
				var keySize = cfg.keySize;
				var iterations = cfg.iterations;

				// Generate key
				while (derivedKeyWords.length < keySize) {
					if (block) {
						hasher.update(block);
					}
					var block = hasher.update(password).finalize(salt);
					hasher.reset();

					// Iterations
					for (var i = 1; i < iterations; i++) {
						block = hasher.finalize(block);
						hasher.reset();
					}

					derivedKey.concat(block);
				}
				derivedKey.sigBytes = keySize * 4;

				return derivedKey;
			}
		});

		/**
   * Derives a key from a password.
   *
   * @param {WordArray|string} password The password.
   * @param {WordArray|string} salt A salt.
   * @param {Object} cfg (Optional) The configuration options to use for this computation.
   *
   * @return {WordArray} The derived key.
   *
   * @static
   *
   * @example
   *
   *     var key = CryptoJS.EvpKDF(password, salt);
   *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
   *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
   */
		C.EvpKDF = function (password, salt, cfg) {
			return EvpKDF.create(cfg).compute(password, salt);
		};
	})();

	return CryptoJS.EvpKDF;
});

},{"./core":64,"./hmac":69,"./sha1":88}],68:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function (undefined) {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var CipherParams = C_lib.CipherParams;
		var C_enc = C.enc;
		var Hex = C_enc.Hex;
		var C_format = C.format;

		var HexFormatter = C_format.Hex = {
			/**
    * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
    *
    * @param {CipherParams} cipherParams The cipher params object.
    *
    * @return {string} The hexadecimally encoded string.
    *
    * @static
    *
    * @example
    *
    *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
    */
			stringify: function stringify(cipherParams) {
				return cipherParams.ciphertext.toString(Hex);
			},

			/**
    * Converts a hexadecimally encoded ciphertext string to a cipher params object.
    *
    * @param {string} input The hexadecimally encoded string.
    *
    * @return {CipherParams} The cipher params object.
    *
    * @static
    *
    * @example
    *
    *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
    */
			parse: function parse(input) {
				var ciphertext = Hex.parse(input);
				return CipherParams.create({ ciphertext: ciphertext });
			}
		};
	})();

	return CryptoJS.format.Hex;
});

},{"./cipher-core":63,"./core":64}],69:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var Base = C_lib.Base;
		var C_enc = C.enc;
		var Utf8 = C_enc.Utf8;
		var C_algo = C.algo;

		/**
   * HMAC algorithm.
   */
		var HMAC = C_algo.HMAC = Base.extend({
			/**
    * Initializes a newly created HMAC.
    *
    * @param {Hasher} hasher The hash algorithm to use.
    * @param {WordArray|string} key The secret key.
    *
    * @example
    *
    *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
    */
			init: function init(hasher, key) {
				// Init hasher
				hasher = this._hasher = new hasher.init();

				// Convert string to WordArray, else assume WordArray already
				if (typeof key == 'string') {
					key = Utf8.parse(key);
				}

				// Shortcuts
				var hasherBlockSize = hasher.blockSize;
				var hasherBlockSizeBytes = hasherBlockSize * 4;

				// Allow arbitrary length keys
				if (key.sigBytes > hasherBlockSizeBytes) {
					key = hasher.finalize(key);
				}

				// Clamp excess bits
				key.clamp();

				// Clone key for inner and outer pads
				var oKey = this._oKey = key.clone();
				var iKey = this._iKey = key.clone();

				// Shortcuts
				var oKeyWords = oKey.words;
				var iKeyWords = iKey.words;

				// XOR keys with pad constants
				for (var i = 0; i < hasherBlockSize; i++) {
					oKeyWords[i] ^= 0x5c5c5c5c;
					iKeyWords[i] ^= 0x36363636;
				}
				oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

				// Set initial values
				this.reset();
			},

			/**
    * Resets this HMAC to its initial state.
    *
    * @example
    *
    *     hmacHasher.reset();
    */
			reset: function reset() {
				// Shortcut
				var hasher = this._hasher;

				// Reset
				hasher.reset();
				hasher.update(this._iKey);
			},

			/**
    * Updates this HMAC with a message.
    *
    * @param {WordArray|string} messageUpdate The message to append.
    *
    * @return {HMAC} This HMAC instance.
    *
    * @example
    *
    *     hmacHasher.update('message');
    *     hmacHasher.update(wordArray);
    */
			update: function update(messageUpdate) {
				this._hasher.update(messageUpdate);

				// Chainable
				return this;
			},

			/**
    * Finalizes the HMAC computation.
    * Note that the finalize operation is effectively a destructive, read-once operation.
    *
    * @param {WordArray|string} messageUpdate (Optional) A final message update.
    *
    * @return {WordArray} The HMAC.
    *
    * @example
    *
    *     var hmac = hmacHasher.finalize();
    *     var hmac = hmacHasher.finalize('message');
    *     var hmac = hmacHasher.finalize(wordArray);
    */
			finalize: function finalize(messageUpdate) {
				// Shortcut
				var hasher = this._hasher;

				// Compute HMAC
				var innerHash = hasher.finalize(messageUpdate);
				hasher.reset();
				var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

				return hmac;
			}
		});
	})();
});

},{"./core":64}],70:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./lib-typedarrays"), require("./enc-utf16"), require("./enc-base64"), require("./md5"), require("./sha1"), require("./sha256"), require("./sha224"), require("./sha512"), require("./sha384"), require("./sha3"), require("./ripemd160"), require("./hmac"), require("./pbkdf2"), require("./evpkdf"), require("./cipher-core"), require("./mode-cfb"), require("./mode-ctr"), require("./mode-ctr-gladman"), require("./mode-ofb"), require("./mode-ecb"), require("./pad-ansix923"), require("./pad-iso10126"), require("./pad-iso97971"), require("./pad-zeropadding"), require("./pad-nopadding"), require("./format-hex"), require("./aes"), require("./tripledes"), require("./rc4"), require("./rabbit"), require("./rabbit-legacy"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
	} else {
		// Global (browser)
		root.CryptoJS = factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	return CryptoJS;
});

},{"./aes":62,"./cipher-core":63,"./core":64,"./enc-base64":65,"./enc-utf16":66,"./evpkdf":67,"./format-hex":68,"./hmac":69,"./lib-typedarrays":71,"./md5":72,"./mode-cfb":73,"./mode-ctr":75,"./mode-ctr-gladman":74,"./mode-ecb":76,"./mode-ofb":77,"./pad-ansix923":78,"./pad-iso10126":79,"./pad-iso97971":80,"./pad-nopadding":81,"./pad-zeropadding":82,"./pbkdf2":83,"./rabbit":85,"./rabbit-legacy":84,"./rc4":86,"./ripemd160":87,"./sha1":88,"./sha224":89,"./sha256":90,"./sha3":91,"./sha384":92,"./sha512":93,"./tripledes":94,"./x64-core":95}],71:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Check if typed arrays are supported
		if (typeof ArrayBuffer != 'function') {
			return;
		}

		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var WordArray = C_lib.WordArray;

		// Reference original init
		var superInit = WordArray.init;

		// Augment WordArray.init to handle typed arrays
		var subInit = WordArray.init = function (typedArray) {
			// Convert buffers to uint8
			if (typedArray instanceof ArrayBuffer) {
				typedArray = new Uint8Array(typedArray);
			}

			// Convert other array views to uint8
			if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
				typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
			}

			// Handle Uint8Array
			if (typedArray instanceof Uint8Array) {
				// Shortcut
				var typedArrayByteLength = typedArray.byteLength;

				// Extract bytes
				var words = [];
				for (var i = 0; i < typedArrayByteLength; i++) {
					words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
				}

				// Initialize this word array
				superInit.call(this, words, typedArrayByteLength);
			} else {
				// Else call normal init
				superInit.apply(this, arguments);
			}
		};

		subInit.prototype = WordArray;
	})();

	return CryptoJS.lib.WordArray;
});

},{"./core":64}],72:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function (Math) {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var WordArray = C_lib.WordArray;
		var Hasher = C_lib.Hasher;
		var C_algo = C.algo;

		// Constants table
		var T = [];

		// Compute constants
		(function () {
			for (var i = 0; i < 64; i++) {
				T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;
			}
		})();

		/**
   * MD5 hash algorithm.
   */
		var MD5 = C_algo.MD5 = Hasher.extend({
			_doReset: function _doReset() {
				this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
			},

			_doProcessBlock: function _doProcessBlock(M, offset) {
				// Swap endian
				for (var i = 0; i < 16; i++) {
					// Shortcuts
					var offset_i = offset + i;
					var M_offset_i = M[offset_i];

					M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
				}

				// Shortcuts
				var H = this._hash.words;

				var M_offset_0 = M[offset + 0];
				var M_offset_1 = M[offset + 1];
				var M_offset_2 = M[offset + 2];
				var M_offset_3 = M[offset + 3];
				var M_offset_4 = M[offset + 4];
				var M_offset_5 = M[offset + 5];
				var M_offset_6 = M[offset + 6];
				var M_offset_7 = M[offset + 7];
				var M_offset_8 = M[offset + 8];
				var M_offset_9 = M[offset + 9];
				var M_offset_10 = M[offset + 10];
				var M_offset_11 = M[offset + 11];
				var M_offset_12 = M[offset + 12];
				var M_offset_13 = M[offset + 13];
				var M_offset_14 = M[offset + 14];
				var M_offset_15 = M[offset + 15];

				// Working varialbes
				var a = H[0];
				var b = H[1];
				var c = H[2];
				var d = H[3];

				// Computation
				a = FF(a, b, c, d, M_offset_0, 7, T[0]);
				d = FF(d, a, b, c, M_offset_1, 12, T[1]);
				c = FF(c, d, a, b, M_offset_2, 17, T[2]);
				b = FF(b, c, d, a, M_offset_3, 22, T[3]);
				a = FF(a, b, c, d, M_offset_4, 7, T[4]);
				d = FF(d, a, b, c, M_offset_5, 12, T[5]);
				c = FF(c, d, a, b, M_offset_6, 17, T[6]);
				b = FF(b, c, d, a, M_offset_7, 22, T[7]);
				a = FF(a, b, c, d, M_offset_8, 7, T[8]);
				d = FF(d, a, b, c, M_offset_9, 12, T[9]);
				c = FF(c, d, a, b, M_offset_10, 17, T[10]);
				b = FF(b, c, d, a, M_offset_11, 22, T[11]);
				a = FF(a, b, c, d, M_offset_12, 7, T[12]);
				d = FF(d, a, b, c, M_offset_13, 12, T[13]);
				c = FF(c, d, a, b, M_offset_14, 17, T[14]);
				b = FF(b, c, d, a, M_offset_15, 22, T[15]);

				a = GG(a, b, c, d, M_offset_1, 5, T[16]);
				d = GG(d, a, b, c, M_offset_6, 9, T[17]);
				c = GG(c, d, a, b, M_offset_11, 14, T[18]);
				b = GG(b, c, d, a, M_offset_0, 20, T[19]);
				a = GG(a, b, c, d, M_offset_5, 5, T[20]);
				d = GG(d, a, b, c, M_offset_10, 9, T[21]);
				c = GG(c, d, a, b, M_offset_15, 14, T[22]);
				b = GG(b, c, d, a, M_offset_4, 20, T[23]);
				a = GG(a, b, c, d, M_offset_9, 5, T[24]);
				d = GG(d, a, b, c, M_offset_14, 9, T[25]);
				c = GG(c, d, a, b, M_offset_3, 14, T[26]);
				b = GG(b, c, d, a, M_offset_8, 20, T[27]);
				a = GG(a, b, c, d, M_offset_13, 5, T[28]);
				d = GG(d, a, b, c, M_offset_2, 9, T[29]);
				c = GG(c, d, a, b, M_offset_7, 14, T[30]);
				b = GG(b, c, d, a, M_offset_12, 20, T[31]);

				a = HH(a, b, c, d, M_offset_5, 4, T[32]);
				d = HH(d, a, b, c, M_offset_8, 11, T[33]);
				c = HH(c, d, a, b, M_offset_11, 16, T[34]);
				b = HH(b, c, d, a, M_offset_14, 23, T[35]);
				a = HH(a, b, c, d, M_offset_1, 4, T[36]);
				d = HH(d, a, b, c, M_offset_4, 11, T[37]);
				c = HH(c, d, a, b, M_offset_7, 16, T[38]);
				b = HH(b, c, d, a, M_offset_10, 23, T[39]);
				a = HH(a, b, c, d, M_offset_13, 4, T[40]);
				d = HH(d, a, b, c, M_offset_0, 11, T[41]);
				c = HH(c, d, a, b, M_offset_3, 16, T[42]);
				b = HH(b, c, d, a, M_offset_6, 23, T[43]);
				a = HH(a, b, c, d, M_offset_9, 4, T[44]);
				d = HH(d, a, b, c, M_offset_12, 11, T[45]);
				c = HH(c, d, a, b, M_offset_15, 16, T[46]);
				b = HH(b, c, d, a, M_offset_2, 23, T[47]);

				a = II(a, b, c, d, M_offset_0, 6, T[48]);
				d = II(d, a, b, c, M_offset_7, 10, T[49]);
				c = II(c, d, a, b, M_offset_14, 15, T[50]);
				b = II(b, c, d, a, M_offset_5, 21, T[51]);
				a = II(a, b, c, d, M_offset_12, 6, T[52]);
				d = II(d, a, b, c, M_offset_3, 10, T[53]);
				c = II(c, d, a, b, M_offset_10, 15, T[54]);
				b = II(b, c, d, a, M_offset_1, 21, T[55]);
				a = II(a, b, c, d, M_offset_8, 6, T[56]);
				d = II(d, a, b, c, M_offset_15, 10, T[57]);
				c = II(c, d, a, b, M_offset_6, 15, T[58]);
				b = II(b, c, d, a, M_offset_13, 21, T[59]);
				a = II(a, b, c, d, M_offset_4, 6, T[60]);
				d = II(d, a, b, c, M_offset_11, 10, T[61]);
				c = II(c, d, a, b, M_offset_2, 15, T[62]);
				b = II(b, c, d, a, M_offset_9, 21, T[63]);

				// Intermediate hash value
				H[0] = H[0] + a | 0;
				H[1] = H[1] + b | 0;
				H[2] = H[2] + c | 0;
				H[3] = H[3] + d | 0;
			},

			_doFinalize: function _doFinalize() {
				// Shortcuts
				var data = this._data;
				var dataWords = data.words;

				var nBitsTotal = this._nDataBytes * 8;
				var nBitsLeft = data.sigBytes * 8;

				// Add padding
				dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;

				var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
				var nBitsTotalL = nBitsTotal;
				dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;
				dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;

				data.sigBytes = (dataWords.length + 1) * 4;

				// Hash final blocks
				this._process();

				// Shortcuts
				var hash = this._hash;
				var H = hash.words;

				// Swap endian
				for (var i = 0; i < 4; i++) {
					// Shortcut
					var H_i = H[i];

					H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
				}

				// Return final computed hash
				return hash;
			},

			clone: function clone() {
				var clone = Hasher.clone.call(this);
				clone._hash = this._hash.clone();

				return clone;
			}
		});

		function FF(a, b, c, d, x, s, t) {
			var n = a + (b & c | ~b & d) + x + t;
			return (n << s | n >>> 32 - s) + b;
		}

		function GG(a, b, c, d, x, s, t) {
			var n = a + (b & d | c & ~d) + x + t;
			return (n << s | n >>> 32 - s) + b;
		}

		function HH(a, b, c, d, x, s, t) {
			var n = a + (b ^ c ^ d) + x + t;
			return (n << s | n >>> 32 - s) + b;
		}

		function II(a, b, c, d, x, s, t) {
			var n = a + (c ^ (b | ~d)) + x + t;
			return (n << s | n >>> 32 - s) + b;
		}

		/**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.MD5('message');
   *     var hash = CryptoJS.MD5(wordArray);
   */
		C.MD5 = Hasher._createHelper(MD5);

		/**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacMD5(message, key);
   */
		C.HmacMD5 = Hasher._createHmacHelper(MD5);
	})(Math);

	return CryptoJS.MD5;
});

},{"./core":64}],73:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	/**
  * Cipher Feedback block mode.
  */
	CryptoJS.mode.CFB = function () {
		var CFB = CryptoJS.lib.BlockCipherMode.extend();

		CFB.Encryptor = CFB.extend({
			processBlock: function processBlock(words, offset) {
				// Shortcuts
				var cipher = this._cipher;
				var blockSize = cipher.blockSize;

				generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

				// Remember this block to use with next block
				this._prevBlock = words.slice(offset, offset + blockSize);
			}
		});

		CFB.Decryptor = CFB.extend({
			processBlock: function processBlock(words, offset) {
				// Shortcuts
				var cipher = this._cipher;
				var blockSize = cipher.blockSize;

				// Remember this block to use with next block
				var thisBlock = words.slice(offset, offset + blockSize);

				generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

				// This block becomes the previous block
				this._prevBlock = thisBlock;
			}
		});

		function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
			// Shortcut
			var iv = this._iv;

			// Generate keystream
			if (iv) {
				var keystream = iv.slice(0);

				// Remove IV for subsequent blocks
				this._iv = undefined;
			} else {
				var keystream = this._prevBlock;
			}
			cipher.encryptBlock(keystream, 0);

			// Encrypt
			for (var i = 0; i < blockSize; i++) {
				words[offset + i] ^= keystream[i];
			}
		}

		return CFB;
	}();

	return CryptoJS.mode.CFB;
});

},{"./cipher-core":63,"./core":64}],74:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	/** @preserve
  * Counter block mode compatible with  Dr Brian Gladman fileenc.c
  * derived from CryptoJS.mode.CTR
  * Jan Hruby jhruby.web@gmail.com
  */
	CryptoJS.mode.CTRGladman = function () {
		var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

		function incWord(word) {
			if ((word >> 24 & 0xff) === 0xff) {
				//overflow
				var b1 = word >> 16 & 0xff;
				var b2 = word >> 8 & 0xff;
				var b3 = word & 0xff;

				if (b1 === 0xff) // overflow b1
					{
						b1 = 0;
						if (b2 === 0xff) {
							b2 = 0;
							if (b3 === 0xff) {
								b3 = 0;
							} else {
								++b3;
							}
						} else {
							++b2;
						}
					} else {
					++b1;
				}

				word = 0;
				word += b1 << 16;
				word += b2 << 8;
				word += b3;
			} else {
				word += 0x01 << 24;
			}
			return word;
		}

		function incCounter(counter) {
			if ((counter[0] = incWord(counter[0])) === 0) {
				// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
				counter[1] = incWord(counter[1]);
			}
			return counter;
		}

		var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
			processBlock: function processBlock(words, offset) {
				// Shortcuts
				var cipher = this._cipher;
				var blockSize = cipher.blockSize;
				var iv = this._iv;
				var counter = this._counter;

				// Generate keystream
				if (iv) {
					counter = this._counter = iv.slice(0);

					// Remove IV for subsequent blocks
					this._iv = undefined;
				}

				incCounter(counter);

				var keystream = counter.slice(0);
				cipher.encryptBlock(keystream, 0);

				// Encrypt
				for (var i = 0; i < blockSize; i++) {
					words[offset + i] ^= keystream[i];
				}
			}
		});

		CTRGladman.Decryptor = Encryptor;

		return CTRGladman;
	}();

	return CryptoJS.mode.CTRGladman;
});

},{"./cipher-core":63,"./core":64}],75:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	/**
  * Counter block mode.
  */
	CryptoJS.mode.CTR = function () {
		var CTR = CryptoJS.lib.BlockCipherMode.extend();

		var Encryptor = CTR.Encryptor = CTR.extend({
			processBlock: function processBlock(words, offset) {
				// Shortcuts
				var cipher = this._cipher;
				var blockSize = cipher.blockSize;
				var iv = this._iv;
				var counter = this._counter;

				// Generate keystream
				if (iv) {
					counter = this._counter = iv.slice(0);

					// Remove IV for subsequent blocks
					this._iv = undefined;
				}
				var keystream = counter.slice(0);
				cipher.encryptBlock(keystream, 0);

				// Increment counter
				counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;

				// Encrypt
				for (var i = 0; i < blockSize; i++) {
					words[offset + i] ^= keystream[i];
				}
			}
		});

		CTR.Decryptor = Encryptor;

		return CTR;
	}();

	return CryptoJS.mode.CTR;
});

},{"./cipher-core":63,"./core":64}],76:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	/**
  * Electronic Codebook block mode.
  */
	CryptoJS.mode.ECB = function () {
		var ECB = CryptoJS.lib.BlockCipherMode.extend();

		ECB.Encryptor = ECB.extend({
			processBlock: function processBlock(words, offset) {
				this._cipher.encryptBlock(words, offset);
			}
		});

		ECB.Decryptor = ECB.extend({
			processBlock: function processBlock(words, offset) {
				this._cipher.decryptBlock(words, offset);
			}
		});

		return ECB;
	}();

	return CryptoJS.mode.ECB;
});

},{"./cipher-core":63,"./core":64}],77:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	/**
  * Output Feedback block mode.
  */
	CryptoJS.mode.OFB = function () {
		var OFB = CryptoJS.lib.BlockCipherMode.extend();

		var Encryptor = OFB.Encryptor = OFB.extend({
			processBlock: function processBlock(words, offset) {
				// Shortcuts
				var cipher = this._cipher;
				var blockSize = cipher.blockSize;
				var iv = this._iv;
				var keystream = this._keystream;

				// Generate keystream
				if (iv) {
					keystream = this._keystream = iv.slice(0);

					// Remove IV for subsequent blocks
					this._iv = undefined;
				}
				cipher.encryptBlock(keystream, 0);

				// Encrypt
				for (var i = 0; i < blockSize; i++) {
					words[offset + i] ^= keystream[i];
				}
			}
		});

		OFB.Decryptor = Encryptor;

		return OFB;
	}();

	return CryptoJS.mode.OFB;
});

},{"./cipher-core":63,"./core":64}],78:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	/**
  * ANSI X.923 padding strategy.
  */
	CryptoJS.pad.AnsiX923 = {
		pad: function pad(data, blockSize) {
			// Shortcuts
			var dataSigBytes = data.sigBytes;
			var blockSizeBytes = blockSize * 4;

			// Count padding bytes
			var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

			// Compute last byte position
			var lastBytePos = dataSigBytes + nPaddingBytes - 1;

			// Pad
			data.clamp();
			data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
			data.sigBytes += nPaddingBytes;
		},

		unpad: function unpad(data) {
			// Get number of padding bytes from last byte
			var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

			// Remove padding
			data.sigBytes -= nPaddingBytes;
		}
	};

	return CryptoJS.pad.Ansix923;
});

},{"./cipher-core":63,"./core":64}],79:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	/**
  * ISO 10126 padding strategy.
  */
	CryptoJS.pad.Iso10126 = {
		pad: function pad(data, blockSize) {
			// Shortcut
			var blockSizeBytes = blockSize * 4;

			// Count padding bytes
			var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

			// Pad
			data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
		},

		unpad: function unpad(data) {
			// Get number of padding bytes from last byte
			var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

			// Remove padding
			data.sigBytes -= nPaddingBytes;
		}
	};

	return CryptoJS.pad.Iso10126;
});

},{"./cipher-core":63,"./core":64}],80:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	/**
  * ISO/IEC 9797-1 Padding Method 2.
  */
	CryptoJS.pad.Iso97971 = {
		pad: function pad(data, blockSize) {
			// Add 0x80 byte
			data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

			// Zero pad the rest
			CryptoJS.pad.ZeroPadding.pad(data, blockSize);
		},

		unpad: function unpad(data) {
			// Remove zero padding
			CryptoJS.pad.ZeroPadding.unpad(data);

			// Remove one more byte -- the 0x80 byte
			data.sigBytes--;
		}
	};

	return CryptoJS.pad.Iso97971;
});

},{"./cipher-core":63,"./core":64}],81:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	/**
  * A noop padding strategy.
  */
	CryptoJS.pad.NoPadding = {
		pad: function pad() {},

		unpad: function unpad() {}
	};

	return CryptoJS.pad.NoPadding;
});

},{"./cipher-core":63,"./core":64}],82:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	/**
  * Zero padding strategy.
  */
	CryptoJS.pad.ZeroPadding = {
		pad: function pad(data, blockSize) {
			// Shortcut
			var blockSizeBytes = blockSize * 4;

			// Pad
			data.clamp();
			data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
		},

		unpad: function unpad(data) {
			// Shortcut
			var dataWords = data.words;

			// Unpad
			var i = data.sigBytes - 1;
			while (!(dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)) {
				i--;
			}
			data.sigBytes = i + 1;
		}
	};

	return CryptoJS.pad.ZeroPadding;
});

},{"./cipher-core":63,"./core":64}],83:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./sha1"), require("./hmac"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./sha1", "./hmac"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var Base = C_lib.Base;
		var WordArray = C_lib.WordArray;
		var C_algo = C.algo;
		var SHA1 = C_algo.SHA1;
		var HMAC = C_algo.HMAC;

		/**
   * Password-Based Key Derivation Function 2 algorithm.
   */
		var PBKDF2 = C_algo.PBKDF2 = Base.extend({
			/**
    * Configuration options.
    *
    * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
    * @property {Hasher} hasher The hasher to use. Default: SHA1
    * @property {number} iterations The number of iterations to perform. Default: 1
    */
			cfg: Base.extend({
				keySize: 128 / 32,
				hasher: SHA1,
				iterations: 1
			}),

			/**
    * Initializes a newly created key derivation function.
    *
    * @param {Object} cfg (Optional) The configuration options to use for the derivation.
    *
    * @example
    *
    *     var kdf = CryptoJS.algo.PBKDF2.create();
    *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
    *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
    */
			init: function init(cfg) {
				this.cfg = this.cfg.extend(cfg);
			},

			/**
    * Computes the Password-Based Key Derivation Function 2.
    *
    * @param {WordArray|string} password The password.
    * @param {WordArray|string} salt A salt.
    *
    * @return {WordArray} The derived key.
    *
    * @example
    *
    *     var key = kdf.compute(password, salt);
    */
			compute: function compute(password, salt) {
				// Shortcut
				var cfg = this.cfg;

				// Init HMAC
				var hmac = HMAC.create(cfg.hasher, password);

				// Initial values
				var derivedKey = WordArray.create();
				var blockIndex = WordArray.create([0x00000001]);

				// Shortcuts
				var derivedKeyWords = derivedKey.words;
				var blockIndexWords = blockIndex.words;
				var keySize = cfg.keySize;
				var iterations = cfg.iterations;

				// Generate key
				while (derivedKeyWords.length < keySize) {
					var block = hmac.update(salt).finalize(blockIndex);
					hmac.reset();

					// Shortcuts
					var blockWords = block.words;
					var blockWordsLength = blockWords.length;

					// Iterations
					var intermediate = block;
					for (var i = 1; i < iterations; i++) {
						intermediate = hmac.finalize(intermediate);
						hmac.reset();

						// Shortcut
						var intermediateWords = intermediate.words;

						// XOR intermediate with block
						for (var j = 0; j < blockWordsLength; j++) {
							blockWords[j] ^= intermediateWords[j];
						}
					}

					derivedKey.concat(block);
					blockIndexWords[0]++;
				}
				derivedKey.sigBytes = keySize * 4;

				return derivedKey;
			}
		});

		/**
   * Computes the Password-Based Key Derivation Function 2.
   *
   * @param {WordArray|string} password The password.
   * @param {WordArray|string} salt A salt.
   * @param {Object} cfg (Optional) The configuration options to use for this computation.
   *
   * @return {WordArray} The derived key.
   *
   * @static
   *
   * @example
   *
   *     var key = CryptoJS.PBKDF2(password, salt);
   *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
   *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
   */
		C.PBKDF2 = function (password, salt, cfg) {
			return PBKDF2.create(cfg).compute(password, salt);
		};
	})();

	return CryptoJS.PBKDF2;
});

},{"./core":64,"./hmac":69,"./sha1":88}],84:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var StreamCipher = C_lib.StreamCipher;
		var C_algo = C.algo;

		// Reusable objects
		var S = [];
		var C_ = [];
		var G = [];

		/**
   * Rabbit stream cipher algorithm.
   *
   * This is a legacy version that neglected to convert the key to little-endian.
   * This error doesn't affect the cipher's security,
   * but it does affect its compatibility with other implementations.
   */
		var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
			_doReset: function _doReset() {
				// Shortcuts
				var K = this._key.words;
				var iv = this.cfg.iv;

				// Generate initial state values
				var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];

				// Generate initial counter values
				var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];

				// Carry bit
				this._b = 0;

				// Iterate the system four times
				for (var i = 0; i < 4; i++) {
					nextState.call(this);
				}

				// Modify the counters
				for (var i = 0; i < 8; i++) {
					C[i] ^= X[i + 4 & 7];
				}

				// IV setup
				if (iv) {
					// Shortcuts
					var IV = iv.words;
					var IV_0 = IV[0];
					var IV_1 = IV[1];

					// Generate four subvectors
					var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
					var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
					var i1 = i0 >>> 16 | i2 & 0xffff0000;
					var i3 = i2 << 16 | i0 & 0x0000ffff;

					// Modify counter values
					C[0] ^= i0;
					C[1] ^= i1;
					C[2] ^= i2;
					C[3] ^= i3;
					C[4] ^= i0;
					C[5] ^= i1;
					C[6] ^= i2;
					C[7] ^= i3;

					// Iterate the system four times
					for (var i = 0; i < 4; i++) {
						nextState.call(this);
					}
				}
			},

			_doProcessBlock: function _doProcessBlock(M, offset) {
				// Shortcut
				var X = this._X;

				// Iterate the system
				nextState.call(this);

				// Generate four keystream words
				S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
				S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
				S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
				S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;

				for (var i = 0; i < 4; i++) {
					// Swap endian
					S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;

					// Encrypt
					M[offset + i] ^= S[i];
				}
			},

			blockSize: 128 / 32,

			ivSize: 64 / 32
		});

		function nextState() {
			// Shortcuts
			var X = this._X;
			var C = this._C;

			// Save old counter values
			for (var i = 0; i < 8; i++) {
				C_[i] = C[i];
			}

			// Calculate new counter values
			C[0] = C[0] + 0x4d34d34d + this._b | 0;
			C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
			C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
			C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
			C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
			C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
			C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
			C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
			this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;

			// Calculate the g-values
			for (var i = 0; i < 8; i++) {
				var gx = X[i] + C[i];

				// Construct high and low argument for squaring
				var ga = gx & 0xffff;
				var gb = gx >>> 16;

				// Calculate high and low result of squaring
				var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
				var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);

				// High XOR low
				G[i] = gh ^ gl;
			}

			// Calculate new state values
			X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
			X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
			X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
			X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
			X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
			X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
			X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
			X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
		}

		/**
   * Shortcut functions to the cipher's object interface.
   *
   * @example
   *
   *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
   *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
   */
		C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
	})();

	return CryptoJS.RabbitLegacy;
});

},{"./cipher-core":63,"./core":64,"./enc-base64":65,"./evpkdf":67,"./md5":72}],85:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var StreamCipher = C_lib.StreamCipher;
		var C_algo = C.algo;

		// Reusable objects
		var S = [];
		var C_ = [];
		var G = [];

		/**
   * Rabbit stream cipher algorithm
   */
		var Rabbit = C_algo.Rabbit = StreamCipher.extend({
			_doReset: function _doReset() {
				// Shortcuts
				var K = this._key.words;
				var iv = this.cfg.iv;

				// Swap endian
				for (var i = 0; i < 4; i++) {
					K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff | (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;
				}

				// Generate initial state values
				var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];

				// Generate initial counter values
				var C = this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];

				// Carry bit
				this._b = 0;

				// Iterate the system four times
				for (var i = 0; i < 4; i++) {
					nextState.call(this);
				}

				// Modify the counters
				for (var i = 0; i < 8; i++) {
					C[i] ^= X[i + 4 & 7];
				}

				// IV setup
				if (iv) {
					// Shortcuts
					var IV = iv.words;
					var IV_0 = IV[0];
					var IV_1 = IV[1];

					// Generate four subvectors
					var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
					var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
					var i1 = i0 >>> 16 | i2 & 0xffff0000;
					var i3 = i2 << 16 | i0 & 0x0000ffff;

					// Modify counter values
					C[0] ^= i0;
					C[1] ^= i1;
					C[2] ^= i2;
					C[3] ^= i3;
					C[4] ^= i0;
					C[5] ^= i1;
					C[6] ^= i2;
					C[7] ^= i3;

					// Iterate the system four times
					for (var i = 0; i < 4; i++) {
						nextState.call(this);
					}
				}
			},

			_doProcessBlock: function _doProcessBlock(M, offset) {
				// Shortcut
				var X = this._X;

				// Iterate the system
				nextState.call(this);

				// Generate four keystream words
				S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
				S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
				S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
				S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;

				for (var i = 0; i < 4; i++) {
					// Swap endian
					S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;

					// Encrypt
					M[offset + i] ^= S[i];
				}
			},

			blockSize: 128 / 32,

			ivSize: 64 / 32
		});

		function nextState() {
			// Shortcuts
			var X = this._X;
			var C = this._C;

			// Save old counter values
			for (var i = 0; i < 8; i++) {
				C_[i] = C[i];
			}

			// Calculate new counter values
			C[0] = C[0] + 0x4d34d34d + this._b | 0;
			C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
			C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
			C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
			C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
			C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
			C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
			C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
			this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;

			// Calculate the g-values
			for (var i = 0; i < 8; i++) {
				var gx = X[i] + C[i];

				// Construct high and low argument for squaring
				var ga = gx & 0xffff;
				var gb = gx >>> 16;

				// Calculate high and low result of squaring
				var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
				var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);

				// High XOR low
				G[i] = gh ^ gl;
			}

			// Calculate new state values
			X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
			X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
			X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
			X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
			X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
			X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
			X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
			X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
		}

		/**
   * Shortcut functions to the cipher's object interface.
   *
   * @example
   *
   *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
   *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
   */
		C.Rabbit = StreamCipher._createHelper(Rabbit);
	})();

	return CryptoJS.Rabbit;
});

},{"./cipher-core":63,"./core":64,"./enc-base64":65,"./evpkdf":67,"./md5":72}],86:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var StreamCipher = C_lib.StreamCipher;
		var C_algo = C.algo;

		/**
   * RC4 stream cipher algorithm.
   */
		var RC4 = C_algo.RC4 = StreamCipher.extend({
			_doReset: function _doReset() {
				// Shortcuts
				var key = this._key;
				var keyWords = key.words;
				var keySigBytes = key.sigBytes;

				// Init sbox
				var S = this._S = [];
				for (var i = 0; i < 256; i++) {
					S[i] = i;
				}

				// Key setup
				for (var i = 0, j = 0; i < 256; i++) {
					var keyByteIndex = i % keySigBytes;
					var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;

					j = (j + S[i] + keyByte) % 256;

					// Swap
					var t = S[i];
					S[i] = S[j];
					S[j] = t;
				}

				// Counters
				this._i = this._j = 0;
			},

			_doProcessBlock: function _doProcessBlock(M, offset) {
				M[offset] ^= generateKeystreamWord.call(this);
			},

			keySize: 256 / 32,

			ivSize: 0
		});

		function generateKeystreamWord() {
			// Shortcuts
			var S = this._S;
			var i = this._i;
			var j = this._j;

			// Generate keystream word
			var keystreamWord = 0;
			for (var n = 0; n < 4; n++) {
				i = (i + 1) % 256;
				j = (j + S[i]) % 256;

				// Swap
				var t = S[i];
				S[i] = S[j];
				S[j] = t;

				keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
			}

			// Update counters
			this._i = i;
			this._j = j;

			return keystreamWord;
		}

		/**
   * Shortcut functions to the cipher's object interface.
   *
   * @example
   *
   *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
   *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
   */
		C.RC4 = StreamCipher._createHelper(RC4);

		/**
   * Modified RC4 stream cipher algorithm.
   */
		var RC4Drop = C_algo.RC4Drop = RC4.extend({
			/**
    * Configuration options.
    *
    * @property {number} drop The number of keystream words to drop. Default 192
    */
			cfg: RC4.cfg.extend({
				drop: 192
			}),

			_doReset: function _doReset() {
				RC4._doReset.call(this);

				// Drop
				for (var i = this.cfg.drop; i > 0; i--) {
					generateKeystreamWord.call(this);
				}
			}
		});

		/**
   * Shortcut functions to the cipher's object interface.
   *
   * @example
   *
   *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
   *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
   */
		C.RC4Drop = StreamCipher._createHelper(RC4Drop);
	})();

	return CryptoJS.RC4;
});

},{"./cipher-core":63,"./core":64,"./enc-base64":65,"./evpkdf":67,"./md5":72}],87:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	/** @preserve
 (c) 2012 by Cédric Mesnil. All rights reserved.
 	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
     - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

	(function (Math) {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var WordArray = C_lib.WordArray;
		var Hasher = C_lib.Hasher;
		var C_algo = C.algo;

		// Constants table
		var _zl = WordArray.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);
		var _zr = WordArray.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);
		var _sl = WordArray.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);
		var _sr = WordArray.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);

		var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
		var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

		/**
   * RIPEMD160 hash algorithm.
   */
		var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
			_doReset: function _doReset() {
				this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
			},

			_doProcessBlock: function _doProcessBlock(M, offset) {

				// Swap endian
				for (var i = 0; i < 16; i++) {
					// Shortcuts
					var offset_i = offset + i;
					var M_offset_i = M[offset_i];

					// Swap
					M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
				}
				// Shortcut
				var H = this._hash.words;
				var hl = _hl.words;
				var hr = _hr.words;
				var zl = _zl.words;
				var zr = _zr.words;
				var sl = _sl.words;
				var sr = _sr.words;

				// Working variables
				var al, bl, cl, dl, el;
				var ar, br, cr, dr, er;

				ar = al = H[0];
				br = bl = H[1];
				cr = cl = H[2];
				dr = dl = H[3];
				er = el = H[4];
				// Computation
				var t;
				for (var i = 0; i < 80; i += 1) {
					t = al + M[offset + zl[i]] | 0;
					if (i < 16) {
						t += f1(bl, cl, dl) + hl[0];
					} else if (i < 32) {
						t += f2(bl, cl, dl) + hl[1];
					} else if (i < 48) {
						t += f3(bl, cl, dl) + hl[2];
					} else if (i < 64) {
						t += f4(bl, cl, dl) + hl[3];
					} else {
						// if (i<80) {
						t += f5(bl, cl, dl) + hl[4];
					}
					t = t | 0;
					t = rotl(t, sl[i]);
					t = t + el | 0;
					al = el;
					el = dl;
					dl = rotl(cl, 10);
					cl = bl;
					bl = t;

					t = ar + M[offset + zr[i]] | 0;
					if (i < 16) {
						t += f5(br, cr, dr) + hr[0];
					} else if (i < 32) {
						t += f4(br, cr, dr) + hr[1];
					} else if (i < 48) {
						t += f3(br, cr, dr) + hr[2];
					} else if (i < 64) {
						t += f2(br, cr, dr) + hr[3];
					} else {
						// if (i<80) {
						t += f1(br, cr, dr) + hr[4];
					}
					t = t | 0;
					t = rotl(t, sr[i]);
					t = t + er | 0;
					ar = er;
					er = dr;
					dr = rotl(cr, 10);
					cr = br;
					br = t;
				}
				// Intermediate hash value
				t = H[1] + cl + dr | 0;
				H[1] = H[2] + dl + er | 0;
				H[2] = H[3] + el + ar | 0;
				H[3] = H[4] + al + br | 0;
				H[4] = H[0] + bl + cr | 0;
				H[0] = t;
			},

			_doFinalize: function _doFinalize() {
				// Shortcuts
				var data = this._data;
				var dataWords = data.words;

				var nBitsTotal = this._nDataBytes * 8;
				var nBitsLeft = data.sigBytes * 8;

				// Add padding
				dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
				dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;
				data.sigBytes = (dataWords.length + 1) * 4;

				// Hash final blocks
				this._process();

				// Shortcuts
				var hash = this._hash;
				var H = hash.words;

				// Swap endian
				for (var i = 0; i < 5; i++) {
					// Shortcut
					var H_i = H[i];

					// Swap
					H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
				}

				// Return final computed hash
				return hash;
			},

			clone: function clone() {
				var clone = Hasher.clone.call(this);
				clone._hash = this._hash.clone();

				return clone;
			}
		});

		function f1(x, y, z) {
			return x ^ y ^ z;
		}

		function f2(x, y, z) {
			return x & y | ~x & z;
		}

		function f3(x, y, z) {
			return (x | ~y) ^ z;
		}

		function f4(x, y, z) {
			return x & z | y & ~z;
		}

		function f5(x, y, z) {
			return x ^ (y | ~z);
		}

		function rotl(x, n) {
			return x << n | x >>> 32 - n;
		}

		/**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.RIPEMD160('message');
   *     var hash = CryptoJS.RIPEMD160(wordArray);
   */
		C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

		/**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
   */
		C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
	})(Math);

	return CryptoJS.RIPEMD160;
});

},{"./core":64}],88:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var WordArray = C_lib.WordArray;
		var Hasher = C_lib.Hasher;
		var C_algo = C.algo;

		// Reusable object
		var W = [];

		/**
   * SHA-1 hash algorithm.
   */
		var SHA1 = C_algo.SHA1 = Hasher.extend({
			_doReset: function _doReset() {
				this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
			},

			_doProcessBlock: function _doProcessBlock(M, offset) {
				// Shortcut
				var H = this._hash.words;

				// Working variables
				var a = H[0];
				var b = H[1];
				var c = H[2];
				var d = H[3];
				var e = H[4];

				// Computation
				for (var i = 0; i < 80; i++) {
					if (i < 16) {
						W[i] = M[offset + i] | 0;
					} else {
						var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
						W[i] = n << 1 | n >>> 31;
					}

					var t = (a << 5 | a >>> 27) + e + W[i];
					if (i < 20) {
						t += (b & c | ~b & d) + 0x5a827999;
					} else if (i < 40) {
						t += (b ^ c ^ d) + 0x6ed9eba1;
					} else if (i < 60) {
						t += (b & c | b & d | c & d) - 0x70e44324;
					} else /* if (i < 80) */{
							t += (b ^ c ^ d) - 0x359d3e2a;
						}

					e = d;
					d = c;
					c = b << 30 | b >>> 2;
					b = a;
					a = t;
				}

				// Intermediate hash value
				H[0] = H[0] + a | 0;
				H[1] = H[1] + b | 0;
				H[2] = H[2] + c | 0;
				H[3] = H[3] + d | 0;
				H[4] = H[4] + e | 0;
			},

			_doFinalize: function _doFinalize() {
				// Shortcuts
				var data = this._data;
				var dataWords = data.words;

				var nBitsTotal = this._nDataBytes * 8;
				var nBitsLeft = data.sigBytes * 8;

				// Add padding
				dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
				dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
				dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
				data.sigBytes = dataWords.length * 4;

				// Hash final blocks
				this._process();

				// Return final computed hash
				return this._hash;
			},

			clone: function clone() {
				var clone = Hasher.clone.call(this);
				clone._hash = this._hash.clone();

				return clone;
			}
		});

		/**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.SHA1('message');
   *     var hash = CryptoJS.SHA1(wordArray);
   */
		C.SHA1 = Hasher._createHelper(SHA1);

		/**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacSHA1(message, key);
   */
		C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
	})();

	return CryptoJS.SHA1;
});

},{"./core":64}],89:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./sha256"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./sha256"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var WordArray = C_lib.WordArray;
		var C_algo = C.algo;
		var SHA256 = C_algo.SHA256;

		/**
   * SHA-224 hash algorithm.
   */
		var SHA224 = C_algo.SHA224 = SHA256.extend({
			_doReset: function _doReset() {
				this._hash = new WordArray.init([0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);
			},

			_doFinalize: function _doFinalize() {
				var hash = SHA256._doFinalize.call(this);

				hash.sigBytes -= 4;

				return hash;
			}
		});

		/**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.SHA224('message');
   *     var hash = CryptoJS.SHA224(wordArray);
   */
		C.SHA224 = SHA256._createHelper(SHA224);

		/**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacSHA224(message, key);
   */
		C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
	})();

	return CryptoJS.SHA224;
});

},{"./core":64,"./sha256":90}],90:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function (Math) {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var WordArray = C_lib.WordArray;
		var Hasher = C_lib.Hasher;
		var C_algo = C.algo;

		// Initialization and round constants tables
		var H = [];
		var K = [];

		// Compute constants
		(function () {
			function isPrime(n) {
				var sqrtN = Math.sqrt(n);
				for (var factor = 2; factor <= sqrtN; factor++) {
					if (!(n % factor)) {
						return false;
					}
				}

				return true;
			}

			function getFractionalBits(n) {
				return (n - (n | 0)) * 0x100000000 | 0;
			}

			var n = 2;
			var nPrime = 0;
			while (nPrime < 64) {
				if (isPrime(n)) {
					if (nPrime < 8) {
						H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
					}
					K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

					nPrime++;
				}

				n++;
			}
		})();

		// Reusable object
		var W = [];

		/**
   * SHA-256 hash algorithm.
   */
		var SHA256 = C_algo.SHA256 = Hasher.extend({
			_doReset: function _doReset() {
				this._hash = new WordArray.init(H.slice(0));
			},

			_doProcessBlock: function _doProcessBlock(M, offset) {
				// Shortcut
				var H = this._hash.words;

				// Working variables
				var a = H[0];
				var b = H[1];
				var c = H[2];
				var d = H[3];
				var e = H[4];
				var f = H[5];
				var g = H[6];
				var h = H[7];

				// Computation
				for (var i = 0; i < 64; i++) {
					if (i < 16) {
						W[i] = M[offset + i] | 0;
					} else {
						var gamma0x = W[i - 15];
						var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;

						var gamma1x = W[i - 2];
						var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;

						W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
					}

					var ch = e & f ^ ~e & g;
					var maj = a & b ^ a & c ^ b & c;

					var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
					var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);

					var t1 = h + sigma1 + ch + K[i] + W[i];
					var t2 = sigma0 + maj;

					h = g;
					g = f;
					f = e;
					e = d + t1 | 0;
					d = c;
					c = b;
					b = a;
					a = t1 + t2 | 0;
				}

				// Intermediate hash value
				H[0] = H[0] + a | 0;
				H[1] = H[1] + b | 0;
				H[2] = H[2] + c | 0;
				H[3] = H[3] + d | 0;
				H[4] = H[4] + e | 0;
				H[5] = H[5] + f | 0;
				H[6] = H[6] + g | 0;
				H[7] = H[7] + h | 0;
			},

			_doFinalize: function _doFinalize() {
				// Shortcuts
				var data = this._data;
				var dataWords = data.words;

				var nBitsTotal = this._nDataBytes * 8;
				var nBitsLeft = data.sigBytes * 8;

				// Add padding
				dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
				dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
				dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
				data.sigBytes = dataWords.length * 4;

				// Hash final blocks
				this._process();

				// Return final computed hash
				return this._hash;
			},

			clone: function clone() {
				var clone = Hasher.clone.call(this);
				clone._hash = this._hash.clone();

				return clone;
			}
		});

		/**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.SHA256('message');
   *     var hash = CryptoJS.SHA256(wordArray);
   */
		C.SHA256 = Hasher._createHelper(SHA256);

		/**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacSHA256(message, key);
   */
		C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
	})(Math);

	return CryptoJS.SHA256;
});

},{"./core":64}],91:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function (Math) {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var WordArray = C_lib.WordArray;
		var Hasher = C_lib.Hasher;
		var C_x64 = C.x64;
		var X64Word = C_x64.Word;
		var C_algo = C.algo;

		// Constants tables
		var RHO_OFFSETS = [];
		var PI_INDEXES = [];
		var ROUND_CONSTANTS = [];

		// Compute Constants
		(function () {
			// Compute rho offset constants
			var x = 1,
			    y = 0;
			for (var t = 0; t < 24; t++) {
				RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;

				var newX = y % 5;
				var newY = (2 * x + 3 * y) % 5;
				x = newX;
				y = newY;
			}

			// Compute pi index constants
			for (var x = 0; x < 5; x++) {
				for (var y = 0; y < 5; y++) {
					PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
				}
			}

			// Compute round constants
			var LFSR = 0x01;
			for (var i = 0; i < 24; i++) {
				var roundConstantMsw = 0;
				var roundConstantLsw = 0;

				for (var j = 0; j < 7; j++) {
					if (LFSR & 0x01) {
						var bitPosition = (1 << j) - 1;
						if (bitPosition < 32) {
							roundConstantLsw ^= 1 << bitPosition;
						} else /* if (bitPosition >= 32) */{
								roundConstantMsw ^= 1 << bitPosition - 32;
							}
					}

					// Compute next LFSR
					if (LFSR & 0x80) {
						// Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
						LFSR = LFSR << 1 ^ 0x71;
					} else {
						LFSR <<= 1;
					}
				}

				ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
			}
		})();

		// Reusable objects for temporary values
		var T = [];
		(function () {
			for (var i = 0; i < 25; i++) {
				T[i] = X64Word.create();
			}
		})();

		/**
   * SHA-3 hash algorithm.
   */
		var SHA3 = C_algo.SHA3 = Hasher.extend({
			/**
    * Configuration options.
    *
    * @property {number} outputLength
    *   The desired number of bits in the output hash.
    *   Only values permitted are: 224, 256, 384, 512.
    *   Default: 512
    */
			cfg: Hasher.cfg.extend({
				outputLength: 512
			}),

			_doReset: function _doReset() {
				var state = this._state = [];
				for (var i = 0; i < 25; i++) {
					state[i] = new X64Word.init();
				}

				this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
			},

			_doProcessBlock: function _doProcessBlock(M, offset) {
				// Shortcuts
				var state = this._state;
				var nBlockSizeLanes = this.blockSize / 2;

				// Absorb
				for (var i = 0; i < nBlockSizeLanes; i++) {
					// Shortcuts
					var M2i = M[offset + 2 * i];
					var M2i1 = M[offset + 2 * i + 1];

					// Swap endian
					M2i = (M2i << 8 | M2i >>> 24) & 0x00ff00ff | (M2i << 24 | M2i >>> 8) & 0xff00ff00;
					M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff | (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00;

					// Absorb message into state
					var lane = state[i];
					lane.high ^= M2i1;
					lane.low ^= M2i;
				}

				// Rounds
				for (var round = 0; round < 24; round++) {
					// Theta
					for (var x = 0; x < 5; x++) {
						// Mix column lanes
						var tMsw = 0,
						    tLsw = 0;
						for (var y = 0; y < 5; y++) {
							var lane = state[x + 5 * y];
							tMsw ^= lane.high;
							tLsw ^= lane.low;
						}

						// Temporary values
						var Tx = T[x];
						Tx.high = tMsw;
						Tx.low = tLsw;
					}
					for (var x = 0; x < 5; x++) {
						// Shortcuts
						var Tx4 = T[(x + 4) % 5];
						var Tx1 = T[(x + 1) % 5];
						var Tx1Msw = Tx1.high;
						var Tx1Lsw = Tx1.low;

						// Mix surrounding columns
						var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
						var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
						for (var y = 0; y < 5; y++) {
							var lane = state[x + 5 * y];
							lane.high ^= tMsw;
							lane.low ^= tLsw;
						}
					}

					// Rho Pi
					for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
						// Shortcuts
						var lane = state[laneIndex];
						var laneMsw = lane.high;
						var laneLsw = lane.low;
						var rhoOffset = RHO_OFFSETS[laneIndex];

						// Rotate lanes
						if (rhoOffset < 32) {
							var tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
							var tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
						} else /* if (rhoOffset >= 32) */{
								var tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
								var tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
							}

						// Transpose lanes
						var TPiLane = T[PI_INDEXES[laneIndex]];
						TPiLane.high = tMsw;
						TPiLane.low = tLsw;
					}

					// Rho pi at x = y = 0
					var T0 = T[0];
					var state0 = state[0];
					T0.high = state0.high;
					T0.low = state0.low;

					// Chi
					for (var x = 0; x < 5; x++) {
						for (var y = 0; y < 5; y++) {
							// Shortcuts
							var laneIndex = x + 5 * y;
							var lane = state[laneIndex];
							var TLane = T[laneIndex];
							var Tx1Lane = T[(x + 1) % 5 + 5 * y];
							var Tx2Lane = T[(x + 2) % 5 + 5 * y];

							// Mix rows
							lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
							lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
						}
					}

					// Iota
					var lane = state[0];
					var roundConstant = ROUND_CONSTANTS[round];
					lane.high ^= roundConstant.high;
					lane.low ^= roundConstant.low;;
				}
			},

			_doFinalize: function _doFinalize() {
				// Shortcuts
				var data = this._data;
				var dataWords = data.words;
				var nBitsTotal = this._nDataBytes * 8;
				var nBitsLeft = data.sigBytes * 8;
				var blockSizeBits = this.blockSize * 32;

				// Add padding
				dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;
				dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;
				data.sigBytes = dataWords.length * 4;

				// Hash final blocks
				this._process();

				// Shortcuts
				var state = this._state;
				var outputLengthBytes = this.cfg.outputLength / 8;
				var outputLengthLanes = outputLengthBytes / 8;

				// Squeeze
				var hashWords = [];
				for (var i = 0; i < outputLengthLanes; i++) {
					// Shortcuts
					var lane = state[i];
					var laneMsw = lane.high;
					var laneLsw = lane.low;

					// Swap endian
					laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff | (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;
					laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff | (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00;

					// Squeeze state to retrieve hash
					hashWords.push(laneLsw);
					hashWords.push(laneMsw);
				}

				// Return final computed hash
				return new WordArray.init(hashWords, outputLengthBytes);
			},

			clone: function clone() {
				var clone = Hasher.clone.call(this);

				var state = clone._state = this._state.slice(0);
				for (var i = 0; i < 25; i++) {
					state[i] = state[i].clone();
				}

				return clone;
			}
		});

		/**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.SHA3('message');
   *     var hash = CryptoJS.SHA3(wordArray);
   */
		C.SHA3 = Hasher._createHelper(SHA3);

		/**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacSHA3(message, key);
   */
		C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
	})(Math);

	return CryptoJS.SHA3;
});

},{"./core":64,"./x64-core":95}],92:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"), require("./sha512"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core", "./sha512"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_x64 = C.x64;
		var X64Word = C_x64.Word;
		var X64WordArray = C_x64.WordArray;
		var C_algo = C.algo;
		var SHA512 = C_algo.SHA512;

		/**
   * SHA-384 hash algorithm.
   */
		var SHA384 = C_algo.SHA384 = SHA512.extend({
			_doReset: function _doReset() {
				this._hash = new X64WordArray.init([new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507), new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939), new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511), new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)]);
			},

			_doFinalize: function _doFinalize() {
				var hash = SHA512._doFinalize.call(this);

				hash.sigBytes -= 16;

				return hash;
			}
		});

		/**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.SHA384('message');
   *     var hash = CryptoJS.SHA384(wordArray);
   */
		C.SHA384 = SHA512._createHelper(SHA384);

		/**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacSHA384(message, key);
   */
		C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
	})();

	return CryptoJS.SHA384;
});

},{"./core":64,"./sha512":93,"./x64-core":95}],93:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./x64-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./x64-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var Hasher = C_lib.Hasher;
		var C_x64 = C.x64;
		var X64Word = C_x64.Word;
		var X64WordArray = C_x64.WordArray;
		var C_algo = C.algo;

		function X64Word_create() {
			return X64Word.create.apply(X64Word, arguments);
		}

		// Constants
		var K = [X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd), X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc), X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019), X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118), X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe), X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2), X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1), X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694), X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3), X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65), X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483), X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5), X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210), X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4), X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725), X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70), X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926), X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df), X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8), X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b), X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001), X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30), X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910), X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8), X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53), X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8), X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb), X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3), X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60), X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec), X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9), X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b), X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207), X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178), X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6), X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b), X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493), X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c), X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a), X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)];

		// Reusable objects
		var W = [];
		(function () {
			for (var i = 0; i < 80; i++) {
				W[i] = X64Word_create();
			}
		})();

		/**
   * SHA-512 hash algorithm.
   */
		var SHA512 = C_algo.SHA512 = Hasher.extend({
			_doReset: function _doReset() {
				this._hash = new X64WordArray.init([new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b), new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1), new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f), new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);
			},

			_doProcessBlock: function _doProcessBlock(M, offset) {
				// Shortcuts
				var H = this._hash.words;

				var H0 = H[0];
				var H1 = H[1];
				var H2 = H[2];
				var H3 = H[3];
				var H4 = H[4];
				var H5 = H[5];
				var H6 = H[6];
				var H7 = H[7];

				var H0h = H0.high;
				var H0l = H0.low;
				var H1h = H1.high;
				var H1l = H1.low;
				var H2h = H2.high;
				var H2l = H2.low;
				var H3h = H3.high;
				var H3l = H3.low;
				var H4h = H4.high;
				var H4l = H4.low;
				var H5h = H5.high;
				var H5l = H5.low;
				var H6h = H6.high;
				var H6l = H6.low;
				var H7h = H7.high;
				var H7l = H7.low;

				// Working variables
				var ah = H0h;
				var al = H0l;
				var bh = H1h;
				var bl = H1l;
				var ch = H2h;
				var cl = H2l;
				var dh = H3h;
				var dl = H3l;
				var eh = H4h;
				var el = H4l;
				var fh = H5h;
				var fl = H5l;
				var gh = H6h;
				var gl = H6l;
				var hh = H7h;
				var hl = H7l;

				// Rounds
				for (var i = 0; i < 80; i++) {
					// Shortcut
					var Wi = W[i];

					// Extend message
					if (i < 16) {
						var Wih = Wi.high = M[offset + i * 2] | 0;
						var Wil = Wi.low = M[offset + i * 2 + 1] | 0;
					} else {
						// Gamma0
						var gamma0x = W[i - 15];
						var gamma0xh = gamma0x.high;
						var gamma0xl = gamma0x.low;
						var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
						var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);

						// Gamma1
						var gamma1x = W[i - 2];
						var gamma1xh = gamma1x.high;
						var gamma1xl = gamma1x.low;
						var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
						var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);

						// W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
						var Wi7 = W[i - 7];
						var Wi7h = Wi7.high;
						var Wi7l = Wi7.low;

						var Wi16 = W[i - 16];
						var Wi16h = Wi16.high;
						var Wi16l = Wi16.low;

						var Wil = gamma0l + Wi7l;
						var Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
						var Wil = Wil + gamma1l;
						var Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
						var Wil = Wil + Wi16l;
						var Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);

						Wi.high = Wih;
						Wi.low = Wil;
					}

					var chh = eh & fh ^ ~eh & gh;
					var chl = el & fl ^ ~el & gl;
					var majh = ah & bh ^ ah & ch ^ bh & ch;
					var majl = al & bl ^ al & cl ^ bl & cl;

					var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
					var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
					var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
					var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);

					// t1 = h + sigma1 + ch + K[i] + W[i]
					var Ki = K[i];
					var Kih = Ki.high;
					var Kil = Ki.low;

					var t1l = hl + sigma1l;
					var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
					var t1l = t1l + chl;
					var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
					var t1l = t1l + Kil;
					var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
					var t1l = t1l + Wil;
					var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);

					// t2 = sigma0 + maj
					var t2l = sigma0l + majl;
					var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);

					// Update working variables
					hh = gh;
					hl = gl;
					gh = fh;
					gl = fl;
					fh = eh;
					fl = el;
					el = dl + t1l | 0;
					eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
					dh = ch;
					dl = cl;
					ch = bh;
					cl = bl;
					bh = ah;
					bl = al;
					al = t1l + t2l | 0;
					ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
				}

				// Intermediate hash value
				H0l = H0.low = H0l + al;
				H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
				H1l = H1.low = H1l + bl;
				H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
				H2l = H2.low = H2l + cl;
				H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
				H3l = H3.low = H3l + dl;
				H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
				H4l = H4.low = H4l + el;
				H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
				H5l = H5.low = H5l + fl;
				H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
				H6l = H6.low = H6l + gl;
				H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
				H7l = H7.low = H7l + hl;
				H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
			},

			_doFinalize: function _doFinalize() {
				// Shortcuts
				var data = this._data;
				var dataWords = data.words;

				var nBitsTotal = this._nDataBytes * 8;
				var nBitsLeft = data.sigBytes * 8;

				// Add padding
				dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
				dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
				dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
				data.sigBytes = dataWords.length * 4;

				// Hash final blocks
				this._process();

				// Convert hash to 32-bit word array before returning
				var hash = this._hash.toX32();

				// Return final computed hash
				return hash;
			},

			clone: function clone() {
				var clone = Hasher.clone.call(this);
				clone._hash = this._hash.clone();

				return clone;
			},

			blockSize: 1024 / 32
		});

		/**
   * Shortcut function to the hasher's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   *
   * @return {WordArray} The hash.
   *
   * @static
   *
   * @example
   *
   *     var hash = CryptoJS.SHA512('message');
   *     var hash = CryptoJS.SHA512(wordArray);
   */
		C.SHA512 = Hasher._createHelper(SHA512);

		/**
   * Shortcut function to the HMAC's object interface.
   *
   * @param {WordArray|string} message The message to hash.
   * @param {WordArray|string} key The secret key.
   *
   * @return {WordArray} The HMAC.
   *
   * @static
   *
   * @example
   *
   *     var hmac = CryptoJS.HmacSHA512(message, key);
   */
		C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
	})();

	return CryptoJS.SHA512;
});

},{"./core":64,"./x64-core":95}],94:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory, undef) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"), require("./enc-base64"), require("./md5"), require("./evpkdf"), require("./cipher-core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function () {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var WordArray = C_lib.WordArray;
		var BlockCipher = C_lib.BlockCipher;
		var C_algo = C.algo;

		// Permuted Choice 1 constants
		var PC1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4];

		// Permuted Choice 2 constants
		var PC2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32];

		// Cumulative bit shift constants
		var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

		// SBOXes and round permutation constants
		var SBOX_P = [{
			0x0: 0x808200,
			0x10000000: 0x8000,
			0x20000000: 0x808002,
			0x30000000: 0x2,
			0x40000000: 0x200,
			0x50000000: 0x808202,
			0x60000000: 0x800202,
			0x70000000: 0x800000,
			0x80000000: 0x202,
			0x90000000: 0x800200,
			0xa0000000: 0x8200,
			0xb0000000: 0x808000,
			0xc0000000: 0x8002,
			0xd0000000: 0x800002,
			0xe0000000: 0x0,
			0xf0000000: 0x8202,
			0x8000000: 0x0,
			0x18000000: 0x808202,
			0x28000000: 0x8202,
			0x38000000: 0x8000,
			0x48000000: 0x808200,
			0x58000000: 0x200,
			0x68000000: 0x808002,
			0x78000000: 0x2,
			0x88000000: 0x800200,
			0x98000000: 0x8200,
			0xa8000000: 0x808000,
			0xb8000000: 0x800202,
			0xc8000000: 0x800002,
			0xd8000000: 0x8002,
			0xe8000000: 0x202,
			0xf8000000: 0x800000,
			0x1: 0x8000,
			0x10000001: 0x2,
			0x20000001: 0x808200,
			0x30000001: 0x800000,
			0x40000001: 0x808002,
			0x50000001: 0x8200,
			0x60000001: 0x200,
			0x70000001: 0x800202,
			0x80000001: 0x808202,
			0x90000001: 0x808000,
			0xa0000001: 0x800002,
			0xb0000001: 0x8202,
			0xc0000001: 0x202,
			0xd0000001: 0x800200,
			0xe0000001: 0x8002,
			0xf0000001: 0x0,
			0x8000001: 0x808202,
			0x18000001: 0x808000,
			0x28000001: 0x800000,
			0x38000001: 0x200,
			0x48000001: 0x8000,
			0x58000001: 0x800002,
			0x68000001: 0x2,
			0x78000001: 0x8202,
			0x88000001: 0x8002,
			0x98000001: 0x800202,
			0xa8000001: 0x202,
			0xb8000001: 0x808200,
			0xc8000001: 0x800200,
			0xd8000001: 0x0,
			0xe8000001: 0x8200,
			0xf8000001: 0x808002
		}, {
			0x0: 0x40084010,
			0x1000000: 0x4000,
			0x2000000: 0x80000,
			0x3000000: 0x40080010,
			0x4000000: 0x40000010,
			0x5000000: 0x40084000,
			0x6000000: 0x40004000,
			0x7000000: 0x10,
			0x8000000: 0x84000,
			0x9000000: 0x40004010,
			0xa000000: 0x40000000,
			0xb000000: 0x84010,
			0xc000000: 0x80010,
			0xd000000: 0x0,
			0xe000000: 0x4010,
			0xf000000: 0x40080000,
			0x800000: 0x40004000,
			0x1800000: 0x84010,
			0x2800000: 0x10,
			0x3800000: 0x40004010,
			0x4800000: 0x40084010,
			0x5800000: 0x40000000,
			0x6800000: 0x80000,
			0x7800000: 0x40080010,
			0x8800000: 0x80010,
			0x9800000: 0x0,
			0xa800000: 0x4000,
			0xb800000: 0x40080000,
			0xc800000: 0x40000010,
			0xd800000: 0x84000,
			0xe800000: 0x40084000,
			0xf800000: 0x4010,
			0x10000000: 0x0,
			0x11000000: 0x40080010,
			0x12000000: 0x40004010,
			0x13000000: 0x40084000,
			0x14000000: 0x40080000,
			0x15000000: 0x10,
			0x16000000: 0x84010,
			0x17000000: 0x4000,
			0x18000000: 0x4010,
			0x19000000: 0x80000,
			0x1a000000: 0x80010,
			0x1b000000: 0x40000010,
			0x1c000000: 0x84000,
			0x1d000000: 0x40004000,
			0x1e000000: 0x40000000,
			0x1f000000: 0x40084010,
			0x10800000: 0x84010,
			0x11800000: 0x80000,
			0x12800000: 0x40080000,
			0x13800000: 0x4000,
			0x14800000: 0x40004000,
			0x15800000: 0x40084010,
			0x16800000: 0x10,
			0x17800000: 0x40000000,
			0x18800000: 0x40084000,
			0x19800000: 0x40000010,
			0x1a800000: 0x40004010,
			0x1b800000: 0x80010,
			0x1c800000: 0x0,
			0x1d800000: 0x4010,
			0x1e800000: 0x40080010,
			0x1f800000: 0x84000
		}, {
			0x0: 0x104,
			0x100000: 0x0,
			0x200000: 0x4000100,
			0x300000: 0x10104,
			0x400000: 0x10004,
			0x500000: 0x4000004,
			0x600000: 0x4010104,
			0x700000: 0x4010000,
			0x800000: 0x4000000,
			0x900000: 0x4010100,
			0xa00000: 0x10100,
			0xb00000: 0x4010004,
			0xc00000: 0x4000104,
			0xd00000: 0x10000,
			0xe00000: 0x4,
			0xf00000: 0x100,
			0x80000: 0x4010100,
			0x180000: 0x4010004,
			0x280000: 0x0,
			0x380000: 0x4000100,
			0x480000: 0x4000004,
			0x580000: 0x10000,
			0x680000: 0x10004,
			0x780000: 0x104,
			0x880000: 0x4,
			0x980000: 0x100,
			0xa80000: 0x4010000,
			0xb80000: 0x10104,
			0xc80000: 0x10100,
			0xd80000: 0x4000104,
			0xe80000: 0x4010104,
			0xf80000: 0x4000000,
			0x1000000: 0x4010100,
			0x1100000: 0x10004,
			0x1200000: 0x10000,
			0x1300000: 0x4000100,
			0x1400000: 0x100,
			0x1500000: 0x4010104,
			0x1600000: 0x4000004,
			0x1700000: 0x0,
			0x1800000: 0x4000104,
			0x1900000: 0x4000000,
			0x1a00000: 0x4,
			0x1b00000: 0x10100,
			0x1c00000: 0x4010000,
			0x1d00000: 0x104,
			0x1e00000: 0x10104,
			0x1f00000: 0x4010004,
			0x1080000: 0x4000000,
			0x1180000: 0x104,
			0x1280000: 0x4010100,
			0x1380000: 0x0,
			0x1480000: 0x10004,
			0x1580000: 0x4000100,
			0x1680000: 0x100,
			0x1780000: 0x4010004,
			0x1880000: 0x10000,
			0x1980000: 0x4010104,
			0x1a80000: 0x10104,
			0x1b80000: 0x4000004,
			0x1c80000: 0x4000104,
			0x1d80000: 0x4010000,
			0x1e80000: 0x4,
			0x1f80000: 0x10100
		}, {
			0x0: 0x80401000,
			0x10000: 0x80001040,
			0x20000: 0x401040,
			0x30000: 0x80400000,
			0x40000: 0x0,
			0x50000: 0x401000,
			0x60000: 0x80000040,
			0x70000: 0x400040,
			0x80000: 0x80000000,
			0x90000: 0x400000,
			0xa0000: 0x40,
			0xb0000: 0x80001000,
			0xc0000: 0x80400040,
			0xd0000: 0x1040,
			0xe0000: 0x1000,
			0xf0000: 0x80401040,
			0x8000: 0x80001040,
			0x18000: 0x40,
			0x28000: 0x80400040,
			0x38000: 0x80001000,
			0x48000: 0x401000,
			0x58000: 0x80401040,
			0x68000: 0x0,
			0x78000: 0x80400000,
			0x88000: 0x1000,
			0x98000: 0x80401000,
			0xa8000: 0x400000,
			0xb8000: 0x1040,
			0xc8000: 0x80000000,
			0xd8000: 0x400040,
			0xe8000: 0x401040,
			0xf8000: 0x80000040,
			0x100000: 0x400040,
			0x110000: 0x401000,
			0x120000: 0x80000040,
			0x130000: 0x0,
			0x140000: 0x1040,
			0x150000: 0x80400040,
			0x160000: 0x80401000,
			0x170000: 0x80001040,
			0x180000: 0x80401040,
			0x190000: 0x80000000,
			0x1a0000: 0x80400000,
			0x1b0000: 0x401040,
			0x1c0000: 0x80001000,
			0x1d0000: 0x400000,
			0x1e0000: 0x40,
			0x1f0000: 0x1000,
			0x108000: 0x80400000,
			0x118000: 0x80401040,
			0x128000: 0x0,
			0x138000: 0x401000,
			0x148000: 0x400040,
			0x158000: 0x80000000,
			0x168000: 0x80001040,
			0x178000: 0x40,
			0x188000: 0x80000040,
			0x198000: 0x1000,
			0x1a8000: 0x80001000,
			0x1b8000: 0x80400040,
			0x1c8000: 0x1040,
			0x1d8000: 0x80401000,
			0x1e8000: 0x400000,
			0x1f8000: 0x401040
		}, {
			0x0: 0x80,
			0x1000: 0x1040000,
			0x2000: 0x40000,
			0x3000: 0x20000000,
			0x4000: 0x20040080,
			0x5000: 0x1000080,
			0x6000: 0x21000080,
			0x7000: 0x40080,
			0x8000: 0x1000000,
			0x9000: 0x20040000,
			0xa000: 0x20000080,
			0xb000: 0x21040080,
			0xc000: 0x21040000,
			0xd000: 0x0,
			0xe000: 0x1040080,
			0xf000: 0x21000000,
			0x800: 0x1040080,
			0x1800: 0x21000080,
			0x2800: 0x80,
			0x3800: 0x1040000,
			0x4800: 0x40000,
			0x5800: 0x20040080,
			0x6800: 0x21040000,
			0x7800: 0x20000000,
			0x8800: 0x20040000,
			0x9800: 0x0,
			0xa800: 0x21040080,
			0xb800: 0x1000080,
			0xc800: 0x20000080,
			0xd800: 0x21000000,
			0xe800: 0x1000000,
			0xf800: 0x40080,
			0x10000: 0x40000,
			0x11000: 0x80,
			0x12000: 0x20000000,
			0x13000: 0x21000080,
			0x14000: 0x1000080,
			0x15000: 0x21040000,
			0x16000: 0x20040080,
			0x17000: 0x1000000,
			0x18000: 0x21040080,
			0x19000: 0x21000000,
			0x1a000: 0x1040000,
			0x1b000: 0x20040000,
			0x1c000: 0x40080,
			0x1d000: 0x20000080,
			0x1e000: 0x0,
			0x1f000: 0x1040080,
			0x10800: 0x21000080,
			0x11800: 0x1000000,
			0x12800: 0x1040000,
			0x13800: 0x20040080,
			0x14800: 0x20000000,
			0x15800: 0x1040080,
			0x16800: 0x80,
			0x17800: 0x21040000,
			0x18800: 0x40080,
			0x19800: 0x21040080,
			0x1a800: 0x0,
			0x1b800: 0x21000000,
			0x1c800: 0x1000080,
			0x1d800: 0x40000,
			0x1e800: 0x20040000,
			0x1f800: 0x20000080
		}, {
			0x0: 0x10000008,
			0x100: 0x2000,
			0x200: 0x10200000,
			0x300: 0x10202008,
			0x400: 0x10002000,
			0x500: 0x200000,
			0x600: 0x200008,
			0x700: 0x10000000,
			0x800: 0x0,
			0x900: 0x10002008,
			0xa00: 0x202000,
			0xb00: 0x8,
			0xc00: 0x10200008,
			0xd00: 0x202008,
			0xe00: 0x2008,
			0xf00: 0x10202000,
			0x80: 0x10200000,
			0x180: 0x10202008,
			0x280: 0x8,
			0x380: 0x200000,
			0x480: 0x202008,
			0x580: 0x10000008,
			0x680: 0x10002000,
			0x780: 0x2008,
			0x880: 0x200008,
			0x980: 0x2000,
			0xa80: 0x10002008,
			0xb80: 0x10200008,
			0xc80: 0x0,
			0xd80: 0x10202000,
			0xe80: 0x202000,
			0xf80: 0x10000000,
			0x1000: 0x10002000,
			0x1100: 0x10200008,
			0x1200: 0x10202008,
			0x1300: 0x2008,
			0x1400: 0x200000,
			0x1500: 0x10000000,
			0x1600: 0x10000008,
			0x1700: 0x202000,
			0x1800: 0x202008,
			0x1900: 0x0,
			0x1a00: 0x8,
			0x1b00: 0x10200000,
			0x1c00: 0x2000,
			0x1d00: 0x10002008,
			0x1e00: 0x10202000,
			0x1f00: 0x200008,
			0x1080: 0x8,
			0x1180: 0x202000,
			0x1280: 0x200000,
			0x1380: 0x10000008,
			0x1480: 0x10002000,
			0x1580: 0x2008,
			0x1680: 0x10202008,
			0x1780: 0x10200000,
			0x1880: 0x10202000,
			0x1980: 0x10200008,
			0x1a80: 0x2000,
			0x1b80: 0x202008,
			0x1c80: 0x200008,
			0x1d80: 0x0,
			0x1e80: 0x10000000,
			0x1f80: 0x10002008
		}, {
			0x0: 0x100000,
			0x10: 0x2000401,
			0x20: 0x400,
			0x30: 0x100401,
			0x40: 0x2100401,
			0x50: 0x0,
			0x60: 0x1,
			0x70: 0x2100001,
			0x80: 0x2000400,
			0x90: 0x100001,
			0xa0: 0x2000001,
			0xb0: 0x2100400,
			0xc0: 0x2100000,
			0xd0: 0x401,
			0xe0: 0x100400,
			0xf0: 0x2000000,
			0x8: 0x2100001,
			0x18: 0x0,
			0x28: 0x2000401,
			0x38: 0x2100400,
			0x48: 0x100000,
			0x58: 0x2000001,
			0x68: 0x2000000,
			0x78: 0x401,
			0x88: 0x100401,
			0x98: 0x2000400,
			0xa8: 0x2100000,
			0xb8: 0x100001,
			0xc8: 0x400,
			0xd8: 0x2100401,
			0xe8: 0x1,
			0xf8: 0x100400,
			0x100: 0x2000000,
			0x110: 0x100000,
			0x120: 0x2000401,
			0x130: 0x2100001,
			0x140: 0x100001,
			0x150: 0x2000400,
			0x160: 0x2100400,
			0x170: 0x100401,
			0x180: 0x401,
			0x190: 0x2100401,
			0x1a0: 0x100400,
			0x1b0: 0x1,
			0x1c0: 0x0,
			0x1d0: 0x2100000,
			0x1e0: 0x2000001,
			0x1f0: 0x400,
			0x108: 0x100400,
			0x118: 0x2000401,
			0x128: 0x2100001,
			0x138: 0x1,
			0x148: 0x2000000,
			0x158: 0x100000,
			0x168: 0x401,
			0x178: 0x2100400,
			0x188: 0x2000001,
			0x198: 0x2100000,
			0x1a8: 0x0,
			0x1b8: 0x2100401,
			0x1c8: 0x100401,
			0x1d8: 0x400,
			0x1e8: 0x2000400,
			0x1f8: 0x100001
		}, {
			0x0: 0x8000820,
			0x1: 0x20000,
			0x2: 0x8000000,
			0x3: 0x20,
			0x4: 0x20020,
			0x5: 0x8020820,
			0x6: 0x8020800,
			0x7: 0x800,
			0x8: 0x8020000,
			0x9: 0x8000800,
			0xa: 0x20800,
			0xb: 0x8020020,
			0xc: 0x820,
			0xd: 0x0,
			0xe: 0x8000020,
			0xf: 0x20820,
			0x80000000: 0x800,
			0x80000001: 0x8020820,
			0x80000002: 0x8000820,
			0x80000003: 0x8000000,
			0x80000004: 0x8020000,
			0x80000005: 0x20800,
			0x80000006: 0x20820,
			0x80000007: 0x20,
			0x80000008: 0x8000020,
			0x80000009: 0x820,
			0x8000000a: 0x20020,
			0x8000000b: 0x8020800,
			0x8000000c: 0x0,
			0x8000000d: 0x8020020,
			0x8000000e: 0x8000800,
			0x8000000f: 0x20000,
			0x10: 0x20820,
			0x11: 0x8020800,
			0x12: 0x20,
			0x13: 0x800,
			0x14: 0x8000800,
			0x15: 0x8000020,
			0x16: 0x8020020,
			0x17: 0x20000,
			0x18: 0x0,
			0x19: 0x20020,
			0x1a: 0x8020000,
			0x1b: 0x8000820,
			0x1c: 0x8020820,
			0x1d: 0x20800,
			0x1e: 0x820,
			0x1f: 0x8000000,
			0x80000010: 0x20000,
			0x80000011: 0x800,
			0x80000012: 0x8020020,
			0x80000013: 0x20820,
			0x80000014: 0x20,
			0x80000015: 0x8020000,
			0x80000016: 0x8000000,
			0x80000017: 0x8000820,
			0x80000018: 0x8020820,
			0x80000019: 0x8000020,
			0x8000001a: 0x8000800,
			0x8000001b: 0x0,
			0x8000001c: 0x20800,
			0x8000001d: 0x820,
			0x8000001e: 0x20020,
			0x8000001f: 0x8020800
		}];

		// Masks that select the SBOX input
		var SBOX_MASK = [0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000, 0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];

		/**
   * DES block cipher algorithm.
   */
		var DES = C_algo.DES = BlockCipher.extend({
			_doReset: function _doReset() {
				// Shortcuts
				var key = this._key;
				var keyWords = key.words;

				// Select 56 bits according to PC1
				var keyBits = [];
				for (var i = 0; i < 56; i++) {
					var keyBitPos = PC1[i] - 1;
					keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
				}

				// Assemble 16 subkeys
				var subKeys = this._subKeys = [];
				for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
					// Create subkey
					var subKey = subKeys[nSubKey] = [];

					// Shortcut
					var bitShift = BIT_SHIFTS[nSubKey];

					// Select 48 bits according to PC2
					for (var i = 0; i < 24; i++) {
						// Select from the left 28 key bits
						subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;

						// Select from the right 28 key bits
						subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
					}

					// Since each subkey is applied to an expanded 32-bit input,
					// the subkey can be broken into 8 values scaled to 32-bits,
					// which allows the key to be used without expansion
					subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
					for (var i = 1; i < 7; i++) {
						subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
					}
					subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
				}

				// Compute inverse subkeys
				var invSubKeys = this._invSubKeys = [];
				for (var i = 0; i < 16; i++) {
					invSubKeys[i] = subKeys[15 - i];
				}
			},

			encryptBlock: function encryptBlock(M, offset) {
				this._doCryptBlock(M, offset, this._subKeys);
			},

			decryptBlock: function decryptBlock(M, offset) {
				this._doCryptBlock(M, offset, this._invSubKeys);
			},

			_doCryptBlock: function _doCryptBlock(M, offset, subKeys) {
				// Get input
				this._lBlock = M[offset];
				this._rBlock = M[offset + 1];

				// Initial permutation
				exchangeLR.call(this, 4, 0x0f0f0f0f);
				exchangeLR.call(this, 16, 0x0000ffff);
				exchangeRL.call(this, 2, 0x33333333);
				exchangeRL.call(this, 8, 0x00ff00ff);
				exchangeLR.call(this, 1, 0x55555555);

				// Rounds
				for (var round = 0; round < 16; round++) {
					// Shortcuts
					var subKey = subKeys[round];
					var lBlock = this._lBlock;
					var rBlock = this._rBlock;

					// Feistel function
					var f = 0;
					for (var i = 0; i < 8; i++) {
						f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
					}
					this._lBlock = rBlock;
					this._rBlock = lBlock ^ f;
				}

				// Undo swap from last round
				var t = this._lBlock;
				this._lBlock = this._rBlock;
				this._rBlock = t;

				// Final permutation
				exchangeLR.call(this, 1, 0x55555555);
				exchangeRL.call(this, 8, 0x00ff00ff);
				exchangeRL.call(this, 2, 0x33333333);
				exchangeLR.call(this, 16, 0x0000ffff);
				exchangeLR.call(this, 4, 0x0f0f0f0f);

				// Set output
				M[offset] = this._lBlock;
				M[offset + 1] = this._rBlock;
			},

			keySize: 64 / 32,

			ivSize: 64 / 32,

			blockSize: 64 / 32
		});

		// Swap bits across the left and right words
		function exchangeLR(offset, mask) {
			var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
			this._rBlock ^= t;
			this._lBlock ^= t << offset;
		}

		function exchangeRL(offset, mask) {
			var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
			this._lBlock ^= t;
			this._rBlock ^= t << offset;
		}

		/**
   * Shortcut functions to the cipher's object interface.
   *
   * @example
   *
   *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
   *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
   */
		C.DES = BlockCipher._createHelper(DES);

		/**
   * Triple-DES block cipher algorithm.
   */
		var TripleDES = C_algo.TripleDES = BlockCipher.extend({
			_doReset: function _doReset() {
				// Shortcuts
				var key = this._key;
				var keyWords = key.words;

				// Create DES instances
				this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
				this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
				this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
			},

			encryptBlock: function encryptBlock(M, offset) {
				this._des1.encryptBlock(M, offset);
				this._des2.decryptBlock(M, offset);
				this._des3.encryptBlock(M, offset);
			},

			decryptBlock: function decryptBlock(M, offset) {
				this._des3.decryptBlock(M, offset);
				this._des2.encryptBlock(M, offset);
				this._des1.decryptBlock(M, offset);
			},

			keySize: 192 / 32,

			ivSize: 64 / 32,

			blockSize: 64 / 32
		});

		/**
   * Shortcut functions to the cipher's object interface.
   *
   * @example
   *
   *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
   *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
   */
		C.TripleDES = BlockCipher._createHelper(TripleDES);
	})();

	return CryptoJS.TripleDES;
});

},{"./cipher-core":63,"./core":64,"./enc-base64":65,"./evpkdf":67,"./md5":72}],95:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

;(function (root, factory) {
	if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object") {
		// CommonJS
		module.exports = exports = factory(require("./core"));
	} else if (typeof define === "function" && define.amd) {
		// AMD
		define(["./core"], factory);
	} else {
		// Global (browser)
		factory(root.CryptoJS);
	}
})(undefined, function (CryptoJS) {

	(function (undefined) {
		// Shortcuts
		var C = CryptoJS;
		var C_lib = C.lib;
		var Base = C_lib.Base;
		var X32WordArray = C_lib.WordArray;

		/**
   * x64 namespace.
   */
		var C_x64 = C.x64 = {};

		/**
   * A 64-bit word.
   */
		var X64Word = C_x64.Word = Base.extend({
			/**
    * Initializes a newly created 64-bit word.
    *
    * @param {number} high The high 32 bits.
    * @param {number} low The low 32 bits.
    *
    * @example
    *
    *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
    */
			init: function init(high, low) {
				this.high = high;
				this.low = low;
			}

			/**
    * Bitwise NOTs this word.
    *
    * @return {X64Word} A new x64-Word object after negating.
    *
    * @example
    *
    *     var negated = x64Word.not();
    */
			// not: function () {
			// var high = ~this.high;
			// var low = ~this.low;

			// return X64Word.create(high, low);
			// },

			/**
    * Bitwise ANDs this word with the passed word.
    *
    * @param {X64Word} word The x64-Word to AND with this word.
    *
    * @return {X64Word} A new x64-Word object after ANDing.
    *
    * @example
    *
    *     var anded = x64Word.and(anotherX64Word);
    */
			// and: function (word) {
			// var high = this.high & word.high;
			// var low = this.low & word.low;

			// return X64Word.create(high, low);
			// },

			/**
    * Bitwise ORs this word with the passed word.
    *
    * @param {X64Word} word The x64-Word to OR with this word.
    *
    * @return {X64Word} A new x64-Word object after ORing.
    *
    * @example
    *
    *     var ored = x64Word.or(anotherX64Word);
    */
			// or: function (word) {
			// var high = this.high | word.high;
			// var low = this.low | word.low;

			// return X64Word.create(high, low);
			// },

			/**
    * Bitwise XORs this word with the passed word.
    *
    * @param {X64Word} word The x64-Word to XOR with this word.
    *
    * @return {X64Word} A new x64-Word object after XORing.
    *
    * @example
    *
    *     var xored = x64Word.xor(anotherX64Word);
    */
			// xor: function (word) {
			// var high = this.high ^ word.high;
			// var low = this.low ^ word.low;

			// return X64Word.create(high, low);
			// },

			/**
    * Shifts this word n bits to the left.
    *
    * @param {number} n The number of bits to shift.
    *
    * @return {X64Word} A new x64-Word object after shifting.
    *
    * @example
    *
    *     var shifted = x64Word.shiftL(25);
    */
			// shiftL: function (n) {
			// if (n < 32) {
			// var high = (this.high << n) | (this.low >>> (32 - n));
			// var low = this.low << n;
			// } else {
			// var high = this.low << (n - 32);
			// var low = 0;
			// }

			// return X64Word.create(high, low);
			// },

			/**
    * Shifts this word n bits to the right.
    *
    * @param {number} n The number of bits to shift.
    *
    * @return {X64Word} A new x64-Word object after shifting.
    *
    * @example
    *
    *     var shifted = x64Word.shiftR(7);
    */
			// shiftR: function (n) {
			// if (n < 32) {
			// var low = (this.low >>> n) | (this.high << (32 - n));
			// var high = this.high >>> n;
			// } else {
			// var low = this.high >>> (n - 32);
			// var high = 0;
			// }

			// return X64Word.create(high, low);
			// },

			/**
    * Rotates this word n bits to the left.
    *
    * @param {number} n The number of bits to rotate.
    *
    * @return {X64Word} A new x64-Word object after rotating.
    *
    * @example
    *
    *     var rotated = x64Word.rotL(25);
    */
			// rotL: function (n) {
			// return this.shiftL(n).or(this.shiftR(64 - n));
			// },

			/**
    * Rotates this word n bits to the right.
    *
    * @param {number} n The number of bits to rotate.
    *
    * @return {X64Word} A new x64-Word object after rotating.
    *
    * @example
    *
    *     var rotated = x64Word.rotR(7);
    */
			// rotR: function (n) {
			// return this.shiftR(n).or(this.shiftL(64 - n));
			// },

			/**
    * Adds this word with the passed word.
    *
    * @param {X64Word} word The x64-Word to add with this word.
    *
    * @return {X64Word} A new x64-Word object after adding.
    *
    * @example
    *
    *     var added = x64Word.add(anotherX64Word);
    */
			// add: function (word) {
			// var low = (this.low + word.low) | 0;
			// var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
			// var high = (this.high + word.high + carry) | 0;

			// return X64Word.create(high, low);
			// }
		});

		/**
   * An array of 64-bit words.
   *
   * @property {Array} words The array of CryptoJS.x64.Word objects.
   * @property {number} sigBytes The number of significant bytes in this word array.
   */
		var X64WordArray = C_x64.WordArray = Base.extend({
			/**
    * Initializes a newly created word array.
    *
    * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
    * @param {number} sigBytes (Optional) The number of significant bytes in the words.
    *
    * @example
    *
    *     var wordArray = CryptoJS.x64.WordArray.create();
    *
    *     var wordArray = CryptoJS.x64.WordArray.create([
    *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
    *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
    *     ]);
    *
    *     var wordArray = CryptoJS.x64.WordArray.create([
    *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
    *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
    *     ], 10);
    */
			init: function init(words, sigBytes) {
				words = this.words = words || [];

				if (sigBytes != undefined) {
					this.sigBytes = sigBytes;
				} else {
					this.sigBytes = words.length * 8;
				}
			},

			/**
    * Converts this 64-bit word array to a 32-bit word array.
    *
    * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
    *
    * @example
    *
    *     var x32WordArray = x64WordArray.toX32();
    */
			toX32: function toX32() {
				// Shortcuts
				var x64Words = this.words;
				var x64WordsLength = x64Words.length;

				// Convert
				var x32Words = [];
				for (var i = 0; i < x64WordsLength; i++) {
					var x64Word = x64Words[i];
					x32Words.push(x64Word.high);
					x32Words.push(x64Word.low);
				}

				return X32WordArray.create(x32Words, this.sigBytes);
			},

			/**
    * Creates a copy of this word array.
    *
    * @return {X64WordArray} The clone.
    *
    * @example
    *
    *     var clone = x64WordArray.clone();
    */
			clone: function clone() {
				var clone = Base.clone.call(this);

				// Clone "words" array
				var words = clone.words = this.words.slice(0);

				// Clone each X64Word object
				var wordsLength = words.length;
				for (var i = 0; i < wordsLength; i++) {
					words[i] = words[i].clone();
				}

				return clone;
			}
		});
	})();

	return CryptoJS;
});

},{"./core":64}],96:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":97,"./des/cipher":98,"./des/des":99,"./des/ede":100,"./des/utils":101}],97:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++) {
    this.iv[i] = iv[i];
  }
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++) {
      iv[i] ^= inp[inOff + i];
    }superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++) {
      iv[i] = out[outOff + i];
    }
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++) {
      out[outOff + i] ^= iv[i];
    }for (var i = 0; i < this.blockSize; i++) {
      iv[i] = inp[inOff + i];
    }
  }
};

},{"inherits":140,"minimalistic-assert":146}],98:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0) return [];

  if (this.type === 'decrypt') return this._updateDecrypt(data);else return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++) {
    this.buffer[this.bufferOff + i] = data[off + i];
  }this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = (this.bufferOff + data.length) / this.blockSize | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - (data.length - inputOff) % this.blockSize;
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++) {
    this.buffer[this.bufferOff] = data[inputOff];
  }return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer) first = this.update(buffer);

  var last;
  if (this.type === 'encrypt') last = this._finalEncrypt();else last = this._finalDecrypt();

  if (first) return first.concat(last);else return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0) return false;

  while (off < buffer.length) {
    buffer[off++] = 0;
  }return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff)) return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":146}],99:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);else this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++) {
    buffer[i] = value;
  }return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++) {
    assert.equal(buffer[i], pad);
  }return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"../des":96,"inherits":140,"minimalistic-assert":146}],100:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [DES.create({ type: 'encrypt', key: k1 }), DES.create({ type: 'decrypt', key: k2 }), DES.create({ type: 'encrypt', key: k3 })];
  } else {
    this.ciphers = [DES.create({ type: 'decrypt', key: k3 }), DES.create({ type: 'encrypt', key: k2 }), DES.create({ type: 'decrypt', key: k1 })];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"../des":96,"inherits":140,"minimalistic-assert":146}],101:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = value >>> 16 & 0xff;
  bytes[2 + off] = value >>> 8 & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inR >>> j + i & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inL >>> j + i & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= inR >>> j + i & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= inL >>> j + i & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= inR >>> j + i & 1;
      outL <<= 1;
      outL |= inL >>> j + i & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= inR >>> j + i & 1;
      outR <<= 1;
      outR |= inL >>> j + i & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inR >> j + i & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inL >> j + i & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= inR >> j + i & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= inR >> j + i & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= inL >> j + i & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= inL >> j + i & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return num << shift & 0xfffffff | num >>> 28 - shift;
};

var pc2table = [
// inL => outL
14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26,

// inR => outR
15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= inL >>> pc2table[i] & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= inR >>> pc2table[i] & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = (r & 1) << 5 | r >>> 27;
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= r >>> i & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= r >>> i & 0x3f;
    outR <<= 6;
  }
  outR |= (r & 0x1f) << 1 | r >>> 31;

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = inL >>> 18 - i * 6 & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = inR >>> 18 - i * 6 & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= num >>> permuteTable[i] & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size) {
    str = '0' + str;
  }var out = [];
  for (var i = 0; i < size; i += group) {
    out.push(str.slice(i, i + group));
  }return out.join(' ');
};

},{}],102:[function(require,module,exports){
(function (Buffer){
'use strict';

var generatePrime = require('./lib/generatePrime');
var primes = require('./lib/primes.json');

var DH = require('./lib/dh');

function getDiffieHellman(mod) {
  var prime = new Buffer(primes[mod].prime, 'hex');
  var gen = new Buffer(primes[mod].gen, 'hex');

  return new DH(prime, gen);
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
};

function createDiffieHellman(prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator);
  }

  enc = enc || 'binary';
  genc = genc || 'binary';
  generator = generator || new Buffer([2]);

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc);
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true);
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc);
  }

  return new DH(prime, generator, true);
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

}).call(this,require("buffer").Buffer)

},{"./lib/dh":103,"./lib/generatePrime":104,"./lib/primes.json":105,"buffer":52}],103:[function(require,module,exports){
(function (Buffer){
'use strict';

var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function get() {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this,require("buffer").Buffer)

},{"./generatePrime":104,"bn.js":21,"buffer":52,"miller-rabin":145,"randombytes":166}],104:[function(require,module,exports){
'use strict';

var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null) return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++) {
      if (k % res[j] === 0) break;
    }if (i !== j && res[j] <= sqrt) continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++) {
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }
  }return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }
}

},{"bn.js":21,"miller-rabin":145,"randombytes":166}],105:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],106:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":121,"./elliptic/curve":109,"./elliptic/curves":112,"./elliptic/ec":113,"./elliptic/eddsa":116,"./elliptic/utils":120,"brorand":22}],107:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--) {
      nafW = (nafW << 1) + naf[k];
    }repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--) {
      k++;
    }if (i >= 0) k++;
    acc = acc.dblp(k);

    if (i < 0) break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
    } else {
      // J +- J
      if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [points[a], /* 1 */
    null, /* 3 */
    null, /* 5 */
    points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [-3, /* -1 -1 */
    -1, /* -1 0 */
    -5, /* -1 1 */
    -7, /* 0 -1 */
    0, /* 0 0 */
    7, /* 0 1 */
    5, /* 1 -1 */
    1, /* 1 0 */
    3 /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0) zero = false;
      }
      if (!zero) break;
      k++;
      i--;
    }
    if (i >= 0) k++;
    acc = acc.dblp(k);
    if (i < 0) break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();

      if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++) {
    wnd[i] = null;
  }if (jacobianResult) return acc;else return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq() /*other*/{
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);

    var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

  return [0x04].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed) return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed) return false;

  var doubles = this.precomputed.doubles;
  if (!doubles) return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;

  var doubles = [this];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++) {
      acc = acc.dbl();
    }doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;

  var res = [this];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++) {
    res[i] = res[i - 1].add(dbl);
  }return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++) {
    r = r.dbl();
  }return r;
};

},{"../../elliptic":106,"bn.js":21}],108:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA) return num.redNeg();else return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC) return num;else return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red) x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red) y = y.toRed(this.red);

  // x^2 = (y^2 - 1) / (d y^2 + 1)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.one);
  var rhs = y2.redMul(this.d).redAdd(this.one);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd) throw new Error('invalid point');else return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');

  if (x.isOdd() !== odd) x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity()) return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 && this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this;

  // Double in extended coordinates
  if (this.curve.extended) return this._extDbl();else return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity()) return p;
  if (p.isInfinity()) return this;

  if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne) return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t) this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0) return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
  return false;
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":106,"../curve":109,"bn.js":21,"inherits":140}],109:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":107,"./edwards":108,"./mont":110,"./short":111}],110:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) {
    bits.push(t.andln(1));
  }for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../../elliptic":106,"../curve":109,"bn.js":21,"inherits":140}],111:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function (vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [l1, l2];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [{ a: a1, b: b1 }, { a: a2, b: b2 }];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red) x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf) return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo) return;

  var pre = this.precomputed;
  if (pre && pre.beta) return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function endoMul(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed) return [this.x, this.y];

  return [this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string') obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2]) return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [res].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [res].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf) return p;

  // P + O = P
  if (p.inf) return this;

  // P + P = 2P
  if (this.eq(p)) return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p)) return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf) return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0) return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf) return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function negate(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf) return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red) this.x = this.x.toRed(this.curve.red);
  if (!this.y.red) this.y = this.y.toRed(this.curve.red);
  if (!this.z.red) this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity()) return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity()) return p;

  // P + O = P
  if (p.isInfinity()) return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity()) return p.toJ();

  // P + O = P
  if (p.isInfinity()) return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0) return this;
  if (this.isInfinity()) return this;
  if (!pow) return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++) {
      r = r.dbl();
    }return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow) jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this;

  if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA) return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine') return this.eq(p.toJ());

  if (this === p) return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0) return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
  return false;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":106,"../curve":109,"bn.js":21,"inherits":140}],112:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short') this.curve = new elliptic.curve.short(options);else if (options.type === 'edwards') this.curve = new elliptic.curve.edwards(options);else this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function get() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: ['9']
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

  // 4/5
  '6666666666666666666666666666666666666666666666666666666666666658']
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [{
    a: '3086d221a7d46bcde86c90e49284eb15',
    b: '-e4437ed6010e88286f547fa90abfe4c3'
  }, {
    a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
    b: '3086d221a7d46bcde86c90e49284eb15'
  }],

  gRed: false,
  g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
});

},{"../elliptic":106,"./precomputed/secp256k1":119,"hash.js":125}],113:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC)) return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve) options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options) options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0) continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0) msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if ((typeof enc === 'undefined' ? 'undefined' : _typeof(enc)) === 'object') {
    options = enc;
    enc = null;
  }
  if (!options) options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity()) continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0) continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0) continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity()) return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null) return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q)) return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":106,"./key":114,"./signature":115,"bn.js":21,"hmac-drbg":137}],114:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv) this._importPrivate(options.priv, options.privEnc);
  if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair) return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair) return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity()) return { result: false, reason: 'Invalid public key' };
  if (!pub.validate()) return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity()) return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub) this.pub = this.ec.g.mul(this.priv);

  if (!enc) return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../elliptic":106,"bn.js":21}],115:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature) return options;

  if (this._importDER(options, enc)) return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len + p.place !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && r[1] & 0x80) {
    r = r.slice(1);
  }
  if (s[0] === 0 && s[1] & 0x80) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push(len >>> (octets << 3) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r);
  // Pad values
  if (s[0] & 0x80) s = [0].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [0x02];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [0x30];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../../elliptic":106,"bn.js":21}],116:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA)) return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++) {
    hash.update(arguments[i]);
  }return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature) return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../../elliptic":106,"./key":117,"./signature":118,"hash.js":125}],117:[function(require,module,exports){
'use strict';

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair) return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair) return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../../elliptic":106}],118:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if ((typeof sig === 'undefined' ? 'undefined' : _typeof(sig)) !== 'object') sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R)) this._R = sig.R;
  if (sig.S instanceof BN) this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../../elliptic":106,"bn.js":21}],119:[function(require,module,exports){
'use strict';

module.exports = {
  doubles: {
    step: 4,
    points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
  },
  naf: {
    wnd: 7,
    points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
  }
};

},{}],120:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << w + 1;
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;
    for (var i = 1; i < shift; i++) {
      naf.push(0);
    }k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [[], []];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = k1.andln(3) + d1 & 3;
    var m24 = k2.andln(3) + d2 & 3;
    if (m14 === 3) m14 = -1;
    if (m24 === 3) m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = k1.andln(7) + d1 & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = k2.andln(7) + d2 & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1) d1 = 1 - d1;
    if (2 * d2 === u2 + 1) d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;

},{"bn.js":21,"minimalistic-assert":146,"minimalistic-crypto-utils":147}],121:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "elliptic@6.4.0",
      "/Users/willclark/Documents/repos/prometh-website"
    ]
  ],
  "_from": "elliptic@6.4.0",
  "_id": "elliptic@6.4.0",
  "_inBundle": false,
  "_integrity": "sha1-ysmvh2LIWDYYcAPI3+GT5eLq5d8=",
  "_location": "/elliptic",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "elliptic@6.4.0",
    "name": "elliptic",
    "escapedName": "elliptic",
    "rawSpec": "6.4.0",
    "saveSpec": null,
    "fetchSpec": "6.4.0"
  },
  "_requiredBy": [
    "/browserify-sign",
    "/create-ecdh"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.4.0.tgz",
  "_spec": "6.4.0",
  "_where": "/Users/willclark/Documents/repos/prometh-website",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.0",
    "inherits": "^2.0.1",
    "minimalistic-assert": "^1.0.0",
    "minimalistic-crypto-utils": "^1.0.0"
  },
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^2.11.3",
    "grunt": "^0.4.5",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^8.6.2",
    "istanbul": "^0.4.2",
    "jscs": "^2.9.0",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "name": "elliptic",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.4.0"
}

},{}],122:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function (n) {
  if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function (type) {
  var er, handler, len, args, i, listeners;

  if (!this._events) this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler)) return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++) {
      listeners[i].apply(this, args);
    }
  }

  return true;
};

EventEmitter.prototype.addListener = function (type, listener) {
  var m;

  if (!isFunction(listener)) throw TypeError('listener must be a function');

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function (type, listener) {
  if (!isFunction(listener)) throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function (type, listener) {
  var list, position, length, i;

  if (!isFunction(listener)) throw TypeError('listener must be a function');

  if (!this._events || !this._events[type]) return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener || isFunction(list.listener) && list.listener === listener) {
    delete this._events[type];
    if (this._events.removeListener) this.emit('removeListener', type, listener);
  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        position = i;
        break;
      }
    }

    if (position < 0) return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener) this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function (type) {
  var key, listeners;

  if (!this._events) return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length) {
      this.removeListener(type, listeners[listeners.length - 1]);
    }
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function (type) {
  var ret;
  if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function (type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function (emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],123:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;
var MD5 = require('md5.js');

/* eslint-disable camelcase */
function EVP_BytesToKey(password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary');
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary');
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
  }

  var keyLen = keyBits / 8;
  var key = Buffer.alloc(keyLen);
  var iv = Buffer.alloc(ivLen || 0);
  var tmp = Buffer.alloc(0);

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5();
    hash.update(tmp);
    hash.update(password);
    if (salt) hash.update(salt);
    tmp = hash.digest();

    var used = 0;

    if (keyLen > 0) {
      var keyStart = key.length - keyLen;
      used = Math.min(keyLen, tmp.length);
      tmp.copy(key, keyStart, 0, used);
      keyLen -= used;
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen;
      var length = Math.min(ivLen, tmp.length - used);
      tmp.copy(iv, ivStart, used, used + length);
      ivLen -= length;
    }
  }

  tmp.fill(0);
  return { key: key, iv: iv };
}

module.exports = EVP_BytesToKey;

},{"md5.js":143,"safe-buffer":181}],124:[function(require,module,exports){
(function (Buffer){
'use strict';

var Transform = require('stream').Transform;
var inherits = require('inherits');

function HashBase(blockSize) {
  Transform.call(this);

  this._block = new Buffer(blockSize);
  this._blockSize = blockSize;
  this._blockOffset = 0;
  this._length = [0, 0, 0, 0];

  this._finalized = false;
}

inherits(HashBase, Transform);

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null;
  try {
    if (encoding !== 'buffer') chunk = new Buffer(chunk, encoding);
    this.update(chunk);
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype._flush = function (callback) {
  var error = null;
  try {
    this.push(this._digest());
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype.update = function (data, encoding) {
  if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');
  if (this._finalized) throw new Error('Digest already called');
  if (!Buffer.isBuffer(data)) data = new Buffer(data, encoding || 'binary');

  // consume data
  var block = this._block;
  var offset = 0;
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) {
      block[i++] = data[offset++];
    }this._update();
    this._blockOffset = 0;
  }
  while (offset < data.length) {
    block[this._blockOffset++] = data[offset++];
  } // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry;
    carry = this._length[j] / 0x0100000000 | 0;
    if (carry > 0) this._length[j] -= 0x0100000000 * carry;
  }

  return this;
};

HashBase.prototype._update = function (data) {
  throw new Error('_update is not implemented');
};

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called');
  this._finalized = true;

  var digest = this._digest();
  if (encoding !== undefined) digest = digest.toString(encoding);
  return digest;
};

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented');
};

module.exports = HashBase;

}).call(this,require("buffer").Buffer)

},{"buffer":52,"inherits":140,"stream":190}],125:[function(require,module,exports){
'use strict';

var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":126,"./hash/hmac":127,"./hash/ripemd":128,"./hash/sha":129,"./hash/utils":136}],126:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0) this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32) {
      this._update(msg, i, i + this._delta32);
    }
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - (len + this.padLength) % bytes;
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++) {
    res[i] = 0;
  } // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }
  }

  return res;
};

},{"./utils":136,"minimalistic-assert":146}],127:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++) {
    key.push(0);
  }for (i = 0; i < key.length; i++) {
    key[i] ^= 0x36;
  }this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++) {
    key[i] ^= 0x6a;
  }this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":136,"minimalistic-assert":146}],128:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160)) return new RIPEMD160();

  BlockHash.call(this);

  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'little');else return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);
}

function K(j) {
  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;
}

var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];

var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];

var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];

var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];

},{"./common":126,"./utils":136}],129:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":130,"./sha/224":131,"./sha/256":132,"./sha/384":133,"./sha/512":134}],130:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];

function SHA1() {
  if (!(this instanceof SHA1)) return new SHA1();

  BlockHash.call(this);
  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }for (; i < W.length; i++) {
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
  }var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

},{"../common":126,"../utils":136,"./common":135}],131:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224)) return new SHA224();

  SHA256.call(this);
  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');else return utils.split32(this.h.slice(0, 7), 'big');
};

},{"../utils":136,"./256":132}],132:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

function SHA256() {
  if (!(this instanceof SHA256)) return new SHA256();

  BlockHash.call(this);
  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }for (; i < W.length; i++) {
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
  }var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

},{"../common":126,"../utils":136,"./common":135,"minimalistic-assert":146}],133:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384)) return new SHA384();

  SHA512.call(this);
  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');else return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":136,"./512":134}],134:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

function SHA512() {
  if (!(this instanceof SHA512)) return new SHA512();

  BlockHash.call(this);
  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++) {
    W[i] = msg[start + i];
  }for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14]; // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32]; // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = xh & yh ^ ~xh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ ~xl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = xh & yh ^ xh & zh ^ yh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ xl & zl ^ yl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2); // 34
  var c2_hi = rotr64_hi(xl, xh, 7); // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2); // 34
  var c2_lo = rotr64_lo(xl, xh, 7); // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9); // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9); // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29); // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29); // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

},{"../common":126,"../utils":136,"minimalistic-assert":146}],135:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0) return ch32(x, y, z);
  if (s === 1 || s === 3) return p32(x, y, z);
  if (s === 2) return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return x & y ^ ~x & z;
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return x & y ^ x & z ^ y & z;
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}
exports.g1_256 = g1_256;

},{"../utils":136}],136:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function toArray(msg, enc) {
  if (Array.isArray(msg)) return msg.slice();
  if (!msg) return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);else res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0) msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2) {
        res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    }
  } else {
    for (i = 0; i < msg.length; i++) {
      res[i] = msg[i] | 0;
    }
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    res += zero2(msg[i].toString(16));
  }return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little') w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1) return '0' + word;else return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = m >>> 16 & 0xff;
      res[k + 2] = m >>> 8 & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = m >>> 16 & 0xff;
      res[k + 1] = m >>> 8 & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return w >>> b | w << 32 - b;
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return w << b | w >>> 32 - b;
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return a + b >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return a + b + c >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return a + b + c + d >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return a + b + c + d + e >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = lo + el >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = al << 32 - num | ah >>> num;
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":140,"minimalistic-assert":146}],137:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000; // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac().update(this.V).update([0x00]);
  if (seed) kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed) return;

  this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":125,"minimalistic-assert":146,"minimalistic-crypto-utils":147}],138:[function(require,module,exports){
"use strict";

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];

  i += d;

  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

},{}],139:[function(require,module,exports){
"use strict";

var indexOf = [].indexOf;

module.exports = function (arr, obj) {
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};

},{}],140:[function(require,module,exports){
'use strict';

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function TempCtor() {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

},{}],141:[function(require,module,exports){
'use strict';

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
};

function isBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
}

},{}],142:[function(require,module,exports){
'use strict';

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],143:[function(require,module,exports){
(function (Buffer){
'use strict';

var inherits = require('inherits');
var HashBase = require('hash-base');

var ARRAY16 = new Array(16);

function MD5() {
  HashBase.call(this, 64);

  // state
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
}

inherits(MD5, HashBase);

MD5.prototype._update = function () {
  var M = ARRAY16;
  for (var i = 0; i < 16; ++i) {
    M[i] = this._block.readInt32LE(i * 4);
  }var a = this._a;
  var b = this._b;
  var c = this._c;
  var d = this._d;

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
  c = fnF(c, d, a, b, M[2], 0x242070db, 17);
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22);

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
  d = fnG(d, a, b, c, M[10], 0x02441453, 9);
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);

  this._a = this._a + a | 0;
  this._b = this._b + b | 0;
  this._c = this._c + c | 0;
  this._d = this._d + d | 0;
};

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80;
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64);
    this._update();
    this._blockOffset = 0;
  }

  this._block.fill(0, this._blockOffset, 56);
  this._block.writeUInt32LE(this._length[0], 56);
  this._block.writeUInt32LE(this._length[1], 60);
  this._update();

  // produce result
  var buffer = new Buffer(16);
  buffer.writeInt32LE(this._a, 0);
  buffer.writeInt32LE(this._b, 4);
  buffer.writeInt32LE(this._c, 8);
  buffer.writeInt32LE(this._d, 12);
  return buffer;
};

function rotl(x, n) {
  return x << n | x >>> 32 - n;
}

function fnF(a, b, c, d, m, k, s) {
  return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}

function fnG(a, b, c, d, m, k, s) {
  return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}

function fnH(a, b, c, d, m, k, s) {
  return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}

function fnI(a, b, c, d, m, k, s) {
  return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}

module.exports = MD5;

}).call(this,require("buffer").Buffer)

},{"buffer":52,"hash-base":144,"inherits":140}],144:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;
var Transform = require('stream').Transform;
var inherits = require('inherits');

function throwIfNotStringOrBuffer(val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer');
  }
}

function HashBase(blockSize) {
  Transform.call(this);

  this._block = Buffer.allocUnsafe(blockSize);
  this._blockSize = blockSize;
  this._blockOffset = 0;
  this._length = [0, 0, 0, 0];

  this._finalized = false;
}

inherits(HashBase, Transform);

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null;
  try {
    this.update(chunk, encoding);
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype._flush = function (callback) {
  var error = null;
  try {
    this.push(this.digest());
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data');
  if (this._finalized) throw new Error('Digest already called');
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);

  // consume data
  var block = this._block;
  var offset = 0;
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) {
      block[i++] = data[offset++];
    }this._update();
    this._blockOffset = 0;
  }
  while (offset < data.length) {
    block[this._blockOffset++] = data[offset++];
  } // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry;
    carry = this._length[j] / 0x0100000000 | 0;
    if (carry > 0) this._length[j] -= 0x0100000000 * carry;
  }

  return this;
};

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented');
};

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called');
  this._finalized = true;

  var digest = this._digest();
  if (encoding !== undefined) digest = digest.toString(encoding);

  // reset state
  this._block.fill(0);
  this._blockOffset = 0;
  for (var i = 0; i < 4; ++i) {
    this._length[i] = 0;
  }return digest;
};

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented');
};

module.exports = HashBase;

},{"inherits":140,"safe-buffer":181,"stream":190}],145:[function(require,module,exports){
'use strict';

var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do {
    var a = new bn(this.rand.generate(min_bytes));
  } while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k) k = Math.max(1, len / 48 | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb) cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0) return false;
      if (x.cmp(rn1) === 0) break;
    }

    if (i === s) return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k) k = Math.max(1, len / 48 | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0) return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0) break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":21,"brorand":22}],146:[function(require,module,exports){
'use strict';

module.exports = assert;

function assert(val, msg) {
  if (!val) throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

},{}],147:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg)) return msg.slice();
  if (!msg) return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++) {
      res[i] = msg[i] | 0;
    }return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0) msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2) {
      res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi) res.push(hi, lo);else res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1) return '0' + word;else return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    res += zero2(msg[i].toString(16));
  }return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex') return toHex(arr);else return arr;
};

},{}],148:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],149:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict';

var asn1 = require('asn1.js');

exports.certificate = require('./certificate');

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
});
exports.RSAPrivateKey = RSAPrivateKey;

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
});
exports.RSAPublicKey = RSAPublicKey;

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
exports.PublicKey = PublicKey;

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
});

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(this.key('version').int(), this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
});

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
});
exports.DSAPrivateKey = DSAPrivateKey;

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int();
});

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use(ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
});
exports.ECPrivateKey = ECPrivateKey;

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  });
});

exports.signature = asn1.define('signature', function () {
  this.seq().obj(this.key('r').int(), this.key('s').int());
});

},{"./certificate":150,"asn1.js":6}],150:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict';

var asn = require('asn1.js');

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  });
});

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(this.key('type').objid(), this.key('value').any());
});

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional());
});

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue);
});

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName);
});

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  });
});

var Validity = asn.define('Validity', function () {
  this.seq().obj(this.key('notBefore').use(Time), this.key('notAfter').use(Time));
});

var Extension = asn.define('Extension', function () {
  this.seq().obj(this.key('extnID').objid(), this.key('critical').bool().def(false), this.key('extnValue').octstr());
});

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(this.key('version').explicit(0).int(), this.key('serialNumber').int(), this.key('signature').use(AlgorithmIdentifier), this.key('issuer').use(Name), this.key('validity').use(Validity), this.key('subject').use(Name), this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo), this.key('issuerUniqueID').implicit(1).bitstr().optional(), this.key('subjectUniqueID').implicit(2).bitstr().optional(), this.key('extensions').explicit(3).seqof(Extension).optional());
});

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(this.key('tbsCertificate').use(TBSCertificate), this.key('signatureAlgorithm').use(AlgorithmIdentifier), this.key('signatureValue').bitstr());
});

module.exports = X509Certificate;

},{"asn1.js":6}],151:[function(require,module,exports){
(function (Buffer){
'use strict';

// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\n\r?DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\n\r?\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?/m;
var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n/m;
var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----\n\r?([0-9A-z\n\r\+\/\=]+)\n\r?-----END \1-----$/m;
var evp = require('evp_bytestokey');
var ciphers = require('browserify-aes');
module.exports = function (okey, password) {
  var key = okey.toString();
  var match = key.match(findProc);
  var decrypted;
  if (!match) {
    var match2 = key.match(fullRegex);
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64');
  } else {
    var suite = 'aes' + match[1];
    var iv = new Buffer(match[2], 'hex');
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64');
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
    var out = [];
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    decrypted = Buffer.concat(out);
  }
  var tag = key.match(startRegex)[1];
  return {
    tag: tag,
    data: decrypted
  };
};

}).call(this,require("buffer").Buffer)

},{"browserify-aes":26,"buffer":52,"evp_bytestokey":123}],152:[function(require,module,exports){
(function (Buffer){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var asn1 = require('./asn1');
var aesid = require('./aesid.json');
var fixProc = require('./fixProc');
var ciphers = require('browserify-aes');
var compat = require('pbkdf2');
module.exports = parseKeys;

function parseKeys(buffer) {
  var password;
  if ((typeof buffer === 'undefined' ? 'undefined' : _typeof(buffer)) === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase;
    buffer = buffer.key;
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer);
  }

  var stripped = fixProc(buffer, password);

  var type = stripped.tag;
  var data = stripped.data;
  var subtype, ndata;
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
    // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der');
      }
      subtype = ndata.algorithm.algorithm.join('.');
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey;
          return {
            type: 'ec',
            data: ndata
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          };
        default:
          throw new Error('unknown key id ' + subtype);
      }
      throw new Error('unknown key type ' + type);
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der');
      data = decrypt(data, password);
    // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          };
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          };
        default:
          throw new Error('unknown key id ' + subtype);
      }
      throw new Error('unknown key type ' + type);
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der');
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der');
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      };
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der');
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      };
    default:
      throw new Error('unknown key type ' + type);
  }
}
parseKeys.signature = asn1.signature;
function decrypt(data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt;
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
  var iv = data.algorithm.decrypt.cipher.iv;
  var cipherText = data.subjectPrivateKey;
  var keylen = parseInt(algo.split('-')[1], 10) / 8;
  var key = compat.pbkdf2Sync(password, salt, iters, keylen);
  var cipher = ciphers.createDecipheriv(algo, key, iv);
  var out = [];
  out.push(cipher.update(cipherText));
  out.push(cipher.final());
  return Buffer.concat(out);
}

}).call(this,require("buffer").Buffer)

},{"./aesid.json":148,"./asn1":149,"./fixProc":151,"browserify-aes":26,"buffer":52,"pbkdf2":153}],153:[function(require,module,exports){
'use strict';

exports.pbkdf2 = require('./lib/async');

exports.pbkdf2Sync = require('./lib/sync');

},{"./lib/async":154,"./lib/sync":157}],154:[function(require,module,exports){
(function (process,global){
'use strict';

var checkParameters = require('./precondition');
var defaultEncoding = require('./default-encoding');
var sync = require('./sync');
var Buffer = require('safe-buffer').Buffer;

var ZERO_BUF;
var subtle = global.crypto && global.crypto.subtle;
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
};
var checks = [];
function checkNative(algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false);
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false);
  }
  if (checks[algo] !== undefined) {
    return checks[algo];
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function () {
    return true;
  }).catch(function () {
    return false;
  });
  checks[algo] = prom;
  return prom;
}
function browserPbkdf2(password, salt, iterations, length, algo) {
  return subtle.importKey('raw', password, { name: 'PBKDF2' }, false, ['deriveBits']).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3);
  }).then(function (res) {
    return Buffer.from(res);
  });
}
function resolvePromise(promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out);
    });
  }, function (e) {
    process.nextTick(function () {
      callback(e);
    });
  });
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding);
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding);

  checkParameters(iterations, keylen);
  if (typeof digest === 'function') {
    callback = digest;
    digest = undefined;
  }
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');

  digest = digest || 'sha1';
  var algo = toBrowser[digest.toLowerCase()];
  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out;
      try {
        out = sync(password, salt, iterations, keylen, digest);
      } catch (e) {
        return callback(e);
      }
      callback(null, out);
    });
  }
  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) {
      return browserPbkdf2(password, salt, iterations, keylen, algo);
    } else {
      return sync(password, salt, iterations, keylen, digest);
    }
  }), callback);
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./default-encoding":155,"./precondition":156,"./sync":157,"_process":159,"safe-buffer":181}],155:[function(require,module,exports){
(function (process){
'use strict';

var defaultEncoding;
/* istanbul ignore next */
if (process.browser) {
  defaultEncoding = 'utf-8';
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
}
module.exports = defaultEncoding;

}).call(this,require('_process'))

},{"_process":159}],156:[function(require,module,exports){
'use strict';

var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs
module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number');
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations');
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number');
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
    /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length');
  }
};

},{}],157:[function(require,module,exports){
'use strict';

var md5 = require('create-hash/md5');
var rmd160 = require('ripemd160');
var sha = require('sha.js');

var checkParameters = require('./precondition');
var defaultEncoding = require('./default-encoding');
var Buffer = require('safe-buffer').Buffer;
var ZEROS = Buffer.alloc(128);
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
};

function Hmac(alg, key, saltLen) {
  var hash = getDigest(alg);
  var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;

  if (key.length > blocksize) {
    key = hash(key);
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize);
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
  ipad.copy(ipad1, 0, 0, blocksize);
  this.ipad1 = ipad1;
  this.ipad2 = ipad;
  this.opad = opad;
  this.alg = alg;
  this.blocksize = blocksize;
  this.hash = hash;
  this.size = sizes[alg];
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize);
  var h = this.hash(ipad);
  h.copy(this.opad, this.blocksize);
  return this.hash(this.opad);
};

function getDigest(alg) {
  function shaFunc(data) {
    return sha(alg).update(data).digest();
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160;
  if (alg === 'md5') return md5;
  return shaFunc;
}

function pbkdf2(password, salt, iterations, keylen, digest) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding);
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding);

  checkParameters(iterations, keylen);

  digest = digest || 'sha1';

  var hmac = new Hmac(digest, password, salt.length);

  var DK = Buffer.allocUnsafe(keylen);
  var block1 = Buffer.allocUnsafe(salt.length + 4);
  salt.copy(block1, 0, 0, salt.length);

  var destPos = 0;
  var hLen = sizes[digest];
  var l = Math.ceil(keylen / hLen);

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length);

    var T = hmac.run(block1, hmac.ipad1);
    var U = T;

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2);
      for (var k = 0; k < hLen; k++) {
        T[k] ^= U[k];
      }
    }

    T.copy(DK, destPos);
    destPos += hLen;
  }

  return DK;
}

module.exports = pbkdf2;

},{"./default-encoding":155,"./precondition":156,"create-hash/md5":58,"ripemd160":180,"safe-buffer":181,"sha.js":183}],158:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
    case 0:
    case 1:
      return process.nextTick(fn);
    case 2:
      return process.nextTick(function afterTickOne() {
        fn.call(null, arg1);
      });
    case 3:
      return process.nextTick(function afterTickTwo() {
        fn.call(null, arg1, arg2);
      });
    case 4:
      return process.nextTick(function afterTickThree() {
        fn.call(null, arg1, arg2, arg3);
      });
    default:
      args = new Array(len - 1);
      i = 0;
      while (i < args.length) {
        args[i++] = arguments[i];
      }
      return process.nextTick(function afterTick() {
        fn.apply(null, args);
      });
  }
}

}).call(this,require('_process'))

},{"_process":159}],159:[function(require,module,exports){
'use strict';

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

},{}],160:[function(require,module,exports){
'use strict';

exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};

},{"./privateDecrypt":162,"./publicEncrypt":163}],161:[function(require,module,exports){
(function (Buffer){
'use strict';

var createHash = require('create-hash');
module.exports = function (seed, len) {
  var t = new Buffer('');
  var i = 0,
      c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c, 0);
  return out;
}

}).call(this,require("buffer").Buffer)

},{"buffer":52,"create-hash":56}],162:[function(require,module,exports){
(function (Buffer){
'use strict';

var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }

  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg) {
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb = msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse) {
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) {
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return msg.slice(i);
}
function compare(a, b) {
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += a[i] ^ b[i];
  }
  return dif;
}

}).call(this,require("buffer").Buffer)

},{"./mgf":161,"./withPublic":164,"./xor":165,"bn.js":21,"browserify-rsa":44,"buffer":52,"create-hash":56,"parse-asn1":152}],163:[function(require,module,exports){
(function (Buffer){
'use strict';

var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg) {
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse) {
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse ? 1 : 2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len * 2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}

}).call(this,require("buffer").Buffer)

},{"./mgf":161,"./withPublic":164,"./xor":165,"bn.js":21,"browserify-rsa":44,"buffer":52,"create-hash":56,"parse-asn1":152,"randombytes":166}],164:[function(require,module,exports){
(function (Buffer){
'use strict';

var bn = require('bn.js');
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg.toRed(bn.mont(key.modulus)).redPow(new bn(key.publicExponent)).fromRed().toArray());
}

module.exports = withPublic;

}).call(this,require("buffer").Buffer)

},{"bn.js":21,"buffer":52}],165:[function(require,module,exports){
"use strict";

module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a;
};

},{}],166:[function(require,module,exports){
(function (process,global){
'use strict';

function oldBrowser() {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
}

var Buffer = require('safe-buffer').Buffer;
var crypto = global.crypto || global.msCrypto;

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes;
} else {
  module.exports = oldBrowser;
}

function randomBytes(size, cb) {
  // phantomjs needs to throw
  if (size > 65536) throw new Error('requested too many random bytes');
  // in case browserify  isn't using the Uint8Array version
  var rawBytes = new global.Uint8Array(size);

  // This will not work in older browsers.
  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
  if (size > 0) {
    // getRandomValues fails on IE if size == 0
    crypto.getRandomValues(rawBytes);
  }

  // XXX: phantomjs doesn't like a buffer being passed here
  var bytes = Buffer.from(rawBytes.buffer);

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes);
    });
  }

  return bytes;
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":159,"safe-buffer":181}],167:[function(require,module,exports){
'use strict';

module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":168}],168:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  processNextTick(cb, err);
};

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

},{"./_stream_readable":170,"./_stream_writable":172,"core-util-is":54,"inherits":140,"process-nextick-args":158}],169:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":171,"core-util-is":54,"inherits":140}],170:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

// TODO(bmeurer): Change this back to const once hole checks are
// properly optimized away early in Ignition+TurboFan.
/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./_stream_duplex":168,"./internal/streams/BufferList":173,"./internal/streams/destroy":174,"./internal/streams/stream":175,"_process":159,"core-util-is":54,"events":122,"inherits":140,"isarray":142,"process-nextick-args":158,"safe-buffer":181,"string_decoder/":191,"util":23}],171:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return stream.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":168,"core-util-is":54,"inherits":140}],172:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/
var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;

    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = _isUint8Array(chunk) && !state.objectMode;

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    processNextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    processNextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      stream.emit('error', err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      processNextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }
  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});

Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./_stream_duplex":168,"./internal/streams/destroy":174,"./internal/streams/stream":175,"_process":159,"core-util-is":54,"inherits":140,"process-nextick-args":158,"safe-buffer":181,"util-deprecate":193}],173:[function(require,module,exports){
'use strict';

/*<replacement>*/

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

},{"safe-buffer":181}],174:[function(require,module,exports){
'use strict';

/*<replacement>*/

var processNextTick = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      processNextTick(emitErrorNT, this, err);
    }
    return;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      processNextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

},{"process-nextick-args":158}],175:[function(require,module,exports){
'use strict';

module.exports = require('events').EventEmitter;

},{"events":122}],176:[function(require,module,exports){
'use strict';

module.exports = require('./readable').PassThrough;

},{"./readable":177}],177:[function(require,module,exports){
'use strict';

exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":168,"./lib/_stream_passthrough.js":169,"./lib/_stream_readable.js":170,"./lib/_stream_transform.js":171,"./lib/_stream_writable.js":172}],178:[function(require,module,exports){
'use strict';

module.exports = require('./readable').Transform;

},{"./readable":177}],179:[function(require,module,exports){
'use strict';

module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":172}],180:[function(require,module,exports){
(function (Buffer){
'use strict';

var inherits = require('inherits');
var HashBase = require('hash-base');

function RIPEMD160() {
  HashBase.call(this, 64);

  // state
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;
}

inherits(RIPEMD160, HashBase);

RIPEMD160.prototype._update = function () {
  var m = new Array(16);
  for (var i = 0; i < 16; ++i) {
    m[i] = this._block.readInt32LE(i * 4);
  }var al = this._a;
  var bl = this._b;
  var cl = this._c;
  var dl = this._d;
  var el = this._e;

  // Mj = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
  // K = 0x00000000
  // Sj = 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8
  al = fn1(al, bl, cl, dl, el, m[0], 0x00000000, 11);cl = rotl(cl, 10);
  el = fn1(el, al, bl, cl, dl, m[1], 0x00000000, 14);bl = rotl(bl, 10);
  dl = fn1(dl, el, al, bl, cl, m[2], 0x00000000, 15);al = rotl(al, 10);
  cl = fn1(cl, dl, el, al, bl, m[3], 0x00000000, 12);el = rotl(el, 10);
  bl = fn1(bl, cl, dl, el, al, m[4], 0x00000000, 5);dl = rotl(dl, 10);
  al = fn1(al, bl, cl, dl, el, m[5], 0x00000000, 8);cl = rotl(cl, 10);
  el = fn1(el, al, bl, cl, dl, m[6], 0x00000000, 7);bl = rotl(bl, 10);
  dl = fn1(dl, el, al, bl, cl, m[7], 0x00000000, 9);al = rotl(al, 10);
  cl = fn1(cl, dl, el, al, bl, m[8], 0x00000000, 11);el = rotl(el, 10);
  bl = fn1(bl, cl, dl, el, al, m[9], 0x00000000, 13);dl = rotl(dl, 10);
  al = fn1(al, bl, cl, dl, el, m[10], 0x00000000, 14);cl = rotl(cl, 10);
  el = fn1(el, al, bl, cl, dl, m[11], 0x00000000, 15);bl = rotl(bl, 10);
  dl = fn1(dl, el, al, bl, cl, m[12], 0x00000000, 6);al = rotl(al, 10);
  cl = fn1(cl, dl, el, al, bl, m[13], 0x00000000, 7);el = rotl(el, 10);
  bl = fn1(bl, cl, dl, el, al, m[14], 0x00000000, 9);dl = rotl(dl, 10);
  al = fn1(al, bl, cl, dl, el, m[15], 0x00000000, 8);cl = rotl(cl, 10);

  // Mj = 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8
  // K = 0x5a827999
  // Sj = 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12
  el = fn2(el, al, bl, cl, dl, m[7], 0x5a827999, 7);bl = rotl(bl, 10);
  dl = fn2(dl, el, al, bl, cl, m[4], 0x5a827999, 6);al = rotl(al, 10);
  cl = fn2(cl, dl, el, al, bl, m[13], 0x5a827999, 8);el = rotl(el, 10);
  bl = fn2(bl, cl, dl, el, al, m[1], 0x5a827999, 13);dl = rotl(dl, 10);
  al = fn2(al, bl, cl, dl, el, m[10], 0x5a827999, 11);cl = rotl(cl, 10);
  el = fn2(el, al, bl, cl, dl, m[6], 0x5a827999, 9);bl = rotl(bl, 10);
  dl = fn2(dl, el, al, bl, cl, m[15], 0x5a827999, 7);al = rotl(al, 10);
  cl = fn2(cl, dl, el, al, bl, m[3], 0x5a827999, 15);el = rotl(el, 10);
  bl = fn2(bl, cl, dl, el, al, m[12], 0x5a827999, 7);dl = rotl(dl, 10);
  al = fn2(al, bl, cl, dl, el, m[0], 0x5a827999, 12);cl = rotl(cl, 10);
  el = fn2(el, al, bl, cl, dl, m[9], 0x5a827999, 15);bl = rotl(bl, 10);
  dl = fn2(dl, el, al, bl, cl, m[5], 0x5a827999, 9);al = rotl(al, 10);
  cl = fn2(cl, dl, el, al, bl, m[2], 0x5a827999, 11);el = rotl(el, 10);
  bl = fn2(bl, cl, dl, el, al, m[14], 0x5a827999, 7);dl = rotl(dl, 10);
  al = fn2(al, bl, cl, dl, el, m[11], 0x5a827999, 13);cl = rotl(cl, 10);
  el = fn2(el, al, bl, cl, dl, m[8], 0x5a827999, 12);bl = rotl(bl, 10);

  // Mj = 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12
  // K = 0x6ed9eba1
  // Sj = 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5
  dl = fn3(dl, el, al, bl, cl, m[3], 0x6ed9eba1, 11);al = rotl(al, 10);
  cl = fn3(cl, dl, el, al, bl, m[10], 0x6ed9eba1, 13);el = rotl(el, 10);
  bl = fn3(bl, cl, dl, el, al, m[14], 0x6ed9eba1, 6);dl = rotl(dl, 10);
  al = fn3(al, bl, cl, dl, el, m[4], 0x6ed9eba1, 7);cl = rotl(cl, 10);
  el = fn3(el, al, bl, cl, dl, m[9], 0x6ed9eba1, 14);bl = rotl(bl, 10);
  dl = fn3(dl, el, al, bl, cl, m[15], 0x6ed9eba1, 9);al = rotl(al, 10);
  cl = fn3(cl, dl, el, al, bl, m[8], 0x6ed9eba1, 13);el = rotl(el, 10);
  bl = fn3(bl, cl, dl, el, al, m[1], 0x6ed9eba1, 15);dl = rotl(dl, 10);
  al = fn3(al, bl, cl, dl, el, m[2], 0x6ed9eba1, 14);cl = rotl(cl, 10);
  el = fn3(el, al, bl, cl, dl, m[7], 0x6ed9eba1, 8);bl = rotl(bl, 10);
  dl = fn3(dl, el, al, bl, cl, m[0], 0x6ed9eba1, 13);al = rotl(al, 10);
  cl = fn3(cl, dl, el, al, bl, m[6], 0x6ed9eba1, 6);el = rotl(el, 10);
  bl = fn3(bl, cl, dl, el, al, m[13], 0x6ed9eba1, 5);dl = rotl(dl, 10);
  al = fn3(al, bl, cl, dl, el, m[11], 0x6ed9eba1, 12);cl = rotl(cl, 10);
  el = fn3(el, al, bl, cl, dl, m[5], 0x6ed9eba1, 7);bl = rotl(bl, 10);
  dl = fn3(dl, el, al, bl, cl, m[12], 0x6ed9eba1, 5);al = rotl(al, 10);

  // Mj = 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2
  // K = 0x8f1bbcdc
  // Sj = 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12
  cl = fn4(cl, dl, el, al, bl, m[1], 0x8f1bbcdc, 11);el = rotl(el, 10);
  bl = fn4(bl, cl, dl, el, al, m[9], 0x8f1bbcdc, 12);dl = rotl(dl, 10);
  al = fn4(al, bl, cl, dl, el, m[11], 0x8f1bbcdc, 14);cl = rotl(cl, 10);
  el = fn4(el, al, bl, cl, dl, m[10], 0x8f1bbcdc, 15);bl = rotl(bl, 10);
  dl = fn4(dl, el, al, bl, cl, m[0], 0x8f1bbcdc, 14);al = rotl(al, 10);
  cl = fn4(cl, dl, el, al, bl, m[8], 0x8f1bbcdc, 15);el = rotl(el, 10);
  bl = fn4(bl, cl, dl, el, al, m[12], 0x8f1bbcdc, 9);dl = rotl(dl, 10);
  al = fn4(al, bl, cl, dl, el, m[4], 0x8f1bbcdc, 8);cl = rotl(cl, 10);
  el = fn4(el, al, bl, cl, dl, m[13], 0x8f1bbcdc, 9);bl = rotl(bl, 10);
  dl = fn4(dl, el, al, bl, cl, m[3], 0x8f1bbcdc, 14);al = rotl(al, 10);
  cl = fn4(cl, dl, el, al, bl, m[7], 0x8f1bbcdc, 5);el = rotl(el, 10);
  bl = fn4(bl, cl, dl, el, al, m[15], 0x8f1bbcdc, 6);dl = rotl(dl, 10);
  al = fn4(al, bl, cl, dl, el, m[14], 0x8f1bbcdc, 8);cl = rotl(cl, 10);
  el = fn4(el, al, bl, cl, dl, m[5], 0x8f1bbcdc, 6);bl = rotl(bl, 10);
  dl = fn4(dl, el, al, bl, cl, m[6], 0x8f1bbcdc, 5);al = rotl(al, 10);
  cl = fn4(cl, dl, el, al, bl, m[2], 0x8f1bbcdc, 12);el = rotl(el, 10);

  // Mj = 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
  // K = 0xa953fd4e
  // Sj = 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
  bl = fn5(bl, cl, dl, el, al, m[4], 0xa953fd4e, 9);dl = rotl(dl, 10);
  al = fn5(al, bl, cl, dl, el, m[0], 0xa953fd4e, 15);cl = rotl(cl, 10);
  el = fn5(el, al, bl, cl, dl, m[5], 0xa953fd4e, 5);bl = rotl(bl, 10);
  dl = fn5(dl, el, al, bl, cl, m[9], 0xa953fd4e, 11);al = rotl(al, 10);
  cl = fn5(cl, dl, el, al, bl, m[7], 0xa953fd4e, 6);el = rotl(el, 10);
  bl = fn5(bl, cl, dl, el, al, m[12], 0xa953fd4e, 8);dl = rotl(dl, 10);
  al = fn5(al, bl, cl, dl, el, m[2], 0xa953fd4e, 13);cl = rotl(cl, 10);
  el = fn5(el, al, bl, cl, dl, m[10], 0xa953fd4e, 12);bl = rotl(bl, 10);
  dl = fn5(dl, el, al, bl, cl, m[14], 0xa953fd4e, 5);al = rotl(al, 10);
  cl = fn5(cl, dl, el, al, bl, m[1], 0xa953fd4e, 12);el = rotl(el, 10);
  bl = fn5(bl, cl, dl, el, al, m[3], 0xa953fd4e, 13);dl = rotl(dl, 10);
  al = fn5(al, bl, cl, dl, el, m[8], 0xa953fd4e, 14);cl = rotl(cl, 10);
  el = fn5(el, al, bl, cl, dl, m[11], 0xa953fd4e, 11);bl = rotl(bl, 10);
  dl = fn5(dl, el, al, bl, cl, m[6], 0xa953fd4e, 8);al = rotl(al, 10);
  cl = fn5(cl, dl, el, al, bl, m[15], 0xa953fd4e, 5);el = rotl(el, 10);
  bl = fn5(bl, cl, dl, el, al, m[13], 0xa953fd4e, 6);dl = rotl(dl, 10);

  var ar = this._a;
  var br = this._b;
  var cr = this._c;
  var dr = this._d;
  var er = this._e;

  // M'j = 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12
  // K' = 0x50a28be6
  // S'j = 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6
  ar = fn5(ar, br, cr, dr, er, m[5], 0x50a28be6, 8);cr = rotl(cr, 10);
  er = fn5(er, ar, br, cr, dr, m[14], 0x50a28be6, 9);br = rotl(br, 10);
  dr = fn5(dr, er, ar, br, cr, m[7], 0x50a28be6, 9);ar = rotl(ar, 10);
  cr = fn5(cr, dr, er, ar, br, m[0], 0x50a28be6, 11);er = rotl(er, 10);
  br = fn5(br, cr, dr, er, ar, m[9], 0x50a28be6, 13);dr = rotl(dr, 10);
  ar = fn5(ar, br, cr, dr, er, m[2], 0x50a28be6, 15);cr = rotl(cr, 10);
  er = fn5(er, ar, br, cr, dr, m[11], 0x50a28be6, 15);br = rotl(br, 10);
  dr = fn5(dr, er, ar, br, cr, m[4], 0x50a28be6, 5);ar = rotl(ar, 10);
  cr = fn5(cr, dr, er, ar, br, m[13], 0x50a28be6, 7);er = rotl(er, 10);
  br = fn5(br, cr, dr, er, ar, m[6], 0x50a28be6, 7);dr = rotl(dr, 10);
  ar = fn5(ar, br, cr, dr, er, m[15], 0x50a28be6, 8);cr = rotl(cr, 10);
  er = fn5(er, ar, br, cr, dr, m[8], 0x50a28be6, 11);br = rotl(br, 10);
  dr = fn5(dr, er, ar, br, cr, m[1], 0x50a28be6, 14);ar = rotl(ar, 10);
  cr = fn5(cr, dr, er, ar, br, m[10], 0x50a28be6, 14);er = rotl(er, 10);
  br = fn5(br, cr, dr, er, ar, m[3], 0x50a28be6, 12);dr = rotl(dr, 10);
  ar = fn5(ar, br, cr, dr, er, m[12], 0x50a28be6, 6);cr = rotl(cr, 10);

  // M'j = 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2
  // K' = 0x5c4dd124
  // S'j = 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11
  er = fn4(er, ar, br, cr, dr, m[6], 0x5c4dd124, 9);br = rotl(br, 10);
  dr = fn4(dr, er, ar, br, cr, m[11], 0x5c4dd124, 13);ar = rotl(ar, 10);
  cr = fn4(cr, dr, er, ar, br, m[3], 0x5c4dd124, 15);er = rotl(er, 10);
  br = fn4(br, cr, dr, er, ar, m[7], 0x5c4dd124, 7);dr = rotl(dr, 10);
  ar = fn4(ar, br, cr, dr, er, m[0], 0x5c4dd124, 12);cr = rotl(cr, 10);
  er = fn4(er, ar, br, cr, dr, m[13], 0x5c4dd124, 8);br = rotl(br, 10);
  dr = fn4(dr, er, ar, br, cr, m[5], 0x5c4dd124, 9);ar = rotl(ar, 10);
  cr = fn4(cr, dr, er, ar, br, m[10], 0x5c4dd124, 11);er = rotl(er, 10);
  br = fn4(br, cr, dr, er, ar, m[14], 0x5c4dd124, 7);dr = rotl(dr, 10);
  ar = fn4(ar, br, cr, dr, er, m[15], 0x5c4dd124, 7);cr = rotl(cr, 10);
  er = fn4(er, ar, br, cr, dr, m[8], 0x5c4dd124, 12);br = rotl(br, 10);
  dr = fn4(dr, er, ar, br, cr, m[12], 0x5c4dd124, 7);ar = rotl(ar, 10);
  cr = fn4(cr, dr, er, ar, br, m[4], 0x5c4dd124, 6);er = rotl(er, 10);
  br = fn4(br, cr, dr, er, ar, m[9], 0x5c4dd124, 15);dr = rotl(dr, 10);
  ar = fn4(ar, br, cr, dr, er, m[1], 0x5c4dd124, 13);cr = rotl(cr, 10);
  er = fn4(er, ar, br, cr, dr, m[2], 0x5c4dd124, 11);br = rotl(br, 10);

  // M'j = 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13
  // K' = 0x6d703ef3
  // S'j = 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5
  dr = fn3(dr, er, ar, br, cr, m[15], 0x6d703ef3, 9);ar = rotl(ar, 10);
  cr = fn3(cr, dr, er, ar, br, m[5], 0x6d703ef3, 7);er = rotl(er, 10);
  br = fn3(br, cr, dr, er, ar, m[1], 0x6d703ef3, 15);dr = rotl(dr, 10);
  ar = fn3(ar, br, cr, dr, er, m[3], 0x6d703ef3, 11);cr = rotl(cr, 10);
  er = fn3(er, ar, br, cr, dr, m[7], 0x6d703ef3, 8);br = rotl(br, 10);
  dr = fn3(dr, er, ar, br, cr, m[14], 0x6d703ef3, 6);ar = rotl(ar, 10);
  cr = fn3(cr, dr, er, ar, br, m[6], 0x6d703ef3, 6);er = rotl(er, 10);
  br = fn3(br, cr, dr, er, ar, m[9], 0x6d703ef3, 14);dr = rotl(dr, 10);
  ar = fn3(ar, br, cr, dr, er, m[11], 0x6d703ef3, 12);cr = rotl(cr, 10);
  er = fn3(er, ar, br, cr, dr, m[8], 0x6d703ef3, 13);br = rotl(br, 10);
  dr = fn3(dr, er, ar, br, cr, m[12], 0x6d703ef3, 5);ar = rotl(ar, 10);
  cr = fn3(cr, dr, er, ar, br, m[2], 0x6d703ef3, 14);er = rotl(er, 10);
  br = fn3(br, cr, dr, er, ar, m[10], 0x6d703ef3, 13);dr = rotl(dr, 10);
  ar = fn3(ar, br, cr, dr, er, m[0], 0x6d703ef3, 13);cr = rotl(cr, 10);
  er = fn3(er, ar, br, cr, dr, m[4], 0x6d703ef3, 7);br = rotl(br, 10);
  dr = fn3(dr, er, ar, br, cr, m[13], 0x6d703ef3, 5);ar = rotl(ar, 10);

  // M'j = 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14
  // K' = 0x7a6d76e9
  // S'j = 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8
  cr = fn2(cr, dr, er, ar, br, m[8], 0x7a6d76e9, 15);er = rotl(er, 10);
  br = fn2(br, cr, dr, er, ar, m[6], 0x7a6d76e9, 5);dr = rotl(dr, 10);
  ar = fn2(ar, br, cr, dr, er, m[4], 0x7a6d76e9, 8);cr = rotl(cr, 10);
  er = fn2(er, ar, br, cr, dr, m[1], 0x7a6d76e9, 11);br = rotl(br, 10);
  dr = fn2(dr, er, ar, br, cr, m[3], 0x7a6d76e9, 14);ar = rotl(ar, 10);
  cr = fn2(cr, dr, er, ar, br, m[11], 0x7a6d76e9, 14);er = rotl(er, 10);
  br = fn2(br, cr, dr, er, ar, m[15], 0x7a6d76e9, 6);dr = rotl(dr, 10);
  ar = fn2(ar, br, cr, dr, er, m[0], 0x7a6d76e9, 14);cr = rotl(cr, 10);
  er = fn2(er, ar, br, cr, dr, m[5], 0x7a6d76e9, 6);br = rotl(br, 10);
  dr = fn2(dr, er, ar, br, cr, m[12], 0x7a6d76e9, 9);ar = rotl(ar, 10);
  cr = fn2(cr, dr, er, ar, br, m[2], 0x7a6d76e9, 12);er = rotl(er, 10);
  br = fn2(br, cr, dr, er, ar, m[13], 0x7a6d76e9, 9);dr = rotl(dr, 10);
  ar = fn2(ar, br, cr, dr, er, m[9], 0x7a6d76e9, 12);cr = rotl(cr, 10);
  er = fn2(er, ar, br, cr, dr, m[7], 0x7a6d76e9, 5);br = rotl(br, 10);
  dr = fn2(dr, er, ar, br, cr, m[10], 0x7a6d76e9, 15);ar = rotl(ar, 10);
  cr = fn2(cr, dr, er, ar, br, m[14], 0x7a6d76e9, 8);er = rotl(er, 10);

  // M'j = 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
  // K' = 0x00000000
  // S'j = 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
  br = fn1(br, cr, dr, er, ar, m[12], 0x00000000, 8);dr = rotl(dr, 10);
  ar = fn1(ar, br, cr, dr, er, m[15], 0x00000000, 5);cr = rotl(cr, 10);
  er = fn1(er, ar, br, cr, dr, m[10], 0x00000000, 12);br = rotl(br, 10);
  dr = fn1(dr, er, ar, br, cr, m[4], 0x00000000, 9);ar = rotl(ar, 10);
  cr = fn1(cr, dr, er, ar, br, m[1], 0x00000000, 12);er = rotl(er, 10);
  br = fn1(br, cr, dr, er, ar, m[5], 0x00000000, 5);dr = rotl(dr, 10);
  ar = fn1(ar, br, cr, dr, er, m[8], 0x00000000, 14);cr = rotl(cr, 10);
  er = fn1(er, ar, br, cr, dr, m[7], 0x00000000, 6);br = rotl(br, 10);
  dr = fn1(dr, er, ar, br, cr, m[6], 0x00000000, 8);ar = rotl(ar, 10);
  cr = fn1(cr, dr, er, ar, br, m[2], 0x00000000, 13);er = rotl(er, 10);
  br = fn1(br, cr, dr, er, ar, m[13], 0x00000000, 6);dr = rotl(dr, 10);
  ar = fn1(ar, br, cr, dr, er, m[14], 0x00000000, 5);cr = rotl(cr, 10);
  er = fn1(er, ar, br, cr, dr, m[0], 0x00000000, 15);br = rotl(br, 10);
  dr = fn1(dr, er, ar, br, cr, m[3], 0x00000000, 13);ar = rotl(ar, 10);
  cr = fn1(cr, dr, er, ar, br, m[9], 0x00000000, 11);er = rotl(er, 10);
  br = fn1(br, cr, dr, er, ar, m[11], 0x00000000, 11);dr = rotl(dr, 10);

  // change state
  var t = this._b + cl + dr | 0;
  this._b = this._c + dl + er | 0;
  this._c = this._d + el + ar | 0;
  this._d = this._e + al + br | 0;
  this._e = this._a + bl + cr | 0;
  this._a = t;
};

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80;
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64);
    this._update();
    this._blockOffset = 0;
  }

  this._block.fill(0, this._blockOffset, 56);
  this._block.writeUInt32LE(this._length[0], 56);
  this._block.writeUInt32LE(this._length[1], 60);
  this._update();

  // produce result
  var buffer = new Buffer(20);
  buffer.writeInt32LE(this._a, 0);
  buffer.writeInt32LE(this._b, 4);
  buffer.writeInt32LE(this._c, 8);
  buffer.writeInt32LE(this._d, 12);
  buffer.writeInt32LE(this._e, 16);
  return buffer;
};

function rotl(x, n) {
  return x << n | x >>> 32 - n;
}

function fn1(a, b, c, d, e, m, k, s) {
  return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}

function fn2(a, b, c, d, e, m, k, s) {
  return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}

function fn3(a, b, c, d, e, m, k, s) {
  return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}

function fn4(a, b, c, d, e, m, k, s) {
  return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}

function fn5(a, b, c, d, e, m, k, s) {
  return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}

module.exports = RIPEMD160;

}).call(this,require("buffer").Buffer)

},{"buffer":52,"hash-base":124,"inherits":140}],181:[function(require,module,exports){
'use strict';

/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer');
var Buffer = buffer.Buffer;

// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }
  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  var buf = Buffer(size);
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }
  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }
  return buffer.SlowBuffer(size);
};

},{"buffer":52}],182:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

// prototype class for hash functions
function Hash(blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize);
  this._finalSize = finalSize;
  this._blockSize = blockSize;
  this._len = 0;
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8';
    data = Buffer.from(data, enc);
  }

  var block = this._block;
  var blockSize = this._blockSize;
  var length = data.length;
  var accum = this._len;

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize;
    var remainder = Math.min(length - offset, blockSize - assigned);

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i];
    }

    accum += remainder;
    offset += remainder;

    if (accum % blockSize === 0) {
      this._update(block);
    }
  }

  this._len += length;
  return this;
};

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize;

  this._block[rem] = 0x80;

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1);

  if (rem >= this._finalSize) {
    this._update(this._block);
    this._block.fill(0);
  }

  var bits = this._len * 8;

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4);

    // uint64
  } else {
    var lowBits = bits & 0xffffffff;
    var highBits = (bits - lowBits) / 0x100000000;

    this._block.writeUInt32BE(highBits, this._blockSize - 8);
    this._block.writeUInt32BE(lowBits, this._blockSize - 4);
  }

  this._update(this._block);
  var hash = this._hash();

  return enc ? hash.toString(enc) : hash;
};

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass');
};

module.exports = Hash;

},{"safe-buffer":181}],183:[function(require,module,exports){
'use strict';

var _exports = module.exports = function SHA(algorithm) {
  algorithm = algorithm.toLowerCase();

  var Algorithm = _exports[algorithm];
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');

  return new Algorithm();
};

_exports.sha = require('./sha');
_exports.sha1 = require('./sha1');
_exports.sha224 = require('./sha224');
_exports.sha256 = require('./sha256');
_exports.sha384 = require('./sha384');
_exports.sha512 = require('./sha512');

},{"./sha":184,"./sha1":185,"./sha224":186,"./sha256":187,"./sha384":188,"./sha512":189}],184:[function(require,module,exports){
'use strict';

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;

var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];

var W = new Array(80);

function Sha() {
  this.init();
  this._w = W;

  Hash.call(this, 64, 56);
}

inherits(Sha, Hash);

Sha.prototype.init = function () {
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;

  return this;
};

function rotl5(num) {
  return num << 5 | num >>> 27;
}

function rotl30(num) {
  return num << 30 | num >>> 2;
}

function ft(s, b, c, d) {
  if (s === 0) return b & c | ~b & d;
  if (s === 2) return b & c | b & d | c & d;
  return b ^ c ^ d;
}

Sha.prototype._update = function (M) {
  var W = this._w;

  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }for (; i < 80; ++i) {
    W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
  }for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20);
    var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;

    e = d;
    d = c;
    c = rotl30(b);
    b = a;
    a = t;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
};

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20);

  H.writeInt32BE(this._a | 0, 0);
  H.writeInt32BE(this._b | 0, 4);
  H.writeInt32BE(this._c | 0, 8);
  H.writeInt32BE(this._d | 0, 12);
  H.writeInt32BE(this._e | 0, 16);

  return H;
};

module.exports = Sha;

},{"./hash":182,"inherits":140,"safe-buffer":181}],185:[function(require,module,exports){
'use strict';

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;

var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];

var W = new Array(80);

function Sha1() {
  this.init();
  this._w = W;

  Hash.call(this, 64, 56);
}

inherits(Sha1, Hash);

Sha1.prototype.init = function () {
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;

  return this;
};

function rotl1(num) {
  return num << 1 | num >>> 31;
}

function rotl5(num) {
  return num << 5 | num >>> 27;
}

function rotl30(num) {
  return num << 30 | num >>> 2;
}

function ft(s, b, c, d) {
  if (s === 0) return b & c | ~b & d;
  if (s === 2) return b & c | b & d | c & d;
  return b ^ c ^ d;
}

Sha1.prototype._update = function (M) {
  var W = this._w;

  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }for (; i < 80; ++i) {
    W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
  }for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20);
    var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;

    e = d;
    d = c;
    c = rotl30(b);
    b = a;
    a = t;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
};

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20);

  H.writeInt32BE(this._a | 0, 0);
  H.writeInt32BE(this._b | 0, 4);
  H.writeInt32BE(this._c | 0, 8);
  H.writeInt32BE(this._d | 0, 12);
  H.writeInt32BE(this._e | 0, 16);

  return H;
};

module.exports = Sha1;

},{"./hash":182,"inherits":140,"safe-buffer":181}],186:[function(require,module,exports){
'use strict';

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits');
var Sha256 = require('./sha256');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;

var W = new Array(64);

function Sha224() {
  this.init();

  this._w = W; // new Array(64)

  Hash.call(this, 64, 56);
}

inherits(Sha224, Sha256);

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8;
  this._b = 0x367cd507;
  this._c = 0x3070dd17;
  this._d = 0xf70e5939;
  this._e = 0xffc00b31;
  this._f = 0x68581511;
  this._g = 0x64f98fa7;
  this._h = 0xbefa4fa4;

  return this;
};

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28);

  H.writeInt32BE(this._a, 0);
  H.writeInt32BE(this._b, 4);
  H.writeInt32BE(this._c, 8);
  H.writeInt32BE(this._d, 12);
  H.writeInt32BE(this._e, 16);
  H.writeInt32BE(this._f, 20);
  H.writeInt32BE(this._g, 24);

  return H;
};

module.exports = Sha224;

},{"./hash":182,"./sha256":187,"inherits":140,"safe-buffer":181}],187:[function(require,module,exports){
'use strict';

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;

var K = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];

var W = new Array(64);

function Sha256() {
  this.init();

  this._w = W; // new Array(64)

  Hash.call(this, 64, 56);
}

inherits(Sha256, Hash);

Sha256.prototype.init = function () {
  this._a = 0x6a09e667;
  this._b = 0xbb67ae85;
  this._c = 0x3c6ef372;
  this._d = 0xa54ff53a;
  this._e = 0x510e527f;
  this._f = 0x9b05688c;
  this._g = 0x1f83d9ab;
  this._h = 0x5be0cd19;

  return this;
};

function ch(x, y, z) {
  return z ^ x & (y ^ z);
}

function maj(x, y, z) {
  return x & y | z & (x | y);
}

function sigma0(x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}

function sigma1(x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}

function gamma0(x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}

function gamma1(x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}

Sha256.prototype._update = function (M) {
  var W = this._w;

  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;
  var f = this._f | 0;
  var g = this._g | 0;
  var h = this._h | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }for (; i < 64; ++i) {
    W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
  }for (var j = 0; j < 64; ++j) {
    var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
    var T2 = sigma0(a) + maj(a, b, c) | 0;

    h = g;
    g = f;
    f = e;
    e = d + T1 | 0;
    d = c;
    c = b;
    b = a;
    a = T1 + T2 | 0;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
  this._f = f + this._f | 0;
  this._g = g + this._g | 0;
  this._h = h + this._h | 0;
};

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32);

  H.writeInt32BE(this._a, 0);
  H.writeInt32BE(this._b, 4);
  H.writeInt32BE(this._c, 8);
  H.writeInt32BE(this._d, 12);
  H.writeInt32BE(this._e, 16);
  H.writeInt32BE(this._f, 20);
  H.writeInt32BE(this._g, 24);
  H.writeInt32BE(this._h, 28);

  return H;
};

module.exports = Sha256;

},{"./hash":182,"inherits":140,"safe-buffer":181}],188:[function(require,module,exports){
'use strict';

var inherits = require('inherits');
var SHA512 = require('./sha512');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;

var W = new Array(160);

function Sha384() {
  this.init();
  this._w = W;

  Hash.call(this, 128, 112);
}

inherits(Sha384, SHA512);

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d;
  this._bh = 0x629a292a;
  this._ch = 0x9159015a;
  this._dh = 0x152fecd8;
  this._eh = 0x67332667;
  this._fh = 0x8eb44a87;
  this._gh = 0xdb0c2e0d;
  this._hh = 0x47b5481d;

  this._al = 0xc1059ed8;
  this._bl = 0x367cd507;
  this._cl = 0x3070dd17;
  this._dl = 0xf70e5939;
  this._el = 0xffc00b31;
  this._fl = 0x68581511;
  this._gl = 0x64f98fa7;
  this._hl = 0xbefa4fa4;

  return this;
};

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48);

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset);
    H.writeInt32BE(l, offset + 4);
  }

  writeInt64BE(this._ah, this._al, 0);
  writeInt64BE(this._bh, this._bl, 8);
  writeInt64BE(this._ch, this._cl, 16);
  writeInt64BE(this._dh, this._dl, 24);
  writeInt64BE(this._eh, this._el, 32);
  writeInt64BE(this._fh, this._fl, 40);

  return H;
};

module.exports = Sha384;

},{"./hash":182,"./sha512":189,"inherits":140,"safe-buffer":181}],189:[function(require,module,exports){
'use strict';

var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;

var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

var W = new Array(160);

function Sha512() {
  this.init();
  this._w = W;

  Hash.call(this, 128, 112);
}

inherits(Sha512, Hash);

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667;
  this._bh = 0xbb67ae85;
  this._ch = 0x3c6ef372;
  this._dh = 0xa54ff53a;
  this._eh = 0x510e527f;
  this._fh = 0x9b05688c;
  this._gh = 0x1f83d9ab;
  this._hh = 0x5be0cd19;

  this._al = 0xf3bcc908;
  this._bl = 0x84caa73b;
  this._cl = 0xfe94f82b;
  this._dl = 0x5f1d36f1;
  this._el = 0xade682d1;
  this._fl = 0x2b3e6c1f;
  this._gl = 0xfb41bd6b;
  this._hl = 0x137e2179;

  return this;
};

function Ch(x, y, z) {
  return z ^ x & (y ^ z);
}

function maj(x, y, z) {
  return x & y | z & (x | y);
}

function sigma0(x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}

function sigma1(x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}

function Gamma0(x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}

function Gamma0l(x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}

function Gamma1(x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}

function Gamma1l(x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}

function getCarry(a, b) {
  return a >>> 0 < b >>> 0 ? 1 : 0;
}

Sha512.prototype._update = function (M) {
  var W = this._w;

  var ah = this._ah | 0;
  var bh = this._bh | 0;
  var ch = this._ch | 0;
  var dh = this._dh | 0;
  var eh = this._eh | 0;
  var fh = this._fh | 0;
  var gh = this._gh | 0;
  var hh = this._hh | 0;

  var al = this._al | 0;
  var bl = this._bl | 0;
  var cl = this._cl | 0;
  var dl = this._dl | 0;
  var el = this._el | 0;
  var fl = this._fl | 0;
  var gl = this._gl | 0;
  var hl = this._hl | 0;

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4);
    W[i + 1] = M.readInt32BE(i * 4 + 4);
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2];
    var xl = W[i - 15 * 2 + 1];
    var gamma0 = Gamma0(xh, xl);
    var gamma0l = Gamma0l(xl, xh);

    xh = W[i - 2 * 2];
    xl = W[i - 2 * 2 + 1];
    var gamma1 = Gamma1(xh, xl);
    var gamma1l = Gamma1l(xl, xh);

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2];
    var Wi7l = W[i - 7 * 2 + 1];

    var Wi16h = W[i - 16 * 2];
    var Wi16l = W[i - 16 * 2 + 1];

    var Wil = gamma0l + Wi7l | 0;
    var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
    Wil = Wil + gamma1l | 0;
    Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
    Wil = Wil + Wi16l | 0;
    Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;

    W[i] = Wih;
    W[i + 1] = Wil;
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j];
    Wil = W[j + 1];

    var majh = maj(ah, bh, ch);
    var majl = maj(al, bl, cl);

    var sigma0h = sigma0(ah, al);
    var sigma0l = sigma0(al, ah);
    var sigma1h = sigma1(eh, el);
    var sigma1l = sigma1(el, eh);

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j];
    var Kil = K[j + 1];

    var chh = Ch(eh, fh, gh);
    var chl = Ch(el, fl, gl);

    var t1l = hl + sigma1l | 0;
    var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
    t1l = t1l + chl | 0;
    t1h = t1h + chh + getCarry(t1l, chl) | 0;
    t1l = t1l + Kil | 0;
    t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
    t1l = t1l + Wil | 0;
    t1h = t1h + Wih + getCarry(t1l, Wil) | 0;

    // t2 = sigma0 + maj
    var t2l = sigma0l + majl | 0;
    var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;

    hh = gh;
    hl = gl;
    gh = fh;
    gl = fl;
    fh = eh;
    fl = el;
    el = dl + t1l | 0;
    eh = dh + t1h + getCarry(el, dl) | 0;
    dh = ch;
    dl = cl;
    ch = bh;
    cl = bl;
    bh = ah;
    bl = al;
    al = t1l + t2l | 0;
    ah = t1h + t2h + getCarry(al, t1l) | 0;
  }

  this._al = this._al + al | 0;
  this._bl = this._bl + bl | 0;
  this._cl = this._cl + cl | 0;
  this._dl = this._dl + dl | 0;
  this._el = this._el + el | 0;
  this._fl = this._fl + fl | 0;
  this._gl = this._gl + gl | 0;
  this._hl = this._hl + hl | 0;

  this._ah = this._ah + ah + getCarry(this._al, al) | 0;
  this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
  this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
  this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
  this._eh = this._eh + eh + getCarry(this._el, el) | 0;
  this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
  this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
  this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64);

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset);
    H.writeInt32BE(l, offset + 4);
  }

  writeInt64BE(this._ah, this._al, 0);
  writeInt64BE(this._bh, this._bl, 8);
  writeInt64BE(this._ch, this._cl, 16);
  writeInt64BE(this._dh, this._dl, 24);
  writeInt64BE(this._eh, this._el, 32);
  writeInt64BE(this._fh, this._fl, 40);
  writeInt64BE(this._gh, this._gl, 48);
  writeInt64BE(this._hh, this._hl, 56);

  return H;
};

module.exports = Sha512;

},{"./hash":182,"inherits":140,"safe-buffer":181}],190:[function(require,module,exports){
'use strict';

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;

// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function (dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }

  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":122,"inherits":140,"readable-stream/duplex.js":167,"readable-stream/passthrough.js":176,"readable-stream/readable.js":177,"readable-stream/transform.js":178,"readable-stream/writable.js":179}],191:[function(require,module,exports){
'use strict';

var Buffer = require('safe-buffer').Buffer;

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return -1;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\uFFFD'.repeat(p);
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\uFFFD'.repeat(p + 1);
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\uFFFD'.repeat(p + 2);
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character for each buffered byte of a (partial)
// character needs to be added to the output.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\uFFFD'.repeat(this.lastTotal - this.lastNeed);
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

},{"safe-buffer":181}],192:[function(require,module,exports){
(function (global){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! https://mths.be/utf8js v2.1.2 by @mathias */
;(function (root) {

	// Detect free variables `exports`
	var freeExports = (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) == 'object' && exports;

	// Detect free variable `module`
	var freeModule = (typeof module === 'undefined' ? 'undefined' : _typeof(module)) == 'object' && module && module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code,
	// and use it as `root`
	var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) {
					// low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	function checkScalarValue(codePoint) {
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
			throw Error('Lone surrogate U+' + codePoint.toString(16).toUpperCase() + ' is not a scalar value');
		}
	}
	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(codePoint >> shift & 0x3F | 0x80);
	}

	function encodeCodePoint(codePoint) {
		if ((codePoint & 0xFFFFFF80) == 0) {
			// 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) {
			// 2-byte sequence
			symbol = stringFromCharCode(codePoint >> 6 & 0x1F | 0xC0);
		} else if ((codePoint & 0xFFFF0000) == 0) {
			// 3-byte sequence
			checkScalarValue(codePoint);
			symbol = stringFromCharCode(codePoint >> 12 & 0x0F | 0xE0);
			symbol += createByte(codePoint, 6);
		} else if ((codePoint & 0xFFE00000) == 0) {
			// 4-byte sequence
			symbol = stringFromCharCode(codePoint >> 18 & 0x07 | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode(codePoint & 0x3F | 0x80);
		return symbol;
	}

	function utf8encode(string) {
		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol() {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read first byte
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			byte2 = readContinuationByte();
			codePoint = (byte1 & 0x1F) << 6 | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = (byte1 & 0x0F) << 12 | byte2 << 6 | byte3;
			if (codePoint >= 0x0800) {
				checkScalarValue(codePoint);
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = (byte1 & 0x07) << 0x12 | byte2 << 0x0C | byte3 << 0x06 | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid UTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function utf8decode(byteString) {
		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol()) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	var utf8 = {
		'version': '2.1.2',
		'encode': utf8encode,
		'decode': utf8decode
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (typeof define == 'function' && _typeof(define.amd) == 'object' && define.amd) {
		define(function () {
			return utf8;
		});
	} else if (freeExports && !freeExports.nodeType) {
		if (freeModule) {
			// in Node.js or RingoJS v0.8.0+
			freeModule.exports = utf8;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			var object = {};
			var hasOwnProperty = object.hasOwnProperty;
			for (var key in utf8) {
				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.utf8 = utf8;
	}
})(undefined);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],193:[function(require,module,exports){
(function (global){
'use strict';

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate(fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config(name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],194:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var indexOf = require('indexof');

var Object_keys = function Object_keys(obj) {
    if (Object.keys) return Object.keys(obj);else {
        var res = [];
        for (var key in obj) {
            res.push(key);
        }return res;
    }
};

var forEach = function forEach(xs, fn) {
    if (xs.forEach) return xs.forEach(fn);else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = function () {
    try {
        Object.defineProperty({}, '_', {});
        return function (obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            });
        };
    } catch (e) {
        return function (obj, name, value) {
            obj[name] = value;
        };
    }
}();

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function', 'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError', 'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError', 'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape', 'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript(code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }

    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';

    document.body.appendChild(iframe);

    var win = iframe.contentWindow;
    var wEval = win.eval,
        wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }

    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });

    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);

    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });

    document.body.removeChild(iframe);

    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if ((typeof context === 'undefined' ? 'undefined' : _typeof(context)) === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{"indexof":139}],195:[function(require,module,exports){
'use strict';

var Web3 = require('./lib/web3');

// dont override global variable
if (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {
    window.Web3 = Web3;
}

module.exports = Web3;

},{"./lib/web3":217}],196:[function(require,module,exports){
module.exports=[
  {
    "constant": true,
    "inputs": [
      {
        "name": "_owner",
        "type": "address"
      }
    ],
    "name": "name",
    "outputs": [
      {
        "name": "o_name",
        "type": "bytes32"
      }
    ],
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      }
    ],
    "name": "owner",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      }
    ],
    "name": "content",
    "outputs": [
      {
        "name": "",
        "type": "bytes32"
      }
    ],
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      }
    ],
    "name": "addr",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      }
    ],
    "name": "reserve",
    "outputs": [],
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      }
    ],
    "name": "subRegistrar",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      },
      {
        "name": "_newOwner",
        "type": "address"
      }
    ],
    "name": "transfer",
    "outputs": [],
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      },
      {
        "name": "_registrar",
        "type": "address"
      }
    ],
    "name": "setSubRegistrar",
    "outputs": [],
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [],
    "name": "Registrar",
    "outputs": [],
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      },
      {
        "name": "_a",
        "type": "address"
      },
      {
        "name": "_primary",
        "type": "bool"
      }
    ],
    "name": "setAddress",
    "outputs": [],
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      },
      {
        "name": "_content",
        "type": "bytes32"
      }
    ],
    "name": "setContent",
    "outputs": [],
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      }
    ],
    "name": "disown",
    "outputs": [],
    "type": "function"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_name",
        "type": "bytes32"
      },
      {
        "indexed": false,
        "name": "_winner",
        "type": "address"
      }
    ],
    "name": "AuctionEnded",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "_name",
        "type": "bytes32"
      },
      {
        "indexed": false,
        "name": "_bidder",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "_value",
        "type": "uint256"
      }
    ],
    "name": "NewBid",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "name",
        "type": "bytes32"
      }
    ],
    "name": "Changed",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "name",
        "type": "bytes32"
      },
      {
        "indexed": true,
        "name": "addr",
        "type": "address"
      }
    ],
    "name": "PrimaryChanged",
    "type": "event"
  }
]

},{}],197:[function(require,module,exports){
module.exports=[
  {
    "constant": true,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      }
    ],
    "name": "owner",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      },
      {
        "name": "_refund",
        "type": "address"
      }
    ],
    "name": "disown",
    "outputs": [],
    "type": "function"
  },
  {
    "constant": true,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      }
    ],
    "name": "addr",
    "outputs": [
      {
        "name": "",
        "type": "address"
      }
    ],
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      }
    ],
    "name": "reserve",
    "outputs": [],
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      },
      {
        "name": "_newOwner",
        "type": "address"
      }
    ],
    "name": "transfer",
    "outputs": [],
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "_name",
        "type": "bytes32"
      },
      {
        "name": "_a",
        "type": "address"
      }
    ],
    "name": "setAddr",
    "outputs": [],
    "type": "function"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "name",
        "type": "bytes32"
      }
    ],
    "name": "Changed",
    "type": "event"
  }
]

},{}],198:[function(require,module,exports){
module.exports=[
  {
    "constant": false,
    "inputs": [
      {
        "name": "from",
        "type": "bytes32"
      },
      {
        "name": "to",
        "type": "address"
      },
      {
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "transfer",
    "outputs": [],
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "from",
        "type": "bytes32"
      },
      {
        "name": "to",
        "type": "address"
      },
      {
        "name": "indirectId",
        "type": "bytes32"
      },
      {
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "icapTransfer",
    "outputs": [],
    "type": "function"
  },
  {
    "constant": false,
    "inputs": [
      {
        "name": "to",
        "type": "bytes32"
      }
    ],
    "name": "deposit",
    "outputs": [],
    "payable": true,
    "type": "function"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "from",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "AnonymousDeposit",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "from",
        "type": "address"
      },
      {
        "indexed": true,
        "name": "to",
        "type": "bytes32"
      },
      {
        "indexed": false,
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "Deposit",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "from",
        "type": "bytes32"
      },
      {
        "indexed": true,
        "name": "to",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "Transfer",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "name": "from",
        "type": "bytes32"
      },
      {
        "indexed": true,
        "name": "to",
        "type": "address"
      },
      {
        "indexed": false,
        "name": "indirectId",
        "type": "bytes32"
      },
      {
        "indexed": false,
        "name": "value",
        "type": "uint256"
      }
    ],
    "name": "IcapTransfer",
    "type": "event"
  }
]

},{}],199:[function(require,module,exports){
'use strict';

var f = require('./formatters');
var SolidityType = require('./type');

/**
 * SolidityTypeAddress is a prootype that represents address type
 * It matches:
 * address
 * address[]
 * address[4]
 * address[][]
 * address[3][]
 * address[][6][], ...
 */
var SolidityTypeAddress = function SolidityTypeAddress() {
    this._inputFormatter = f.formatInputInt;
    this._outputFormatter = f.formatOutputAddress;
};

SolidityTypeAddress.prototype = new SolidityType({});
SolidityTypeAddress.prototype.constructor = SolidityTypeAddress;

SolidityTypeAddress.prototype.isType = function (name) {
    return !!name.match(/address(\[([0-9]*)\])?/);
};

module.exports = SolidityTypeAddress;

},{"./formatters":204,"./type":209}],200:[function(require,module,exports){
'use strict';

var f = require('./formatters');
var SolidityType = require('./type');

/**
 * SolidityTypeBool is a prootype that represents bool type
 * It matches:
 * bool
 * bool[]
 * bool[4]
 * bool[][]
 * bool[3][]
 * bool[][6][], ...
 */
var SolidityTypeBool = function SolidityTypeBool() {
    this._inputFormatter = f.formatInputBool;
    this._outputFormatter = f.formatOutputBool;
};

SolidityTypeBool.prototype = new SolidityType({});
SolidityTypeBool.prototype.constructor = SolidityTypeBool;

SolidityTypeBool.prototype.isType = function (name) {
    return !!name.match(/^bool(\[([0-9]*)\])*$/);
};

module.exports = SolidityTypeBool;

},{"./formatters":204,"./type":209}],201:[function(require,module,exports){
'use strict';

var f = require('./formatters');
var SolidityType = require('./type');

/**
 * SolidityTypeBytes is a prototype that represents the bytes type.
 * It matches:
 * bytes
 * bytes[]
 * bytes[4]
 * bytes[][]
 * bytes[3][]
 * bytes[][6][], ...
 * bytes32
 * bytes8[4]
 * bytes[3][]
 */
var SolidityTypeBytes = function SolidityTypeBytes() {
    this._inputFormatter = f.formatInputBytes;
    this._outputFormatter = f.formatOutputBytes;
};

SolidityTypeBytes.prototype = new SolidityType({});
SolidityTypeBytes.prototype.constructor = SolidityTypeBytes;

SolidityTypeBytes.prototype.isType = function (name) {
    return !!name.match(/^bytes([0-9]{1,})(\[([0-9]*)\])*$/);
};

module.exports = SolidityTypeBytes;

},{"./formatters":204,"./type":209}],202:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file coder.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var f = require('./formatters');

var SolidityTypeAddress = require('./address');
var SolidityTypeBool = require('./bool');
var SolidityTypeInt = require('./int');
var SolidityTypeUInt = require('./uint');
var SolidityTypeDynamicBytes = require('./dynamicbytes');
var SolidityTypeString = require('./string');
var SolidityTypeReal = require('./real');
var SolidityTypeUReal = require('./ureal');
var SolidityTypeBytes = require('./bytes');

var isDynamic = function isDynamic(solidityType, type) {
    return solidityType.isDynamicType(type) || solidityType.isDynamicArray(type);
};

/**
 * SolidityCoder prototype should be used to encode/decode solidity params of any type
 */
var SolidityCoder = function SolidityCoder(types) {
    this._types = types;
};

/**
 * This method should be used to transform type to SolidityType
 *
 * @method _requireType
 * @param {String} type
 * @returns {SolidityType}
 * @throws {Error} throws if no matching type is found
 */
SolidityCoder.prototype._requireType = function (type) {
    var solidityType = this._types.filter(function (t) {
        return t.isType(type);
    })[0];

    if (!solidityType) {
        throw Error('invalid solidity type!: ' + type);
    }

    return solidityType;
};

/**
 * Should be used to encode plain param
 *
 * @method encodeParam
 * @param {String} type
 * @param {Object} plain param
 * @return {String} encoded plain param
 */
SolidityCoder.prototype.encodeParam = function (type, param) {
    return this.encodeParams([type], [param]);
};

/**
 * Should be used to encode list of params
 *
 * @method encodeParams
 * @param {Array} types
 * @param {Array} params
 * @return {String} encoded list of params
 */
SolidityCoder.prototype.encodeParams = function (types, params) {
    var solidityTypes = this.getSolidityTypes(types);

    var encodeds = solidityTypes.map(function (solidityType, index) {
        return solidityType.encode(params[index], types[index]);
    });

    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {
        var staticPartLength = solidityType.staticPartLength(types[index]);
        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;

        return acc + (isDynamic(solidityTypes[index], types[index]) ? 32 : roundedStaticPartLength);
    }, 0);

    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);

    return result;
};

SolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {
    var result = "";
    var self = this;

    types.forEach(function (type, i) {
        if (isDynamic(solidityTypes[i], types[i])) {
            result += f.formatInputInt(dynamicOffset).encode();
            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
            dynamicOffset += e.length / 2;
        } else {
            // don't add length to dynamicOffset. it's already counted
            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
        }

        // TODO: figure out nested arrays
    });

    types.forEach(function (type, i) {
        if (isDynamic(solidityTypes[i], types[i])) {
            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);
            dynamicOffset += e.length / 2;
            result += e;
        }
    });
    return result;
};

// TODO: refactor whole encoding!
SolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {
    var self = this;
    if (solidityType.isDynamicArray(type)) {
        return function () {
            // offset was already set
            var nestedName = solidityType.nestedName(type);
            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);
            var result = encoded[0];

            (function () {
                var previousLength = 2; // in int
                if (solidityType.isDynamicArray(nestedName)) {
                    for (var i = 1; i < encoded.length; i++) {
                        previousLength += +encoded[i - 1][0] || 0;
                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                    }
                }
            })();

            // first element is length, skip it
            (function () {
                for (var i = 0; i < encoded.length - 1; i++) {
                    var additionalOffset = result / 2;
                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset + additionalOffset);
                }
            })();

            return result;
        }();
    } else if (solidityType.isStaticArray(type)) {
        return function () {
            var nestedName = solidityType.nestedName(type);
            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);
            var result = "";

            if (solidityType.isDynamicArray(nestedName)) {
                (function () {
                    var previousLength = 0; // in int
                    for (var i = 0; i < encoded.length; i++) {
                        // calculate length of previous item
                        previousLength += +(encoded[i - 1] || [])[0] || 0;
                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();
                    }
                })();
            }

            (function () {
                for (var i = 0; i < encoded.length; i++) {
                    var additionalOffset = result / 2;
                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);
                }
            })();

            return result;
        }();
    }

    return encoded;
};

/**
 * Should be used to decode bytes to plain param
 *
 * @method decodeParam
 * @param {String} type
 * @param {String} bytes
 * @return {Object} plain param
 */
SolidityCoder.prototype.decodeParam = function (type, bytes) {
    return this.decodeParams([type], bytes)[0];
};

/**
 * Should be used to decode list of params
 *
 * @method decodeParam
 * @param {Array} types
 * @param {String} bytes
 * @return {Array} array of plain params
 */
SolidityCoder.prototype.decodeParams = function (types, bytes) {
    var solidityTypes = this.getSolidityTypes(types);
    var offsets = this.getOffsets(types, solidityTypes);

    return solidityTypes.map(function (solidityType, index) {
        return solidityType.decode(bytes, offsets[index], types[index], index);
    });
};

SolidityCoder.prototype.getOffsets = function (types, solidityTypes) {
    var lengths = solidityTypes.map(function (solidityType, index) {
        return solidityType.staticPartLength(types[index]);
    });

    for (var i = 1; i < lengths.length; i++) {
        // sum with length of previous element
        lengths[i] += lengths[i - 1];
    }

    return lengths.map(function (length, index) {
        // remove the current length, so the length is sum of previous elements
        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);
        return length - staticPartLength;
    });
};

SolidityCoder.prototype.getSolidityTypes = function (types) {
    var self = this;
    return types.map(function (type) {
        return self._requireType(type);
    });
};

var coder = new SolidityCoder([new SolidityTypeAddress(), new SolidityTypeBool(), new SolidityTypeInt(), new SolidityTypeUInt(), new SolidityTypeDynamicBytes(), new SolidityTypeBytes(), new SolidityTypeString(), new SolidityTypeReal(), new SolidityTypeUReal()]);

module.exports = coder;

},{"./address":199,"./bool":200,"./bytes":201,"./dynamicbytes":203,"./formatters":204,"./int":205,"./real":207,"./string":208,"./uint":210,"./ureal":211}],203:[function(require,module,exports){
'use strict';

var f = require('./formatters');
var SolidityType = require('./type');

var SolidityTypeDynamicBytes = function SolidityTypeDynamicBytes() {
    this._inputFormatter = f.formatInputDynamicBytes;
    this._outputFormatter = f.formatOutputDynamicBytes;
};

SolidityTypeDynamicBytes.prototype = new SolidityType({});
SolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;

SolidityTypeDynamicBytes.prototype.isType = function (name) {
    return !!name.match(/^bytes(\[([0-9]*)\])*$/);
};

SolidityTypeDynamicBytes.prototype.isDynamicType = function () {
    return true;
};

module.exports = SolidityTypeDynamicBytes;

},{"./formatters":204,"./type":209}],204:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file formatters.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var BigNumber = require('bignumber.js');
var utils = require('../utils/utils');
var c = require('../utils/config');
var SolidityParam = require('./param');

/**
 * Formats input value to byte representation of int
 * If value is negative, return it's two's complement
 * If the value is floating point, round it down
 *
 * @method formatInputInt
 * @param {String|Number|BigNumber} value that needs to be formatted
 * @returns {SolidityParam}
 */
var formatInputInt = function formatInputInt(value) {
    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);
    var result = utils.padLeft(utils.toTwosComplement(value).toString(16), 64);
    return new SolidityParam(result);
};

/**
 * Formats input bytes
 *
 * @method formatInputBytes
 * @param {String}
 * @returns {SolidityParam}
 */
var formatInputBytes = function formatInputBytes(value) {
    var result = utils.toHex(value).substr(2);
    var l = Math.floor((result.length + 63) / 64);
    result = utils.padRight(result, l * 64);
    return new SolidityParam(result);
};

/**
 * Formats input bytes
 *
 * @method formatDynamicInputBytes
 * @param {String}
 * @returns {SolidityParam}
 */
var formatInputDynamicBytes = function formatInputDynamicBytes(value) {
    var result = utils.toHex(value).substr(2);
    var length = result.length / 2;
    var l = Math.floor((result.length + 63) / 64);
    result = utils.padRight(result, l * 64);
    return new SolidityParam(formatInputInt(length).value + result);
};

/**
 * Formats input value to byte representation of string
 *
 * @method formatInputString
 * @param {String}
 * @returns {SolidityParam}
 */
var formatInputString = function formatInputString(value) {
    var result = utils.fromUtf8(value).substr(2);
    var length = result.length / 2;
    var l = Math.floor((result.length + 63) / 64);
    result = utils.padRight(result, l * 64);
    return new SolidityParam(formatInputInt(length).value + result);
};

/**
 * Formats input value to byte representation of bool
 *
 * @method formatInputBool
 * @param {Boolean}
 * @returns {SolidityParam}
 */
var formatInputBool = function formatInputBool(value) {
    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ? '1' : '0');
    return new SolidityParam(result);
};

/**
 * Formats input value to byte representation of real
 * Values are multiplied by 2^m and encoded as integers
 *
 * @method formatInputReal
 * @param {String|Number|BigNumber}
 * @returns {SolidityParam}
 */
var formatInputReal = function formatInputReal(value) {
    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));
};

/**
 * Check if input value is negative
 *
 * @method signedIsNegative
 * @param {String} value is hex format
 * @returns {Boolean} true if it is negative, otherwise false
 */
var signedIsNegative = function signedIsNegative(value) {
    return new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1) === '1';
};

/**
 * Formats right-aligned output bytes to int
 *
 * @method formatOutputInt
 * @param {SolidityParam} param
 * @returns {BigNumber} right-aligned output bytes formatted to big number
 */
var formatOutputInt = function formatOutputInt(param) {
    var value = param.staticPart() || "0";

    // check if it's negative number
    // it it is, return two's complement
    if (signedIsNegative(value)) {
        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);
    }
    return new BigNumber(value, 16);
};

/**
 * Formats right-aligned output bytes to uint
 *
 * @method formatOutputUInt
 * @param {SolidityParam}
 * @returns {BigNumeber} right-aligned output bytes formatted to uint
 */
var formatOutputUInt = function formatOutputUInt(param) {
    var value = param.staticPart() || "0";
    return new BigNumber(value, 16);
};

/**
 * Formats right-aligned output bytes to real
 *
 * @method formatOutputReal
 * @param {SolidityParam}
 * @returns {BigNumber} input bytes formatted to real
 */
var formatOutputReal = function formatOutputReal(param) {
    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));
};

/**
 * Formats right-aligned output bytes to ureal
 *
 * @method formatOutputUReal
 * @param {SolidityParam}
 * @returns {BigNumber} input bytes formatted to ureal
 */
var formatOutputUReal = function formatOutputUReal(param) {
    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));
};

/**
 * Should be used to format output bool
 *
 * @method formatOutputBool
 * @param {SolidityParam}
 * @returns {Boolean} right-aligned input bytes formatted to bool
 */
var formatOutputBool = function formatOutputBool(param) {
    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;
};

/**
 * Should be used to format output bytes
 *
 * @method formatOutputBytes
 * @param {SolidityParam} left-aligned hex representation of string
 * @param {String} name type name
 * @returns {String} hex string
 */
var formatOutputBytes = function formatOutputBytes(param, name) {
    var matches = name.match(/^bytes([0-9]*)/);
    var size = parseInt(matches[1]);
    return '0x' + param.staticPart().slice(0, 2 * size);
};

/**
 * Should be used to format output bytes
 *
 * @method formatOutputDynamicBytes
 * @param {SolidityParam} left-aligned hex representation of string
 * @returns {String} hex string
 */
var formatOutputDynamicBytes = function formatOutputDynamicBytes(param) {
    var length = new BigNumber(param.dynamicPart().slice(0, 64), 16).toNumber() * 2;
    return '0x' + param.dynamicPart().substr(64, length);
};

/**
 * Should be used to format output string
 *
 * @method formatOutputString
 * @param {SolidityParam} left-aligned hex representation of string
 * @returns {String} ascii string
 */
var formatOutputString = function formatOutputString(param) {
    var length = new BigNumber(param.dynamicPart().slice(0, 64), 16).toNumber() * 2;
    return utils.toUtf8(param.dynamicPart().substr(64, length));
};

/**
 * Should be used to format output address
 *
 * @method formatOutputAddress
 * @param {SolidityParam} right-aligned input bytes
 * @returns {String} address
 */
var formatOutputAddress = function formatOutputAddress(param) {
    var value = param.staticPart();
    return "0x" + value.slice(value.length - 40, value.length);
};

module.exports = {
    formatInputInt: formatInputInt,
    formatInputBytes: formatInputBytes,
    formatInputDynamicBytes: formatInputDynamicBytes,
    formatInputString: formatInputString,
    formatInputBool: formatInputBool,
    formatInputReal: formatInputReal,
    formatOutputInt: formatOutputInt,
    formatOutputUInt: formatOutputUInt,
    formatOutputReal: formatOutputReal,
    formatOutputUReal: formatOutputUReal,
    formatOutputBool: formatOutputBool,
    formatOutputBytes: formatOutputBytes,
    formatOutputDynamicBytes: formatOutputDynamicBytes,
    formatOutputString: formatOutputString,
    formatOutputAddress: formatOutputAddress
};

},{"../utils/config":213,"../utils/utils":215,"./param":206,"bignumber.js":245}],205:[function(require,module,exports){
'use strict';

var f = require('./formatters');
var SolidityType = require('./type');

/**
 * SolidityTypeInt is a prootype that represents int type
 * It matches:
 * int
 * int[]
 * int[4]
 * int[][]
 * int[3][]
 * int[][6][], ...
 * int32
 * int64[]
 * int8[4]
 * int256[][]
 * int[3][]
 * int64[][6][], ...
 */
var SolidityTypeInt = function SolidityTypeInt() {
    this._inputFormatter = f.formatInputInt;
    this._outputFormatter = f.formatOutputInt;
};

SolidityTypeInt.prototype = new SolidityType({});
SolidityTypeInt.prototype.constructor = SolidityTypeInt;

SolidityTypeInt.prototype.isType = function (name) {
    return !!name.match(/^int([0-9]*)?(\[([0-9]*)\])*$/);
};

module.exports = SolidityTypeInt;

},{"./formatters":204,"./type":209}],206:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** 
 * @file param.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var utils = require('../utils/utils');

/**
 * SolidityParam object prototype.
 * Should be used when encoding, decoding solidity bytes
 */
var SolidityParam = function SolidityParam(value, offset) {
    this.value = value || '';
    this.offset = offset; // offset in bytes
};

/**
 * This method should be used to get length of params's dynamic part
 * 
 * @method dynamicPartLength
 * @returns {Number} length of dynamic part (in bytes)
 */
SolidityParam.prototype.dynamicPartLength = function () {
    return this.dynamicPart().length / 2;
};

/**
 * This method should be used to create copy of solidity param with different offset
 *
 * @method withOffset
 * @param {Number} offset length in bytes
 * @returns {SolidityParam} new solidity param with applied offset
 */
SolidityParam.prototype.withOffset = function (offset) {
    return new SolidityParam(this.value, offset);
};

/**
 * This method should be used to combine solidity params together
 * eg. when appending an array
 *
 * @method combine
 * @param {SolidityParam} param with which we should combine
 * @param {SolidityParam} result of combination
 */
SolidityParam.prototype.combine = function (param) {
    return new SolidityParam(this.value + param.value);
};

/**
 * This method should be called to check if param has dynamic size.
 * If it has, it returns true, otherwise false
 *
 * @method isDynamic
 * @returns {Boolean}
 */
SolidityParam.prototype.isDynamic = function () {
    return this.offset !== undefined;
};

/**
 * This method should be called to transform offset to bytes
 *
 * @method offsetAsBytes
 * @returns {String} bytes representation of offset
 */
SolidityParam.prototype.offsetAsBytes = function () {
    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);
};

/**
 * This method should be called to get static part of param
 *
 * @method staticPart
 * @returns {String} offset if it is a dynamic param, otherwise value
 */
SolidityParam.prototype.staticPart = function () {
    if (!this.isDynamic()) {
        return this.value;
    }
    return this.offsetAsBytes();
};

/**
 * This method should be called to get dynamic part of param
 *
 * @method dynamicPart
 * @returns {String} returns a value if it is a dynamic param, otherwise empty string
 */
SolidityParam.prototype.dynamicPart = function () {
    return this.isDynamic() ? this.value : '';
};

/**
 * This method should be called to encode param
 *
 * @method encode
 * @returns {String}
 */
SolidityParam.prototype.encode = function () {
    return this.staticPart() + this.dynamicPart();
};

/**
 * This method should be called to encode array of params
 *
 * @method encodeList
 * @param {Array[SolidityParam]} params
 * @returns {String}
 */
SolidityParam.encodeList = function (params) {

    // updating offsets
    var totalOffset = params.length * 32;
    var offsetParams = params.map(function (param) {
        if (!param.isDynamic()) {
            return param;
        }
        var offset = totalOffset;
        totalOffset += param.dynamicPartLength();
        return param.withOffset(offset);
    });

    // encode everything!
    return offsetParams.reduce(function (result, param) {
        return result + param.dynamicPart();
    }, offsetParams.reduce(function (result, param) {
        return result + param.staticPart();
    }, ''));
};

module.exports = SolidityParam;

},{"../utils/utils":215}],207:[function(require,module,exports){
'use strict';

var f = require('./formatters');
var SolidityType = require('./type');

/**
 * SolidityTypeReal is a prootype that represents real type
 * It matches:
 * real
 * real[]
 * real[4]
 * real[][]
 * real[3][]
 * real[][6][], ...
 * real32
 * real64[]
 * real8[4]
 * real256[][]
 * real[3][]
 * real64[][6][], ...
 */
var SolidityTypeReal = function SolidityTypeReal() {
    this._inputFormatter = f.formatInputReal;
    this._outputFormatter = f.formatOutputReal;
};

SolidityTypeReal.prototype = new SolidityType({});
SolidityTypeReal.prototype.constructor = SolidityTypeReal;

SolidityTypeReal.prototype.isType = function (name) {
    return !!name.match(/real([0-9]*)?(\[([0-9]*)\])?/);
};

module.exports = SolidityTypeReal;

},{"./formatters":204,"./type":209}],208:[function(require,module,exports){
'use strict';

var f = require('./formatters');
var SolidityType = require('./type');

var SolidityTypeString = function SolidityTypeString() {
    this._inputFormatter = f.formatInputString;
    this._outputFormatter = f.formatOutputString;
};

SolidityTypeString.prototype = new SolidityType({});
SolidityTypeString.prototype.constructor = SolidityTypeString;

SolidityTypeString.prototype.isType = function (name) {
    return !!name.match(/^string(\[([0-9]*)\])*$/);
};

SolidityTypeString.prototype.isDynamicType = function () {
    return true;
};

module.exports = SolidityTypeString;

},{"./formatters":204,"./type":209}],209:[function(require,module,exports){
'use strict';

var f = require('./formatters');
var SolidityParam = require('./param');

/**
 * SolidityType prototype is used to encode/decode solidity params of certain type
 */
var SolidityType = function SolidityType(config) {
    this._inputFormatter = config.inputFormatter;
    this._outputFormatter = config.outputFormatter;
};

/**
 * Should be used to determine if this SolidityType do match given name
 *
 * @method isType
 * @param {String} name
 * @return {Bool} true if type match this SolidityType, otherwise false
 */
SolidityType.prototype.isType = function (name) {
    throw "this method should be overrwritten for type " + name;
};

/**
 * Should be used to determine what is the length of static part in given type
 *
 * @method staticPartLength
 * @param {String} name
 * @return {Number} length of static part in bytes
 */
SolidityType.prototype.staticPartLength = function (name) {
    // If name isn't an array then treat it like a single element array.
    return (this.nestedTypes(name) || ['[1]']).map(function (type) {
        // the length of the nested array
        return parseInt(type.slice(1, -1), 10) || 1;
    }).reduce(function (previous, current) {
        return previous * current;
        // all basic types are 32 bytes long
    }, 32);
};

/**
 * Should be used to determine if type is dynamic array
 * eg:
 * "type[]" => true
 * "type[4]" => false
 *
 * @method isDynamicArray
 * @param {String} name
 * @return {Bool} true if the type is dynamic array
 */
SolidityType.prototype.isDynamicArray = function (name) {
    var nestedTypes = this.nestedTypes(name);
    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
};

/**
 * Should be used to determine if type is static array
 * eg:
 * "type[]" => false
 * "type[4]" => true
 *
 * @method isStaticArray
 * @param {String} name
 * @return {Bool} true if the type is static array
 */
SolidityType.prototype.isStaticArray = function (name) {
    var nestedTypes = this.nestedTypes(name);
    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);
};

/**
 * Should return length of static array
 * eg.
 * "int[32]" => 32
 * "int256[14]" => 14
 * "int[2][3]" => 3
 * "int" => 1
 * "int[1]" => 1
 * "int[]" => 1
 *
 * @method staticArrayLength
 * @param {String} name
 * @return {Number} static array length
 */
SolidityType.prototype.staticArrayLength = function (name) {
    var nestedTypes = this.nestedTypes(name);
    if (nestedTypes) {
        return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);
    }
    return 1;
};

/**
 * Should return nested type
 * eg.
 * "int[32]" => "int"
 * "int256[14]" => "int256"
 * "int[2][3]" => "int[2]"
 * "int" => "int"
 * "int[]" => "int"
 *
 * @method nestedName
 * @param {String} name
 * @return {String} nested name
 */
SolidityType.prototype.nestedName = function (name) {
    // remove last [] in name
    var nestedTypes = this.nestedTypes(name);
    if (!nestedTypes) {
        return name;
    }

    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);
};

/**
 * Should return true if type has dynamic size by default
 * such types are "string", "bytes"
 *
 * @method isDynamicType
 * @param {String} name
 * @return {Bool} true if is dynamic, otherwise false
 */
SolidityType.prototype.isDynamicType = function () {
    return false;
};

/**
 * Should return array of nested types
 * eg.
 * "int[2][3][]" => ["[2]", "[3]", "[]"]
 * "int[] => ["[]"]
 * "int" => null
 *
 * @method nestedTypes
 * @param {String} name
 * @return {Array} array of nested types
 */
SolidityType.prototype.nestedTypes = function (name) {
    // return list of strings eg. "[]", "[3]", "[]", "[2]"
    return name.match(/(\[[0-9]*\])/g);
};

/**
 * Should be used to encode the value
 *
 * @method encode
 * @param {Object} value
 * @param {String} name
 * @return {String} encoded value
 */
SolidityType.prototype.encode = function (value, name) {
    var self = this;
    if (this.isDynamicArray(name)) {

        return function () {
            var length = value.length; // in int
            var nestedName = self.nestedName(name);

            var result = [];
            result.push(f.formatInputInt(length).encode());

            value.forEach(function (v) {
                result.push(self.encode(v, nestedName));
            });

            return result;
        }();
    } else if (this.isStaticArray(name)) {

        return function () {
            var length = self.staticArrayLength(name); // in int
            var nestedName = self.nestedName(name);

            var result = [];
            for (var i = 0; i < length; i++) {
                result.push(self.encode(value[i], nestedName));
            }

            return result;
        }();
    }

    return this._inputFormatter(value, name).encode();
};

/**
 * Should be used to decode value from bytes
 *
 * @method decode
 * @param {String} bytes
 * @param {Number} offset in bytes
 * @param {String} name type name
 * @returns {Object} decoded value
 */
SolidityType.prototype.decode = function (bytes, offset, name) {
    var self = this;

    if (this.isDynamicArray(name)) {

        return function () {
            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes
            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int
            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes

            var nestedName = self.nestedName(name);
            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes
            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
            var result = [];

            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
                result.push(self.decode(bytes, arrayStart + i, nestedName));
            }

            return result;
        }();
    } else if (this.isStaticArray(name)) {

        return function () {
            var length = self.staticArrayLength(name); // in int
            var arrayStart = offset; // in bytes

            var nestedName = self.nestedName(name);
            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes
            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;
            var result = [];

            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {
                result.push(self.decode(bytes, arrayStart + i, nestedName));
            }

            return result;
        }();
    } else if (this.isDynamicType(name)) {

        return function () {
            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes
            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64)); // in bytes
            var roundedLength = Math.floor((length + 31) / 32); // in int
            var param = new SolidityParam(bytes.substr(dynamicOffset * 2, (1 + roundedLength) * 64), 0);
            return self._outputFormatter(param, name);
        }();
    }

    var length = this.staticPartLength(name);
    var param = new SolidityParam(bytes.substr(offset * 2, length * 2));
    return this._outputFormatter(param, name);
};

module.exports = SolidityType;

},{"./formatters":204,"./param":206}],210:[function(require,module,exports){
'use strict';

var f = require('./formatters');
var SolidityType = require('./type');

/**
 * SolidityTypeUInt is a prootype that represents uint type
 * It matches:
 * uint
 * uint[]
 * uint[4]
 * uint[][]
 * uint[3][]
 * uint[][6][], ...
 * uint32
 * uint64[]
 * uint8[4]
 * uint256[][]
 * uint[3][]
 * uint64[][6][], ...
 */
var SolidityTypeUInt = function SolidityTypeUInt() {
    this._inputFormatter = f.formatInputInt;
    this._outputFormatter = f.formatOutputUInt;
};

SolidityTypeUInt.prototype = new SolidityType({});
SolidityTypeUInt.prototype.constructor = SolidityTypeUInt;

SolidityTypeUInt.prototype.isType = function (name) {
    return !!name.match(/^uint([0-9]*)?(\[([0-9]*)\])*$/);
};

module.exports = SolidityTypeUInt;

},{"./formatters":204,"./type":209}],211:[function(require,module,exports){
'use strict';

var f = require('./formatters');
var SolidityType = require('./type');

/**
 * SolidityTypeUReal is a prootype that represents ureal type
 * It matches:
 * ureal
 * ureal[]
 * ureal[4]
 * ureal[][]
 * ureal[3][]
 * ureal[][6][], ...
 * ureal32
 * ureal64[]
 * ureal8[4]
 * ureal256[][]
 * ureal[3][]
 * ureal64[][6][], ...
 */
var SolidityTypeUReal = function SolidityTypeUReal() {
    this._inputFormatter = f.formatInputReal;
    this._outputFormatter = f.formatOutputUReal;
};

SolidityTypeUReal.prototype = new SolidityType({});
SolidityTypeUReal.prototype.constructor = SolidityTypeUReal;

SolidityTypeUReal.prototype.isType = function (name) {
    return !!name.match(/^ureal([0-9]*)?(\[([0-9]*)\])*$/);
};

module.exports = SolidityTypeUReal;

},{"./formatters":204,"./type":209}],212:[function(require,module,exports){
'use strict';

// go env doesn't have and need XMLHttpRequest

if (typeof XMLHttpRequest === 'undefined') {
    exports.XMLHttpRequest = {};
} else {
    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line
}

},{}],213:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** @file config.js
 * @authors:
 *   Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

/**
 * Utils
 * 
 * @module utils
 */

/**
 * Utility functions
 * 
 * @class [utils] config
 * @constructor
 */

/// required to define ETH_BIGNUMBER_ROUNDING_MODE
var BigNumber = require('bignumber.js');

var ETH_UNITS = ['wei', 'kwei', 'Mwei', 'Gwei', 'szabo', 'finney', 'femtoether', 'picoether', 'nanoether', 'microether', 'milliether', 'nano', 'micro', 'milli', 'ether', 'grand', 'Mether', 'Gether', 'Tether', 'Pether', 'Eether', 'Zether', 'Yether', 'Nether', 'Dether', 'Vether', 'Uether'];

module.exports = {
    ETH_PADDING: 32,
    ETH_SIGNATURE_LENGTH: 4,
    ETH_UNITS: ETH_UNITS,
    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },
    ETH_POLLING_TIMEOUT: 1000 / 2,
    defaultBlock: 'latest',
    defaultAccount: undefined
};

},{"bignumber.js":245}],214:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** 
 * @file sha3.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var CryptoJS = require('crypto-js');
var sha3 = require('crypto-js/sha3');

module.exports = function (value, options) {
    if (options && options.encoding === 'hex') {
        if (value.length > 2 && value.substr(0, 2) === '0x') {
            value = value.substr(2);
        }
        value = CryptoJS.enc.Hex.parse(value);
    }

    return sha3(value, {
        outputLength: 256
    }).toString();
};

},{"crypto-js":70,"crypto-js/sha3":91}],215:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file utils.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

/**
 * Utils
 *
 * @module utils
 */

/**
 * Utility functions
 *
 * @class [utils] utils
 * @constructor
 */

var BigNumber = require('bignumber.js');
var sha3 = require('./sha3.js');
var utf8 = require('utf8');

var unitMap = {
    'noether': '0',
    'wei': '1',
    'kwei': '1000',
    'Kwei': '1000',
    'babbage': '1000',
    'femtoether': '1000',
    'mwei': '1000000',
    'Mwei': '1000000',
    'lovelace': '1000000',
    'picoether': '1000000',
    'gwei': '1000000000',
    'Gwei': '1000000000',
    'shannon': '1000000000',
    'nanoether': '1000000000',
    'nano': '1000000000',
    'szabo': '1000000000000',
    'microether': '1000000000000',
    'micro': '1000000000000',
    'finney': '1000000000000000',
    'milliether': '1000000000000000',
    'milli': '1000000000000000',
    'ether': '1000000000000000000',
    'kether': '1000000000000000000000',
    'grand': '1000000000000000000000',
    'mether': '1000000000000000000000000',
    'gether': '1000000000000000000000000000',
    'tether': '1000000000000000000000000000000'
};

/**
 * Should be called to pad string to expected length
 *
 * @method padLeft
 * @param {String} string to be padded
 * @param {Number} characters that result string should have
 * @param {String} sign, by default 0
 * @returns {String} right aligned string
 */
var padLeft = function padLeft(string, chars, sign) {
    return new Array(chars - string.length + 1).join(sign ? sign : "0") + string;
};

/**
 * Should be called to pad string to expected length
 *
 * @method padRight
 * @param {String} string to be padded
 * @param {Number} characters that result string should have
 * @param {String} sign, by default 0
 * @returns {String} right aligned string
 */
var padRight = function padRight(string, chars, sign) {
    return string + new Array(chars - string.length + 1).join(sign ? sign : "0");
};

/**
 * Should be called to get utf8 from it's hex representation
 *
 * @method toUtf8
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */
var toUtf8 = function toUtf8(hex) {
    // Find termination
    var str = "";
    var i = 0,
        l = hex.length;
    if (hex.substring(0, 2) === '0x') {
        i = 2;
    }
    for (; i < l; i += 2) {
        var code = parseInt(hex.substr(i, 2), 16);
        if (code === 0) break;
        str += String.fromCharCode(code);
    }

    return utf8.decode(str);
};

/**
 * Should be called to get ascii from it's hex representation
 *
 * @method toAscii
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */
var toAscii = function toAscii(hex) {
    // Find termination
    var str = "";
    var i = 0,
        l = hex.length;
    if (hex.substring(0, 2) === '0x') {
        i = 2;
    }
    for (; i < l; i += 2) {
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
    }

    return str;
};

/**
 * Should be called to get hex representation (prefixed by 0x) of utf8 string
 *
 * @method fromUtf8
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */
var fromUtf8 = function fromUtf8(str) {
    str = utf8.encode(str);
    var hex = "";
    for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        if (code === 0) break;
        var n = code.toString(16);
        hex += n.length < 2 ? '0' + n : n;
    }

    return "0x" + hex;
};

/**
 * Should be called to get hex representation (prefixed by 0x) of ascii string
 *
 * @method fromAscii
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */
var fromAscii = function fromAscii(str) {
    var hex = "";
    for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? '0' + n : n;
    }

    return "0x" + hex;
};

/**
 * Should be used to create full function/event name from json abi
 *
 * @method transformToFullName
 * @param {Object} json-abi
 * @return {String} full fnction/event name
 */
var transformToFullName = function transformToFullName(json) {
    if (json.name.indexOf('(') !== -1) {
        return json.name;
    }

    var typeName = json.inputs.map(function (i) {
        return i.type;
    }).join();
    return json.name + '(' + typeName + ')';
};

/**
 * Should be called to get display name of contract function
 *
 * @method extractDisplayName
 * @param {String} name of function/event
 * @returns {String} display name for function/event eg. multiply(uint256) -> multiply
 */
var extractDisplayName = function extractDisplayName(name) {
    var length = name.indexOf('(');
    return length !== -1 ? name.substr(0, length) : name;
};

/// @returns overloaded part of function/event name
var extractTypeName = function extractTypeName(name) {
    /// TODO: make it invulnerable
    var length = name.indexOf('(');
    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : "";
};

/**
 * Converts value to it's decimal representation in string
 *
 * @method toDecimal
 * @param {String|Number|BigNumber}
 * @return {String}
 */
var toDecimal = function toDecimal(value) {
    return toBigNumber(value).toNumber();
};

/**
 * Converts value to it's hex representation
 *
 * @method fromDecimal
 * @param {String|Number|BigNumber}
 * @return {String}
 */
var fromDecimal = function fromDecimal(value) {
    var number = toBigNumber(value);
    var result = number.toString(16);

    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;
};

/**
 * Auto converts any given value into it's hex representation.
 *
 * And even stringifys objects before.
 *
 * @method toHex
 * @param {String|Number|BigNumber|Object}
 * @return {String}
 */
var toHex = function toHex(val) {
    /*jshint maxcomplexity: 8 */

    if (isBoolean(val)) return fromDecimal(+val);

    if (isBigNumber(val)) return fromDecimal(val);

    if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') return fromUtf8(JSON.stringify(val));

    // if its a negative number, pass it through fromDecimal
    if (isString(val)) {
        if (val.indexOf('-0x') === 0) return fromDecimal(val);else if (val.indexOf('0x') === 0) return val;else if (!isFinite(val)) return fromAscii(val);
    }

    return fromDecimal(val);
};

/**
 * Returns value of unit in Wei
 *
 * @method getValueOfUnit
 * @param {String} unit the unit to convert to, default ether
 * @returns {BigNumber} value of the unit (in Wei)
 * @throws error if the unit is not correct:w
 */
var getValueOfUnit = function getValueOfUnit(unit) {
    unit = unit ? unit.toLowerCase() : 'ether';
    var unitValue = unitMap[unit];
    if (unitValue === undefined) {
        throw new Error('This unit doesn\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));
    }
    return new BigNumber(unitValue, 10);
};

/**
 * Takes a number of wei and converts it to any other ether unit.
 *
 * Possible units are:
 *   SI Short   SI Full        Effigy       Other
 * - kwei       femtoether     babbage
 * - mwei       picoether      lovelace
 * - gwei       nanoether      shannon      nano
 * - --         microether     szabo        micro
 * - --         milliether     finney       milli
 * - ether      --             --
 * - kether                    --           grand
 * - mether
 * - gether
 * - tether
 *
 * @method fromWei
 * @param {Number|String} number can be a number, number string or a HEX of a decimal
 * @param {String} unit the unit to convert to, default ether
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
*/
var fromWei = function fromWei(number, unit) {
    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));

    return isBigNumber(number) ? returnValue : returnValue.toString(10);
};

/**
 * Takes a number of a unit and converts it to wei.
 *
 * Possible units are:
 *   SI Short   SI Full        Effigy       Other
 * - kwei       femtoether     babbage
 * - mwei       picoether      lovelace
 * - gwei       nanoether      shannon      nano
 * - --         microether     szabo        micro
 * - --         microether     szabo        micro
 * - --         milliether     finney       milli
 * - ether      --             --
 * - kether                    --           grand
 * - mether
 * - gether
 * - tether
 *
 * @method toWei
 * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal
 * @param {String} unit the unit to convert from, default ether
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
*/
var toWei = function toWei(number, unit) {
    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));

    return isBigNumber(number) ? returnValue : returnValue.toString(10);
};

/**
 * Takes an input and transforms it into an bignumber
 *
 * @method toBigNumber
 * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber
 * @return {BigNumber} BigNumber
*/
var toBigNumber = function toBigNumber(number) {
    /*jshint maxcomplexity:5 */
    number = number || 0;
    if (isBigNumber(number)) return number;

    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {
        return new BigNumber(number.replace('0x', ''), 16);
    }

    return new BigNumber(number.toString(10), 10);
};

/**
 * Takes and input transforms it into bignumber and if it is negative value, into two's complement
 *
 * @method toTwosComplement
 * @param {Number|String|BigNumber}
 * @return {BigNumber}
 */
var toTwosComplement = function toTwosComplement(number) {
    var bigNumber = toBigNumber(number).round();
    if (bigNumber.lessThan(0)) {
        return new BigNumber("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 16).plus(bigNumber).plus(1);
    }
    return bigNumber;
};

/**
 * Checks if the given string is strictly an address
 *
 * @method isStrictAddress
 * @param {String} address the given HEX adress
 * @return {Boolean}
*/
var isStrictAddress = function isStrictAddress(address) {
    return (/^0x[0-9a-f]{40}$/i.test(address)
    );
};

/**
 * Checks if the given string is an address
 *
 * @method isAddress
 * @param {String} address the given HEX adress
 * @return {Boolean}
*/
var isAddress = function isAddress(address) {
    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
        // check if it has the basic requirements of an address
        return false;
    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
        // If it's all small caps or all all caps, return true
        return true;
    } else {
        // Otherwise check each case
        return isChecksumAddress(address);
    }
};

/**
 * Checks if the given string is a checksummed address
 *
 * @method isChecksumAddress
 * @param {String} address the given HEX adress
 * @return {Boolean}
*/
var isChecksumAddress = function isChecksumAddress(address) {
    // Check each case
    address = address.replace('0x', '');
    var addressHash = sha3(address.toLowerCase());

    for (var i = 0; i < 40; i++) {
        // the nth letter should be uppercase if the nth digit of casemap is 1
        if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {
            return false;
        }
    }
    return true;
};

/**
 * Makes a checksum address
 *
 * @method toChecksumAddress
 * @param {String} address the given HEX adress
 * @return {String}
*/
var toChecksumAddress = function toChecksumAddress(address) {
    if (typeof address === 'undefined') return '';

    address = address.toLowerCase().replace('0x', '');
    var addressHash = sha3(address);
    var checksumAddress = '0x';

    for (var i = 0; i < address.length; i++) {
        // If ith character is 9 to f then make it uppercase
        if (parseInt(addressHash[i], 16) > 7) {
            checksumAddress += address[i].toUpperCase();
        } else {
            checksumAddress += address[i];
        }
    }
    return checksumAddress;
};

/**
 * Transforms given string to valid 20 bytes-length addres with 0x prefix
 *
 * @method toAddress
 * @param {String} address
 * @return {String} formatted address
 */
var toAddress = function toAddress(address) {
    if (isStrictAddress(address)) {
        return address;
    }

    if (/^[0-9a-f]{40}$/.test(address)) {
        return '0x' + address;
    }

    return '0x' + padLeft(toHex(address).substr(2), 40);
};

/**
 * Returns true if object is BigNumber, otherwise false
 *
 * @method isBigNumber
 * @param {Object}
 * @return {Boolean}
 */
var isBigNumber = function isBigNumber(object) {
    return object instanceof BigNumber || object && object.constructor && object.constructor.name === 'BigNumber';
};

/**
 * Returns true if object is string, otherwise false
 *
 * @method isString
 * @param {Object}
 * @return {Boolean}
 */
var isString = function isString(object) {
    return typeof object === 'string' || object && object.constructor && object.constructor.name === 'String';
};

/**
 * Returns true if object is function, otherwise false
 *
 * @method isFunction
 * @param {Object}
 * @return {Boolean}
 */
var isFunction = function isFunction(object) {
    return typeof object === 'function';
};

/**
 * Returns true if object is Objet, otherwise false
 *
 * @method isObject
 * @param {Object}
 * @return {Boolean}
 */
var isObject = function isObject(object) {
    return object !== null && !(object instanceof Array) && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object';
};

/**
 * Returns true if object is boolean, otherwise false
 *
 * @method isBoolean
 * @param {Object}
 * @return {Boolean}
 */
var isBoolean = function isBoolean(object) {
    return typeof object === 'boolean';
};

/**
 * Returns true if object is array, otherwise false
 *
 * @method isArray
 * @param {Object}
 * @return {Boolean}
 */
var isArray = function isArray(object) {
    return object instanceof Array;
};

/**
 * Returns true if given string is valid json object
 *
 * @method isJson
 * @param {String}
 * @return {Boolean}
 */
var isJson = function isJson(str) {
    try {
        return !!JSON.parse(str);
    } catch (e) {
        return false;
    }
};

/**
 * Returns true if given string is a valid Ethereum block header bloom.
 *
 * @method isBloom
 * @param {String} hex encoded bloom filter
 * @return {Boolean}
 */
var isBloom = function isBloom(bloom) {
    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
        return false;
    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
        return true;
    }
    return false;
};

/**
 * Returns true if given string is a valid log topic.
 *
 * @method isTopic
 * @param {String} hex encoded topic
 * @return {Boolean}
 */
var isTopic = function isTopic(topic) {
    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
        return false;
    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
        return true;
    }
    return false;
};

module.exports = {
    padLeft: padLeft,
    padRight: padRight,
    toHex: toHex,
    toDecimal: toDecimal,
    fromDecimal: fromDecimal,
    toUtf8: toUtf8,
    toAscii: toAscii,
    fromUtf8: fromUtf8,
    fromAscii: fromAscii,
    transformToFullName: transformToFullName,
    extractDisplayName: extractDisplayName,
    extractTypeName: extractTypeName,
    toWei: toWei,
    fromWei: fromWei,
    toBigNumber: toBigNumber,
    toTwosComplement: toTwosComplement,
    toAddress: toAddress,
    isBigNumber: isBigNumber,
    isStrictAddress: isStrictAddress,
    isAddress: isAddress,
    isChecksumAddress: isChecksumAddress,
    toChecksumAddress: toChecksumAddress,
    isFunction: isFunction,
    isString: isString,
    isObject: isObject,
    isBoolean: isBoolean,
    isArray: isArray,
    isJson: isJson,
    isBloom: isBloom,
    isTopic: isTopic
};

},{"./sha3.js":214,"bignumber.js":245,"utf8":192}],216:[function(require,module,exports){
module.exports={
    "version": "0.20.1"
}

},{}],217:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file web3.js
 * @authors:
 *   Jeffrey Wilcke <jeff@ethdev.com>
 *   Marek Kotewicz <marek@ethdev.com>
 *   Marian Oancea <marian@ethdev.com>
 *   Fabian Vogelsteller <fabian@ethdev.com>
 *   Gav Wood <g@ethdev.com>
 * @date 2014
 */

var RequestManager = require('./web3/requestmanager');
var Iban = require('./web3/iban');
var Eth = require('./web3/methods/eth');
var DB = require('./web3/methods/db');
var Shh = require('./web3/methods/shh');
var Net = require('./web3/methods/net');
var Personal = require('./web3/methods/personal');
var Swarm = require('./web3/methods/swarm');
var Settings = require('./web3/settings');
var version = require('./version.json');
var utils = require('./utils/utils');
var sha3 = require('./utils/sha3');
var extend = require('./web3/extend');
var Batch = require('./web3/batch');
var Property = require('./web3/property');
var HttpProvider = require('./web3/httpprovider');
var IpcProvider = require('./web3/ipcprovider');
var BigNumber = require('bignumber.js');

function Web3(provider) {
    this._requestManager = new RequestManager(provider);
    this.currentProvider = provider;
    this.eth = new Eth(this);
    this.db = new DB(this);
    this.shh = new Shh(this);
    this.net = new Net(this);
    this.personal = new Personal(this);
    this.bzz = new Swarm(this);
    this.settings = new Settings();
    this.version = {
        api: version.version
    };
    this.providers = {
        HttpProvider: HttpProvider,
        IpcProvider: IpcProvider
    };
    this._extend = extend(this);
    this._extend({
        properties: properties()
    });
}

// expose providers on the class
Web3.providers = {
    HttpProvider: HttpProvider,
    IpcProvider: IpcProvider
};

Web3.prototype.setProvider = function (provider) {
    this._requestManager.setProvider(provider);
    this.currentProvider = provider;
};

Web3.prototype.reset = function (keepIsSyncing) {
    this._requestManager.reset(keepIsSyncing);
    this.settings = new Settings();
};

Web3.prototype.BigNumber = BigNumber;
Web3.prototype.toHex = utils.toHex;
Web3.prototype.toAscii = utils.toAscii;
Web3.prototype.toUtf8 = utils.toUtf8;
Web3.prototype.fromAscii = utils.fromAscii;
Web3.prototype.fromUtf8 = utils.fromUtf8;
Web3.prototype.toDecimal = utils.toDecimal;
Web3.prototype.fromDecimal = utils.fromDecimal;
Web3.prototype.toBigNumber = utils.toBigNumber;
Web3.prototype.toWei = utils.toWei;
Web3.prototype.fromWei = utils.fromWei;
Web3.prototype.isAddress = utils.isAddress;
Web3.prototype.isChecksumAddress = utils.isChecksumAddress;
Web3.prototype.toChecksumAddress = utils.toChecksumAddress;
Web3.prototype.isIBAN = utils.isIBAN;
Web3.prototype.padLeft = utils.padLeft;
Web3.prototype.padRight = utils.padRight;

Web3.prototype.sha3 = function (string, options) {
    return '0x' + sha3(string, options);
};

/**
 * Transforms direct icap to address
 */
Web3.prototype.fromICAP = function (icap) {
    var iban = new Iban(icap);
    return iban.address();
};

var properties = function properties() {
    return [new Property({
        name: 'version.node',
        getter: 'web3_clientVersion'
    }), new Property({
        name: 'version.network',
        getter: 'net_version',
        inputFormatter: utils.toDecimal
    }), new Property({
        name: 'version.ethereum',
        getter: 'eth_protocolVersion',
        inputFormatter: utils.toDecimal
    }), new Property({
        name: 'version.whisper',
        getter: 'shh_version',
        inputFormatter: utils.toDecimal
    })];
};

Web3.prototype.isConnected = function () {
    return this.currentProvider && this.currentProvider.isConnected();
};

Web3.prototype.createBatch = function () {
    return new Batch(this);
};

module.exports = Web3;

},{"./utils/sha3":214,"./utils/utils":215,"./version.json":216,"./web3/batch":219,"./web3/extend":223,"./web3/httpprovider":227,"./web3/iban":228,"./web3/ipcprovider":229,"./web3/methods/db":232,"./web3/methods/eth":233,"./web3/methods/net":234,"./web3/methods/personal":235,"./web3/methods/shh":236,"./web3/methods/swarm":237,"./web3/property":240,"./web3/requestmanager":241,"./web3/settings":242,"bignumber.js":245}],218:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file allevents.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2014
 */

var sha3 = require('../utils/sha3');
var SolidityEvent = require('./event');
var formatters = require('./formatters');
var utils = require('../utils/utils');
var Filter = require('./filter');
var watches = require('./methods/watches');

var AllSolidityEvents = function AllSolidityEvents(requestManager, json, address) {
    this._requestManager = requestManager;
    this._json = json;
    this._address = address;
};

AllSolidityEvents.prototype.encode = function (options) {
    options = options || {};
    var result = {};

    ['fromBlock', 'toBlock'].filter(function (f) {
        return options[f] !== undefined;
    }).forEach(function (f) {
        result[f] = formatters.inputBlockNumberFormatter(options[f]);
    });

    result.address = this._address;

    return result;
};

AllSolidityEvents.prototype.decode = function (data) {
    data.data = data.data || '';
    data.topics = data.topics || [];

    var eventTopic = data.topics[0].slice(2);
    var match = this._json.filter(function (j) {
        return eventTopic === sha3(utils.transformToFullName(j));
    })[0];

    if (!match) {
        // cannot find matching event?
        console.warn('cannot find event for log');
        return data;
    }

    var event = new SolidityEvent(this._requestManager, match, this._address);
    return event.decode(data);
};

AllSolidityEvents.prototype.execute = function (options, callback) {

    if (utils.isFunction(arguments[arguments.length - 1])) {
        callback = arguments[arguments.length - 1];
        if (arguments.length === 1) options = null;
    }

    var o = this.encode(options);
    var formatter = this.decode.bind(this);
    return new Filter(o, 'eth', this._requestManager, watches.eth(), formatter, callback);
};

AllSolidityEvents.prototype.attachToContract = function (contract) {
    var execute = this.execute.bind(this);
    contract.allEvents = execute;
};

module.exports = AllSolidityEvents;

},{"../utils/sha3":214,"../utils/utils":215,"./event":222,"./filter":224,"./formatters":225,"./methods/watches":238}],219:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** 
 * @file batch.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var Jsonrpc = require('./jsonrpc');
var errors = require('./errors');

var Batch = function Batch(web3) {
    this.requestManager = web3._requestManager;
    this.requests = [];
};

/**
 * Should be called to add create new request to batch request
 *
 * @method add
 * @param {Object} jsonrpc requet object
 */
Batch.prototype.add = function (request) {
    this.requests.push(request);
};

/**
 * Should be called to execute batch request
 *
 * @method execute
 */
Batch.prototype.execute = function () {
    var requests = this.requests;
    this.requestManager.sendBatch(requests, function (err, results) {
        results = results || [];
        requests.map(function (request, index) {
            return results[index] || {};
        }).forEach(function (result, index) {
            if (requests[index].callback) {

                if (!Jsonrpc.isValidResponse(result)) {
                    return requests[index].callback(errors.InvalidResponse(result));
                }

                requests[index].callback(null, requests[index].format ? requests[index].format(result.result) : result.result);
            }
        });
    });
};

module.exports = Batch;

},{"./errors":221,"./jsonrpc":230}],220:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file contract.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2014
 */

var utils = require('../utils/utils');
var coder = require('../solidity/coder');
var SolidityEvent = require('./event');
var SolidityFunction = require('./function');
var AllEvents = require('./allevents');

/**
 * Should be called to encode constructor params
 *
 * @method encodeConstructorParams
 * @param {Array} abi
 * @param {Array} constructor params
 */
var encodeConstructorParams = function encodeConstructorParams(abi, params) {
    return abi.filter(function (json) {
        return json.type === 'constructor' && json.inputs.length === params.length;
    }).map(function (json) {
        return json.inputs.map(function (input) {
            return input.type;
        });
    }).map(function (types) {
        return coder.encodeParams(types, params);
    })[0] || '';
};

/**
 * Should be called to add functions to contract object
 *
 * @method addFunctionsToContract
 * @param {Contract} contract
 * @param {Array} abi
 */
var addFunctionsToContract = function addFunctionsToContract(contract) {
    contract.abi.filter(function (json) {
        return json.type === 'function';
    }).map(function (json) {
        return new SolidityFunction(contract._eth, json, contract.address);
    }).forEach(function (f) {
        f.attachToContract(contract);
    });
};

/**
 * Should be called to add events to contract object
 *
 * @method addEventsToContract
 * @param {Contract} contract
 * @param {Array} abi
 */
var addEventsToContract = function addEventsToContract(contract) {
    var events = contract.abi.filter(function (json) {
        return json.type === 'event';
    });

    var All = new AllEvents(contract._eth._requestManager, events, contract.address);
    All.attachToContract(contract);

    events.map(function (json) {
        return new SolidityEvent(contract._eth._requestManager, json, contract.address);
    }).forEach(function (e) {
        e.attachToContract(contract);
    });
};

/**
 * Should be called to check if the contract gets properly deployed on the blockchain.
 *
 * @method checkForContractAddress
 * @param {Object} contract
 * @param {Function} callback
 * @returns {Undefined}
 */
var checkForContractAddress = function checkForContractAddress(contract, callback) {
    var count = 0,
        callbackFired = false;

    // wait for receipt
    var filter = contract._eth.filter('latest', function (e) {
        if (!e && !callbackFired) {
            count++;

            // stop watching after 50 blocks (timeout)
            if (count > 50) {

                filter.stopWatching(function () {});
                callbackFired = true;

                if (callback) callback(new Error('Contract transaction couldn\'t be found after 50 blocks'));else throw new Error('Contract transaction couldn\'t be found after 50 blocks');
            } else {

                contract._eth.getTransactionReceipt(contract.transactionHash, function (e, receipt) {
                    if (receipt && !callbackFired) {

                        contract._eth.getCode(receipt.contractAddress, function (e, code) {
                            /*jshint maxcomplexity: 6 */

                            if (callbackFired || !code) return;

                            filter.stopWatching(function () {});
                            callbackFired = true;

                            if (code.length > 3) {

                                // console.log('Contract code deployed!');

                                contract.address = receipt.contractAddress;

                                // attach events and methods again after we have
                                addFunctionsToContract(contract);
                                addEventsToContract(contract);

                                // call callback for the second time
                                if (callback) callback(null, contract);
                            } else {
                                if (callback) callback(new Error('The contract code couldn\'t be stored, please check your gas amount.'));else throw new Error('The contract code couldn\'t be stored, please check your gas amount.');
                            }
                        });
                    }
                });
            }
        }
    });
};

/**
 * Should be called to create new ContractFactory instance
 *
 * @method ContractFactory
 * @param {Array} abi
 */
var ContractFactory = function ContractFactory(eth, abi) {
    this.eth = eth;
    this.abi = abi;

    /**
     * Should be called to create new contract on a blockchain
     *
     * @method new
     * @param {Any} contract constructor param1 (optional)
     * @param {Any} contract constructor param2 (optional)
     * @param {Object} contract transaction object (required)
     * @param {Function} callback
     * @returns {Contract} returns contract instance
     */
    this.new = function () {
        /*jshint maxcomplexity: 7 */

        var contract = new Contract(this.eth, this.abi);

        // parse arguments
        var options = {}; // required!
        var callback;

        var args = Array.prototype.slice.call(arguments);
        if (utils.isFunction(args[args.length - 1])) {
            callback = args.pop();
        }

        var last = args[args.length - 1];
        if (utils.isObject(last) && !utils.isArray(last)) {
            options = args.pop();
        }

        if (options.value > 0) {
            var constructorAbi = abi.filter(function (json) {
                return json.type === 'constructor' && json.inputs.length === args.length;
            })[0] || {};

            if (!constructorAbi.payable) {
                throw new Error('Cannot send value to non-payable constructor');
            }
        }

        var bytes = encodeConstructorParams(this.abi, args);
        options.data += bytes;

        if (callback) {

            // wait for the contract address adn check if the code was deployed
            this.eth.sendTransaction(options, function (err, hash) {
                if (err) {
                    callback(err);
                } else {
                    // add the transaction hash
                    contract.transactionHash = hash;

                    // call callback for the first time
                    callback(null, contract);

                    checkForContractAddress(contract, callback);
                }
            });
        } else {
            var hash = this.eth.sendTransaction(options);
            // add the transaction hash
            contract.transactionHash = hash;
            checkForContractAddress(contract);
        }

        return contract;
    };

    this.new.getData = this.getData.bind(this);
};

/**
 * Should be called to create new ContractFactory
 *
 * @method contract
 * @param {Array} abi
 * @returns {ContractFactory} new contract factory
 */
//var contract = function (abi) {
//return new ContractFactory(abi);
//};


/**
 * Should be called to get access to existing contract on a blockchain
 *
 * @method at
 * @param {Address} contract address (required)
 * @param {Function} callback {optional)
 * @returns {Contract} returns contract if no callback was passed,
 * otherwise calls callback function (err, contract)
 */
ContractFactory.prototype.at = function (address, callback) {
    var contract = new Contract(this.eth, this.abi, address);

    // this functions are not part of prototype,
    // because we dont want to spoil the interface
    addFunctionsToContract(contract);
    addEventsToContract(contract);

    if (callback) {
        callback(null, contract);
    }
    return contract;
};

/**
 * Gets the data, which is data to deploy plus constructor params
 *
 * @method getData
 */
ContractFactory.prototype.getData = function () {
    var options = {}; // required!
    var args = Array.prototype.slice.call(arguments);

    var last = args[args.length - 1];
    if (utils.isObject(last) && !utils.isArray(last)) {
        options = args.pop();
    }

    var bytes = encodeConstructorParams(this.abi, args);
    options.data += bytes;

    return options.data;
};

/**
 * Should be called to create new contract instance
 *
 * @method Contract
 * @param {Array} abi
 * @param {Address} contract address
 */
var Contract = function Contract(eth, abi, address) {
    this._eth = eth;
    this.transactionHash = null;
    this.address = address;
    this.abi = abi;
};

module.exports = ContractFactory;

},{"../solidity/coder":202,"../utils/utils":215,"./allevents":218,"./event":222,"./function":226}],221:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** 
 * @file errors.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

module.exports = {
    InvalidNumberOfSolidityArgs: function InvalidNumberOfSolidityArgs() {
        return new Error('Invalid number of arguments to Solidity function');
    },
    InvalidNumberOfRPCParams: function InvalidNumberOfRPCParams() {
        return new Error('Invalid number of input parameters to RPC method');
    },
    InvalidConnection: function InvalidConnection(host) {
        return new Error('CONNECTION ERROR: Couldn\'t connect to node ' + host + '.');
    },
    InvalidProvider: function InvalidProvider() {
        return new Error('Provider not set or invalid');
    },
    InvalidResponse: function InvalidResponse(result) {
        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
        return new Error(message);
    },
    ConnectionTimeout: function ConnectionTimeout(ms) {
        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');
    }
};

},{}],222:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file event.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2014
 */

var utils = require('../utils/utils');
var coder = require('../solidity/coder');
var formatters = require('./formatters');
var sha3 = require('../utils/sha3');
var Filter = require('./filter');
var watches = require('./methods/watches');

/**
 * This prototype should be used to create event filters
 */
var SolidityEvent = function SolidityEvent(requestManager, json, address) {
    this._requestManager = requestManager;
    this._params = json.inputs;
    this._name = utils.transformToFullName(json);
    this._address = address;
    this._anonymous = json.anonymous;
};

/**
 * Should be used to get filtered param types
 *
 * @method types
 * @param {Bool} decide if returned typed should be indexed
 * @return {Array} array of types
 */
SolidityEvent.prototype.types = function (indexed) {
    return this._params.filter(function (i) {
        return i.indexed === indexed;
    }).map(function (i) {
        return i.type;
    });
};

/**
 * Should be used to get event display name
 *
 * @method displayName
 * @return {String} event display name
 */
SolidityEvent.prototype.displayName = function () {
    return utils.extractDisplayName(this._name);
};

/**
 * Should be used to get event type name
 *
 * @method typeName
 * @return {String} event type name
 */
SolidityEvent.prototype.typeName = function () {
    return utils.extractTypeName(this._name);
};

/**
 * Should be used to get event signature
 *
 * @method signature
 * @return {String} event signature
 */
SolidityEvent.prototype.signature = function () {
    return sha3(this._name);
};

/**
 * Should be used to encode indexed params and options to one final object
 *
 * @method encode
 * @param {Object} indexed
 * @param {Object} options
 * @return {Object} everything combined together and encoded
 */
SolidityEvent.prototype.encode = function (indexed, options) {
    indexed = indexed || {};
    options = options || {};
    var result = {};

    ['fromBlock', 'toBlock'].filter(function (f) {
        return options[f] !== undefined;
    }).forEach(function (f) {
        result[f] = formatters.inputBlockNumberFormatter(options[f]);
    });

    result.topics = [];

    result.address = this._address;
    if (!this._anonymous) {
        result.topics.push('0x' + this.signature());
    }

    var indexedTopics = this._params.filter(function (i) {
        return i.indexed === true;
    }).map(function (i) {
        var value = indexed[i.name];
        if (value === undefined || value === null) {
            return null;
        }

        if (utils.isArray(value)) {
            return value.map(function (v) {
                return '0x' + coder.encodeParam(i.type, v);
            });
        }
        return '0x' + coder.encodeParam(i.type, value);
    });

    result.topics = result.topics.concat(indexedTopics);

    return result;
};

/**
 * Should be used to decode indexed params and options
 *
 * @method decode
 * @param {Object} data
 * @return {Object} result object with decoded indexed && not indexed params
 */
SolidityEvent.prototype.decode = function (data) {

    data.data = data.data || '';
    data.topics = data.topics || [];

    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);
    var indexedData = argTopics.map(function (topics) {
        return topics.slice(2);
    }).join("");
    var indexedParams = coder.decodeParams(this.types(true), indexedData);

    var notIndexedData = data.data.slice(2);
    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);

    var result = formatters.outputLogFormatter(data);
    result.event = this.displayName();
    result.address = data.address;

    result.args = this._params.reduce(function (acc, current) {
        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();
        return acc;
    }, {});

    delete result.data;
    delete result.topics;

    return result;
};

/**
 * Should be used to create new filter object from event
 *
 * @method execute
 * @param {Object} indexed
 * @param {Object} options
 * @return {Object} filter object
 */
SolidityEvent.prototype.execute = function (indexed, options, callback) {

    if (utils.isFunction(arguments[arguments.length - 1])) {
        callback = arguments[arguments.length - 1];
        if (arguments.length === 2) options = null;
        if (arguments.length === 1) {
            options = null;
            indexed = {};
        }
    }

    var o = this.encode(indexed, options);
    var formatter = this.decode.bind(this);
    return new Filter(o, 'eth', this._requestManager, watches.eth(), formatter, callback);
};

/**
 * Should be used to attach event to contract object
 *
 * @method attachToContract
 * @param {Contract}
 */
SolidityEvent.prototype.attachToContract = function (contract) {
    var execute = this.execute.bind(this);
    var displayName = this.displayName();
    if (!contract[displayName]) {
        contract[displayName] = execute;
    }
    contract[displayName][this.typeName()] = this.execute.bind(this, contract);
};

module.exports = SolidityEvent;

},{"../solidity/coder":202,"../utils/sha3":214,"../utils/utils":215,"./filter":224,"./formatters":225,"./methods/watches":238}],223:[function(require,module,exports){
'use strict';

var formatters = require('./formatters');
var utils = require('./../utils/utils');
var Method = require('./method');
var Property = require('./property');

// TODO: refactor, so the input params are not altered.
// it's necessary to make same 'extension' work with multiple providers
var extend = function extend(web3) {
    /* jshint maxcomplexity:5 */
    var ex = function ex(extension) {

        var extendedObject;
        if (extension.property) {
            if (!web3[extension.property]) {
                web3[extension.property] = {};
            }
            extendedObject = web3[extension.property];
        } else {
            extendedObject = web3;
        }

        if (extension.methods) {
            extension.methods.forEach(function (method) {
                method.attachToObject(extendedObject);
                method.setRequestManager(web3._requestManager);
            });
        }

        if (extension.properties) {
            extension.properties.forEach(function (property) {
                property.attachToObject(extendedObject);
                property.setRequestManager(web3._requestManager);
            });
        }
    };

    ex.formatters = formatters;
    ex.utils = utils;
    ex.Method = Method;
    ex.Property = Property;

    return ex;
};

module.exports = extend;

},{"./../utils/utils":215,"./formatters":225,"./method":231,"./property":240}],224:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** @file filter.js
 * @authors:
 *   Jeffrey Wilcke <jeff@ethdev.com>
 *   Marek Kotewicz <marek@ethdev.com>
 *   Marian Oancea <marian@ethdev.com>
 *   Fabian Vogelsteller <fabian@ethdev.com>
 *   Gav Wood <g@ethdev.com>
 * @date 2014
 */

var formatters = require('./formatters');
var utils = require('../utils/utils');

/**
* Converts a given topic to a hex string, but also allows null values.
*
* @param {Mixed} value
* @return {String}
*/
var toTopic = function toTopic(value) {

    if (value === null || typeof value === 'undefined') return null;

    value = String(value);

    if (value.indexOf('0x') === 0) return value;else return utils.fromUtf8(value);
};

/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones
/// @param should be string or object
/// @returns options string or object
var getOptions = function getOptions(options, type) {
    /*jshint maxcomplexity: 6 */

    if (utils.isString(options)) {
        return options;
    }

    options = options || {};

    switch (type) {
        case 'eth':

            // make sure topics, get converted to hex
            options.topics = options.topics || [];
            options.topics = options.topics.map(function (topic) {
                return utils.isArray(topic) ? topic.map(toTopic) : toTopic(topic);
            });

            return {
                topics: options.topics,
                from: options.from,
                to: options.to,
                address: options.address,
                fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),
                toBlock: formatters.inputBlockNumberFormatter(options.toBlock)
            };
        case 'shh':
            return options;
    }
};

/**
Adds the callback and sets up the methods, to iterate over the results.

@method getLogsAtStart
@param {Object} self
@param {function} callback
*/
var getLogsAtStart = function getLogsAtStart(self, callback) {
    // call getFilterLogs for the first watch callback start
    if (!utils.isString(self.options)) {
        self.get(function (err, messages) {
            // don't send all the responses to all the watches again... just to self one
            if (err) {
                callback(err);
            }

            if (utils.isArray(messages)) {
                messages.forEach(function (message) {
                    callback(null, message);
                });
            }
        });
    }
};

/**
Adds the callback and sets up the methods, to iterate over the results.

@method pollFilter
@param {Object} self
*/
var pollFilter = function pollFilter(self) {

    var onMessage = function onMessage(error, messages) {
        if (error) {
            return self.callbacks.forEach(function (callback) {
                callback(error);
            });
        }

        if (utils.isArray(messages)) {
            messages.forEach(function (message) {
                message = self.formatter ? self.formatter(message) : message;
                self.callbacks.forEach(function (callback) {
                    callback(null, message);
                });
            });
        }
    };

    self.requestManager.startPolling({
        method: self.implementation.poll.call,
        params: [self.filterId]
    }, self.filterId, onMessage, self.stopWatching.bind(self));
};

var Filter = function Filter(options, type, requestManager, methods, formatter, callback, filterCreationErrorCallback) {
    var self = this;
    var implementation = {};
    methods.forEach(function (method) {
        method.setRequestManager(requestManager);
        method.attachToObject(implementation);
    });
    this.requestManager = requestManager;
    this.options = getOptions(options, type);
    this.implementation = implementation;
    this.filterId = null;
    this.callbacks = [];
    this.getLogsCallbacks = [];
    this.pollFilters = [];
    this.formatter = formatter;
    this.implementation.newFilter(this.options, function (error, id) {
        if (error) {
            self.callbacks.forEach(function (cb) {
                cb(error);
            });
            if (typeof filterCreationErrorCallback === 'function') {
                filterCreationErrorCallback(error);
            }
        } else {
            self.filterId = id;

            // check if there are get pending callbacks as a consequence
            // of calling get() with filterId unassigned.
            self.getLogsCallbacks.forEach(function (cb) {
                self.get(cb);
            });
            self.getLogsCallbacks = [];

            // get filter logs for the already existing watch calls
            self.callbacks.forEach(function (cb) {
                getLogsAtStart(self, cb);
            });
            if (self.callbacks.length > 0) pollFilter(self);

            // start to watch immediately
            if (typeof callback === 'function') {
                return self.watch(callback);
            }
        }
    });

    return this;
};

Filter.prototype.watch = function (callback) {
    this.callbacks.push(callback);

    if (this.filterId) {
        getLogsAtStart(this, callback);
        pollFilter(this);
    }

    return this;
};

Filter.prototype.stopWatching = function (callback) {
    this.requestManager.stopPolling(this.filterId);
    this.callbacks = [];
    // remove filter async
    if (callback) {
        this.implementation.uninstallFilter(this.filterId, callback);
    } else {
        return this.implementation.uninstallFilter(this.filterId);
    }
};

Filter.prototype.get = function (callback) {
    var self = this;
    if (utils.isFunction(callback)) {
        if (this.filterId === null) {
            // If filterId is not set yet, call it back
            // when newFilter() assigns it.
            this.getLogsCallbacks.push(callback);
        } else {
            this.implementation.getLogs(this.filterId, function (err, res) {
                if (err) {
                    callback(err);
                } else {
                    callback(null, res.map(function (log) {
                        return self.formatter ? self.formatter(log) : log;
                    }));
                }
            });
        }
    } else {
        if (this.filterId === null) {
            throw new Error('Filter ID Error: filter().get() can\'t be chained synchronous, please provide a callback for the get() method.');
        }
        var logs = this.implementation.getLogs(this.filterId);
        return logs.map(function (log) {
            return self.formatter ? self.formatter(log) : log;
        });
    }

    return this;
};

module.exports = Filter;

},{"../utils/utils":215,"./formatters":225}],225:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file formatters.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @author Fabian Vogelsteller <fabian@ethdev.com>
 * @date 2015
 */

var utils = require('../utils/utils');
var config = require('../utils/config');
var Iban = require('./iban');

/**
 * Should the format output to a big number
 *
 * @method outputBigNumberFormatter
 * @param {String|Number|BigNumber}
 * @returns {BigNumber} object
 */
var outputBigNumberFormatter = function outputBigNumberFormatter(number) {
    return utils.toBigNumber(number);
};

var isPredefinedBlockNumber = function isPredefinedBlockNumber(blockNumber) {
    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';
};

var inputDefaultBlockNumberFormatter = function inputDefaultBlockNumberFormatter(blockNumber) {
    if (blockNumber === undefined) {
        return config.defaultBlock;
    }
    return inputBlockNumberFormatter(blockNumber);
};

var inputBlockNumberFormatter = function inputBlockNumberFormatter(blockNumber) {
    if (blockNumber === undefined) {
        return undefined;
    } else if (isPredefinedBlockNumber(blockNumber)) {
        return blockNumber;
    }
    return utils.toHex(blockNumber);
};

/**
 * Formats the input of a transaction and converts all values to HEX
 *
 * @method inputCallFormatter
 * @param {Object} transaction options
 * @returns object
*/
var inputCallFormatter = function inputCallFormatter(options) {

    options.from = options.from || config.defaultAccount;

    if (options.from) {
        options.from = inputAddressFormatter(options.from);
    }

    if (options.to) {
        // it might be contract creation
        options.to = inputAddressFormatter(options.to);
    }

    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
        return options[key] !== undefined;
    }).forEach(function (key) {
        options[key] = utils.fromDecimal(options[key]);
    });

    return options;
};

/**
 * Formats the input of a transaction and converts all values to HEX
 *
 * @method inputTransactionFormatter
 * @param {Object} transaction options
 * @returns object
*/
var inputTransactionFormatter = function inputTransactionFormatter(options) {

    options.from = options.from || config.defaultAccount;
    options.from = inputAddressFormatter(options.from);

    if (options.to) {
        // it might be contract creation
        options.to = inputAddressFormatter(options.to);
    }

    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {
        return options[key] !== undefined;
    }).forEach(function (key) {
        options[key] = utils.fromDecimal(options[key]);
    });

    return options;
};

/**
 * Formats the output of a transaction to its proper values
 *
 * @method outputTransactionFormatter
 * @param {Object} tx
 * @returns {Object}
*/
var outputTransactionFormatter = function outputTransactionFormatter(tx) {
    if (tx.blockNumber !== null) tx.blockNumber = utils.toDecimal(tx.blockNumber);
    if (tx.transactionIndex !== null) tx.transactionIndex = utils.toDecimal(tx.transactionIndex);
    tx.nonce = utils.toDecimal(tx.nonce);
    tx.gas = utils.toDecimal(tx.gas);
    tx.gasPrice = utils.toBigNumber(tx.gasPrice);
    tx.value = utils.toBigNumber(tx.value);
    return tx;
};

/**
 * Formats the output of a transaction receipt to its proper values
 *
 * @method outputTransactionReceiptFormatter
 * @param {Object} receipt
 * @returns {Object}
*/
var outputTransactionReceiptFormatter = function outputTransactionReceiptFormatter(receipt) {
    if (receipt.blockNumber !== null) receipt.blockNumber = utils.toDecimal(receipt.blockNumber);
    if (receipt.transactionIndex !== null) receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);
    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);
    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);

    if (utils.isArray(receipt.logs)) {
        receipt.logs = receipt.logs.map(function (log) {
            return outputLogFormatter(log);
        });
    }

    return receipt;
};

/**
 * Formats the output of a block to its proper values
 *
 * @method outputBlockFormatter
 * @param {Object} block
 * @returns {Object}
*/
var outputBlockFormatter = function outputBlockFormatter(block) {

    // transform to number
    block.gasLimit = utils.toDecimal(block.gasLimit);
    block.gasUsed = utils.toDecimal(block.gasUsed);
    block.size = utils.toDecimal(block.size);
    block.timestamp = utils.toDecimal(block.timestamp);
    if (block.number !== null) block.number = utils.toDecimal(block.number);

    block.difficulty = utils.toBigNumber(block.difficulty);
    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);

    if (utils.isArray(block.transactions)) {
        block.transactions.forEach(function (item) {
            if (!utils.isString(item)) return outputTransactionFormatter(item);
        });
    }

    return block;
};

/**
 * Formats the output of a log
 *
 * @method outputLogFormatter
 * @param {Object} log object
 * @returns {Object} log
*/
var outputLogFormatter = function outputLogFormatter(log) {
    if (log.blockNumber) log.blockNumber = utils.toDecimal(log.blockNumber);
    if (log.transactionIndex) log.transactionIndex = utils.toDecimal(log.transactionIndex);
    if (log.logIndex) log.logIndex = utils.toDecimal(log.logIndex);

    return log;
};

/**
 * Formats the input of a whisper post and converts all values to HEX
 *
 * @method inputPostFormatter
 * @param {Object} transaction object
 * @returns {Object}
*/
var inputPostFormatter = function inputPostFormatter(post) {

    // post.payload = utils.toHex(post.payload);
    post.ttl = utils.fromDecimal(post.ttl);
    post.workToProve = utils.fromDecimal(post.workToProve);
    post.priority = utils.fromDecimal(post.priority);

    // fallback
    if (!utils.isArray(post.topics)) {
        post.topics = post.topics ? [post.topics] : [];
    }

    // format the following options
    post.topics = post.topics.map(function (topic) {
        // convert only if not hex
        return topic.indexOf('0x') === 0 ? topic : utils.fromUtf8(topic);
    });

    return post;
};

/**
 * Formats the output of a received post message
 *
 * @method outputPostFormatter
 * @param {Object}
 * @returns {Object}
 */
var outputPostFormatter = function outputPostFormatter(post) {

    post.expiry = utils.toDecimal(post.expiry);
    post.sent = utils.toDecimal(post.sent);
    post.ttl = utils.toDecimal(post.ttl);
    post.workProved = utils.toDecimal(post.workProved);
    // post.payloadRaw = post.payload;
    // post.payload = utils.toAscii(post.payload);

    // if (utils.isJson(post.payload)) {
    //     post.payload = JSON.parse(post.payload);
    // }

    // format the following options
    if (!post.topics) {
        post.topics = [];
    }
    post.topics = post.topics.map(function (topic) {
        return utils.toAscii(topic);
    });

    return post;
};

var inputAddressFormatter = function inputAddressFormatter(address) {
    var iban = new Iban(address);
    if (iban.isValid() && iban.isDirect()) {
        return '0x' + iban.address();
    } else if (utils.isStrictAddress(address)) {
        return address;
    } else if (utils.isAddress(address)) {
        return '0x' + address;
    }
    throw new Error('invalid address');
};

var outputSyncingFormatter = function outputSyncingFormatter(result) {
    if (!result) {
        return result;
    }

    result.startingBlock = utils.toDecimal(result.startingBlock);
    result.currentBlock = utils.toDecimal(result.currentBlock);
    result.highestBlock = utils.toDecimal(result.highestBlock);
    if (result.knownStates) {
        result.knownStates = utils.toDecimal(result.knownStates);
        result.pulledStates = utils.toDecimal(result.pulledStates);
    }

    return result;
};

module.exports = {
    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,
    inputBlockNumberFormatter: inputBlockNumberFormatter,
    inputCallFormatter: inputCallFormatter,
    inputTransactionFormatter: inputTransactionFormatter,
    inputAddressFormatter: inputAddressFormatter,
    inputPostFormatter: inputPostFormatter,
    outputBigNumberFormatter: outputBigNumberFormatter,
    outputTransactionFormatter: outputTransactionFormatter,
    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,
    outputBlockFormatter: outputBlockFormatter,
    outputLogFormatter: outputLogFormatter,
    outputPostFormatter: outputPostFormatter,
    outputSyncingFormatter: outputSyncingFormatter
};

},{"../utils/config":213,"../utils/utils":215,"./iban":228}],226:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file function.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var coder = require('../solidity/coder');
var utils = require('../utils/utils');
var errors = require('./errors');
var formatters = require('./formatters');
var sha3 = require('../utils/sha3');

/**
 * This prototype should be used to call/sendTransaction to solidity functions
 */
var SolidityFunction = function SolidityFunction(eth, json, address) {
    this._eth = eth;
    this._inputTypes = json.inputs.map(function (i) {
        return i.type;
    });
    this._outputTypes = json.outputs.map(function (i) {
        return i.type;
    });
    this._constant = json.constant;
    this._payable = json.payable;
    this._name = utils.transformToFullName(json);
    this._address = address;
};

SolidityFunction.prototype.extractCallback = function (args) {
    if (utils.isFunction(args[args.length - 1])) {
        return args.pop(); // modify the args array!
    }
};

SolidityFunction.prototype.extractDefaultBlock = function (args) {
    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length - 1])) {
        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!
    }
};

/**
 * Should be called to check if the number of arguments is correct
 *
 * @method validateArgs
 * @param {Array} arguments
 * @throws {Error} if it is not
 */
SolidityFunction.prototype.validateArgs = function (args) {
    var inputArgs = args.filter(function (a) {
        // filter the options object but not arguments that are arrays
        return !(utils.isObject(a) === true && utils.isArray(a) === false && utils.isBigNumber(a) === false);
    });
    if (inputArgs.length !== this._inputTypes.length) {
        throw errors.InvalidNumberOfSolidityArgs();
    }
};

/**
 * Should be used to create payload from arguments
 *
 * @method toPayload
 * @param {Array} solidity function params
 * @param {Object} optional payload options
 */
SolidityFunction.prototype.toPayload = function (args) {
    var options = {};
    if (args.length > this._inputTypes.length && utils.isObject(args[args.length - 1])) {
        options = args[args.length - 1];
    }
    this.validateArgs(args);
    options.to = this._address;
    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);
    return options;
};

/**
 * Should be used to get function signature
 *
 * @method signature
 * @return {String} function signature
 */
SolidityFunction.prototype.signature = function () {
    return sha3(this._name).slice(0, 8);
};

SolidityFunction.prototype.unpackOutput = function (output) {
    if (!output) {
        return;
    }

    output = output.length >= 2 ? output.slice(2) : output;
    var result = coder.decodeParams(this._outputTypes, output);
    return result.length === 1 ? result[0] : result;
};

/**
 * Calls a contract function.
 *
 * @method call
 * @param {...Object} Contract function arguments
 * @param {function} If the last argument is a function, the contract function
 *   call will be asynchronous, and the callback will be passed the
 *   error and result.
 * @return {String} output bytes
 */
SolidityFunction.prototype.call = function () {
    var args = Array.prototype.slice.call(arguments).filter(function (a) {
        return a !== undefined;
    });
    var callback = this.extractCallback(args);
    var defaultBlock = this.extractDefaultBlock(args);
    var payload = this.toPayload(args);

    if (!callback) {
        var output = this._eth.call(payload, defaultBlock);
        return this.unpackOutput(output);
    }

    var self = this;
    this._eth.call(payload, defaultBlock, function (error, output) {
        if (error) return callback(error, null);

        var unpacked = null;
        try {
            unpacked = self.unpackOutput(output);
        } catch (e) {
            error = e;
        }

        callback(error, unpacked);
    });
};

/**
 * Should be used to sendTransaction to solidity function
 *
 * @method sendTransaction
 */
SolidityFunction.prototype.sendTransaction = function () {
    var args = Array.prototype.slice.call(arguments).filter(function (a) {
        return a !== undefined;
    });
    var callback = this.extractCallback(args);
    var payload = this.toPayload(args);

    if (payload.value > 0 && !this._payable) {
        throw new Error('Cannot send value to non-payable function');
    }

    if (!callback) {
        return this._eth.sendTransaction(payload);
    }

    this._eth.sendTransaction(payload, callback);
};

/**
 * Should be used to estimateGas of solidity function
 *
 * @method estimateGas
 */
SolidityFunction.prototype.estimateGas = function () {
    var args = Array.prototype.slice.call(arguments);
    var callback = this.extractCallback(args);
    var payload = this.toPayload(args);

    if (!callback) {
        return this._eth.estimateGas(payload);
    }

    this._eth.estimateGas(payload, callback);
};

/**
 * Return the encoded data of the call
 *
 * @method getData
 * @return {String} the encoded data
 */
SolidityFunction.prototype.getData = function () {
    var args = Array.prototype.slice.call(arguments);
    var payload = this.toPayload(args);

    return payload.data;
};

/**
 * Should be used to get function display name
 *
 * @method displayName
 * @return {String} display name of the function
 */
SolidityFunction.prototype.displayName = function () {
    return utils.extractDisplayName(this._name);
};

/**
 * Should be used to get function type name
 *
 * @method typeName
 * @return {String} type name of the function
 */
SolidityFunction.prototype.typeName = function () {
    return utils.extractTypeName(this._name);
};

/**
 * Should be called to get rpc requests from solidity function
 *
 * @method request
 * @returns {Object}
 */
SolidityFunction.prototype.request = function () {
    var args = Array.prototype.slice.call(arguments);
    var callback = this.extractCallback(args);
    var payload = this.toPayload(args);
    var format = this.unpackOutput.bind(this);

    return {
        method: this._constant ? 'eth_call' : 'eth_sendTransaction',
        callback: callback,
        params: [payload],
        format: format
    };
};

/**
 * Should be called to execute function
 *
 * @method execute
 */
SolidityFunction.prototype.execute = function () {
    var transaction = !this._constant;

    // send transaction
    if (transaction) {
        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));
    }

    // call
    return this.call.apply(this, Array.prototype.slice.call(arguments));
};

/**
 * Should be called to attach function to contract
 *
 * @method attachToContract
 * @param {Contract}
 */
SolidityFunction.prototype.attachToContract = function (contract) {
    var execute = this.execute.bind(this);
    execute.request = this.request.bind(this);
    execute.call = this.call.bind(this);
    execute.sendTransaction = this.sendTransaction.bind(this);
    execute.estimateGas = this.estimateGas.bind(this);
    execute.getData = this.getData.bind(this);
    var displayName = this.displayName();
    if (!contract[displayName]) {
        contract[displayName] = execute;
    }
    contract[displayName][this.typeName()] = execute; // circular!!!!
};

module.exports = SolidityFunction;

},{"../solidity/coder":202,"../utils/sha3":214,"../utils/utils":215,"./errors":221,"./formatters":225}],227:[function(require,module,exports){
(function (Buffer){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** @file httpprovider.js
 * @authors:
 *   Marek Kotewicz <marek@ethdev.com>
 *   Marian Oancea <marian@ethdev.com>
 *   Fabian Vogelsteller <fabian@ethdev.com>
 * @date 2015
 */

var errors = require('./errors');

// workaround to use httpprovider in different envs

// browser
if (typeof window !== 'undefined' && window.XMLHttpRequest) {
  XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line
  // node
} else {
  XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line
}

var XHR2 = require('xhr2'); // jshint ignore: line

/**
 * HttpProvider should be used to send rpc calls over http
 */
var HttpProvider = function HttpProvider(host, timeout, user, password) {
  this.host = host || 'http://localhost:8545';
  this.timeout = timeout || 0;
  this.user = user;
  this.password = password;
};

/**
 * Should be called to prepare new XMLHttpRequest
 *
 * @method prepareRequest
 * @param {Boolean} true if request should be async
 * @return {XMLHttpRequest} object
 */
HttpProvider.prototype.prepareRequest = function (async) {
  var request;

  if (async) {
    request = new XHR2();
    request.timeout = this.timeout;
  } else {
    request = new XMLHttpRequest();
  }

  request.open('POST', this.host, async);
  if (this.user && this.password) {
    var auth = 'Basic ' + new Buffer(this.user + ':' + this.password).toString('base64');
    request.setRequestHeader('Authorization', auth);
  }request.setRequestHeader('Content-Type', 'application/json');
  return request;
};

/**
 * Should be called to make sync request
 *
 * @method send
 * @param {Object} payload
 * @return {Object} result
 */
HttpProvider.prototype.send = function (payload) {
  var request = this.prepareRequest(false);

  try {
    request.send(JSON.stringify(payload));
  } catch (error) {
    throw errors.InvalidConnection(this.host);
  }

  var result = request.responseText;

  try {
    result = JSON.parse(result);
  } catch (e) {
    throw errors.InvalidResponse(request.responseText);
  }

  return result;
};

/**
 * Should be used to make async request
 *
 * @method sendAsync
 * @param {Object} payload
 * @param {Function} callback triggered on end with (err, result)
 */
HttpProvider.prototype.sendAsync = function (payload, callback) {
  var request = this.prepareRequest(true);

  request.onreadystatechange = function () {
    if (request.readyState === 4 && request.timeout !== 1) {
      var result = request.responseText;
      var error = null;

      try {
        result = JSON.parse(result);
      } catch (e) {
        error = errors.InvalidResponse(request.responseText);
      }

      callback(error, result);
    }
  };

  request.ontimeout = function () {
    callback(errors.ConnectionTimeout(this.timeout));
  };

  try {
    request.send(JSON.stringify(payload));
  } catch (error) {
    callback(errors.InvalidConnection(this.host));
  }
};

/**
 * Synchronously tries to make Http request
 *
 * @method isConnected
 * @return {Boolean} returns true if request haven't failed. Otherwise false
 */
HttpProvider.prototype.isConnected = function () {
  try {
    this.send({
      id: 9999999999,
      jsonrpc: '2.0',
      method: 'net_listening',
      params: []
    });
    return true;
  } catch (e) {
    return false;
  }
};

module.exports = HttpProvider;

}).call(this,require("buffer").Buffer)

},{"./errors":221,"buffer":52,"xhr2":246,"xmlhttprequest":212}],228:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** 
 * @file iban.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var BigNumber = require('bignumber.js');

var padLeft = function padLeft(string, bytes) {
    var result = string;
    while (result.length < bytes * 2) {
        result = '0' + result;
    }
    return result;
};

/**
 * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
 * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
 *
 * @method iso13616Prepare
 * @param {String} iban the IBAN
 * @returns {String} the prepared IBAN
 */
var iso13616Prepare = function iso13616Prepare(iban) {
    var A = 'A'.charCodeAt(0);
    var Z = 'Z'.charCodeAt(0);

    iban = iban.toUpperCase();
    iban = iban.substr(4) + iban.substr(0, 4);

    return iban.split('').map(function (n) {
        var code = n.charCodeAt(0);
        if (code >= A && code <= Z) {
            // A = 10, B = 11, ... Z = 35
            return code - A + 10;
        } else {
            return n;
        }
    }).join('');
};

/**
 * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
 *
 * @method mod9710
 * @param {String} iban
 * @returns {Number}
 */
var mod9710 = function mod9710(iban) {
    var remainder = iban,
        block;

    while (remainder.length > 2) {
        block = remainder.slice(0, 9);
        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
    }

    return parseInt(remainder, 10) % 97;
};

/**
 * This prototype should be used to create iban object from iban correct string
 *
 * @param {String} iban
 */
var Iban = function Iban(iban) {
    this._iban = iban;
};

/**
 * This method should be used to create iban object from ethereum address
 *
 * @method fromAddress
 * @param {String} address
 * @return {Iban} the IBAN object
 */
Iban.fromAddress = function (address) {
    var asBn = new BigNumber(address, 16);
    var base36 = asBn.toString(36);
    var padded = padLeft(base36, 15);
    return Iban.fromBban(padded.toUpperCase());
};

/**
 * Convert the passed BBAN to an IBAN for this country specification.
 * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
 * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
 *
 * @method fromBban
 * @param {String} bban the BBAN to convert to IBAN
 * @returns {Iban} the IBAN object
 */
Iban.fromBban = function (bban) {
    var countryCode = 'XE';

    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));
    var checkDigit = ('0' + (98 - remainder)).slice(-2);

    return new Iban(countryCode + checkDigit + bban);
};

/**
 * Should be used to create IBAN object for given institution and identifier
 *
 * @method createIndirect
 * @param {Object} options, required options are "institution" and "identifier"
 * @return {Iban} the IBAN object
 */
Iban.createIndirect = function (options) {
    return Iban.fromBban('ETH' + options.institution + options.identifier);
};

/**
 * Thos method should be used to check if given string is valid iban object
 *
 * @method isValid
 * @param {String} iban string
 * @return {Boolean} true if it is valid IBAN
 */
Iban.isValid = function (iban) {
    var i = new Iban(iban);
    return i.isValid();
};

/**
 * Should be called to check if iban is correct
 *
 * @method isValid
 * @returns {Boolean} true if it is, otherwise false
 */
Iban.prototype.isValid = function () {
    return (/^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1
    );
};

/**
 * Should be called to check if iban number is direct
 *
 * @method isDirect
 * @returns {Boolean} true if it is, otherwise false
 */
Iban.prototype.isDirect = function () {
    return this._iban.length === 34 || this._iban.length === 35;
};

/**
 * Should be called to check if iban number if indirect
 *
 * @method isIndirect
 * @returns {Boolean} true if it is, otherwise false
 */
Iban.prototype.isIndirect = function () {
    return this._iban.length === 20;
};

/**
 * Should be called to get iban checksum
 * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)
 *
 * @method checksum
 * @returns {String} checksum
 */
Iban.prototype.checksum = function () {
    return this._iban.substr(2, 2);
};

/**
 * Should be called to get institution identifier
 * eg. XREG
 *
 * @method institution
 * @returns {String} institution identifier
 */
Iban.prototype.institution = function () {
    return this.isIndirect() ? this._iban.substr(7, 4) : '';
};

/**
 * Should be called to get client identifier within institution
 * eg. GAVOFYORK
 *
 * @method client
 * @returns {String} client identifier
 */
Iban.prototype.client = function () {
    return this.isIndirect() ? this._iban.substr(11) : '';
};

/**
 * Should be called to get client direct address
 *
 * @method address
 * @returns {String} client direct address
 */
Iban.prototype.address = function () {
    if (this.isDirect()) {
        var base36 = this._iban.substr(4);
        var asBn = new BigNumber(base36, 36);
        return padLeft(asBn.toString(16), 20);
    }

    return '';
};

Iban.prototype.toString = function () {
    return this._iban;
};

module.exports = Iban;

},{"bignumber.js":245}],229:[function(require,module,exports){
/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** @file ipcprovider.js
 * @authors:
 *   Fabian Vogelsteller <fabian@ethdev.com>
 * @date 2015
 */

"use strict";

var utils = require('../utils/utils');
var errors = require('./errors');

var IpcProvider = function IpcProvider(path, net) {
    var _this = this;
    this.responseCallbacks = {};
    this.path = path;

    this.connection = net.connect({ path: this.path });

    this.connection.on('error', function (e) {
        console.error('IPC Connection Error', e);
        _this._timeout();
    });

    this.connection.on('end', function () {
        _this._timeout();
    });

    // LISTEN FOR CONNECTION RESPONSES
    this.connection.on('data', function (data) {
        /*jshint maxcomplexity: 6 */

        _this._parseResponse(data.toString()).forEach(function (result) {

            var id = null;

            // get the id which matches the returned id
            if (utils.isArray(result)) {
                result.forEach(function (load) {
                    if (_this.responseCallbacks[load.id]) id = load.id;
                });
            } else {
                id = result.id;
            }

            // fire the callback
            if (_this.responseCallbacks[id]) {
                _this.responseCallbacks[id](null, result);
                delete _this.responseCallbacks[id];
            }
        });
    });
};

/**
Will parse the response and make an array out of it.

@method _parseResponse
@param {String} data
*/
IpcProvider.prototype._parseResponse = function (data) {
    var _this = this,
        returnValues = [];

    // DE-CHUNKER
    var dechunkedData = data.replace(/\}[\n\r]?\{/g, '}|--|{') // }{
    .replace(/\}\][\n\r]?\[\{/g, '}]|--|[{') // }][{
    .replace(/\}[\n\r]?\[\{/g, '}|--|[{') // }[{
    .replace(/\}\][\n\r]?\{/g, '}]|--|{') // }]{
    .split('|--|');

    dechunkedData.forEach(function (data) {

        // prepend the last chunk
        if (_this.lastChunk) data = _this.lastChunk + data;

        var result = null;

        try {
            result = JSON.parse(data);
        } catch (e) {

            _this.lastChunk = data;

            // start timeout to cancel all requests
            clearTimeout(_this.lastChunkTimeout);
            _this.lastChunkTimeout = setTimeout(function () {
                _this._timeout();
                throw errors.InvalidResponse(data);
            }, 1000 * 15);

            return;
        }

        // cancel timeout and set chunk to null
        clearTimeout(_this.lastChunkTimeout);
        _this.lastChunk = null;

        if (result) returnValues.push(result);
    });

    return returnValues;
};

/**
Get the adds a callback to the responseCallbacks object,
which will be called if a response matching the response Id will arrive.

@method _addResponseCallback
*/
IpcProvider.prototype._addResponseCallback = function (payload, callback) {
    var id = payload.id || payload[0].id;
    var method = payload.method || payload[0].method;

    this.responseCallbacks[id] = callback;
    this.responseCallbacks[id].method = method;
};

/**
Timeout all requests when the end/error event is fired

@method _timeout
*/
IpcProvider.prototype._timeout = function () {
    for (var key in this.responseCallbacks) {
        if (this.responseCallbacks.hasOwnProperty(key)) {
            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));
            delete this.responseCallbacks[key];
        }
    }
};

/**
Check if the current connection is still valid.

@method isConnected
*/
IpcProvider.prototype.isConnected = function () {
    var _this = this;

    // try reconnect, when connection is gone
    if (!_this.connection.writable) _this.connection.connect({ path: _this.path });

    return !!this.connection.writable;
};

IpcProvider.prototype.send = function (payload) {

    if (this.connection.writeSync) {
        var result;

        // try reconnect, when connection is gone
        if (!this.connection.writable) this.connection.connect({ path: this.path });

        var data = this.connection.writeSync(JSON.stringify(payload));

        try {
            result = JSON.parse(data);
        } catch (e) {
            throw errors.InvalidResponse(data);
        }

        return result;
    } else {
        throw new Error('You tried to send "' + payload.method + '" synchronously. Synchronous requests are not supported by the IPC provider.');
    }
};

IpcProvider.prototype.sendAsync = function (payload, callback) {
    // try reconnect, when connection is gone
    if (!this.connection.writable) this.connection.connect({ path: this.path });

    this.connection.write(JSON.stringify(payload));
    this._addResponseCallback(payload, callback);
};

module.exports = IpcProvider;

},{"../utils/utils":215,"./errors":221}],230:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** @file jsonrpc.js
 * @authors:
 *   Marek Kotewicz <marek@ethdev.com>
 *   Aaron Kumavis <aaron@kumavis.me>
 * @date 2015
 */

// Initialize Jsonrpc as a simple object with utility functions.
var Jsonrpc = {
    messageId: 0
};

/**
 * Should be called to valid json create payload object
 *
 * @method toPayload
 * @param {Function} method of jsonrpc call, required
 * @param {Array} params, an array of method params, optional
 * @returns {Object} valid jsonrpc payload object
 */
Jsonrpc.toPayload = function (method, params) {
    if (!method) console.error('jsonrpc method should be specified!');

    // advance message ID
    Jsonrpc.messageId++;

    return {
        jsonrpc: '2.0',
        id: Jsonrpc.messageId,
        method: method,
        params: params || []
    };
};

/**
 * Should be called to check if jsonrpc response is valid
 *
 * @method isValidResponse
 * @param {Object}
 * @returns {Boolean} true if response is valid, otherwise false
 */
Jsonrpc.isValidResponse = function (response) {
    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);

    function validateSingleMessage(message) {
        return !!message && !message.error && message.jsonrpc === '2.0' && typeof message.id === 'number' && message.result !== undefined; // only undefined is not valid json object
    }
};

/**
 * Should be called to create batch payload object
 *
 * @method toBatchPayload
 * @param {Array} messages, an array of objects with method (required) and params (optional) fields
 * @returns {Array} batch payload
 */
Jsonrpc.toBatchPayload = function (messages) {
    return messages.map(function (message) {
        return Jsonrpc.toPayload(message.method, message.params);
    });
};

module.exports = Jsonrpc;

},{}],231:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file method.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var utils = require('../utils/utils');
var errors = require('./errors');

var Method = function Method(options) {
    this.name = options.name;
    this.call = options.call;
    this.params = options.params || 0;
    this.inputFormatter = options.inputFormatter;
    this.outputFormatter = options.outputFormatter;
    this.requestManager = null;
};

Method.prototype.setRequestManager = function (rm) {
    this.requestManager = rm;
};

/**
 * Should be used to determine name of the jsonrpc method based on arguments
 *
 * @method getCall
 * @param {Array} arguments
 * @return {String} name of jsonrpc method
 */
Method.prototype.getCall = function (args) {
    return utils.isFunction(this.call) ? this.call(args) : this.call;
};

/**
 * Should be used to extract callback from array of arguments. Modifies input param
 *
 * @method extractCallback
 * @param {Array} arguments
 * @return {Function|Null} callback, if exists
 */
Method.prototype.extractCallback = function (args) {
    if (utils.isFunction(args[args.length - 1])) {
        return args.pop(); // modify the args array!
    }
};

/**
 * Should be called to check if the number of arguments is correct
 * 
 * @method validateArgs
 * @param {Array} arguments
 * @throws {Error} if it is not
 */
Method.prototype.validateArgs = function (args) {
    if (args.length !== this.params) {
        throw errors.InvalidNumberOfRPCParams();
    }
};

/**
 * Should be called to format input args of method
 * 
 * @method formatInput
 * @param {Array}
 * @return {Array}
 */
Method.prototype.formatInput = function (args) {
    if (!this.inputFormatter) {
        return args;
    }

    return this.inputFormatter.map(function (formatter, index) {
        return formatter ? formatter(args[index]) : args[index];
    });
};

/**
 * Should be called to format output(result) of method
 *
 * @method formatOutput
 * @param {Object}
 * @return {Object}
 */
Method.prototype.formatOutput = function (result) {
    return this.outputFormatter && result ? this.outputFormatter(result) : result;
};

/**
 * Should create payload from given input args
 *
 * @method toPayload
 * @param {Array} args
 * @return {Object}
 */
Method.prototype.toPayload = function (args) {
    var call = this.getCall(args);
    var callback = this.extractCallback(args);
    var params = this.formatInput(args);
    this.validateArgs(params);

    return {
        method: call,
        params: params,
        callback: callback
    };
};

Method.prototype.attachToObject = function (obj) {
    var func = this.buildCall();
    func.call = this.call; // TODO!!! that's ugly. filter.js uses it
    var name = this.name.split('.');
    if (name.length > 1) {
        obj[name[0]] = obj[name[0]] || {};
        obj[name[0]][name[1]] = func;
    } else {
        obj[name[0]] = func;
    }
};

Method.prototype.buildCall = function () {
    var method = this;
    var send = function send() {
        var payload = method.toPayload(Array.prototype.slice.call(arguments));
        if (payload.callback) {
            return method.requestManager.sendAsync(payload, function (err, result) {
                payload.callback(err, method.formatOutput(result));
            });
        }
        return method.formatOutput(method.requestManager.send(payload));
    };
    send.request = this.request.bind(this);
    return send;
};

/**
 * Should be called to create pure JSONRPC request which can be used in batch request
 *
 * @method request
 * @param {...} params
 * @return {Object} jsonrpc request
 */
Method.prototype.request = function () {
    var payload = this.toPayload(Array.prototype.slice.call(arguments));
    payload.format = this.formatOutput.bind(this);
    return payload;
};

module.exports = Method;

},{"../utils/utils":215,"./errors":221}],232:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** @file db.js
 * @authors:
 *   Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var Method = require('../method');

var DB = function DB(web3) {
    this._requestManager = web3._requestManager;

    var self = this;

    methods().forEach(function (method) {
        method.attachToObject(self);
        method.setRequestManager(web3._requestManager);
    });
};

var methods = function methods() {
    var putString = new Method({
        name: 'putString',
        call: 'db_putString',
        params: 3
    });

    var getString = new Method({
        name: 'getString',
        call: 'db_getString',
        params: 2
    });

    var putHex = new Method({
        name: 'putHex',
        call: 'db_putHex',
        params: 3
    });

    var getHex = new Method({
        name: 'getHex',
        call: 'db_getHex',
        params: 2
    });

    return [putString, getString, putHex, getHex];
};

module.exports = DB;

},{"../method":231}],233:[function(require,module,exports){
/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file eth.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @author Fabian Vogelsteller <fabian@ethdev.com>
 * @date 2015
 */

"use strict";

var formatters = require('../formatters');
var utils = require('../../utils/utils');
var Method = require('../method');
var Property = require('../property');
var c = require('../../utils/config');
var Contract = require('../contract');
var watches = require('./watches');
var Filter = require('../filter');
var IsSyncing = require('../syncing');
var namereg = require('../namereg');
var Iban = require('../iban');
var transfer = require('../transfer');

var blockCall = function blockCall(args) {
    return utils.isString(args[0]) && args[0].indexOf('0x') === 0 ? "eth_getBlockByHash" : "eth_getBlockByNumber";
};

var transactionFromBlockCall = function transactionFromBlockCall(args) {
    return utils.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';
};

var uncleCall = function uncleCall(args) {
    return utils.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';
};

var getBlockTransactionCountCall = function getBlockTransactionCountCall(args) {
    return utils.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';
};

var uncleCountCall = function uncleCountCall(args) {
    return utils.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';
};

function Eth(web3) {
    this._requestManager = web3._requestManager;

    var self = this;

    methods().forEach(function (method) {
        method.attachToObject(self);
        method.setRequestManager(self._requestManager);
    });

    properties().forEach(function (p) {
        p.attachToObject(self);
        p.setRequestManager(self._requestManager);
    });

    this.iban = Iban;
    this.sendIBANTransaction = transfer.bind(null, this);
}

Object.defineProperty(Eth.prototype, 'defaultBlock', {
    get: function get() {
        return c.defaultBlock;
    },
    set: function set(val) {
        c.defaultBlock = val;
        return val;
    }
});

Object.defineProperty(Eth.prototype, 'defaultAccount', {
    get: function get() {
        return c.defaultAccount;
    },
    set: function set(val) {
        c.defaultAccount = val;
        return val;
    }
});

var methods = function methods() {
    var getBalance = new Method({
        name: 'getBalance',
        call: 'eth_getBalance',
        params: 2,
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],
        outputFormatter: formatters.outputBigNumberFormatter
    });

    var getStorageAt = new Method({
        name: 'getStorageAt',
        call: 'eth_getStorageAt',
        params: 3,
        inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]
    });

    var getCode = new Method({
        name: 'getCode',
        call: 'eth_getCode',
        params: 2,
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]
    });

    var getBlock = new Method({
        name: 'getBlock',
        call: blockCall,
        params: 2,
        inputFormatter: [formatters.inputBlockNumberFormatter, function (val) {
            return !!val;
        }],
        outputFormatter: formatters.outputBlockFormatter
    });

    var getUncle = new Method({
        name: 'getUncle',
        call: uncleCall,
        params: 2,
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
        outputFormatter: formatters.outputBlockFormatter

    });

    var getCompilers = new Method({
        name: 'getCompilers',
        call: 'eth_getCompilers',
        params: 0
    });

    var getBlockTransactionCount = new Method({
        name: 'getBlockTransactionCount',
        call: getBlockTransactionCountCall,
        params: 1,
        inputFormatter: [formatters.inputBlockNumberFormatter],
        outputFormatter: utils.toDecimal
    });

    var getBlockUncleCount = new Method({
        name: 'getBlockUncleCount',
        call: uncleCountCall,
        params: 1,
        inputFormatter: [formatters.inputBlockNumberFormatter],
        outputFormatter: utils.toDecimal
    });

    var getTransaction = new Method({
        name: 'getTransaction',
        call: 'eth_getTransactionByHash',
        params: 1,
        outputFormatter: formatters.outputTransactionFormatter
    });

    var getTransactionFromBlock = new Method({
        name: 'getTransactionFromBlock',
        call: transactionFromBlockCall,
        params: 2,
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
        outputFormatter: formatters.outputTransactionFormatter
    });

    var getTransactionReceipt = new Method({
        name: 'getTransactionReceipt',
        call: 'eth_getTransactionReceipt',
        params: 1,
        outputFormatter: formatters.outputTransactionReceiptFormatter
    });

    var getTransactionCount = new Method({
        name: 'getTransactionCount',
        call: 'eth_getTransactionCount',
        params: 2,
        inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],
        outputFormatter: utils.toDecimal
    });

    var sendRawTransaction = new Method({
        name: 'sendRawTransaction',
        call: 'eth_sendRawTransaction',
        params: 1,
        inputFormatter: [null]
    });

    var sendTransaction = new Method({
        name: 'sendTransaction',
        call: 'eth_sendTransaction',
        params: 1,
        inputFormatter: [formatters.inputTransactionFormatter]
    });

    var signTransaction = new Method({
        name: 'signTransaction',
        call: 'eth_signTransaction',
        params: 1,
        inputFormatter: [formatters.inputTransactionFormatter]
    });

    var sign = new Method({
        name: 'sign',
        call: 'eth_sign',
        params: 2,
        inputFormatter: [formatters.inputAddressFormatter, null]
    });

    var call = new Method({
        name: 'call',
        call: 'eth_call',
        params: 2,
        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]
    });

    var estimateGas = new Method({
        name: 'estimateGas',
        call: 'eth_estimateGas',
        params: 1,
        inputFormatter: [formatters.inputCallFormatter],
        outputFormatter: utils.toDecimal
    });

    var compileSolidity = new Method({
        name: 'compile.solidity',
        call: 'eth_compileSolidity',
        params: 1
    });

    var compileLLL = new Method({
        name: 'compile.lll',
        call: 'eth_compileLLL',
        params: 1
    });

    var compileSerpent = new Method({
        name: 'compile.serpent',
        call: 'eth_compileSerpent',
        params: 1
    });

    var submitWork = new Method({
        name: 'submitWork',
        call: 'eth_submitWork',
        params: 3
    });

    var getWork = new Method({
        name: 'getWork',
        call: 'eth_getWork',
        params: 0
    });

    return [getBalance, getStorageAt, getCode, getBlock, getUncle, getCompilers, getBlockTransactionCount, getBlockUncleCount, getTransaction, getTransactionFromBlock, getTransactionReceipt, getTransactionCount, call, estimateGas, sendRawTransaction, signTransaction, sendTransaction, sign, compileSolidity, compileLLL, compileSerpent, submitWork, getWork];
};

var properties = function properties() {
    return [new Property({
        name: 'coinbase',
        getter: 'eth_coinbase'
    }), new Property({
        name: 'mining',
        getter: 'eth_mining'
    }), new Property({
        name: 'hashrate',
        getter: 'eth_hashrate',
        outputFormatter: utils.toDecimal
    }), new Property({
        name: 'syncing',
        getter: 'eth_syncing',
        outputFormatter: formatters.outputSyncingFormatter
    }), new Property({
        name: 'gasPrice',
        getter: 'eth_gasPrice',
        outputFormatter: formatters.outputBigNumberFormatter
    }), new Property({
        name: 'accounts',
        getter: 'eth_accounts'
    }), new Property({
        name: 'blockNumber',
        getter: 'eth_blockNumber',
        outputFormatter: utils.toDecimal
    }), new Property({
        name: 'protocolVersion',
        getter: 'eth_protocolVersion'
    })];
};

Eth.prototype.contract = function (abi) {
    var factory = new Contract(this, abi);
    return factory;
};

Eth.prototype.filter = function (options, callback, filterCreationErrorCallback) {
    return new Filter(options, 'eth', this._requestManager, watches.eth(), formatters.outputLogFormatter, callback, filterCreationErrorCallback);
};

Eth.prototype.namereg = function () {
    return this.contract(namereg.global.abi).at(namereg.global.address);
};

Eth.prototype.icapNamereg = function () {
    return this.contract(namereg.icap.abi).at(namereg.icap.address);
};

Eth.prototype.isSyncing = function (callback) {
    return new IsSyncing(this._requestManager, callback);
};

module.exports = Eth;

},{"../../utils/config":213,"../../utils/utils":215,"../contract":220,"../filter":224,"../formatters":225,"../iban":228,"../method":231,"../namereg":239,"../property":240,"../syncing":243,"../transfer":244,"./watches":238}],234:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** @file eth.js
 * @authors:
 *   Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var utils = require('../../utils/utils');
var Property = require('../property');

var Net = function Net(web3) {
    this._requestManager = web3._requestManager;

    var self = this;

    properties().forEach(function (p) {
        p.attachToObject(self);
        p.setRequestManager(web3._requestManager);
    });
};

/// @returns an array of objects describing web3.eth api properties
var properties = function properties() {
    return [new Property({
        name: 'listening',
        getter: 'net_listening'
    }), new Property({
        name: 'peerCount',
        getter: 'net_peerCount',
        outputFormatter: utils.toDecimal
    })];
};

module.exports = Net;

},{"../../utils/utils":215,"../property":240}],235:[function(require,module,exports){
/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file eth.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @author Fabian Vogelsteller <fabian@ethdev.com>
 * @date 2015
 */

"use strict";

var Method = require('../method');
var Property = require('../property');
var formatters = require('../formatters');

function Personal(web3) {
    this._requestManager = web3._requestManager;

    var self = this;

    methods().forEach(function (method) {
        method.attachToObject(self);
        method.setRequestManager(self._requestManager);
    });

    properties().forEach(function (p) {
        p.attachToObject(self);
        p.setRequestManager(self._requestManager);
    });
}

var methods = function methods() {
    var newAccount = new Method({
        name: 'newAccount',
        call: 'personal_newAccount',
        params: 1,
        inputFormatter: [null]
    });

    var importRawKey = new Method({
        name: 'importRawKey',
        call: 'personal_importRawKey',
        params: 2
    });

    var sign = new Method({
        name: 'sign',
        call: 'personal_sign',
        params: 3,
        inputFormatter: [null, formatters.inputAddressFormatter, null]
    });

    var ecRecover = new Method({
        name: 'ecRecover',
        call: 'personal_ecRecover',
        params: 2
    });

    var unlockAccount = new Method({
        name: 'unlockAccount',
        call: 'personal_unlockAccount',
        params: 3,
        inputFormatter: [formatters.inputAddressFormatter, null, null]
    });

    var sendTransaction = new Method({
        name: 'sendTransaction',
        call: 'personal_sendTransaction',
        params: 2,
        inputFormatter: [formatters.inputTransactionFormatter, null]
    });

    var lockAccount = new Method({
        name: 'lockAccount',
        call: 'personal_lockAccount',
        params: 1,
        inputFormatter: [formatters.inputAddressFormatter]
    });

    return [newAccount, importRawKey, unlockAccount, ecRecover, sign, sendTransaction, lockAccount];
};

var properties = function properties() {
    return [new Property({
        name: 'listAccounts',
        getter: 'personal_listAccounts'
    })];
};

module.exports = Personal;

},{"../formatters":225,"../method":231,"../property":240}],236:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** @file shh.js
 * @authors:
 *   Fabian Vogelsteller <fabian@ethereum.org>
 *   Marek Kotewicz <marek@ethcore.io>
 * @date 2017
 */

var Method = require('../method');
var Filter = require('../filter');
var watches = require('./watches');

var Shh = function Shh(web3) {
    this._requestManager = web3._requestManager;

    var self = this;

    methods().forEach(function (method) {
        method.attachToObject(self);
        method.setRequestManager(self._requestManager);
    });
};

Shh.prototype.newMessageFilter = function (options, callback, filterCreationErrorCallback) {
    return new Filter(options, 'shh', this._requestManager, watches.shh(), null, callback, filterCreationErrorCallback);
};

var methods = function methods() {

    return [new Method({
        name: 'version',
        call: 'shh_version',
        params: 0
    }), new Method({
        name: 'info',
        call: 'shh_info',
        params: 0
    }), new Method({
        name: 'setMaxMessageSize',
        call: 'shh_setMaxMessageSize',
        params: 1
    }), new Method({
        name: 'setMinPoW',
        call: 'shh_setMinPoW',
        params: 1
    }), new Method({
        name: 'markTrustedPeer',
        call: 'shh_markTrustedPeer',
        params: 1
    }), new Method({
        name: 'newKeyPair',
        call: 'shh_newKeyPair',
        params: 0
    }), new Method({
        name: 'addPrivateKey',
        call: 'shh_addPrivateKey',
        params: 1
    }), new Method({
        name: 'deleteKeyPair',
        call: 'shh_deleteKeyPair',
        params: 1
    }), new Method({
        name: 'hasKeyPair',
        call: 'shh_hasKeyPair',
        params: 1
    }), new Method({
        name: 'getPublicKey',
        call: 'shh_getPublicKey',
        params: 1
    }), new Method({
        name: 'getPrivateKey',
        call: 'shh_getPrivateKey',
        params: 1
    }), new Method({
        name: 'newSymKey',
        call: 'shh_newSymKey',
        params: 0
    }), new Method({
        name: 'addSymKey',
        call: 'shh_addSymKey',
        params: 1
    }), new Method({
        name: 'generateSymKeyFromPassword',
        call: 'shh_generateSymKeyFromPassword',
        params: 1
    }), new Method({
        name: 'hasSymKey',
        call: 'shh_hasSymKey',
        params: 1
    }), new Method({
        name: 'getSymKey',
        call: 'shh_getSymKey',
        params: 1
    }), new Method({
        name: 'deleteSymKey',
        call: 'shh_deleteSymKey',
        params: 1
    }),

    // subscribe and unsubscribe missing

    new Method({
        name: 'post',
        call: 'shh_post',
        params: 1,
        inputFormatter: [null]
    })];
};

module.exports = Shh;

},{"../filter":224,"../method":231,"./watches":238}],237:[function(require,module,exports){
/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file bzz.js
 * @author Alex Beregszaszi <alex@rtfs.hu>
 * @date 2016
 *
 * Reference: https://github.com/ethereum/go-ethereum/blob/swarm/internal/web3ext/web3ext.go#L33
 */

"use strict";

var Method = require('../method');
var Property = require('../property');

function Swarm(web3) {
    this._requestManager = web3._requestManager;

    var self = this;

    methods().forEach(function (method) {
        method.attachToObject(self);
        method.setRequestManager(self._requestManager);
    });

    properties().forEach(function (p) {
        p.attachToObject(self);
        p.setRequestManager(self._requestManager);
    });
}

var methods = function methods() {
    var blockNetworkRead = new Method({
        name: 'blockNetworkRead',
        call: 'bzz_blockNetworkRead',
        params: 1,
        inputFormatter: [null]
    });

    var syncEnabled = new Method({
        name: 'syncEnabled',
        call: 'bzz_syncEnabled',
        params: 1,
        inputFormatter: [null]
    });

    var swapEnabled = new Method({
        name: 'swapEnabled',
        call: 'bzz_swapEnabled',
        params: 1,
        inputFormatter: [null]
    });

    var download = new Method({
        name: 'download',
        call: 'bzz_download',
        params: 2,
        inputFormatter: [null, null]
    });

    var upload = new Method({
        name: 'upload',
        call: 'bzz_upload',
        params: 2,
        inputFormatter: [null, null]
    });

    var retrieve = new Method({
        name: 'retrieve',
        call: 'bzz_retrieve',
        params: 1,
        inputFormatter: [null]
    });

    var store = new Method({
        name: 'store',
        call: 'bzz_store',
        params: 2,
        inputFormatter: [null, null]
    });

    var get = new Method({
        name: 'get',
        call: 'bzz_get',
        params: 1,
        inputFormatter: [null]
    });

    var put = new Method({
        name: 'put',
        call: 'bzz_put',
        params: 2,
        inputFormatter: [null, null]
    });

    var modify = new Method({
        name: 'modify',
        call: 'bzz_modify',
        params: 4,
        inputFormatter: [null, null, null, null]
    });

    return [blockNetworkRead, syncEnabled, swapEnabled, download, upload, retrieve, store, get, put, modify];
};

var properties = function properties() {
    return [new Property({
        name: 'hive',
        getter: 'bzz_hive'
    }), new Property({
        name: 'info',
        getter: 'bzz_info'
    })];
};

module.exports = Swarm;

},{"../method":231,"../property":240}],238:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** @file watches.js
 * @authors:
 *   Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var Method = require('../method');

/// @returns an array of objects describing web3.eth.filter api methods
var eth = function eth() {
    var newFilterCall = function newFilterCall(args) {
        var type = args[0];

        switch (type) {
            case 'latest':
                args.shift();
                this.params = 0;
                return 'eth_newBlockFilter';
            case 'pending':
                args.shift();
                this.params = 0;
                return 'eth_newPendingTransactionFilter';
            default:
                return 'eth_newFilter';
        }
    };

    var newFilter = new Method({
        name: 'newFilter',
        call: newFilterCall,
        params: 1
    });

    var uninstallFilter = new Method({
        name: 'uninstallFilter',
        call: 'eth_uninstallFilter',
        params: 1
    });

    var getLogs = new Method({
        name: 'getLogs',
        call: 'eth_getFilterLogs',
        params: 1
    });

    var poll = new Method({
        name: 'poll',
        call: 'eth_getFilterChanges',
        params: 1
    });

    return [newFilter, uninstallFilter, getLogs, poll];
};

/// @returns an array of objects describing web3.shh.watch api methods
var shh = function shh() {

    return [new Method({
        name: 'newFilter',
        call: 'shh_newMessageFilter',
        params: 1
    }), new Method({
        name: 'uninstallFilter',
        call: 'shh_deleteMessageFilter',
        params: 1
    }), new Method({
        name: 'getLogs',
        call: 'shh_getFilterMessages',
        params: 1
    }), new Method({
        name: 'poll',
        call: 'shh_getFilterMessages',
        params: 1
    })];
};

module.exports = {
    eth: eth,
    shh: shh
};

},{"../method":231}],239:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** 
 * @file namereg.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var globalRegistrarAbi = require('../contracts/GlobalRegistrar.json');
var icapRegistrarAbi = require('../contracts/ICAPRegistrar.json');

var globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';
var icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';

module.exports = {
    global: {
        abi: globalRegistrarAbi,
        address: globalNameregAddress
    },
    icap: {
        abi: icapRegistrarAbi,
        address: icapNameregAddress
    }
};

},{"../contracts/GlobalRegistrar.json":196,"../contracts/ICAPRegistrar.json":197}],240:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * @file property.js
 * @author Fabian Vogelsteller <fabian@frozeman.de>
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var utils = require('../utils/utils');

var Property = function Property(options) {
    this.name = options.name;
    this.getter = options.getter;
    this.setter = options.setter;
    this.outputFormatter = options.outputFormatter;
    this.inputFormatter = options.inputFormatter;
    this.requestManager = null;
};

Property.prototype.setRequestManager = function (rm) {
    this.requestManager = rm;
};

/**
 * Should be called to format input args of method
 *
 * @method formatInput
 * @param {Array}
 * @return {Array}
 */
Property.prototype.formatInput = function (arg) {
    return this.inputFormatter ? this.inputFormatter(arg) : arg;
};

/**
 * Should be called to format output(result) of method
 *
 * @method formatOutput
 * @param {Object}
 * @return {Object}
 */
Property.prototype.formatOutput = function (result) {
    return this.outputFormatter && result !== null && result !== undefined ? this.outputFormatter(result) : result;
};

/**
 * Should be used to extract callback from array of arguments. Modifies input param
 *
 * @method extractCallback
 * @param {Array} arguments
 * @return {Function|Null} callback, if exists
 */
Property.prototype.extractCallback = function (args) {
    if (utils.isFunction(args[args.length - 1])) {
        return args.pop(); // modify the args array!
    }
};

/**
 * Should attach function to method
 *
 * @method attachToObject
 * @param {Object}
 * @param {Function}
 */
Property.prototype.attachToObject = function (obj) {
    var proto = {
        get: this.buildGet(),
        enumerable: true
    };

    var names = this.name.split('.');
    var name = names[0];
    if (names.length > 1) {
        obj[names[0]] = obj[names[0]] || {};
        obj = obj[names[0]];
        name = names[1];
    }

    Object.defineProperty(obj, name, proto);
    obj[asyncGetterName(name)] = this.buildAsyncGet();
};

var asyncGetterName = function asyncGetterName(name) {
    return 'get' + name.charAt(0).toUpperCase() + name.slice(1);
};

Property.prototype.buildGet = function () {
    var property = this;
    return function get() {
        return property.formatOutput(property.requestManager.send({
            method: property.getter
        }));
    };
};

Property.prototype.buildAsyncGet = function () {
    var property = this;
    var get = function get(callback) {
        property.requestManager.sendAsync({
            method: property.getter
        }, function (err, result) {
            callback(err, property.formatOutput(result));
        });
    };
    get.request = this.request.bind(this);
    return get;
};

/**
 * Should be called to create pure JSONRPC request which can be used in batch request
 *
 * @method request
 * @param {...} params
 * @return {Object} jsonrpc request
 */
Property.prototype.request = function () {
    var payload = {
        method: this.getter,
        params: [],
        callback: this.extractCallback(Array.prototype.slice.call(arguments))
    };
    payload.format = this.formatOutput.bind(this);
    return payload;
};

module.exports = Property;

},{"../utils/utils":215}],241:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** 
 * @file requestmanager.js
 * @author Jeffrey Wilcke <jeff@ethdev.com>
 * @author Marek Kotewicz <marek@ethdev.com>
 * @author Marian Oancea <marian@ethdev.com>
 * @author Fabian Vogelsteller <fabian@ethdev.com>
 * @author Gav Wood <g@ethdev.com>
 * @date 2014
 */

var Jsonrpc = require('./jsonrpc');
var utils = require('../utils/utils');
var c = require('../utils/config');
var errors = require('./errors');

/**
 * It's responsible for passing messages to providers
 * It's also responsible for polling the ethereum node for incoming messages
 * Default poll timeout is 1 second
 * Singleton
 */
var RequestManager = function RequestManager(provider) {
    this.provider = provider;
    this.polls = {};
    this.timeout = null;
};

/**
 * Should be used to synchronously send request
 *
 * @method send
 * @param {Object} data
 * @return {Object}
 */
RequestManager.prototype.send = function (data) {
    if (!this.provider) {
        console.error(errors.InvalidProvider());
        return null;
    }

    var payload = Jsonrpc.toPayload(data.method, data.params);
    var result = this.provider.send(payload);

    if (!Jsonrpc.isValidResponse(result)) {
        throw errors.InvalidResponse(result);
    }

    return result.result;
};

/**
 * Should be used to asynchronously send request
 *
 * @method sendAsync
 * @param {Object} data
 * @param {Function} callback
 */
RequestManager.prototype.sendAsync = function (data, callback) {
    if (!this.provider) {
        return callback(errors.InvalidProvider());
    }

    var payload = Jsonrpc.toPayload(data.method, data.params);
    this.provider.sendAsync(payload, function (err, result) {
        if (err) {
            return callback(err);
        }

        if (!Jsonrpc.isValidResponse(result)) {
            return callback(errors.InvalidResponse(result));
        }

        callback(null, result.result);
    });
};

/**
 * Should be called to asynchronously send batch request
 *
 * @method sendBatch
 * @param {Array} batch data
 * @param {Function} callback
 */
RequestManager.prototype.sendBatch = function (data, callback) {
    if (!this.provider) {
        return callback(errors.InvalidProvider());
    }

    var payload = Jsonrpc.toBatchPayload(data);

    this.provider.sendAsync(payload, function (err, results) {
        if (err) {
            return callback(err);
        }

        if (!utils.isArray(results)) {
            return callback(errors.InvalidResponse(results));
        }

        callback(err, results);
    });
};

/**
 * Should be used to set provider of request manager
 *
 * @method setProvider
 * @param {Object}
 */
RequestManager.prototype.setProvider = function (p) {
    this.provider = p;
};

/**
 * Should be used to start polling
 *
 * @method startPolling
 * @param {Object} data
 * @param {Number} pollId
 * @param {Function} callback
 * @param {Function} uninstall
 *
 * @todo cleanup number of params
 */
RequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {
    this.polls[pollId] = { data: data, id: pollId, callback: callback, uninstall: uninstall };

    // start polling
    if (!this.timeout) {
        this.poll();
    }
};

/**
 * Should be used to stop polling for filter with given id
 *
 * @method stopPolling
 * @param {Number} pollId
 */
RequestManager.prototype.stopPolling = function (pollId) {
    delete this.polls[pollId];

    // stop polling
    if (Object.keys(this.polls).length === 0 && this.timeout) {
        clearTimeout(this.timeout);
        this.timeout = null;
    }
};

/**
 * Should be called to reset the polling mechanism of the request manager
 *
 * @method reset
 */
RequestManager.prototype.reset = function (keepIsSyncing) {
    /*jshint maxcomplexity:5 */

    for (var key in this.polls) {
        // remove all polls, except sync polls,
        // they need to be removed manually by calling syncing.stopWatching()
        if (!keepIsSyncing || key.indexOf('syncPoll_') === -1) {
            this.polls[key].uninstall();
            delete this.polls[key];
        }
    }

    // stop polling
    if (Object.keys(this.polls).length === 0 && this.timeout) {
        clearTimeout(this.timeout);
        this.timeout = null;
    }
};

/**
 * Should be called to poll for changes on filter with given id
 *
 * @method poll
 */
RequestManager.prototype.poll = function () {
    /*jshint maxcomplexity: 6 */
    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);

    if (Object.keys(this.polls).length === 0) {
        return;
    }

    if (!this.provider) {
        console.error(errors.InvalidProvider());
        return;
    }

    var pollsData = [];
    var pollsIds = [];
    for (var key in this.polls) {
        pollsData.push(this.polls[key].data);
        pollsIds.push(key);
    }

    if (pollsData.length === 0) {
        return;
    }

    var payload = Jsonrpc.toBatchPayload(pollsData);

    // map the request id to they poll id
    var pollsIdMap = {};
    payload.forEach(function (load, index) {
        pollsIdMap[load.id] = pollsIds[index];
    });

    var self = this;
    this.provider.sendAsync(payload, function (error, results) {

        // TODO: console log?
        if (error) {
            return;
        }

        if (!utils.isArray(results)) {
            throw errors.InvalidResponse(results);
        }
        results.map(function (result) {
            var id = pollsIdMap[result.id];

            // make sure the filter is still installed after arrival of the request
            if (self.polls[id]) {
                result.callback = self.polls[id].callback;
                return result;
            } else return false;
        }).filter(function (result) {
            return !!result;
        }).filter(function (result) {
            var valid = Jsonrpc.isValidResponse(result);
            if (!valid) {
                result.callback(errors.InvalidResponse(result));
            }
            return valid;
        }).forEach(function (result) {
            result.callback(null, result.result);
        });
    });
};

module.exports = RequestManager;

},{"../utils/config":213,"../utils/utils":215,"./errors":221,"./jsonrpc":230}],242:[function(require,module,exports){
'use strict';

var Settings = function Settings() {
    this.defaultBlock = 'latest';
    this.defaultAccount = undefined;
};

module.exports = Settings;

},{}],243:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** @file syncing.js
 * @authors:
 *   Fabian Vogelsteller <fabian@ethdev.com>
 * @date 2015
 */

var formatters = require('./formatters');
var utils = require('../utils/utils');

var count = 1;

/**
Adds the callback and sets up the methods, to iterate over the results.

@method pollSyncing
@param {Object} self
*/
var pollSyncing = function pollSyncing(self) {

    var onMessage = function onMessage(error, sync) {
        if (error) {
            return self.callbacks.forEach(function (callback) {
                callback(error);
            });
        }

        if (utils.isObject(sync) && sync.startingBlock) sync = formatters.outputSyncingFormatter(sync);

        self.callbacks.forEach(function (callback) {
            if (self.lastSyncState !== sync) {

                // call the callback with true first so the app can stop anything, before receiving the sync data
                if (!self.lastSyncState && utils.isObject(sync)) callback(null, true);

                // call on the next CPU cycle, so the actions of the sync stop can be processes first
                setTimeout(function () {
                    callback(null, sync);
                }, 0);

                self.lastSyncState = sync;
            }
        });
    };

    self.requestManager.startPolling({
        method: 'eth_syncing',
        params: []
    }, self.pollId, onMessage, self.stopWatching.bind(self));
};

var IsSyncing = function IsSyncing(requestManager, callback) {
    this.requestManager = requestManager;
    this.pollId = 'syncPoll_' + count++;
    this.callbacks = [];
    this.addCallback(callback);
    this.lastSyncState = false;
    pollSyncing(this);

    return this;
};

IsSyncing.prototype.addCallback = function (callback) {
    if (callback) this.callbacks.push(callback);
    return this;
};

IsSyncing.prototype.stopWatching = function () {
    this.requestManager.stopPolling(this.pollId);
    this.callbacks = [];
};

module.exports = IsSyncing;

},{"../utils/utils":215,"./formatters":225}],244:[function(require,module,exports){
'use strict';

/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
/** 
 * @file transfer.js
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

var Iban = require('./iban');
var exchangeAbi = require('../contracts/SmartExchange.json');

/**
 * Should be used to make Iban transfer
 *
 * @method transfer
 * @param {String} from
 * @param {String} to iban
 * @param {Value} value to be tranfered
 * @param {Function} callback, callback
 */
var transfer = function transfer(eth, from, to, value, callback) {
    var iban = new Iban(to);
    if (!iban.isValid()) {
        throw new Error('invalid iban address');
    }

    if (iban.isDirect()) {
        return transferToAddress(eth, from, iban.address(), value, callback);
    }

    if (!callback) {
        var address = eth.icapNamereg().addr(iban.institution());
        return deposit(eth, from, address, value, iban.client());
    }

    eth.icapNamereg().addr(iban.institution(), function (err, address) {
        return deposit(eth, from, address, value, iban.client(), callback);
    });
};

/**
 * Should be used to transfer funds to certain address
 *
 * @method transferToAddress
 * @param {String} from
 * @param {String} to
 * @param {Value} value to be tranfered
 * @param {Function} callback, callback
 */
var transferToAddress = function transferToAddress(eth, from, to, value, callback) {
    return eth.sendTransaction({
        address: to,
        from: from,
        value: value
    }, callback);
};

/**
 * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)
 *
 * @method deposit
 * @param {String} from
 * @param {String} to
 * @param {Value} value to be transfered
 * @param {String} client unique identifier
 * @param {Function} callback, callback
 */
var deposit = function deposit(eth, from, to, value, client, callback) {
    var abi = exchangeAbi;
    return eth.contract(abi).at(to).deposit(client, {
        from: from,
        value: value
    }, callback);
};

module.exports = transfer;

},{"../contracts/SmartExchange.json":198,"./iban":228}],245:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */

;(function (global) {
    'use strict';

    /*
      bignumber.js v2.0.7
      A JavaScript library for arbitrary-precision arithmetic.
      https://github.com/MikeMcl/bignumber.js
      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>
      MIT Expat Licence
    */

    var BigNumber,
        crypto,
        parseNumeric,
        isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
        mathceil = Math.ceil,
        mathfloor = Math.floor,
        notBool = ' not a boolean or binary digit',
        roundingMode = 'rounding mode',
        tooManyDigits = 'number type has more than 15 significant digits',
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
        BASE = 1e14,
        LOG_BASE = 14,
        MAX_SAFE_INTEGER = 0x1fffffffffffff,
        // 2^53 - 1
    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
        SQRT_BASE = 1e7,


    /*
     * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
     * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
     * exception is thrown (if ERRORS is true).
     */
    MAX = 1E9; // 0 to MAX_INT32


    /*
     * Create and return a BigNumber constructor.
     */
    function another(configObj) {
        var div,


        // id tracks the caller function, so its name can be included in error messages.
        id = 0,
            P = BigNumber.prototype,
            ONE = new BigNumber(1),


        /********************************* EDITABLE DEFAULTS **********************************/

        /*
         * The default values below must be integers within the inclusive ranges stated.
         * The values can also be changed at run-time using BigNumber.config.
         */

        // The maximum number of decimal places for operations involving division.
        DECIMAL_PLACES = 20,
            // 0 to MAX

        /*
         * The rounding mode used when rounding to the above decimal places, and when using
         * toExponential, toFixed, toFormat and toPrecision, and round (default value).
         * UP         0 Away from zero.
         * DOWN       1 Towards zero.
         * CEIL       2 Towards +Infinity.
         * FLOOR      3 Towards -Infinity.
         * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
         * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
         * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
         * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
         * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
         */
        ROUNDING_MODE = 4,
            // 0 to 8

        // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

        // The exponent value at and beneath which toString returns exponential notation.
        // Number type: -7
        TO_EXP_NEG = -7,
            // 0 to -MAX

        // The exponent value at and above which toString returns exponential notation.
        // Number type: 21
        TO_EXP_POS = 21,
            // 0 to MAX

        // RANGE : [MIN_EXP, MAX_EXP]

        // The minimum exponent value, beneath which underflow to zero occurs.
        // Number type: -324  (5e-324)
        MIN_EXP = -1e7,
            // -1 to -MAX

        // The maximum exponent value, above which overflow to Infinity occurs.
        // Number type:  308  (1.7976931348623157e+308)
        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
        MAX_EXP = 1e7,
            // 1 to MAX

        // Whether BigNumber Errors are ever thrown.
        ERRORS = true,
            // true or false

        // Change to intValidatorNoErrors if ERRORS is false.
        isValidInt = intValidatorWithErrors,
            // intValidatorWithErrors/intValidatorNoErrors

        // Whether to use cryptographically-secure random number generation, if available.
        CRYPTO = false,
            // true or false

        /*
         * The modulo mode used when calculating the modulus: a mod n.
         * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
         * The remainder (r) is calculated as: r = a - n * q.
         *
         * UP        0 The remainder is positive if the dividend is negative, else is negative.
         * DOWN      1 The remainder has the same sign as the dividend.
         *             This modulo mode is commonly known as 'truncated division' and is
         *             equivalent to (a % n) in JavaScript.
         * FLOOR     3 The remainder has the same sign as the divisor (Python %).
         * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
         * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
         *             The remainder is always positive.
         *
         * The truncated division, floored division, Euclidian division and IEEE 754 remainder
         * modes are commonly used for the modulus operation.
         * Although the other rounding modes can also be used, they may not give useful results.
         */
        MODULO_MODE = 1,
            // 0 to 9

        // The maximum number of significant digits of the result of the toPower operation.
        // If POW_PRECISION is 0, there will be unlimited significant digits.
        POW_PRECISION = 100,
            // 0 to MAX

        // The format specification used by the BigNumber.prototype.toFormat method.
        FORMAT = {
            decimalSeparator: '.',
            groupSeparator: ',',
            groupSize: 3,
            secondaryGroupSize: 0,
            fractionGroupSeparator: '\xA0', // non-breaking space
            fractionGroupSize: 0
        };

        /******************************************************************************************/

        // CONSTRUCTOR


        /*
         * The BigNumber constructor and exported function.
         * Create and return a new instance of a BigNumber object.
         *
         * n {number|string|BigNumber} A numeric value.
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.
         */
        function BigNumber(n, b) {
            var c,
                e,
                i,
                num,
                len,
                str,
                x = this;

            // Enable constructor usage without new.
            if (!(x instanceof BigNumber)) {

                // 'BigNumber() constructor call without new: {n}'
                if (ERRORS) raise(26, 'constructor call without new', n);
                return new BigNumber(n, b);
            }

            // 'new BigNumber() base not an integer: {b}'
            // 'new BigNumber() base out of range: {b}'
            if (b == null || !isValidInt(b, 2, 64, id, 'base')) {

                // Duplicate.
                if (n instanceof BigNumber) {
                    x.s = n.s;
                    x.e = n.e;
                    x.c = (n = n.c) ? n.slice() : n;
                    id = 0;
                    return;
                }

                if ((num = typeof n == 'number') && n * 0 == 0) {
                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;

                    // Fast path for integers.
                    if (n === ~~n) {
                        for (e = 0, i = n; i >= 10; i /= 10, e++) {}
                        x.e = e;
                        x.c = [n];
                        id = 0;
                        return;
                    }

                    str = n + '';
                } else {
                    if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);
                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                }
            } else {
                b = b | 0;
                str = n + '';

                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
                // Allow exponential notation to be used with base 10 argument.
                if (b == 10) {
                    x = new BigNumber(n instanceof BigNumber ? n : str);
                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                }

                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                // Any number in exponential form will fail due to the [Ee][+-].
                if ((num = typeof n == 'number') && n * 0 != 0 || !new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') + '(?:\\.' + c + ')?$', b < 37 ? 'i' : '').test(str)) {
                    return parseNumeric(x, str, num, b);
                }

                if (num) {
                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;

                    if (ERRORS && str.replace(/^0\.0*|\./, '').length > 15) {

                        // 'new BigNumber() number type has more than 15 significant digits: {n}'
                        raise(id, tooManyDigits, n);
                    }

                    // Prevent later check for length on converted number.
                    num = false;
                } else {
                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                }

                str = convertBase(str, 10, b, x.s);
            }

            // Decimal point?
            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

            // Exponential form?
            if ((i = str.search(/e/i)) > 0) {

                // Determine exponent.
                if (e < 0) e = i;
                e += +str.slice(i + 1);
                str = str.substring(0, i);
            } else if (e < 0) {

                // Integer.
                e = str.length;
            }

            // Determine leading zeros.
            for (i = 0; str.charCodeAt(i) === 48; i++) {}

            // Determine trailing zeros.
            for (len = str.length; str.charCodeAt(--len) === 48;) {}
            str = str.slice(i, len + 1);

            if (str) {
                len = str.length;

                // Disallow numbers with over 15 significant digits if number type.
                // 'new BigNumber() number type has more than 15 significant digits: {n}'
                if (num && ERRORS && len > 15) raise(id, tooManyDigits, x.s * n);

                e = e - i - 1;

                // Overflow?
                if (e > MAX_EXP) {

                    // Infinity.
                    x.c = x.e = null;

                    // Underflow?
                } else if (e < MIN_EXP) {

                    // Zero.
                    x.c = [x.e = 0];
                } else {
                    x.e = e;
                    x.c = [];

                    // Transform base

                    // e is the base 10 exponent.
                    // i is where to slice str to get the first element of the coefficient array.
                    i = (e + 1) % LOG_BASE;
                    if (e < 0) i += LOG_BASE;

                    if (i < len) {
                        if (i) x.c.push(+str.slice(0, i));

                        for (len -= LOG_BASE; i < len;) {
                            x.c.push(+str.slice(i, i += LOG_BASE));
                        }

                        str = str.slice(i);
                        i = LOG_BASE - str.length;
                    } else {
                        i -= len;
                    }

                    for (; i--; str += '0') {}
                    x.c.push(+str);
                }
            } else {

                // Zero.
                x.c = [x.e = 0];
            }

            id = 0;
        }

        // CONSTRUCTOR PROPERTIES


        BigNumber.another = another;

        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;

        /*
         * Configure infrequently-changing library-wide settings.
         *
         * Accept an object or an argument list, with one or many of the following properties or
         * parameters respectively:
         *
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
         *   ERRORS          {boolean|number}   true, false, 1 or 0
         *   CRYPTO          {boolean|number}   true, false, 1 or 0
         *   MODULO_MODE     {number}           0 to 9 inclusive
         *   POW_PRECISION   {number}           0 to MAX inclusive
         *   FORMAT          {object}           See BigNumber.prototype.toFormat
         *      decimalSeparator       {string}
         *      groupSeparator         {string}
         *      groupSize              {number}
         *      secondaryGroupSize     {number}
         *      fractionGroupSeparator {string}
         *      fractionGroupSize      {number}
         *
         * (The values assigned to the above FORMAT object properties are not checked for validity.)
         *
         * E.g.
         * BigNumber.config(20, 4) is equivalent to
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
         *
         * Ignore properties/parameters set to null or undefined.
         * Return an object with the properties current values.
         */
        BigNumber.config = function () {
            var v,
                p,
                i = 0,
                r = {},
                a = arguments,
                o = a[0],
                has = o && (typeof o === 'undefined' ? 'undefined' : _typeof(o)) == 'object' ? function () {
                if (o.hasOwnProperty(p)) return (v = o[p]) != null;
            } : function () {
                if (a.length > i) return (v = a[i++]) != null;
            };

            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
            // 'config() DECIMAL_PLACES not an integer: {v}'
            // 'config() DECIMAL_PLACES out of range: {v}'
            if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) {
                DECIMAL_PLACES = v | 0;
            }
            r[p] = DECIMAL_PLACES;

            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
            // 'config() ROUNDING_MODE not an integer: {v}'
            // 'config() ROUNDING_MODE out of range: {v}'
            if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) {
                ROUNDING_MODE = v | 0;
            }
            r[p] = ROUNDING_MODE;

            // EXPONENTIAL_AT {number|number[]}
            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
            // 'config() EXPONENTIAL_AT not an integer: {v}'
            // 'config() EXPONENTIAL_AT out of range: {v}'
            if (has(p = 'EXPONENTIAL_AT')) {

                if (isArray(v)) {
                    if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {
                        TO_EXP_NEG = v[0] | 0;
                        TO_EXP_POS = v[1] | 0;
                    }
                } else if (isValidInt(v, -MAX, MAX, 2, p)) {
                    TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);
                }
            }
            r[p] = [TO_EXP_NEG, TO_EXP_POS];

            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
            // 'config() RANGE not an integer: {v}'
            // 'config() RANGE cannot be zero: {v}'
            // 'config() RANGE out of range: {v}'
            if (has(p = 'RANGE')) {

                if (isArray(v)) {
                    if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {
                        MIN_EXP = v[0] | 0;
                        MAX_EXP = v[1] | 0;
                    }
                } else if (isValidInt(v, -MAX, MAX, 2, p)) {
                    if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);else if (ERRORS) raise(2, p + ' cannot be zero', v);
                }
            }
            r[p] = [MIN_EXP, MAX_EXP];

            // ERRORS {boolean|number} true, false, 1 or 0.
            // 'config() ERRORS not a boolean or binary digit: {v}'
            if (has(p = 'ERRORS')) {

                if (v === !!v || v === 1 || v === 0) {
                    id = 0;
                    isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;
                } else if (ERRORS) {
                    raise(2, p + notBool, v);
                }
            }
            r[p] = ERRORS;

            // CRYPTO {boolean|number} true, false, 1 or 0.
            // 'config() CRYPTO not a boolean or binary digit: {v}'
            // 'config() crypto unavailable: {crypto}'
            if (has(p = 'CRYPTO')) {

                if (v === !!v || v === 1 || v === 0) {
                    CRYPTO = !!(v && crypto && (typeof crypto === 'undefined' ? 'undefined' : _typeof(crypto)) == 'object');
                    if (v && !CRYPTO && ERRORS) raise(2, 'crypto unavailable', crypto);
                } else if (ERRORS) {
                    raise(2, p + notBool, v);
                }
            }
            r[p] = CRYPTO;

            // MODULO_MODE {number} Integer, 0 to 9 inclusive.
            // 'config() MODULO_MODE not an integer: {v}'
            // 'config() MODULO_MODE out of range: {v}'
            if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) {
                MODULO_MODE = v | 0;
            }
            r[p] = MODULO_MODE;

            // POW_PRECISION {number} Integer, 0 to MAX inclusive.
            // 'config() POW_PRECISION not an integer: {v}'
            // 'config() POW_PRECISION out of range: {v}'
            if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) {
                POW_PRECISION = v | 0;
            }
            r[p] = POW_PRECISION;

            // FORMAT {object}
            // 'config() FORMAT not an object: {v}'
            if (has(p = 'FORMAT')) {

                if ((typeof v === 'undefined' ? 'undefined' : _typeof(v)) == 'object') {
                    FORMAT = v;
                } else if (ERRORS) {
                    raise(2, p + ' not an object', v);
                }
            }
            r[p] = FORMAT;

            return r;
        };

        /*
         * Return a new BigNumber whose value is the maximum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.max = function () {
            return maxOrMin(arguments, P.lt);
        };

        /*
         * Return a new BigNumber whose value is the minimum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */
        BigNumber.min = function () {
            return maxOrMin(arguments, P.gt);
        };

        /*
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
         * zeros are produced).
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         *
         * 'random() decimal places not an integer: {dp}'
         * 'random() decimal places out of range: {dp}'
         * 'random() crypto unavailable: {crypto}'
         */
        BigNumber.random = function () {
            var pow2_53 = 0x20000000000000;

            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
            // Check if Math.random() produces more than 32 bits of randomness.
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
            var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {
                return mathfloor(Math.random() * pow2_53);
            } : function () {
                return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
            };

            return function (dp) {
                var a,
                    b,
                    e,
                    k,
                    v,
                    i = 0,
                    c = [],
                    rand = new BigNumber(ONE);

                dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;
                k = mathceil(dp / LOG_BASE);

                if (CRYPTO) {

                    // Browsers supporting crypto.getRandomValues.
                    if (crypto && crypto.getRandomValues) {

                        a = crypto.getRandomValues(new Uint32Array(k *= 2));

                        for (; i < k;) {

                            // 53 bits:
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                            //                                     11111 11111111 11111111
                            // 0x20000 is 2^21.
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

                            // Rejection sampling:
                            // 0 <= v < 9007199254740992
                            // Probability that v >= 9e15, is
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                            if (v >= 9e15) {
                                b = crypto.getRandomValues(new Uint32Array(2));
                                a[i] = b[0];
                                a[i + 1] = b[1];
                            } else {

                                // 0 <= v <= 8999999999999999
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 2;
                            }
                        }
                        i = k / 2;

                        // Node.js supporting crypto.randomBytes.
                    } else if (crypto && crypto.randomBytes) {

                        // buffer
                        a = crypto.randomBytes(k *= 7);

                        for (; i < k;) {

                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                            // 0x100000000 is 2^32, 0x1000000 is 2^24
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                            // 0 <= v < 9007199254740992
                            v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

                            if (v >= 9e15) {
                                crypto.randomBytes(7).copy(a, i);
                            } else {

                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 7;
                            }
                        }
                        i = k / 7;
                    } else if (ERRORS) {
                        raise(14, 'crypto unavailable', crypto);
                    }
                }

                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
                if (!i) {

                    for (; i < k;) {
                        v = random53bitInt();
                        if (v < 9e15) c[i++] = v % 1e14;
                    }
                }

                k = c[--i];
                dp %= LOG_BASE;

                // Convert trailing digits to zeros according to dp.
                if (k && dp) {
                    v = POWS_TEN[LOG_BASE - dp];
                    c[i] = mathfloor(k / v) * v;
                }

                // Remove trailing elements which are zero.
                for (; c[i] === 0; c.pop(), i--) {}

                // Zero?
                if (i < 0) {
                    c = [e = 0];
                } else {

                    // Remove leading elements which are zero and adjust exponent accordingly.
                    for (e = -1; c[0] === 0; c.shift(), e -= LOG_BASE) {}

                    // Count the digits of the first element of c to determine leading zeros, and...
                    for (i = 1, v = c[0]; v >= 10; v /= 10, i++) {}

                    // adjust the exponent accordingly.
                    if (i < LOG_BASE) e -= LOG_BASE - i;
                }

                rand.e = e;
                rand.c = c;
                return rand;
            };
        }();

        // PRIVATE FUNCTIONS


        // Convert a numeric string of baseIn to a numeric string of baseOut.
        function convertBase(str, baseOut, baseIn, sign) {
            var d,
                e,
                k,
                r,
                x,
                xc,
                y,
                i = str.indexOf('.'),
                dp = DECIMAL_PLACES,
                rm = ROUNDING_MODE;

            if (baseIn < 37) str = str.toLowerCase();

            // Non-integer.
            if (i >= 0) {
                k = POW_PRECISION;

                // Unlimited precision.
                POW_PRECISION = 0;
                str = str.replace('.', '');
                y = new BigNumber(baseIn);
                x = y.pow(str.length - i);
                POW_PRECISION = k;

                // Convert str as if an integer, then restore the fraction part by dividing the
                // result by its base raised to a power.
                y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);
                y.e = y.c.length;
            }

            // Convert the number as integer.
            xc = toBaseOut(str, baseIn, baseOut);
            e = k = xc.length;

            // Remove trailing zeros.
            for (; xc[--k] == 0; xc.pop()) {}
            if (!xc[0]) return '0';

            if (i < 0) {
                --e;
            } else {
                x.c = xc;
                x.e = e;

                // sign is needed for correct rounding.
                x.s = sign;
                x = div(x, y, dp, rm, baseOut);
                xc = x.c;
                r = x.r;
                e = x.e;
            }

            d = e + dp + 1;

            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
            i = xc[d];
            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;

            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));

            if (d < 1 || !xc[0]) {

                // 1^-dp or 0.
                str = r ? toFixedPoint('1', -dp) : '0';
            } else {
                xc.length = d;

                if (r) {

                    // Rounding up may mean the previous digit has to be rounded up and so on.
                    for (--baseOut; ++xc[--d] > baseOut;) {
                        xc[d] = 0;

                        if (!d) {
                            ++e;
                            xc.unshift(1);
                        }
                    }
                }

                // Determine trailing zeros.
                for (k = xc.length; !xc[--k];) {}

                // E.g. [4, 11, 15] becomes 4bf.
                for (i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++])) {}
                str = toFixedPoint(str, e);
            }

            // The caller will add the sign.
            return str;
        }

        // Perform division in the specified base. Called by div and convertBase.
        div = function () {

            // Assume non-zero x and k.
            function multiply(x, k, base) {
                var m,
                    temp,
                    xlo,
                    xhi,
                    carry = 0,
                    i = x.length,
                    klo = k % SQRT_BASE,
                    khi = k / SQRT_BASE | 0;

                for (x = x.slice(); i--;) {
                    xlo = x[i] % SQRT_BASE;
                    xhi = x[i] / SQRT_BASE | 0;
                    m = khi * xlo + xhi * klo;
                    temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                    x[i] = temp % base;
                }

                if (carry) x.unshift(carry);

                return x;
            }

            function compare(a, b, aL, bL) {
                var i, cmp;

                if (aL != bL) {
                    cmp = aL > bL ? 1 : -1;
                } else {

                    for (i = cmp = 0; i < aL; i++) {

                        if (a[i] != b[i]) {
                            cmp = a[i] > b[i] ? 1 : -1;
                            break;
                        }
                    }
                }
                return cmp;
            }

            function subtract(a, b, aL, base) {
                var i = 0;

                // Subtract b from a.
                for (; aL--;) {
                    a[aL] -= i;
                    i = a[aL] < b[aL] ? 1 : 0;
                    a[aL] = i * base + a[aL] - b[aL];
                }

                // Remove leading zeros.
                for (; !a[0] && a.length > 1; a.shift()) {}
            }

            // x: dividend, y: divisor.
            return function (x, y, dp, rm, base) {
                var cmp,
                    e,
                    i,
                    more,
                    n,
                    prod,
                    prodL,
                    q,
                    qc,
                    rem,
                    remL,
                    rem0,
                    xi,
                    xL,
                    yc0,
                    yL,
                    yz,
                    s = x.s == y.s ? 1 : -1,
                    xc = x.c,
                    yc = y.c;

                // Either NaN, Infinity or 0?
                if (!xc || !xc[0] || !yc || !yc[0]) {

                    return new BigNumber(

                    // Return NaN if either NaN, or both Infinity or 0.
                    !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

                    // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                    xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
                }

                q = new BigNumber(s);
                qc = q.c = [];
                e = x.e - y.e;
                s = dp + e + 1;

                if (!base) {
                    base = BASE;
                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                    s = s / LOG_BASE | 0;
                }

                // Result exponent may be one less then the current value of e.
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                for (i = 0; yc[i] == (xc[i] || 0); i++) {}
                if (yc[i] > (xc[i] || 0)) e--;

                if (s < 0) {
                    qc.push(1);
                    more = true;
                } else {
                    xL = xc.length;
                    yL = yc.length;
                    i = 0;
                    s += 2;

                    // Normalise xc and yc so highest order digit of yc is >= base / 2.

                    n = mathfloor(base / (yc[0] + 1));

                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
                    if (n > 1) {
                        yc = multiply(yc, n, base);
                        xc = multiply(xc, n, base);
                        yL = yc.length;
                        xL = xc.length;
                    }

                    xi = yL;
                    rem = xc.slice(0, yL);
                    remL = rem.length;

                    // Add zeros to make remainder as long as divisor.
                    for (; remL < yL; rem[remL++] = 0) {}
                    yz = yc.slice();
                    yz.unshift(0);
                    yc0 = yc[0];
                    if (yc[1] >= base / 2) yc0++;
                    // Not necessary, but to prevent trial digit n > base, when using base 3.
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;

                    do {
                        n = 0;

                        // Compare divisor and remainder.
                        cmp = compare(yc, rem, yL, remL);

                        // If divisor < remainder.
                        if (cmp < 0) {

                            // Calculate trial digit, n.

                            rem0 = rem[0];
                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

                            // n is how many times the divisor goes into the current remainder.
                            n = mathfloor(rem0 / yc0);

                            //  Algorithm:
                            //  1. product = divisor * trial digit (n)
                            //  2. if product > remainder: product -= divisor, n--
                            //  3. remainder -= product
                            //  4. if product was < remainder at 2:
                            //    5. compare new remainder and divisor
                            //    6. If remainder > divisor: remainder -= divisor, n++

                            if (n > 1) {

                                // n may be > base only when base is 3.
                                if (n >= base) n = base - 1;

                                // product = divisor * trial digit.
                                prod = multiply(yc, n, base);
                                prodL = prod.length;
                                remL = rem.length;

                                // Compare product and remainder.
                                // If product > remainder.
                                // Trial digit n too high.
                                // n is 1 too high about 5% of the time, and is not known to have
                                // ever been more than 1 too high.
                                while (compare(prod, rem, prodL, remL) == 1) {
                                    n--;

                                    // Subtract divisor from product.
                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);
                                    prodL = prod.length;
                                    cmp = 1;
                                }
                            } else {

                                // n is 0 or 1, cmp is -1.
                                // If n is 0, there is no need to compare yc and rem again below,
                                // so change cmp to 1 to avoid it.
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                if (n == 0) {

                                    // divisor < remainder, so n must be at least 1.
                                    cmp = n = 1;
                                }

                                // product = divisor
                                prod = yc.slice();
                                prodL = prod.length;
                            }

                            if (prodL < remL) prod.unshift(0);

                            // Subtract product from remainder.
                            subtract(rem, prod, remL, base);
                            remL = rem.length;

                            // If product was < remainder.
                            if (cmp == -1) {

                                // Compare divisor and new remainder.
                                // If divisor < new remainder, subtract divisor from remainder.
                                // Trial digit n too low.
                                // n is 1 too low about 5% of the time, and very rarely 2 too low.
                                while (compare(yc, rem, yL, remL) < 1) {
                                    n++;

                                    // Subtract divisor from remainder.
                                    subtract(rem, yL < remL ? yz : yc, remL, base);
                                    remL = rem.length;
                                }
                            }
                        } else if (cmp === 0) {
                            n++;
                            rem = [0];
                        } // else cmp === 1 and n will be 0

                        // Add the next digit, n, to the result array.
                        qc[i++] = n;

                        // Update the remainder.
                        if (rem[0]) {
                            rem[remL++] = xc[xi] || 0;
                        } else {
                            rem = [xc[xi]];
                            remL = 1;
                        }
                    } while ((xi++ < xL || rem[0] != null) && s--);

                    more = rem[0] != null;

                    // Leading zero?
                    if (!qc[0]) qc.shift();
                }

                if (base == BASE) {

                    // To calculate q.e, first get the number of digits of qc[0].
                    for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) {}
                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

                    // Caller is convertBase.
                } else {
                    q.e = e;
                    q.r = +more;
                }

                return q;
            };
        }();

        /*
         * Return a string representing the value of BigNumber n in fixed-point or exponential
         * notation rounded to the specified decimal places or significant digits.
         *
         * n is a BigNumber.
         * i is the index of the last digit required (i.e. the digit that may be rounded up).
         * rm is the rounding mode.
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
         */
        function format(n, i, rm, caller) {
            var c0, e, ne, len, str;

            rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode) ? rm | 0 : ROUNDING_MODE;

            if (!n.c) return n.toString();
            c0 = n.c[0];
            ne = n.e;

            if (i == null) {
                str = coeffToString(n.c);
                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne);
            } else {
                n = round(new BigNumber(n), i, rm);

                // n.e may have changed if the value was rounded up.
                e = n.e;

                str = coeffToString(n.c);
                len = str.length;

                // toPrecision returns exponential notation if the number of significant digits
                // specified is less than the number of digits necessary to represent the integer
                // part of the value in fixed-point notation.

                // Exponential notation.
                if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {

                    // Append zeros?
                    for (; len < i; str += '0', len++) {}
                    str = toExponential(str, e);

                    // Fixed-point notation.
                } else {
                    i -= ne;
                    str = toFixedPoint(str, e);

                    // Append zeros?
                    if (e + 1 > len) {
                        if (--i > 0) for (str += '.'; i--; str += '0') {}
                    } else {
                        i += e - len;
                        if (i > 0) {
                            if (e + 1 == len) str += '.';
                            for (; i--; str += '0') {}
                        }
                    }
                }
            }

            return n.s < 0 && c0 ? '-' + str : str;
        }

        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
            var m,
                n,
                i = 0;

            if (isArray(args[0])) args = args[0];
            m = new BigNumber(args[0]);

            for (; ++i < args.length;) {
                n = new BigNumber(args[i]);

                // If any number is NaN, return NaN.
                if (!n.s) {
                    m = n;
                    break;
                } else if (method.call(m, n)) {
                    m = n;
                }
            }

            return m;
        }

        /*
         * Return true if n is an integer in range, otherwise throw.
         * Use for argument validation when ERRORS is true.
         */
        function intValidatorWithErrors(n, min, max, caller, name) {
            if (n < min || n > max || n != truncate(n)) {
                raise(caller, (name || 'decimal places') + (n < min || n > max ? ' out of range' : ' not an integer'), n);
            }

            return true;
        }

        /*
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
         * Called by minus, plus and times.
         */
        function normalise(n, c, e) {
            var i = 1,
                j = c.length;

            // Remove trailing zeros.
            for (; !c[--j]; c.pop()) {}

            // Calculate the base 10 exponent. First get the number of digits of c[0].
            for (j = c[0]; j >= 10; j /= 10, i++) {}

            // Overflow?
            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

                // Infinity.
                n.c = n.e = null;

                // Underflow?
            } else if (e < MIN_EXP) {

                // Zero.
                n.c = [n.e = 0];
            } else {
                n.e = e;
                n.c = c;
            }

            return n;
        }

        // Handle values that fail the validity test in BigNumber.
        parseNumeric = function () {
            var basePrefix = /^(-?)0([xbo])/i,
                dotAfter = /^([^.]+)\.$/,
                dotBefore = /^\.([^.]+)$/,
                isInfinityOrNaN = /^-?(Infinity|NaN)$/,
                whitespaceOrPlus = /^\s*\+|^\s+|\s+$/g;

            return function (x, str, num, b) {
                var base,
                    s = num ? str : str.replace(whitespaceOrPlus, '');

                // No exception on ±Infinity or NaN.
                if (isInfinityOrNaN.test(s)) {
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                } else {
                    if (!num) {

                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                        s = s.replace(basePrefix, function (m, p1, p2) {
                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                            return !b || b == base ? p1 : m;
                        });

                        if (b) {
                            base = b;

                            // E.g. '1.' to '1', '.1' to '0.1'
                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                        }

                        if (str != s) return new BigNumber(s, base);
                    }

                    // 'new BigNumber() not a number: {n}'
                    // 'new BigNumber() not a base {b} number: {n}'
                    if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);
                    x.s = null;
                }

                x.c = x.e = null;
                id = 0;
            };
        }();

        // Throw a BigNumber Error.
        function raise(caller, msg, val) {
            var error = new Error(['new BigNumber', // 0
            'cmp', // 1
            'config', // 2
            'div', // 3
            'divToInt', // 4
            'eq', // 5
            'gt', // 6
            'gte', // 7
            'lt', // 8
            'lte', // 9
            'minus', // 10
            'mod', // 11
            'plus', // 12
            'precision', // 13
            'random', // 14
            'round', // 15
            'shift', // 16
            'times', // 17
            'toDigits', // 18
            'toExponential', // 19
            'toFixed', // 20
            'toFormat', // 21
            'toFraction', // 22
            'pow', // 23
            'toPrecision', // 24
            'toString', // 25
            'BigNumber' // 26
            ][caller] + '() ' + msg + ': ' + val);

            error.name = 'BigNumber Error';
            id = 0;
            throw error;
        }

        /*
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
         * If r is truthy, it is known that there are more digits after the rounding digit.
         */
        function round(x, sd, rm, r) {
            var d,
                i,
                j,
                k,
                n,
                ni,
                rd,
                xc = x.c,
                pows10 = POWS_TEN;

            // if x is not Infinity or NaN...
            if (xc) {

                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                // n is a base 1e14 number, the value of the element of array x.c containing rd.
                // ni is the index of n within x.c.
                // d is the number of digits of n.
                // i is the index of rd within n including leading zeros.
                // j is the actual index of rd within n (if < 0, rd is a leading zero).
                out: {

                    // Get the number of digits of the first element of xc.
                    for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) {}
                    i = sd - d;

                    // If the rounding digit is in the first element of xc...
                    if (i < 0) {
                        i += LOG_BASE;
                        j = sd;
                        n = xc[ni = 0];

                        // Get the rounding digit at index j of n.
                        rd = n / pows10[d - j - 1] % 10 | 0;
                    } else {
                        ni = mathceil((i + 1) / LOG_BASE);

                        if (ni >= xc.length) {

                            if (r) {

                                // Needed by sqrt.
                                for (; xc.length <= ni; xc.push(0)) {}
                                n = rd = 0;
                                d = 1;
                                i %= LOG_BASE;
                                j = i - LOG_BASE + 1;
                            } else {
                                break out;
                            }
                        } else {
                            n = k = xc[ni];

                            // Get the number of digits of n.
                            for (d = 1; k >= 10; k /= 10, d++) {}

                            // Get the index of rd within n.
                            i %= LOG_BASE;

                            // Get the index of rd within n, adjusted for leading zeros.
                            // The number of leading zeros of n is given by LOG_BASE - d.
                            j = i - LOG_BASE + d;

                            // Get the rounding digit at index j of n.
                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                        }
                    }

                    r = r || sd < 0 ||

                    // Are there any non-zero digits after the rounding digit?
                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

                    r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

                    // Check whether the digit to the left of the rounding digit is odd.
                    (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));

                    if (sd < 1 || !xc[0]) {
                        xc.length = 0;

                        if (r) {

                            // Convert sd to decimal places.
                            sd -= x.e + 1;

                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                            xc[0] = pows10[sd % LOG_BASE];
                            x.e = -sd || 0;
                        } else {

                            // Zero.
                            xc[0] = x.e = 0;
                        }

                        return x;
                    }

                    // Remove excess digits.
                    if (i == 0) {
                        xc.length = ni;
                        k = 1;
                        ni--;
                    } else {
                        xc.length = ni + 1;
                        k = pows10[LOG_BASE - i];

                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                        // j > 0 means i > number of leading zeros of n.
                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                    }

                    // Round up?
                    if (r) {

                        for (;;) {

                            // If the digit to be rounded up is in the first element of xc...
                            if (ni == 0) {

                                // i will be the length of xc[0] before k is added.
                                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) {}
                                j = xc[0] += k;
                                for (k = 1; j >= 10; j /= 10, k++) {}

                                // if i != k the length has increased.
                                if (i != k) {
                                    x.e++;
                                    if (xc[0] == BASE) xc[0] = 1;
                                }

                                break;
                            } else {
                                xc[ni] += k;
                                if (xc[ni] != BASE) break;
                                xc[ni--] = 0;
                                k = 1;
                            }
                        }
                    }

                    // Remove trailing zeros.
                    for (i = xc.length; xc[--i] === 0; xc.pop()) {}
                }

                // Overflow? Infinity.
                if (x.e > MAX_EXP) {
                    x.c = x.e = null;

                    // Underflow? Zero.
                } else if (x.e < MIN_EXP) {
                    x.c = [x.e = 0];
                }
            }

            return x;
        }

        // PROTOTYPE/INSTANCE METHODS


        /*
         * Return a new BigNumber whose value is the absolute value of this BigNumber.
         */
        P.absoluteValue = P.abs = function () {
            var x = new BigNumber(this);
            if (x.s < 0) x.s = 1;
            return x;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of Infinity.
         */
        P.ceil = function () {
            return round(new BigNumber(this), this.e + 1, 2);
        };

        /*
         * Return
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
         * 0 if they have the same value,
         * or null if the value of either is NaN.
         */
        P.comparedTo = P.cmp = function (y, b) {
            id = 1;
            return compare(this, new BigNumber(y, b));
        };

        /*
         * Return the number of decimal places of the value of this BigNumber, or null if the value
         * of this BigNumber is ±Infinity or NaN.
         */
        P.decimalPlaces = P.dp = function () {
            var n,
                v,
                c = this.c;

            if (!c) return null;
            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

            // Subtract the number of trailing zeros of the last number.
            if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) {}
            if (n < 0) n = 0;

            return n;
        };

        /*
         *  n / 0 = I
         *  n / N = N
         *  n / I = 0
         *  0 / n = 0
         *  0 / 0 = N
         *  0 / N = N
         *  0 / I = 0
         *  N / n = N
         *  N / 0 = N
         *  N / N = N
         *  N / I = N
         *  I / n = I
         *  I / 0 = I
         *  I / N = N
         *  I / I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.dividedBy = P.div = function (y, b) {
            id = 3;
            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };

        /*
         * Return a new BigNumber whose value is the integer part of dividing the value of this
         * BigNumber by the value of BigNumber(y, b).
         */
        P.dividedToIntegerBy = P.divToInt = function (y, b) {
            id = 4;
            return div(this, new BigNumber(y, b), 0, 1);
        };

        /*
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.equals = P.eq = function (y, b) {
            id = 5;
            return compare(this, new BigNumber(y, b)) === 0;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of -Infinity.
         */
        P.floor = function () {
            return round(new BigNumber(this), this.e + 1, 3);
        };

        /*
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.greaterThan = P.gt = function (y, b) {
            id = 6;
            return compare(this, new BigNumber(y, b)) > 0;
        };

        /*
         * Return true if the value of this BigNumber is greater than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */
        P.greaterThanOrEqualTo = P.gte = function (y, b) {
            id = 7;
            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;
        };

        /*
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.
         */
        P.isFinite = function () {
            return !!this.c;
        };

        /*
         * Return true if the value of this BigNumber is an integer, otherwise return false.
         */
        P.isInteger = P.isInt = function () {
            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };

        /*
         * Return true if the value of this BigNumber is NaN, otherwise returns false.
         */
        P.isNaN = function () {
            return !this.s;
        };

        /*
         * Return true if the value of this BigNumber is negative, otherwise returns false.
         */
        P.isNegative = P.isNeg = function () {
            return this.s < 0;
        };

        /*
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
         */
        P.isZero = function () {
            return !!this.c && this.c[0] == 0;
        };

        /*
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
         * otherwise returns false.
         */
        P.lessThan = P.lt = function (y, b) {
            id = 8;
            return compare(this, new BigNumber(y, b)) < 0;
        };

        /*
         * Return true if the value of this BigNumber is less than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */
        P.lessThanOrEqualTo = P.lte = function (y, b) {
            id = 9;
            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
        };

        /*
         *  n - 0 = n
         *  n - N = N
         *  n - I = -I
         *  0 - n = -n
         *  0 - 0 = 0
         *  0 - N = N
         *  0 - I = -I
         *  N - n = N
         *  N - 0 = N
         *  N - N = N
         *  N - I = N
         *  I - n = I
         *  I - 0 = I
         *  I - N = N
         *  I - I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
         * BigNumber(y, b).
         */
        P.minus = P.sub = function (y, b) {
            var i,
                j,
                t,
                xLTy,
                x = this,
                a = x.s;

            id = 10;
            y = new BigNumber(y, b);
            b = y.s;

            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);

            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.plus(y);
            }

            var xe = x.e / LOG_BASE,
                ye = y.e / LOG_BASE,
                xc = x.c,
                yc = y.c;

            if (!xe || !ye) {

                // Either Infinity?
                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

                // Either zero?
                if (!xc[0] || !yc[0]) {

                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

                    // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                    ROUNDING_MODE == 3 ? -0 : 0);
                }
            }

            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();

            // Determine which is the bigger number.
            if (a = xe - ye) {

                if (xLTy = a < 0) {
                    a = -a;
                    t = xc;
                } else {
                    ye = xe;
                    t = yc;
                }

                t.reverse();

                // Prepend zeros to equalise exponents.
                for (b = a; b--; t.push(0)) {}
                t.reverse();
            } else {

                // Exponents equal. Check digit by digit.
                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

                for (a = b = 0; b < j; b++) {

                    if (xc[b] != yc[b]) {
                        xLTy = xc[b] < yc[b];
                        break;
                    }
                }
            }

            // x < y? Point xc to the array of the bigger number.
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

            b = (j = yc.length) - (i = xc.length);

            // Append zeros to xc if shorter.
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
            if (b > 0) for (; b--; xc[i++] = 0) {}
            b = BASE - 1;

            // Subtract yc from xc.
            for (; j > a;) {

                if (xc[--j] < yc[j]) {
                    for (i = j; i && !xc[--i]; xc[i] = b) {}
                    --xc[i];
                    xc[j] += BASE;
                }

                xc[j] -= yc[j];
            }

            // Remove leading zeros and adjust exponent accordingly.
            for (; xc[0] == 0; xc.shift(), --ye) {}

            // Zero?
            if (!xc[0]) {

                // Following IEEE 754 (2008) 6.3,
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                y.s = ROUNDING_MODE == 3 ? -1 : 1;
                y.c = [y.e = 0];
                return y;
            }

            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
            // for finite x and y.
            return normalise(y, xc, ye);
        };

        /*
         *   n % 0 =  N
         *   n % N =  N
         *   n % I =  n
         *   0 % n =  0
         *  -0 % n = -0
         *   0 % 0 =  N
         *   0 % N =  N
         *   0 % I =  0
         *   N % n =  N
         *   N % 0 =  N
         *   N % N =  N
         *   N % I =  N
         *   I % n =  N
         *   I % 0 =  N
         *   I % N =  N
         *   I % I =  N
         *
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
         */
        P.modulo = P.mod = function (y, b) {
            var q,
                s,
                x = this;

            id = 11;
            y = new BigNumber(y, b);

            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
            if (!x.c || !y.s || y.c && !y.c[0]) {
                return new BigNumber(NaN);

                // Return x if y is Infinity or x is zero.
            } else if (!y.c || x.c && !x.c[0]) {
                return new BigNumber(x);
            }

            if (MODULO_MODE == 9) {

                // Euclidian division: q = sign(y) * floor(x / abs(y))
                // r = x - qy    where  0 <= r < abs(y)
                s = y.s;
                y.s = 1;
                q = div(x, y, 0, 3);
                y.s = s;
                q.s *= s;
            } else {
                q = div(x, y, 0, MODULO_MODE);
            }

            return x.minus(q.times(y));
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber negated,
         * i.e. multiplied by -1.
         */
        P.negated = P.neg = function () {
            var x = new BigNumber(this);
            x.s = -x.s || null;
            return x;
        };

        /*
         *  n + 0 = n
         *  n + N = N
         *  n + I = I
         *  0 + n = n
         *  0 + 0 = 0
         *  0 + N = N
         *  0 + I = I
         *  N + n = N
         *  N + 0 = N
         *  N + N = N
         *  N + I = N
         *  I + n = I
         *  I + 0 = I
         *  I + N = N
         *  I + I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
         * BigNumber(y, b).
         */
        P.plus = P.add = function (y, b) {
            var t,
                x = this,
                a = x.s;

            id = 12;
            y = new BigNumber(y, b);
            b = y.s;

            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);

            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.minus(y);
            }

            var xe = x.e / LOG_BASE,
                ye = y.e / LOG_BASE,
                xc = x.c,
                yc = y.c;

            if (!xe || !ye) {

                // Return ±Infinity if either ±Infinity.
                if (!xc || !yc) return new BigNumber(a / 0);

                // Either zero?
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
            }

            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();

            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
            if (a = xe - ye) {
                if (a > 0) {
                    ye = xe;
                    t = yc;
                } else {
                    a = -a;
                    t = xc;
                }

                t.reverse();
                for (; a--; t.push(0)) {}
                t.reverse();
            }

            a = xc.length;
            b = yc.length;

            // Point xc to the longer array, and b to the shorter length.
            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
            for (a = 0; b;) {
                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                xc[b] %= BASE;
            }

            if (a) {
                xc.unshift(a);
                ++ye;
            }

            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
            // ye = MAX_EXP + 1 possible
            return normalise(y, xc, ye);
        };

        /*
         * Return the number of significant digits of the value of this BigNumber.
         *
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
         */
        P.precision = P.sd = function (z) {
            var n,
                v,
                x = this,
                c = x.c;

            // 'precision() argument not a boolean or binary digit: {z}'
            if (z != null && z !== !!z && z !== 1 && z !== 0) {
                if (ERRORS) raise(13, 'argument' + notBool, z);
                if (z != !!z) z = null;
            }

            if (!c) return null;
            v = c.length - 1;
            n = v * LOG_BASE + 1;

            if (v = c[v]) {

                // Subtract the number of trailing zeros of the last element.
                for (; v % 10 == 0; v /= 10, n--) {}

                // Add the number of digits of the first element.
                for (v = c[0]; v >= 10; v /= 10, n++) {}
            }

            if (z && x.e + 1 > n) n = x.e + 1;

            return n;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
         * omitted.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'round() decimal places out of range: {dp}'
         * 'round() decimal places not an integer: {dp}'
         * 'round() rounding mode not an integer: {rm}'
         * 'round() rounding mode out of range: {rm}'
         */
        P.round = function (dp, rm) {
            var n = new BigNumber(this);

            if (dp == null || isValidInt(dp, 0, MAX, 15)) {
                round(n, ~~dp + this.e + 1, rm == null || !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);
            }

            return n;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
         *
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         *
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
         * otherwise.
         *
         * 'shift() argument not an integer: {k}'
         * 'shift() argument out of range: {k}'
         */
        P.shift = function (k) {
            var n = this;
            return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument')

            // k < 1e+21, or truncate(k) will produce exponential notation.
            ? n.times('1e' + truncate(k)) : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER) ? n.s * (k < 0 ? 0 : 1 / 0) : n);
        };

        /*
         *  sqrt(-n) =  N
         *  sqrt( N) =  N
         *  sqrt(-I) =  N
         *  sqrt( I) =  I
         *  sqrt( 0) =  0
         *  sqrt(-0) = -0
         *
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */
        P.squareRoot = P.sqrt = function () {
            var m,
                n,
                r,
                rep,
                t,
                x = this,
                c = x.c,
                s = x.s,
                e = x.e,
                dp = DECIMAL_PLACES + 4,
                half = new BigNumber('0.5');

            // Negative/NaN/Infinity/zero?
            if (s !== 1 || !c || !c[0]) {
                return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
            }

            // Initial estimate.
            s = Math.sqrt(+x);

            // Math.sqrt underflow/overflow?
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
            if (s == 0 || s == 1 / 0) {
                n = coeffToString(c);
                if ((n.length + e) % 2 == 0) n += '0';
                s = Math.sqrt(n);
                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

                if (s == 1 / 0) {
                    n = '1e' + e;
                } else {
                    n = s.toExponential();
                    n = n.slice(0, n.indexOf('e') + 1) + e;
                }

                r = new BigNumber(n);
            } else {
                r = new BigNumber(s + '');
            }

            // Check for zero.
            // r could be zero if MIN_EXP is changed after the this value was created.
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
            // coeffToString to throw.
            if (r.c[0]) {
                e = r.e;
                s = e + dp;
                if (s < 3) s = 0;

                // Newton-Raphson iteration.
                for (;;) {
                    t = r;
                    r = half.times(t.plus(div(x, t, dp, 1)));

                    if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

                        // The exponent of r may here be one less than the final result exponent,
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                        // are indexed correctly.
                        if (r.e < e) --s;
                        n = n.slice(s - 3, s + 1);

                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                        // iteration.
                        if (n == '9999' || !rep && n == '4999') {

                            // On the first iteration only, check to see if rounding up gives the
                            // exact result as the nines may infinitely repeat.
                            if (!rep) {
                                round(t, t.e + DECIMAL_PLACES + 2, 0);

                                if (t.times(t).eq(x)) {
                                    r = t;
                                    break;
                                }
                            }

                            dp += 4;
                            s += 4;
                            rep = 1;
                        } else {

                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                            // result. If not, then there are further digits and m will be truthy.
                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

                                // Truncate to the first rounding digit.
                                round(r, r.e + DECIMAL_PLACES + 2, 1);
                                m = !r.times(r).eq(x);
                            }

                            break;
                        }
                    }
                }
            }

            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };

        /*
         *  n * 0 = 0
         *  n * N = N
         *  n * I = I
         *  0 * n = 0
         *  0 * 0 = 0
         *  0 * N = N
         *  0 * I = N
         *  N * n = N
         *  N * 0 = N
         *  N * N = N
         *  N * I = N
         *  I * n = I
         *  I * 0 = N
         *  I * N = N
         *  I * I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber times the value of
         * BigNumber(y, b).
         */
        P.times = P.mul = function (y, b) {
            var c,
                e,
                i,
                j,
                k,
                m,
                xcL,
                xlo,
                xhi,
                ycL,
                ylo,
                yhi,
                zc,
                base,
                sqrtBase,
                x = this,
                xc = x.c,
                yc = (id = 17, y = new BigNumber(y, b)).c;

            // Either NaN, ±Infinity or ±0?
            if (!xc || !yc || !xc[0] || !yc[0]) {

                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
                    y.c = y.e = y.s = null;
                } else {
                    y.s *= x.s;

                    // Return ±Infinity if either is ±Infinity.
                    if (!xc || !yc) {
                        y.c = y.e = null;

                        // Return ±0 if either is ±0.
                    } else {
                        y.c = [0];
                        y.e = 0;
                    }
                }

                return y;
            }

            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
            y.s *= x.s;
            xcL = xc.length;
            ycL = yc.length;

            // Ensure xc points to longer array and xcL to its length.
            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

            // Initialise the result array with zeros.
            for (i = xcL + ycL, zc = []; i--; zc.push(0)) {}

            base = BASE;
            sqrtBase = SQRT_BASE;

            for (i = ycL; --i >= 0;) {
                c = 0;
                ylo = yc[i] % sqrtBase;
                yhi = yc[i] / sqrtBase | 0;

                for (k = xcL, j = i + k; j > i;) {
                    xlo = xc[--k] % sqrtBase;
                    xhi = xc[k] / sqrtBase | 0;
                    m = yhi * xlo + xhi * ylo;
                    xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                    zc[j--] = xlo % base;
                }

                zc[j] = c;
            }

            if (c) {
                ++e;
            } else {
                zc.shift();
            }

            return normalise(y, zc, e);
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toDigits() precision out of range: {sd}'
         * 'toDigits() precision not an integer: {sd}'
         * 'toDigits() rounding mode not an integer: {rm}'
         * 'toDigits() rounding mode out of range: {rm}'
         */
        P.toDigits = function (sd, rm) {
            var n = new BigNumber(this);
            sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;
            rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;
            return sd ? round(n, sd, rm) : n;
        };

        /*
         * Return a string representing the value of this BigNumber in exponential notation and
         * rounded using ROUNDING_MODE to dp fixed decimal places.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toExponential() decimal places not an integer: {dp}'
         * 'toExponential() decimal places out of range: {dp}'
         * 'toExponential() rounding mode not an integer: {rm}'
         * 'toExponential() rounding mode out of range: {rm}'
         */
        P.toExponential = function (dp, rm) {
            return format(this, dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);
        };

        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounding
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
         * but e.g. (-0.00001).toFixed(0) is '-0'.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFixed() decimal places not an integer: {dp}'
         * 'toFixed() decimal places out of range: {dp}'
         * 'toFixed() rounding mode not an integer: {rm}'
         * 'toFixed() rounding mode out of range: {rm}'
         */
        P.toFixed = function (dp, rm) {
            return format(this, dp != null && isValidInt(dp, 0, MAX, 20) ? ~~dp + this.e + 1 : null, rm, 20);
        };

        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounded
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
         * of the FORMAT object (see BigNumber.config).
         *
         * FORMAT = {
         *      decimalSeparator : '.',
         *      groupSeparator : ',',
         *      groupSize : 3,
         *      secondaryGroupSize : 0,
         *      fractionGroupSeparator : '\xA0',    // non-breaking space
         *      fractionGroupSize : 0
         * };
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFormat() decimal places not an integer: {dp}'
         * 'toFormat() decimal places out of range: {dp}'
         * 'toFormat() rounding mode not an integer: {rm}'
         * 'toFormat() rounding mode out of range: {rm}'
         */
        P.toFormat = function (dp, rm) {
            var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21) ? ~~dp + this.e + 1 : null, rm, 21);

            if (this.c) {
                var i,
                    arr = str.split('.'),
                    g1 = +FORMAT.groupSize,
                    g2 = +FORMAT.secondaryGroupSize,
                    groupSeparator = FORMAT.groupSeparator,
                    intPart = arr[0],
                    fractionPart = arr[1],
                    isNeg = this.s < 0,
                    intDigits = isNeg ? intPart.slice(1) : intPart,
                    len = intDigits.length;

                if (g2) i = g1, g1 = g2, g2 = i, len -= i;

                if (g1 > 0 && len > 0) {
                    i = len % g1 || g1;
                    intPart = intDigits.substr(0, i);

                    for (; i < len; i += g1) {
                        intPart += groupSeparator + intDigits.substr(i, g1);
                    }

                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                    if (isNeg) intPart = '-' + intPart;
                }

                str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;
            }

            return str;
        };

        /*
         * Return a string array representing the value of this BigNumber as a simple fraction with
         * an integer numerator and an integer denominator. The denominator will be a positive
         * non-zero value less than or equal to the specified maximum denominator. If a maximum
         * denominator is not specified, the denominator will be the lowest value necessary to
         * represent the number exactly.
         *
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
         *
         * 'toFraction() max denominator not an integer: {md}'
         * 'toFraction() max denominator out of range: {md}'
         */
        P.toFraction = function (md) {
            var arr,
                d0,
                d2,
                e,
                exp,
                n,
                n0,
                q,
                s,
                k = ERRORS,
                x = this,
                xc = x.c,
                d = new BigNumber(ONE),
                n1 = d0 = new BigNumber(ONE),
                d1 = n0 = new BigNumber(ONE);

            if (md != null) {
                ERRORS = false;
                n = new BigNumber(md);
                ERRORS = k;

                if (!(k = n.isInt()) || n.lt(ONE)) {

                    if (ERRORS) {
                        raise(22, 'max denominator ' + (k ? 'out of range' : 'not an integer'), md);
                    }

                    // ERRORS is false:
                    // If md is a finite non-integer >= 1, round it to an integer and use it.
                    md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;
                }
            }

            if (!xc) return x.toString();
            s = coeffToString(xc);

            // Determine initial denominator.
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
            e = d.e = s.length - x.e - 1;
            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
            md = !md || n.cmp(d) > 0 ? e > 0 ? d : n1 : n;

            exp = MAX_EXP;
            MAX_EXP = 1 / 0;
            n = new BigNumber(s);

            // n0 = d1 = 0
            n0.c[0] = 0;

            for (;;) {
                q = div(n, d, 0, 1);
                d2 = d0.plus(q.times(d1));
                if (d2.cmp(md) == 1) break;
                d0 = d1;
                d1 = d2;
                n1 = n0.plus(q.times(d2 = n1));
                n0 = d2;
                d = n.minus(q.times(d2 = d));
                n = d2;
            }

            d2 = div(md.minus(d0), d1, 0, 1);
            n0 = n0.plus(d2.times(n1));
            d0 = d0.plus(d2.times(d1));
            n0.s = n1.s = x.s;
            e *= 2;

            // Determine which fraction is closer to x, n0/d0 or n1/d1
            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1.toString(), d1.toString()] : [n0.toString(), d0.toString()];

            MAX_EXP = exp;
            return arr;
        };

        /*
         * Return the value of this BigNumber converted to a number primitive.
         */
        P.toNumber = function () {
            var x = this;

            // Ensure zero has correct sign.
            return +x || (x.s ? x.s * 0 : NaN);
        };

        /*
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.
         *
         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.
         * (Performs 54 loop iterations for n of 9007199254740992.)
         *
         * 'pow() exponent not an integer: {n}'
         * 'pow() exponent out of range: {n}'
         */
        P.toPower = P.pow = function (n) {
            var k,
                y,
                i = mathfloor(n < 0 ? -n : +n),
                x = this;

            // Pass ±Infinity to Math.pow if exponent is out of range.
            if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') && (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) || parseFloat(n) != n && !(n = NaN))) {
                return new BigNumber(Math.pow(+x, n));
            }

            // Truncating each coefficient array to a length of k after each multiplication equates
            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a
            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)
            k = POW_PRECISION ? mathceil(POW_PRECISION / LOG_BASE + 2) : 0;
            y = new BigNumber(ONE);

            for (;;) {

                if (i % 2) {
                    y = y.times(x);
                    if (!y.c) break;
                    if (k && y.c.length > k) y.c.length = k;
                }

                i = mathfloor(i / 2);
                if (!i) break;

                x = x.times(x);
                if (k && x.c && x.c.length > k) x.c.length = k;
            }

            if (n < 0) y = ONE.div(y);
            return k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;
        };

        /*
         * Return a string representing the value of this BigNumber rounded to sd significant digits
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
         * necessary to represent the integer part of the value in fixed-point notation, then use
         * exponential notation.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toPrecision() precision not an integer: {sd}'
         * 'toPrecision() precision out of range: {sd}'
         * 'toPrecision() rounding mode not an integer: {rm}'
         * 'toPrecision() rounding mode out of range: {rm}'
         */
        P.toPrecision = function (sd, rm) {
            return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision') ? sd | 0 : null, rm, 24);
        };

        /*
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
         * TO_EXP_NEG, return exponential notation.
         *
         * [b] {number} Integer, 2 to 64 inclusive.
         *
         * 'toString() base not an integer: {b}'
         * 'toString() base out of range: {b}'
         */
        P.toString = function (b) {
            var str,
                n = this,
                s = n.s,
                e = n.e;

            // Infinity or NaN?
            if (e === null) {

                if (s) {
                    str = 'Infinity';
                    if (s < 0) str = '-' + str;
                } else {
                    str = 'NaN';
                }
            } else {
                str = coeffToString(n.c);

                if (b == null || !isValidInt(b, 2, 64, 25, 'base')) {
                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);
                } else {
                    str = convertBase(toFixedPoint(str, e), b | 0, 10, s);
                }

                if (s < 0 && n.c[0]) str = '-' + str;
            }

            return str;
        };

        /*
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
         * number.
         */
        P.truncated = P.trunc = function () {
            return round(new BigNumber(this), this.e + 1, 1);
        };

        /*
         * Return as toString, but do not accept a base argument.
         */
        P.valueOf = P.toJSON = function () {
            return this.toString();
        };

        // Aliases for BigDecimal methods.
        //P.add = P.plus;         // P.add included above
        //P.subtract = P.minus;   // P.sub included above
        //P.multiply = P.times;   // P.mul included above
        //P.divide = P.div;
        //P.remainder = P.mod;
        //P.compareTo = P.cmp;
        //P.negate = P.neg;


        if (configObj != null) BigNumber.config(configObj);

        return BigNumber;
    }

    // PRIVATE HELPER FUNCTIONS


    function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
    }

    // Return a coefficient array as a string of base 10 digits.
    function coeffToString(a) {
        var s,
            z,
            i = 1,
            j = a.length,
            r = a[0] + '';

        for (; i < j;) {
            s = a[i++] + '';
            z = LOG_BASE - s.length;
            for (; z--; s = '0' + s) {}
            r += s;
        }

        // Determine trailing zeros.
        for (j = r.length; r.charCodeAt(--j) === 48;) {}
        return r.slice(0, j + 1 || 1);
    }

    // Compare the value of BigNumbers x and y.
    function compare(x, y) {
        var a,
            b,
            xc = x.c,
            yc = y.c,
            i = x.s,
            j = y.s,
            k = x.e,
            l = y.e;

        // Either NaN?
        if (!i || !j) return null;

        a = xc && !xc[0];
        b = yc && !yc[0];

        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;

        // Signs differ?
        if (i != j) return i;

        a = i < 0;
        b = k == l;

        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;

        j = (k = xc.length) < (l = yc.length) ? k : l;

        // Compare digit by digit.
        for (i = 0; i < j; i++) {
            if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        } // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
    }

    /*
     * Return true if n is a valid number in range, otherwise false.
     * Use for argument validation when ERRORS is false.
     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
     */
    function intValidatorNoErrors(n, min, max) {
        return (n = truncate(n)) >= min && n <= max;
    }

    function isArray(obj) {
        return Object.prototype.toString.call(obj) == '[object Array]';
    }

    /*
     * Convert string of baseIn to an array of numbers of baseOut.
     * Eg. convertBase('255', 10, 16) returns [15, 15].
     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
     */
    function toBaseOut(str, baseIn, baseOut) {
        var j,
            arr = [0],
            arrL,
            i = 0,
            len = str.length;

        for (; i < len;) {
            for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) {}
            arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));

            for (; j < arr.length; j++) {

                if (arr[j] > baseOut - 1) {
                    if (arr[j + 1] == null) arr[j + 1] = 0;
                    arr[j + 1] += arr[j] / baseOut | 0;
                    arr[j] %= baseOut;
                }
            }
        }

        return arr.reverse();
    }

    function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
    }

    function toFixedPoint(str, e) {
        var len, z;

        // Negative exponent?
        if (e < 0) {

            // Prepend zeros.
            for (z = '0.'; ++e; z += '0') {}
            str = z + str;

            // Positive exponent
        } else {
            len = str.length;

            // Append zeros.
            if (++e > len) {
                for (z = '0', e -= len; --e; z += '0') {}
                str += z;
            } else if (e < len) {
                str = str.slice(0, e) + '.' + str.slice(e);
            }
        }

        return str;
    }

    function truncate(n) {
        n = parseFloat(n);
        return n < 0 ? mathceil(n) : mathfloor(n);
    }

    // EXPORT


    BigNumber = another();

    // AMD.
    if (typeof define == 'function' && define.amd) {
        define(function () {
            return BigNumber;
        });

        // Node and other environments that support module.exports.
    } else if (typeof module != 'undefined' && module.exports) {
        module.exports = BigNumber;
        if (!crypto) try {
            crypto = require('crypto');
        } catch (e) {}

        // Browser.
    } else {
        global.BigNumber = BigNumber;
    }
})(undefined);

},{"crypto":61}],246:[function(require,module,exports){
"use strict";

module.exports = XMLHttpRequest;

},{}],247:[function(require,module,exports){
module.exports={
  "contract_name": "agent",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "promethExecute",
      "outputs": [],
      "payable": false,
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "promethCost",
      "outputs": [
        {
          "name": "",
          "type": "uint128"
        },
        {
          "name": "",
          "type": "uint128"
        }
      ],
      "payable": false,
      "type": "function"
    }
  ],
  "unlinked_binary": "0x6060604052341561000f57600080fd5b5b60cc8061001e6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416634686030f81146046578063b478886d146058575b600080fd5b3415605057600080fd5b60566095565b005b3415606257600080fd5b60686098565b6040516fffffffffffffffffffffffffffffffff9283168152911660208201526040908101905180910390f35b5b565b6000805b90915600a165627a7a72305820b4cc174e9e7c1b480f9f601fe36de131d3a4f0f06cef897fe71567bb905f63bc0029",
  "networks": {},
  "schema_version": "0.0.5",
  "updated_at": 1508052124737
}
},{}],248:[function(require,module,exports){
module.exports={
  "contract_name": "prometh",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "promethAgent",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "expectedGas",
          "type": "uint128"
        },
        {
          "name": "expectedPayout",
          "type": "uint128"
        }
      ],
      "name": "execute",
      "outputs": [],
      "payable": false,
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "loadFunds",
      "outputs": [],
      "payable": true,
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "lookup",
      "outputs": [
        {
          "name": "",
          "type": "uint128"
        },
        {
          "name": "",
          "type": "uint128"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "payable": true,
      "type": "constructor"
    },
    {
      "payable": true,
      "type": "fallback"
    }
  ],
  "unlinked_binary": "0x6060604052604051602080610365833981016040528080519150505b60008054600160a060020a031916600160a060020a0383161790555b505b61031d806100486000396000f300606060405236156100465763ffffffff60e060020a60003504166354370bcb811461004a5780639ac1705714610079578063b2f3d299146100a0578063f5e3542b146100aa575b5b5b005b341561005557600080fd5b61005d6100e1565b604051600160a060020a03909116815260200160405180910390f35b341561008457600080fd5b6100466001608060020a03600435811690602435166100f0565b005b610046610269565b005b34156100b557600080fd5b6100bd61026c565b6040516001608060020a039283168152911660208201526040908101905180910390f35b600054600160a060020a031681565b600080548190600160a060020a031663b478886d6107d06040518263ffffffff1660e060020a0281526004016040805180830381600088803b151561013457600080fd5b87f1151561014157600080fd5b50505050604051805190602001805190509150915030600160a060020a031631836001608060020a031611806101885750826001608060020a0316816001608060020a0316105b806101a857508161ea60016001608060020a0316846001608060020a0316105b806101bf5750816161a8016001608060020a03165a105b156101c957610263565b600160a060020a0333166001608060020a03821680156108fc0290604051600060405180830381858888f19350505050151561020457600080fd5b600054600160a060020a0316634686030f6001608060020a036103e88501166040518263ffffffff1660e060020a028152600401600060405180830381600088803b151561025157600080fd5b87f1151561025e57600080fd5b505050505b50505050565b5b565b60008054819081908190600160a060020a031663b478886d82604051604001526040518163ffffffff1660e060020a0281526004016040805180830381600087803b15156102b957600080fd5b6102c65a03f115156102ca57600080fd5b505050604051805190602001805161ea609092019550909350849250839150505b505090915600a165627a7a723058202b8fd6d4b948b8bd923022d5885dd648e40a3de775f920208f1b933c534999b90029",
  "networks": {
    "1507991139983": {
      "events": {},
      "links": {},
      "address": "0x35840c009c7dab544fc30ef19bf97f56ed36e360",
      "updated_at": 1507991357813
    },
    "1507992195594": {
      "events": {},
      "links": {},
      "address": "0x0312cf7e0561adf941165fcc1b7159c6580f03d4",
      "updated_at": 1507992206780
    },
    "1507993218398": {
      "events": {},
      "links": {},
      "address": "0xef0d64b2c5bbc83230982102b70c96b1505ca0b9",
      "updated_at": 1507993221840
    }
  },
  "schema_version": "0.0.5",
  "updated_at": 1508052124741
}
},{}],249:[function(require,module,exports){
module.exports={
  "contract_name": "prometheus",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "sayHi",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "promethCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "promeths",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_contractAddress",
          "type": "address"
        }
      ],
      "name": "createPrometh",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "type": "function"
    }
  ],
  "unlinked_binary": "0x6060604052341561000f57600080fd5b5b6106738061001f6000396000f300606060405263ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630c49c36c811461005e578063a12301f5146100e9578063add06d4c1461010e578063efce068814610140575b600080fd5b341561006957600080fd5b61007161017b565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100ae5780820151818401525b602001610095565b50505050905090810190601f1680156100db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156100f457600080fd5b6100fc6101bd565b60405190815260200160405180910390f35b341561011957600080fd5b6101246004356101c4565b604051600160a060020a03909116815260200160405180910390f35b341561014b57600080fd5b610124600160a060020a03600435166101f6565b604051600160a060020a03909116815260200160405180910390f35b610183610275565b60408051908101604052600c81527f48656c6c6f20776f726c64210000000000000000000000000000000000000000602082015290505b90565b6000545b90565b60008054829081106101d257fe5b906000526020600020900160005b915054906101000a9004600160a060020a031681565b60008082610202610287565b600160a060020a039091168152602001604051809103906000f080151561022857600080fd5b90506000805480600101828161023e9190610297565b916000526020600020900160005b8154600160a060020a038086166101009390930a92830292021916179055509050805b50919050565b60206040519081016040526000815290565b604051610365806102e383390190565b8154818355818115116102bb576000838152602090206102bb9181019083016102c1565b5b505050565b6101ba91905b808211156102db57600081556001016102c7565b5090565b9056006060604052604051602080610365833981016040528080519150505b60008054600160a060020a031916600160a060020a0383161790555b505b61031d806100486000396000f300606060405236156100465763ffffffff60e060020a60003504166354370bcb811461004a5780639ac1705714610079578063b2f3d299146100a0578063f5e3542b146100aa575b5b5b005b341561005557600080fd5b61005d6100e1565b604051600160a060020a03909116815260200160405180910390f35b341561008457600080fd5b6100466001608060020a03600435811690602435166100f0565b005b610046610269565b005b34156100b557600080fd5b6100bd61026c565b6040516001608060020a039283168152911660208201526040908101905180910390f35b600054600160a060020a031681565b600080548190600160a060020a031663b478886d6107d06040518263ffffffff1660e060020a0281526004016040805180830381600088803b151561013457600080fd5b87f1151561014157600080fd5b50505050604051805190602001805190509150915030600160a060020a031631836001608060020a031611806101885750826001608060020a0316816001608060020a0316105b806101a857508161ea60016001608060020a0316846001608060020a0316105b806101bf5750816161a8016001608060020a03165a105b156101c957610263565b600160a060020a0333166001608060020a03821680156108fc0290604051600060405180830381858888f19350505050151561020457600080fd5b600054600160a060020a0316634686030f6001608060020a036103e88501166040518263ffffffff1660e060020a028152600401600060405180830381600088803b151561025157600080fd5b87f1151561025e57600080fd5b505050505b50505050565b5b565b60008054819081908190600160a060020a031663b478886d82604051604001526040518163ffffffff1660e060020a0281526004016040805180830381600087803b15156102b957600080fd5b6102c65a03f115156102ca57600080fd5b505050604051805190602001805161ea609092019550909350849250839150505b505090915600a165627a7a7230582012db88230ed07bdec6aa5c7c7f4319631b3c9b562ca6715972e4361e1d8ebb170029a165627a7a72305820bb8fdbd94abc47fc55e1d834c6a7b7c519c73f7b271905d2dbb1d5a2a2c8ae2d0029",
  "networks": {
    "1507993600378": {
      "events": {},
      "links": {},
      "address": "0xa1b75a288a4745f39dd40e3e8253443de0f755bb",
      "updated_at": 1507993907399
    },
    "1507993916471": {
      "events": {},
      "links": {},
      "address": "0x4e61aad32d3ef5597d2fd6ba92da26a5edbaef57",
      "updated_at": 1507993921197
    },
    "1507995288607": {
      "events": {},
      "links": {},
      "address": "0x61d86ebd905595d0839f6d75813dc433247facee",
      "updated_at": 1507995292321
    },
    "1507995768666": {
      "events": {},
      "links": {},
      "address": "0x72fb188e007cd3c82788cfc865b411ff2ab76184",
      "updated_at": 1507995774108
    },
    "1507997279694": {
      "events": {},
      "links": {},
      "address": "0x6168531b1d9364d9d3a723061d34d257a74e6839",
      "updated_at": 1507997290193
    },
    "1507998783746": {
      "events": {},
      "links": {},
      "address": "0x039ad7bc8ae2fb1860b354aa2e4b0ddbb79f1bec",
      "updated_at": 1507998860406
    },
    "1508002938156": {
      "events": {},
      "links": {},
      "address": "0xa86dd085773e8ff184bc6b4a23bd36987c24380e",
      "updated_at": 1508002947347
    },
    "1508004914404": {
      "events": {},
      "links": {},
      "address": "0x34cbe2df7cacf7d680851dd0d6b18d77dbc35292",
      "updated_at": 1508004917810
    },
    "1508005422028": {
      "events": {},
      "links": {},
      "address": "0xc7769278c58c9d563d401f3266960cd8da2e8a41",
      "updated_at": 1508005431121
    },
    "1508007881389": {
      "events": {},
      "links": {},
      "address": "0x6204a5528cea346608c133a48f986a49382b062a",
      "updated_at": 1508007997205
    },
    "1508009291705": {
      "events": {},
      "links": {},
      "address": "0x4f2f94bc4898d1a90763e9a9d1d94db553738155",
      "updated_at": 1508009343888
    },
    "1508009765441": {
      "events": {},
      "links": {},
      "address": "0xeeaba8707a96280a05df8c53e98da7ff3847009e",
      "updated_at": 1508009779507
    },
    "1508011354119": {
      "events": {},
      "links": {},
      "address": "0x85d615244df57d1cbe502264e4c67819a27ce9e4",
      "updated_at": 1508011367397
    },
    "1508012988584": {
      "events": {},
      "links": {},
      "address": "0xc3672938a2feb4e51ac93ee904d083f71a10df01",
      "updated_at": 1508013106367
    },
    "1508014165878": {
      "events": {},
      "links": {},
      "address": "0x9cefdc93116fa869f65c534589542000f9cc735b",
      "updated_at": 1508014185063
    },
    "1508015782528": {
      "events": {},
      "links": {},
      "address": "0xf6be13505324cfe9f8def285f7ee4704a7fd0a86",
      "updated_at": 1508015797211
    },
    "1508016208628": {
      "events": {},
      "links": {},
      "address": "0x09c2f26ae9979fa85db715d5eb3ec31f7ba257c1",
      "updated_at": 1508016221220
    },
    "1508036041860": {
      "events": {},
      "links": {},
      "address": "0x335e4f70305341fd60bc8ffab9531438f4259fb7",
      "updated_at": 1508036051366
    },
    "1508037066092": {
      "events": {},
      "links": {},
      "address": "0x5ca733033296ebf99873e6c549d8804ceea900b3",
      "updated_at": 1508037082674
    },
    "1508037839418": {
      "events": {},
      "links": {},
      "address": "0x90c781b9baaefc8755d7e25ee6bc7a728386d10e",
      "updated_at": 1508037843487
    },
    "1508041770331": {
      "events": {},
      "links": {},
      "address": "0xa79851cbe87030da2bf9fec129f42030b950729f",
      "updated_at": 1508041799577
    },
    "1508042503202": {
      "events": {},
      "links": {},
      "address": "0x36ee69667619b1ce8d9b807db41c09b92a40395a",
      "updated_at": 1508042527150
    },
    "1508044353405": {
      "events": {},
      "links": {},
      "address": "0x7b5f242c2a59560c589e065d24729be5ce680f22",
      "updated_at": 1508044370103
    }
  },
  "schema_version": "0.0.5",
  "updated_at": 1508044370103
}
},{}]},{},[])("/Users/willclark/Documents/repos/prometh-website/client/main/main.jsx")
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjbGllbnQvbWFpbi9hYm91dHBhZ2UvYWJvdXRwYWdlLmpzeCIsImNsaWVudC9tYWluL2FnZW50cGFnZS9hZ2VudHBhZ2UuanN4IiwiY2xpZW50L21haW4vZm91cm9oZm91ci9mb3Vyb2hmb3VyLmpzeCIsImNsaWVudC9tYWluL21haW4uanN4IiwiY2xpZW50L21haW4vcmF2ZW5wYWdlL3JhdmVucGFnZS5qc3giLCJjbGllbnQvc2hhcmVkL3RvcGJhci90b3BiYXIuanN4Iiwibm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEuanMiLCJub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9hcGkuanMiLCJub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL2J1ZmZlci5qcyIsIm5vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2Jhc2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL25vZGUuanMiLCJub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9iYXNlL3JlcG9ydGVyLmpzIiwibm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvY29uc3RhbnRzL2Rlci5qcyIsIm5vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2NvbnN0YW50cy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL2Rlci5qcyIsIm5vZGVfbW9kdWxlcy9hc24xLmpzL2xpYi9hc24xL2RlY29kZXJzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZGVjb2RlcnMvcGVtLmpzIiwibm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvZGVyLmpzIiwibm9kZV9tb2R1bGVzL2FzbjEuanMvbGliL2FzbjEvZW5jb2RlcnMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYXNuMS5qcy9saWIvYXNuMS9lbmNvZGVycy9wZW0uanMiLCJub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcyIsIm5vZGVfbW9kdWxlcy9icm9yYW5kL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXItcmVzb2x2ZS9lbXB0eS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9hZXMuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvYXV0aENpcGhlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL2RlY3J5cHRlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9lbmNyeXB0ZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvZ2hhc2guanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvaW5jcjMyLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2NiYy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvY2ZiMS5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9jZmI4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL2N0ci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9tb2Rlcy9lY2IuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1hZXMvbW9kZXMvbGlzdC5qc29uIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktYWVzL21vZGVzL29mYi5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWFlcy9zdHJlYW1DaXBoZXIuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1jaXBoZXIvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWRlcy9tb2Rlcy5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXJzYS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5LXNpZ24vYWxnb3MuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIvYWxnb3JpdGhtcy5qc29uIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9icm93c2VyL2N1cnZlcy5qc29uIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9icm93c2VyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktc2lnbi9icm93c2VyL3NpZ24uanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS1zaWduL2Jyb3dzZXIvdmVyaWZ5LmpzIiwibm9kZV9tb2R1bGVzL2J1ZmZlci14b3IvaW5kZXguanMiLCJub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NpcGhlci1iYXNlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtdXRpbC1pcy9saWIvdXRpbC5qcyIsIm5vZGVfbW9kdWxlcy9jcmVhdGUtZWNkaC9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvY3JlYXRlLWhhc2gvbWFrZS1oYXNoLmpzIiwibm9kZV9tb2R1bGVzL2NyZWF0ZS1oYXNoL21kNS5qcyIsIm5vZGVfbW9kdWxlcy9jcmVhdGUtaG1hYy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL2NyZWF0ZS1obWFjL2xlZ2FjeS5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdG8tYnJvd3NlcmlmeS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdG8tanMvYWVzLmpzIiwibm9kZV9tb2R1bGVzL2NyeXB0by1qcy9jaXBoZXItY29yZS5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdG8tanMvY29yZS5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdG8tanMvZW5jLWJhc2U2NC5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdG8tanMvZW5jLXV0ZjE2LmpzIiwibm9kZV9tb2R1bGVzL2NyeXB0by1qcy9ldnBrZGYuanMiLCJub2RlX21vZHVsZXMvY3J5cHRvLWpzL2Zvcm1hdC1oZXguanMiLCJub2RlX21vZHVsZXMvY3J5cHRvLWpzL2htYWMuanMiLCJub2RlX21vZHVsZXMvY3J5cHRvLWpzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NyeXB0by1qcy9saWItdHlwZWRhcnJheXMuanMiLCJub2RlX21vZHVsZXMvY3J5cHRvLWpzL21kNS5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdG8tanMvbW9kZS1jZmIuanMiLCJub2RlX21vZHVsZXMvY3J5cHRvLWpzL21vZGUtY3RyLWdsYWRtYW4uanMiLCJub2RlX21vZHVsZXMvY3J5cHRvLWpzL21vZGUtY3RyLmpzIiwibm9kZV9tb2R1bGVzL2NyeXB0by1qcy9tb2RlLWVjYi5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdG8tanMvbW9kZS1vZmIuanMiLCJub2RlX21vZHVsZXMvY3J5cHRvLWpzL3BhZC1hbnNpeDkyMy5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdG8tanMvcGFkLWlzbzEwMTI2LmpzIiwibm9kZV9tb2R1bGVzL2NyeXB0by1qcy9wYWQtaXNvOTc5NzEuanMiLCJub2RlX21vZHVsZXMvY3J5cHRvLWpzL3BhZC1ub3BhZGRpbmcuanMiLCJub2RlX21vZHVsZXMvY3J5cHRvLWpzL3BhZC16ZXJvcGFkZGluZy5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdG8tanMvcGJrZGYyLmpzIiwibm9kZV9tb2R1bGVzL2NyeXB0by1qcy9yYWJiaXQtbGVnYWN5LmpzIiwibm9kZV9tb2R1bGVzL2NyeXB0by1qcy9yYWJiaXQuanMiLCJub2RlX21vZHVsZXMvY3J5cHRvLWpzL3JjNC5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdG8tanMvcmlwZW1kMTYwLmpzIiwibm9kZV9tb2R1bGVzL2NyeXB0by1qcy9zaGExLmpzIiwibm9kZV9tb2R1bGVzL2NyeXB0by1qcy9zaGEyMjQuanMiLCJub2RlX21vZHVsZXMvY3J5cHRvLWpzL3NoYTI1Ni5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdG8tanMvc2hhMy5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdG8tanMvc2hhMzg0LmpzIiwibm9kZV9tb2R1bGVzL2NyeXB0by1qcy9zaGE1MTIuanMiLCJub2RlX21vZHVsZXMvY3J5cHRvLWpzL3RyaXBsZWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jcnlwdG8tanMveDY0LWNvcmUuanMiLCJub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMuanMiLCJub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvY2JjLmpzIiwibm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL2NpcGhlci5qcyIsIm5vZGVfbW9kdWxlcy9kZXMuanMvbGliL2Rlcy9kZXMuanMiLCJub2RlX21vZHVsZXMvZGVzLmpzL2xpYi9kZXMvZWRlLmpzIiwibm9kZV9tb2R1bGVzL2Rlcy5qcy9saWIvZGVzL3V0aWxzLmpzIiwibm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvZGlmZmllLWhlbGxtYW4vbGliL2RoLmpzIiwibm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2xpYi9nZW5lcmF0ZVByaW1lLmpzIiwibm9kZV9tb2R1bGVzL2RpZmZpZS1oZWxsbWFuL2xpYi9wcmltZXMuanNvbiIsIm5vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMuanMiLCJub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2Jhc2UuanMiLCJub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2Vkd2FyZHMuanMiLCJub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2N1cnZlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9tb250LmpzIiwibm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9jdXJ2ZS9zaG9ydC5qcyIsIm5vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvY3VydmVzLmpzIiwibm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvZWMva2V5LmpzIiwibm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lYy9zaWduYXR1cmUuanMiLCJub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy9lZGRzYS9rZXkuanMiLCJub2RlX21vZHVsZXMvZWxsaXB0aWMvbGliL2VsbGlwdGljL2VkZHNhL3NpZ25hdHVyZS5qcyIsIm5vZGVfbW9kdWxlcy9lbGxpcHRpYy9saWIvZWxsaXB0aWMvcHJlY29tcHV0ZWQvc2VjcDI1NmsxLmpzIiwibm9kZV9tb2R1bGVzL2VsbGlwdGljL2xpYi9lbGxpcHRpYy91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9lbGxpcHRpYy9wYWNrYWdlLmpzb24iLCJub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIm5vZGVfbW9kdWxlcy9ldnBfYnl0ZXN0b2tleS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9oYXNoLWJhc2UvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC5qcyIsIm5vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2NvbW1vbi5qcyIsIm5vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL2htYWMuanMiLCJub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9yaXBlbWQuanMiLCJub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEuanMiLCJub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMS5qcyIsIm5vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS8yMjQuanMiLCJub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvMjU2LmpzIiwibm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvc2hhLzM4NC5qcyIsIm5vZGVfbW9kdWxlcy9oYXNoLmpzL2xpYi9oYXNoL3NoYS81MTIuanMiLCJub2RlX21vZHVsZXMvaGFzaC5qcy9saWIvaGFzaC9zaGEvY29tbW9uLmpzIiwibm9kZV9tb2R1bGVzL2hhc2guanMvbGliL2hhc2gvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvaG1hYy1kcmJnL2xpYi9obWFjLWRyYmcuanMiLCJub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pbmRleG9mL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJub2RlX21vZHVsZXMvbWQ1LmpzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL21kNS5qcy9ub2RlX21vZHVsZXMvaGFzaC1iYXNlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL21pbGxlci1yYWJpbi9saWIvbXIuanMiLCJub2RlX21vZHVsZXMvbWluaW1hbGlzdGljLWFzc2VydC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9taW5pbWFsaXN0aWMtY3J5cHRvLXV0aWxzL2xpYi91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9wYXJzZS1hc24xL2Flc2lkLmpzb24iLCJub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9hc24xLmpzIiwibm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvY2VydGlmaWNhdGUuanMiLCJub2RlX21vZHVsZXMvcGFyc2UtYXNuMS9maXhQcm9jLmpzIiwibm9kZV9tb2R1bGVzL3BhcnNlLWFzbjEvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcGJrZGYyL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9hc3luYy5qcyIsIm5vZGVfbW9kdWxlcy9wYmtkZjIvbGliL2RlZmF1bHQtZW5jb2RpbmcuanMiLCJub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9wcmVjb25kaXRpb24uanMiLCJub2RlX21vZHVsZXMvcGJrZGYyL2xpYi9zeW5jLWJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy1uZXh0aWNrLWFyZ3MvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvbWdmLmpzIiwibm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3ByaXZhdGVEZWNyeXB0LmpzIiwibm9kZV9tb2R1bGVzL3B1YmxpYy1lbmNyeXB0L3B1YmxpY0VuY3J5cHQuanMiLCJub2RlX21vZHVsZXMvcHVibGljLWVuY3J5cHQvd2l0aFB1YmxpYy5qcyIsIm5vZGVfbW9kdWxlcy9wdWJsaWMtZW5jcnlwdC94b3IuanMiLCJub2RlX21vZHVsZXMvcmFuZG9tYnl0ZXMvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vZHVwbGV4LWJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95LmpzIiwibm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0tYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLWJyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcyIsIm5vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUtYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9yaXBlbWQxNjAvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvc2hhLmpzL2hhc2guanMiLCJub2RlX21vZHVsZXMvc2hhLmpzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEuanMiLCJub2RlX21vZHVsZXMvc2hhLmpzL3NoYTEuanMiLCJub2RlX21vZHVsZXMvc2hhLmpzL3NoYTIyNC5qcyIsIm5vZGVfbW9kdWxlcy9zaGEuanMvc2hhMjU2LmpzIiwibm9kZV9tb2R1bGVzL3NoYS5qcy9zaGEzODQuanMiLCJub2RlX21vZHVsZXMvc2hhLmpzL3NoYTUxMi5qcyIsIm5vZGVfbW9kdWxlcy9zdHJlYW0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJub2RlX21vZHVsZXMvdXRmOC91dGY4LmpzIiwibm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdm0tYnJvd3NlcmlmeS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy93ZWIzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL2NvbnRyYWN0cy9HbG9iYWxSZWdpc3RyYXIuanNvbiIsIm5vZGVfbW9kdWxlcy93ZWIzL2xpYi9jb250cmFjdHMvSUNBUFJlZ2lzdHJhci5qc29uIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL2NvbnRyYWN0cy9TbWFydEV4Y2hhbmdlLmpzb24iLCJub2RlX21vZHVsZXMvd2ViMy9saWIvc29saWRpdHkvYWRkcmVzcy5qcyIsIm5vZGVfbW9kdWxlcy93ZWIzL2xpYi9zb2xpZGl0eS9ib29sLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3NvbGlkaXR5L2J5dGVzLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3NvbGlkaXR5L2NvZGVyLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3NvbGlkaXR5L2R5bmFtaWNieXRlcy5qcyIsIm5vZGVfbW9kdWxlcy93ZWIzL2xpYi9zb2xpZGl0eS9mb3JtYXR0ZXJzLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3NvbGlkaXR5L2ludC5qcyIsIm5vZGVfbW9kdWxlcy93ZWIzL2xpYi9zb2xpZGl0eS9wYXJhbS5qcyIsIm5vZGVfbW9kdWxlcy93ZWIzL2xpYi9zb2xpZGl0eS9yZWFsLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3NvbGlkaXR5L3N0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy93ZWIzL2xpYi9zb2xpZGl0eS90eXBlLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3NvbGlkaXR5L3VpbnQuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvc29saWRpdHkvdXJlYWwuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvdXRpbHMvYnJvd3Nlci14aHIuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvdXRpbHMvY29uZmlnLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3V0aWxzL3NoYTMuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvdXRpbHMvdXRpbHMuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvdmVyc2lvbi5qc29uIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3dlYjMuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvd2ViMy9hbGxldmVudHMuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvd2ViMy9iYXRjaC5qcyIsIm5vZGVfbW9kdWxlcy93ZWIzL2xpYi93ZWIzL2NvbnRyYWN0LmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3dlYjMvZXJyb3JzLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3dlYjMvZXZlbnQuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvd2ViMy9leHRlbmQuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvd2ViMy9maWx0ZXIuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvd2ViMy9mb3JtYXR0ZXJzLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3dlYjMvZnVuY3Rpb24uanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvd2ViMy9odHRwcHJvdmlkZXIuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvd2ViMy9pYmFuLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3dlYjMvaXBjcHJvdmlkZXIuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvd2ViMy9qc29ucnBjLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3dlYjMvbWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3dlYjMvbWV0aG9kcy9kYi5qcyIsIm5vZGVfbW9kdWxlcy93ZWIzL2xpYi93ZWIzL21ldGhvZHMvZXRoLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3dlYjMvbWV0aG9kcy9uZXQuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvd2ViMy9tZXRob2RzL3BlcnNvbmFsLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3dlYjMvbWV0aG9kcy9zaGguanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvd2ViMy9tZXRob2RzL3N3YXJtLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3dlYjMvbWV0aG9kcy93YXRjaGVzLmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3dlYjMvbmFtZXJlZy5qcyIsIm5vZGVfbW9kdWxlcy93ZWIzL2xpYi93ZWIzL3Byb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL3dlYjMvbGliL3dlYjMvcmVxdWVzdG1hbmFnZXIuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvd2ViMy9zZXR0aW5ncy5qcyIsIm5vZGVfbW9kdWxlcy93ZWIzL2xpYi93ZWIzL3N5bmNpbmcuanMiLCJub2RlX21vZHVsZXMvd2ViMy9saWIvd2ViMy90cmFuc2Zlci5qcyIsIm5vZGVfbW9kdWxlcy93ZWIzL25vZGVfbW9kdWxlcy9iaWdudW1iZXIuanMvYmlnbnVtYmVyLmpzIiwibm9kZV9tb2R1bGVzL3hocjIvbGliL2Jyb3dzZXIuanMiLCJ3ZWIzL2FnZW50Lmpzb24iLCJ3ZWIzL3Byb21ldGguanNvbiIsIndlYjMvcHJvbWV0aGV1cy5qc29uIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQSxJQUFNLElBQWMsUUFBUSxRQUFSLENBQXBCO0FBQ0EsSUFBTSxjQUFjLFFBQVEsb0JBQVIsQ0FBcEI7QUFDQSxJQUFNLFFBQWMsUUFBUSxPQUFSLENBQXBCOztBQUVBLElBQU0sYUFBYSxDQUNmLHdCQURlLEVBRWYseUJBRmUsRUFHZiw0QkFIZSxFQUlmLG9CQUplLENBQW5COztBQU9BLElBQU0sV0FBVyxFQUFqQjs7QUFHQSxJQUFNLFlBQVksWUFBWTtBQUMxQixxQkFBaUIsMkJBQVc7QUFDeEIsZUFBTyxFQUFQO0FBR0gsS0FMeUI7O0FBTzFCLHFCQUFpQiwyQkFBVztBQUN4QixlQUFPO0FBQ0gsMkJBQWUsS0FEWjtBQUVILDJCQUFlLHVCQUZaO0FBR0gsZ0NBQW9CLENBSGpCO0FBSUgsMkJBQWU7QUFKWixTQUFQO0FBTUgsS0Fk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UUFBSSxNQUFNLEtBQUssTUFBZjtBQUNBLFFBQUksTUFBTSxPQUFPLEVBQWpCO0FBQ0EsUUFBSSxLQUFLLEVBQUUsQ0FBRixJQUFPLENBQWhCO0FBQ0EsUUFBSSxNQUFNLEtBQUssTUFBZjtBQUNBLFFBQUksTUFBTSxPQUFPLEVBQWpCO0FBQ0EsUUFBSSxLQUFLLEVBQUUsQ0FBRixJQUFPLENBQWhCO0FBQ0EsUUFBSSxNQUFNLEtBQUssTUFBZjtBQUNBLFFBQUksTUFBTSxPQUFPLEVBQWpCO0FBQ0EsUUFBSSxLQUFLLEVBQUUsQ0FBRixJQUFPLENBQWhCO0FBQ0EsUUFBSSxNQUFNLEtBQUssTUFBZjtBQUNBLFFBQUksTUFBTSxPQUFPLEVBQWpCO0FBQ0EsUUFBSSxLQUFLLEVBQUUsQ0FBRixJQUFPLENBQWhCO0FBQ0EsUUFBSSxNQUFNLEtBQUssTUFBZjtBQUNBLFFBQUksTUFBTSxPQUFPLEVBQWpCO0FBQ0EsUUFBSSxLQUFLLEVBQUUsQ0FBRixJQUFPLENBQWhCO0FBQ0EsUUFBSSxNQUFNLEtBQUssTUFBZjtBQUNBLFFBQUksTUFBTSxPQUFPLEVBQWpCO0FBQ0EsUUFBSSxLQUFLLEVBQUUsQ0FBRixJQUFPLENBQWhCO0FBQ0EsUUFBSSxNQUFNLEtBQUssTUFBZjtBQUNBLFFBQUksTUFBTSxPQUFPLEVBQWpCO0FBQ0EsUUFBSSxLQUFLLEVBQUUsQ0FBRixJQUFPLENBQWhCO0FBQ0EsUUFBSSxNQUFNLEtBQUssTUFBZjtBQUNBLFFBQUksTUFBTSxPQUFPLEVBQWpCO0FBQ0EsUUFBSSxLQUFLLEVBQUUsQ0FBRixJQUFPLENBQWhCO0FBQ0EsUUFBSSxNQUFNLEtBQUssTUFBZjtBQUNBLFFBQUksTUFBTSxPQUFPLEVBQWpCO0FBQ0EsUUFBSSxLQUFLLEVBQUUsQ0FBRixJQUFPLENBQWhCO0FBQ0EsUUFBSSxNQUFNLEtBQUssTUFBZjtBQUNBLFFBQUksTUFBTSxPQUFPLEVBQWpCO0FBQ0EsUUFBSSxLQUFLLEVBQUUsQ0FBRixJQUFPLENBQWhCO0FBQ0EsUUFBSSxNQUFNLEtBQUssTUFBZjtBQUNBLFFBQUks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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQy9MQSxJQUFJLE1BQU0sUUFBUSxZQUFSLENBQVY7O0FBRUEsU0FBUyxRQUFULENBQW1CLElBQW5CLEVBQXlCO0FBQ3ZCLE9BQUssS0FBTCxH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SSxJQUFJLElBQUksRUFBSixDQUFPLFlBQVksR0FBWixDQUFQLENBQVI7QUFDQSxTQUFPLEVBQUUsR0FBRixDQUFNLEtBQUssT0FBWCxLQUF3QixDQUF4QixJQUE2QixDQUFDLEVBQUUsSUFBRixDQUFPLEtBQUssTUFBWixDQUE5QixJQUFxRCxDQUFDLEVBQUUsSUFBRixDQUFPLEtBQUssTUFBWixDQUE3RCxFQUFrRjtBQUNoRixRQUFJLElBQUksRUFBSixDQUFPLFlBQVksR0FBWixDQUFQLENBQUo7QUFDRDtBQUNELFNBQU8sQ0FBUDtBQUNEOzs7Ozs7O0FDdkNELE9BQU8sT0FBUCxHQUFpQixRQUFRLDJCQUFSLENBQWpCOzs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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UUFBSSxhQUFjLEVBQUUsU0FBUyxDQUFYLENBQWxCO0FBQ0EsUUFBSSxhQUFjLEVBQUUsU0FBUyxDQUFYLENBQWxCO0FBQ0EsUUFBSSxhQUFjLEVBQUUsU0FBUyxDQUFYLENBQWxCO0FBQ0EsUUFBSSxhQUFjLEVBQUUsU0FBUyxDQUFYLENBQWxCO0FBQ0EsUUFBSSxhQUFjLEVBQUUsU0FBUyxDQUFYLENBQWxCO0FBQ0EsUUFBSSxhQUFjLEVBQUUsU0FBUyxDQUFYLENBQWxCO0FBQ0EsUUFBSSxhQUFjLEVBQUUsU0FBUyxDQUFYLENBQWxCO0FBQ0EsUUFBSSxhQUFjLEVBQUUsU0FBUyxDQUFYLENBQWxCO0FBQ0EsUUFBSSxjQUFjLEVBQUUsU0FBUyxFQUFYLENBQWxCO0FBQ0EsUUFBSSxjQUFjLEVBQUUsU0FBUyxFQUFYLENBQWxCO0FBQ0EsUUFBSSxjQUFjLEVBQUUsU0FBUyxFQUFYLENBQWxCO0FBQ0EsUUFBSSxjQUFjLEVBQUUsU0FBUyxFQUFYLENBQWxCO0FBQ0EsUUFBSSxjQUFjLEVBQUUsU0FBUyxFQUFYLENBQWxCO0FBQ0EsUUFBSSxjQUFjLEVBQUUsU0FBUyxFQUFYLENBQWxCOztBQUVBO0FBQ0EsUUFBSSxJQUFJLEVBQUUsQ0FBRixDQUFSO0FBQ0EsUUFBSSxJQUFJLEVBQUUsQ0FBRixDQUFSO0FBQ0EsUUFBSSxJQUFJLEVBQUUsQ0FBRixDQUFSO0FBQ0EsUUFBSSxJQUFJLEVBQUUsQ0FBRixDQUFSOztBQUVBO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLENBQTVCLEVBQWdDLEVBQUUsQ0FBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsQ0FBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsQ0FBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsQ0FBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLENBQTVCLEVBQWdDLEVBQUUsQ0FBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsQ0FBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsQ0FBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsQ0FBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLENBQTVCLEVBQWdDLEVBQUUsQ0FBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsQ0FBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxXQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxXQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxXQUFmLEVBQTRCLENBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxXQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxXQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxXQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKOztBQUVBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsVUFBZixFQUE0QixDQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsVUFBZixFQUE0QixDQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsV0FBZixFQUE0QixFQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsVUFBZixFQUE0QixFQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsVUFBZixFQUE0QixDQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsV0FBZixFQUE0QixDQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsV0FBZixFQUE0QixFQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsVUFBZixFQUE0QixFQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsVUFBZixFQUE0QixDQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsV0FBZixFQUE0QixDQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsVUFBZixFQUE0QixFQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsVUFBZixFQUE0QixFQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsV0FBZixFQUE0QixDQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsVUFBZixFQUE0QixDQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsVUFBZixFQUE0QixFQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjtBQUNBLFFBQUksR0FBRyxDQUFILEVBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsV0FBZixFQUE0QixFQUE1QixFQUFnQyxFQUFFLEVBQUYsQ0FBaEMsQ0FBSjs7QUFFQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFVBQWYsRUFBNEIsQ0FBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFVBQWYsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFdBQWYsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFdBQWYsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFVBQWYsRUFBNEIsQ0FBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFVBQWYsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFVBQWYsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFdBQWYsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFdBQWYsRUFBNEIsQ0FBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFVBQWYsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFVBQWYsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFVBQWYsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFVBQWYsRUFBNEIsQ0FBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFdBQWYsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFdBQWYsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7QUFDQSxRQUFJLEdBQUcsQ0FBSCxFQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWixFQUFlLFVBQWYsRUFBNEIsRUFBNUIsRUFBZ0MsRUFBRSxFQUFGLENBQWhDLENBQUo7O0FBRUEsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLENBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxXQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxXQUFmLEVBQTRCLENBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxXQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLENBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxXQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxXQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLENBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxXQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKO0FBQ0EsUUFBSSxHQUFHLENBQUgsRUFBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxVQUFmLEVBQTRCLEVBQTVCLEVBQWdDLEVBQUUsRUFBRixDQUFoQyxDQUFKOztBQUVBO0FBQ0EsTUFBRSxDQUFGLElBQVEsRUFBRSxDQUFGLElBQU8sQ0FBUixHQUFhLENBQXBCO0FBQ0EsTUFBRSxDQUFGLElBQVEsRUFBRSxDQUFGLElBQU8sQ0FBUixHQUFhLENBQXBCO0FBQ0EsTUFBRSxDQUFGLElBQVEsRUFBRSxDQUFGLElBQU8sQ0FBUixHQUFhLENBQXBCO0FBQ0EsTUFBRSxDQUFGLElBQVEsRUFBRSxDQUFGLElBQU8sQ0FBUixHQUFhLENBQXBCO0FBQ0gsSUF6SGdDOztBQTJIakMsZ0JBQWEsdUJBQVk7QUFDckI7QUFDQSxRQUFJLE9BQU8sS0FBSyxLQUFoQjtBQUNBLFFBQUksWUFBWSxLQUFLLEtBQXJCOztBQUVBLFFBQUksYUFBYSxLQUFLLFdBQUwsR0FBbUIsQ0FBcEM7QUFDQSxRQUFJLFlBQVksS0FBSyxRQUFMLEdBQWdCLENBQWhDOztBQUVBO0FBQ0EsY0FBVSxjQUFjLENBQXhCLEtBQThCLFFBQVMsS0FBSyxZQUFZLEVBQXhEOztBQUVBLFFBQUksY0FBYyxLQUFLLEtBQUwsQ0FBVyxhQUFhLFdBQXhCLENBQWxCO0FBQ0EsUUFBSSxjQUFjLFVBQWxCO0FBQ0EsY0FBVSxDQUFHLFlBQVksRUFBYixLQUFxQixDQUF0QixJQUE0QixDQUE3QixJQUFrQyxFQUE1QyxJQUNLLENBQUUsZUFBZSxDQUFoQixHQUF1QixnQkFBZ0IsRUFBeEMsSUFBK0MsVUFBaEQsR0FDQyxDQUFFLGVBQWUsRUFBaEIsR0FBdUIsZ0JBQWdCLENBQXhDLElBQStDLFVBRnBEO0FBSUEsY0FBVSxDQUFHLFlBQVksRUFBYixLQUFxQixDQUF0QixJQUE0QixDQUE3QixJQUFrQyxFQUE1QyxJQUNLLENBQUUsZUFBZSxDQUFoQixHQUF1QixnQkFBZ0IsRUFBeEMsSUFBK0MsVUFBaEQsR0FDQyxDQUFFLGVBQWUsRUFBaEIsR0FBdUIsZ0JBQWdCLENBQXhDLElBQStDLFVBRnBEOztBQUtBLFNBQUssUUFBTCxHQUFnQixDQUFDLFVBQVUsTUFBVixHQUFtQixDQUFwQixJQUF5QixDQUF6Qzs7QUFFQTtBQUNBLFNBQUssUUFBTDs7QUFFQTtBQUNBLFFBQUksT0FBTyxLQUFLLEtBQWhCO0FBQ0EsUUFBSSxJQUFJLEtBQUssS0FBYjs7QUFFQTtBQUNBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxDQUFwQixFQUF1QixHQUF2QixFQUE0QjtBQUN4QjtBQUNBLFNBQUksTUFBTSxFQUFFLENBQUYsQ0FBVjs7QUFFQSxPQUFFLENBQUYsSUFBUSxDQUFFLE9BQU8sQ0FBUixHQUFlLFFBQVEsRUFBeEIsSUFBK0IsVUFBaEMsR0FDQyxDQUFFLE9BQU8sRUFBUixHQUFlLFFBQVEsQ0FBeEIsSUFBK0IsVUFEdkM7QUFFSDs7QUFFRDtBQUNBLFdBQU8sSUFBUDtBQUNILElBcktnQzs7QUF1S2pDLFVBQU8saUJBQVk7QUFDZixRQUFJLFFBQVEsT0FBTyxLQUFQLENBQWEsSUFBYixDQUFrQixJQUFsQixDQUFaO0FBQ0EsVUFBTSxLQUFOLEdBQWMsS0FBSyxLQUFMLENBQVcsS0FBWCxFQUFkOztBQUVBLFdBQU8sS0FBUDtBQUNIO0FBNUtnQyxHQUFkLENBQXZCOztBQStLQSxXQUFTLEVBQVQsQ0FBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixDQUF4QixFQUEyQixDQUEzQixFQUE4QixDQUE5QixFQUFpQztBQUM3QixPQUFJLElBQUksS0FBTSxJQUFJLENBQUwsR0FBVyxDQUFDLENBQUQsR0FBSyxDQUFyQixJQUEyQixDQUEzQixHQUErQixDQUF2QztBQUNBLFVBQU8sQ0FBRSxLQUFLLENBQU4sR0FBWSxNQUFPLEtBQUssQ0FBekIsSUFBZ0MsQ0FBdkM7QUFDSDs7QUFFRCxXQUFTLEVBQVQsQ0FBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixDQUF4QixFQUEyQixDQUEzQixFQUE4QixDQUE5QixFQUFpQztBQUM3QixPQUFJLElBQUksS0FBTSxJQUFJLENBQUwsR0FBVyxJQUFJLENBQUMsQ0FBckIsSUFBMkIsQ0FBM0IsR0FBK0IsQ0FBdkM7QUFDQSxVQUFPLENBQUUsS0FBSyxDQUFOLEdBQVksTUFBTyxLQUFLLENBQXpCLElBQWdDLENBQXZDO0FBQ0g7O0FBRUQsV0FBUyxFQUFULENBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsRUFBd0IsQ0FBeEIsRUFBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsRUFBaUM7QUFDN0IsT0FBSSxJQUFJLEtBQUssSUFBSSxDQUFKLEdBQVEsQ0FBYixJQUFrQixDQUFsQixHQUFzQixDQUE5QjtBQUNBLFVBQU8sQ0FBRSxLQUFLLENBQU4sR0FBWSxNQUFPLEtBQUssQ0FBekIsSUFBZ0MsQ0FBdkM7QUFDSDs7QUFFRCxXQUFTLEVBQVQsQ0FBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixDQUF4QixFQUEyQixDQUEzQixFQUE4QixDQUE5QixFQUFpQztBQUM3QixPQUFJLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFWLENBQUwsSUFBcUIsQ0FBckIsR0FBeUIsQ0FBakM7QUFDQSxVQUFPLENBQUUsS0FBSyxDQUFOLEdBQVksTUFBTyxLQUFLLENBQXpCLElBQWdDLENBQXZDO0FBQ0g7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7O0FBY0EsSUFBRSxHQUFGLEdBQVEsT0FBTyxhQUFQLENBQXFCLEdBQXJCLENBQVI7O0FBRUE7Ozs7Ozs7Ozs7Ozs7O0FBY0EsSUFBRSxPQUFGLEdBQVksT0FBTyxpQkFBUCxDQUF5QixHQUF6QixDQUFaO0FBQ0gsRUF2UEEsRUF1UEMsSUF2UEQsQ0FBRDs7QUEwUEEsUUFBTyxTQUFTLEdBQWhCO0FBRUEsQ0EzUUMsQ0FBRDs7Ozs7OztBQ0FELENBQUUsV0FBVSxJQUFWLEVBQWdCLE9BQWhCLEVBQXlCLEtBQXpCLEVBQWdDO0FBQ2pDLEtBQUksUUFBTyxPQUFQLHlDQUFPLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDaEM7QUFDQSxTQUFPLE9BQVAsR0FBaUIsVUFBVSxRQUFRLFFBQVEsUUFBUixDQUFSLEVBQTJCLFFBQVEsZUFBUixDQUEzQixDQUEzQjtBQUNBLEVBSEQsTUFJSyxJQUFJLE9BQU8sTUFBUCxLQUFrQixVQUFsQixJQUFnQyxPQUFPLEdBQTNDLEVBQWdEO0FBQ3BEO0FBQ0EsU0FBTyxDQUFDLFFBQUQsRUFBVyxlQUFYLENBQVAsRUFBb0MsT0FBcEM7QUFDQSxFQUhJLE1BSUE7QUFDSjtBQUNBLFVBQVEsS0FBSyxRQUFiO0FBQ0E7QUFDRCxDQWJDLGFBYU0sVUFBVSxRQUFWLEVBQW9COztBQUUzQjs7O0FBR0EsVUFBUyxJQUFULENBQWMsR0FBZCxHQUFxQixZQUFZO0FBQzdCLE1BQUksTUFBTSxTQUFTLEdBQVQsQ0FBYSxlQUFiLENBQTZCLE1BQTdCLEVBQVY7O0FBRUEsTUFBSSxTQUFKLEdBQWdCLElBQUksTUFBSixDQUFXO0FBQ3ZCLGlCQUFjLHNCQUFVLEtBQVYsRUFBaUIsTUFBakIsRUFBeUI7QUFDbkM7QUFDQSxRQUFJLFNBQVMsS0FBSyxPQUFsQjtBQUNBLFFBQUksWUFBWSxPQUFPLFNBQXZCOztBQUVBLGdDQUE0QixJQUE1QixDQUFpQyxJQUFqQyxFQUF1QyxLQUF2QyxFQUE4QyxNQUE5QyxFQUFzRCxTQUF0RCxFQUFpRSxNQUFqRTs7QUFFQTtBQUNBLFNBQUssVUFBTCxHQUFrQixNQUFNLEtBQU4sQ0FBWSxNQUFaLEVBQW9CLFNBQVMsU0FBN0IsQ0FBbEI7QUFDSDtBQVZzQixHQUFYLENBQWhCOztBQWFBLE1BQUksU0FBSixHQUFnQixJQUFJLE1BQUosQ0FBVztBQUN2QixpQkFBYyxzQkFBVSxLQUFWLEVBQWlCLE1BQWpCLEVBQXlCO0FBQ25DO0FBQ0EsUUFBSSxTQUFTLEtBQUssT0FBbEI7QUFDQSxRQUFJLFlBQVksT0FBTyxTQUF2Qjs7QUFFQTtBQUNBLFFBQUksWUFBWSxNQUFNLEtBQU4sQ0FBWSxNQUFaLEVBQW9CLFNBQVMsU0FBN0IsQ0FBaEI7O0FBRUEsZ0NBQTRCLElBQTVCLENBQWlDLElBQWpDLEVBQXVDLEtBQXZDLEVBQThDLE1BQTlDLEVBQXNELFNBQXRELEVBQWlFLE1BQWpFOztBQUVBO0FBQ0EsU0FBSyxVQUFMLEdBQWtCLFNBQWxCO0FBQ0g7QUFic0IsR0FBWCxDQUFoQjs7QUFnQkEsV0FBUywyQkFBVCxDQUFxQyxLQUFyQyxFQUE0QyxNQUE1QyxFQUFvRCxTQUFwRCxFQUErRCxNQUEvRCxFQUF1RTtBQUNuRTtBQUNBLE9BQUksS0FBSyxLQUFLLEdBQWQ7O0FBRUE7QUFDQSxPQUFJLEVBQUosRUFBUTtBQUNKLFFBQUksWUFBWSxHQUFHLEtBQUgsQ0FBUyxDQUFULENBQWhCOztBQUVBO0FBQ0EsU0FBSyxHQUFMLEdBQVcsU0FBWDtBQUNILElBTEQsTUFLTztBQUNILFFBQUksWUFBWSxLQUFLLFVBQXJCO0FBQ0g7QUFDRCxVQUFPLFlBQVAsQ0FBb0IsU0FBcEIsRUFBK0IsQ0FBL0I7O0FBRUE7QUFDQSxRQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksU0FBcEIsRUFBK0IsR0FBL0IsRUFBb0M7QUFDaEMsVUFBTSxTQUFTLENBQWYsS0FBcUIsVUFBVSxDQUFWLENBQXJCO0FBQ0g7QUFDSjs7QUFFRCxTQUFPLEdBQVA7QUFDSCxFQXREb0IsRUFBckI7O0FBeURBLFFBQU8sU0FBUyxJQUFULENBQWMsR0FBckI7QUFFQSxDQTdFQyxDQUFEOzs7Ozs7O0FDQUQsQ0FBRSxXQUFVLElBQVYsRUFBZ0IsT0FBaEIsRUFBeUIsS0FBekIsRUFBZ0M7QUFDakMsS0FBSSxRQUFPLE9BQVAseUNBQU8sT0FBUCxPQUFtQixRQUF2QixFQUFpQztBQUNoQztBQUNBLFNBQU8sT0FBUCxHQUFpQixVQUFVLFFBQVEsUUFBUSxRQUFSLENBQVIsRUFBMkIsUUFBUSxlQUFSLENBQTNCLENBQTNCO0FBQ0EsRUFIRCxNQUlLLElBQUksT0FBTyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU8sR0FBM0MsRUFBZ0Q7QUFDcEQ7QUFDQSxTQUFPLENBQUMsUUFBRCxFQUFXLGVBQVgsQ0FBUCxFQUFvQyxPQUFwQztBQUNBLEVBSEksTUFJQTtBQUNKO0FBQ0EsVUFBUSxLQUFLLFFBQWI7QUFDQTtBQUNELENBYkMsYUFhTSxVQUFVLFFBQVYsRUFBb0I7O0FBRTNCOzs7OztBQUtBLFVBQVMsSUFBVCxDQUFjLFVBQWQsR0FBNEIsWUFBWTtBQUNwQyxNQUFJLGFBQWEsU0FBUyxHQUFULENBQWEsZUFBYixDQUE2QixNQUE3QixFQUFqQjs7QUFFSCxXQUFTLE9BQVQsQ0FBaUIsSUFBakIsRUFDQTtBQUNDLE9BQUksQ0FBRSxRQUFRLEVBQVQsR0FBZSxJQUFoQixNQUEwQixJQUE5QixFQUFvQztBQUFFO0FBQ3RDLFFBQUksS0FBTSxRQUFRLEVBQVQsR0FBYSxJQUF0QjtBQUNBLFFBQUksS0FBTSxRQUFRLENBQVQsR0FBWSxJQUFyQjtBQUNBLFFBQUksS0FBSyxPQUFPLElBQWhCOztBQUVBLFFBQUksT0FBTyxJQUFYLEVBQWlCO0FBQ2pCO0FBQ0EsV0FBSyxDQUFMO0FBQ0EsVUFBSSxPQUFPLElBQVgsRUFDQTtBQUNDLFlBQUssQ0FBTDtBQUNBLFdBQUksT0FBTyxJQUFYLEVBQ0E7QUFDQyxhQUFLLENBQUw7QUFDQSxRQUhELE1BS0E7QUFDQyxVQUFFLEVBQUY7QUFDQTtBQUNELE9BWEQsTUFhQTtBQUNDLFNBQUUsRUFBRjtBQUNBO0FBQ0EsTUFuQkQsTUFxQkE7QUFDQSxPQUFFLEVBQUY7QUFDQzs7QUFFRCxXQUFPLENBQVA7QUFDQSxZQUFTLE1BQU0sRUFBZjtBQUNBLFlBQVMsTUFBTSxDQUFmO0FBQ0EsWUFBUSxFQUFSO0FBQ0MsSUFsQ0QsTUFvQ0E7QUFDQSxZQUFTLFFBQVEsRUFBakI7QUFDQztBQUNELFVBQU8sSUFBUDtBQUNBOztBQUVELFdBQVMsVUFBVCxDQUFvQixPQUFwQixFQUNBO0FBQ0MsT0FBSSxDQUFDLFFBQVEsQ0FBUixJQUFhLFFBQVEsUUFBUSxDQUFSLENBQVIsQ0FBZCxNQUF1QyxDQUEzQyxFQUNBO0FBQ0M7QUFDQSxZQUFRLENBQVIsSUFBYSxRQUFRLFFBQVEsQ0FBUixDQUFSLENBQWI7QUFDQTtBQUNELFVBQU8sT0FBUDtBQUNBOztBQUVFLE1BQUksWUFBWSxXQUFXLFNBQVgsR0FBdUIsV0FBVyxNQUFYLENBQWtCO0FBQ3JELGlCQUFjLHNCQUFVLEtBQVYsRUFBaUIsTUFBakIsRUFBeUI7QUFDbkM7QUFDQSxRQUFJLFNBQVMsS0FBSyxPQUFsQjtBQUNBLFFBQUksWUFBWSxPQUFPLFNBQXZCO0FBQ0EsUUFBSSxLQUFLLEtBQUssR0FBZDtBQUNBLFFBQUksVUFBVSxLQUFLLFFBQW5COztBQUVBO0FBQ0EsUUFBSSxFQUFKLEVBQVE7QUFDSixlQUFVLEtBQUssUUFBTCxHQUFnQixHQUFHLEtBQUgsQ0FBUyxDQUFULENBQTFCOztBQUVBO0FBQ0EsVUFBSyxHQUFMLEdBQVcsU0FBWDtBQUNIOztBQUVWLGVBQVcsT0FBWDs7QUFFQSxRQUFJLFlBQVksUUFBUSxLQUFSLENBQWMsQ0FBZCxDQUFoQjtBQUNTLFdBQU8sWUFBUCxDQUFvQixTQUFwQixFQUErQixDQUEvQjs7QUFFQTtBQUNBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxTQUFwQixFQUErQixHQUEvQixFQUFvQztBQUNoQyxXQUFNLFNBQVMsQ0FBZixLQUFxQixVQUFVLENBQVYsQ0FBckI7QUFDSDtBQUNKO0FBekJvRCxHQUFsQixDQUF2Qzs7QUE0QkEsYUFBVyxTQUFYLEdBQXVCLFNBQXZCOztBQUVBLFNBQU8sVUFBUDtBQUNILEVBeEYyQixFQUE1Qjs7QUE2RkEsUUFBTyxTQUFTLElBQVQsQ0FBYyxVQUFyQjtBQUVBLENBbkhDLENBQUQ7Ozs7Ozs7QUNBRCxDQUFFLFdBQVUsSUFBVixFQUFnQixPQUFoQixFQUF5QixLQUF6QixFQUFnQztBQUNqQyxLQUFJLFFBQU8sT0FBUCx5Q0FBTyxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQ2hDO0FBQ0EsU0FBTyxPQUFQLEdBQWlCLFVBQVUsUUFBUSxRQUFRLFFBQVIsQ0FBUixFQUEyQixRQUFRLGVBQVIsQ0FBM0IsQ0FBM0I7QUFDQSxFQUhELE1BSUssSUFBSSxPQUFPLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0MsT0FBTyxHQUEzQyxFQUFnRDtBQUNwRDtBQUNBLFNBQU8sQ0FBQyxRQUFELEVBQVcsZUFBWCxDQUFQLEVBQW9DLE9BQXBDO0FBQ0EsRUFISSxNQUlBO0FBQ0o7QUFDQSxVQUFRLEtBQUssUUFBYjtBQUNBO0FBQ0QsQ0FiQyxhQWFNLFVBQVUsUUFBVixFQUFvQjs7QUFFM0I7OztBQUdBLFVBQVMsSUFBVCxDQUFjLEdBQWQsR0FBcUIsWUFBWTtBQUM3QixNQUFJLE1BQU0sU0FBUyxHQUFULENBQWEsZUFBYixDQUE2QixNQUE3QixFQUFWOztBQUVBLE1BQUksWUFBWSxJQUFJLFNBQUosR0FBZ0IsSUFBSSxNQUFKLENBQVc7QUFDdkMsaUJBQWMsc0JBQVUsS0FBVixFQUFpQixNQUFqQixFQUF5QjtBQUNuQztBQUNBLFFBQUksU0FBUyxLQUFLLE9BQWxCO0FBQ0EsUUFBSSxZQUFZLE9BQU8sU0FBdkI7QUFDQSxRQUFJLEtBQUssS0FBSyxHQUFkO0FBQ0EsUUFBSSxVQUFVLEtBQUssUUFBbkI7O0FBRUE7QUFDQSxRQUFJLEVBQUosRUFBUTtBQUNKLGVBQVUsS0FBSyxRQUFMLEdBQWdCLEdBQUcsS0FBSCxDQUFTLENBQVQsQ0FBMUI7O0FBRUE7QUFDQSxVQUFLLEdBQUwsR0FBVyxTQUFYO0FBQ0g7QUFDRCxRQUFJLFlBQVksUUFBUSxLQUFSLENBQWMsQ0FBZCxDQUFoQjtBQUNBLFdBQU8sWUFBUCxDQUFvQixTQUFwQixFQUErQixDQUEvQjs7QUFFQTtBQUNBLFlBQVEsWUFBWSxDQUFwQixJQUEwQixRQUFRLFlBQVksQ0FBcEIsSUFBeUIsQ0FBMUIsR0FBK0IsQ0FBeEQ7O0FBRUE7QUFDQSxTQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksU0FBcEIsRUFBK0IsR0FBL0IsRUFBb0M7QUFDaEMsV0FBTSxTQUFTLENBQWYsS0FBcUIsVUFBVSxDQUFWLENBQXJCO0FBQ0g7QUFDSjtBQXpCc0MsR0FBWCxDQUFoQzs7QUE0QkEsTUFBSSxTQUFKLEdBQWdCLFNBQWhCOztBQUVBLFNBQU8sR0FBUDtBQUNILEVBbENvQixFQUFyQjs7QUFxQ0EsUUFBTyxTQUFTLElBQVQsQ0FBYyxHQUFyQjtBQUVBLENBekRDLENBQUQ7Ozs7Ozs7QUNBRCxDQUFFLFdBQVUsSUFBVixFQUFnQixPQUFoQixFQUF5QixLQUF6QixFQUFnQztBQUNqQyxLQUFJLFFBQU8sT0FBUCx5Q0FBTyxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQ2hDO0FBQ0EsU0FBTyxPQUFQLEdBQWlCLFVBQVUsUUFBUSxRQUFRLFFBQVIsQ0FBUixFQUEyQixRQUFRLGVBQVIsQ0FBM0IsQ0FBM0I7QUFDQSxFQUhELE1BSUssSUFBSSxPQUFPLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0MsT0FBTyxHQUEzQyxFQUFnRDtBQUNwRDtBQUNBLFNBQU8sQ0FBQyxRQUFELEVBQVcsZUFBWCxDQUFQLEVBQW9DLE9BQXBDO0FBQ0EsRUFISSxNQUlBO0FBQ0o7QUFDQSxVQUFRLEtBQUssUUFBYjtBQUNBO0FBQ0QsQ0FiQyxhQWFNLFVBQVUsUUFBVixFQUFvQjs7QUFFM0I7OztBQUdBLFVBQVMsSUFBVCxDQUFjLEdBQWQsR0FBcUIsWUFBWTtBQUM3QixNQUFJLE1BQU0sU0FBUyxHQUFULENBQWEsZUFBYixDQUE2QixNQUE3QixFQUFWOztBQUVBLE1BQUksU0FBSixHQUFnQixJQUFJLE1BQUosQ0FBVztBQUN2QixpQkFBYyxzQkFBVSxLQUFWLEVBQWlCLE1BQWpCLEVBQXlCO0FBQ25DLFNBQUssT0FBTCxDQUFhLFlBQWIsQ0FBMEIsS0FBMUIsRUFBaUMsTUFBakM7QUFDSDtBQUhzQixHQUFYLENBQWhCOztBQU1BLE1BQUksU0FBSixHQUFnQixJQUFJLE1BQUosQ0FBVztBQUN2QixpQkFBYyxzQkFBVSxLQUFWLEVBQWlCLE1BQWpCLEVBQXlCO0FBQ25DLFNBQUssT0FBTCxDQUFhLFlBQWIsQ0FBMEIsS0FBMUIsRUFBaUMsTUFBakM7QUFDSDtBQUhzQixHQUFYLENBQWhCOztBQU1BLFNBQU8sR0FBUDtBQUNILEVBaEJvQixFQUFyQjs7QUFtQkEsUUFBTyxTQUFTLElBQVQsQ0FBYyxHQUFyQjtBQUVBLENBdkNDLENBQUQ7Ozs7Ozs7QUNBRCxDQUFFLFdBQVUsSUFBVixFQUFnQixPQUFoQixFQUF5QixLQUF6QixFQUFnQztBQUNqQyxLQUFJLFFBQU8sT0FBUCx5Q0FBTyxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQ2hDO0FBQ0EsU0FBTyxPQUFQLEdBQWlCLFVBQVUsUUFBUSxRQUFRLFFBQVIsQ0FBUixFQUEyQixRQUFRLGVBQVIsQ0FBM0IsQ0FBM0I7QUFDQSxFQUhELE1BSUssSUFBSSxPQUFPLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0MsT0FBTyxHQUEzQyxFQUFnRDtBQUNwRDtBQUNBLFNBQU8sQ0FBQyxRQUFELEVBQVcsZUFBWCxDQUFQLEVBQW9DLE9BQXBDO0FBQ0EsRUFISSxNQUlBO0FBQ0o7QUFDQSxVQUFRLEtBQUssUUFBYjtBQUNBO0FBQ0QsQ0FiQyxhQWFNLFVBQVUsUUFBVixFQUFvQjs7QUFFM0I7OztBQUdBLFVBQVMsSUFBVCxDQUFjLEdBQWQsR0FBcUIsWUFBWTtBQUM3QixNQUFJLE1BQU0sU0FBUyxHQUFULENBQWEsZUFBYixDQUE2QixNQUE3QixFQUFWOztBQUVBLE1BQUksWUFBWSxJQUFJLFNBQUosR0FBZ0IsSUFBSSxNQUFKLENBQVc7QUFDdkMsaUJBQWMsc0JBQVUsS0FBVixFQUFpQixNQUFqQixFQUF5QjtBQUNuQztBQUNBLFFBQUksU0FBUyxLQUFLLE9BQWxCO0FBQ0EsUUFBSSxZQUFZLE9BQU8sU0FBdkI7QUFDQSxRQUFJLEtBQUssS0FBSyxHQUFkO0FBQ0EsUUFBSSxZQUFZLEtBQUssVUFBckI7O0FBRUE7QUFDQSxRQUFJLEVBQUosRUFBUTtBQUNKLGlCQUFZLEtBQUssVUFBTCxHQUFrQixHQUFHLEtBQUgsQ0FBUyxDQUFULENBQTlCOztBQUVBO0FBQ0EsVUFBSyxHQUFMLEdBQVcsU0FBWDtBQUNIO0FBQ0QsV0FBTyxZQUFQLENBQW9CLFNBQXBCLEVBQStCLENBQS9COztBQUVBO0FBQ0EsU0FBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLFNBQXBCLEVBQStCLEdBQS9CLEVBQW9DO0FBQ2hDLFdBQU0sU0FBUyxDQUFmLEtBQXFCLFVBQVUsQ0FBVixDQUFyQjtBQUNIO0FBQ0o7QUFyQnNDLEdBQVgsQ0FBaEM7O0FBd0JBLE1BQUksU0FBSixHQUFnQixTQUFoQjs7QUFFQSxTQUFPLEdBQVA7QUFDSCxFQTlCb0IsRUFBckI7O0FBaUNBLFFBQU8sU0FBUyxJQUFULENBQWMsR0FBckI7QUFFQSxDQXJEQyxDQUFEOzs7Ozs7O0FDQUQsQ0FBRSxXQUFVLElBQVYsRUFBZ0IsT0FBaEIsRUFBeUIsS0FBekIsRUFBZ0M7QUFDakMsS0FBSSxRQUFPLE9BQVAseUNBQU8sT0FBUCxPQUFtQixRQUF2QixFQUFpQztBQUNoQztBQUNBLFNBQU8sT0FBUCxHQUFpQixVQUFVLFFBQVEsUUFBUSxRQUFSLENBQVIsRUFBMkIsUUFBUSxlQUFSLENBQTNCLENBQTNCO0FBQ0EsRUFIRCxNQUlLLElBQUksT0FBTyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU8sR0FBM0MsRUFBZ0Q7QUFDcEQ7QUFDQSxTQUFPLENBQUMsUUFBRCxFQUFXLGVBQVgsQ0FBUCxFQUFvQyxPQUFwQztBQUNBLEVBSEksTUFJQTtBQUNKO0FBQ0EsVUFBUSxLQUFLLFFBQWI7QUFDQTtBQUNELENBYkMsYUFhTSxVQUFVLFFBQVYsRUFBb0I7O0FBRTNCOzs7QUFHQSxVQUFTLEdBQVQsQ0FBYSxRQUFiLEdBQXdCO0FBQ3BCLE9BQUssYUFBVSxJQUFWLEVBQWdCLFNBQWhCLEVBQTJCO0FBQzVCO0FBQ0EsT0FBSSxlQUFlLEtBQUssUUFBeEI7QUFDQSxPQUFJLGlCQUFpQixZQUFZLENBQWpDOztBQUVBO0FBQ0EsT0FBSSxnQkFBZ0IsaUJBQWlCLGVBQWUsY0FBcEQ7O0FBRUE7QUFDQSxPQUFJLGNBQWMsZUFBZSxhQUFmLEdBQStCLENBQWpEOztBQUVBO0FBQ0EsUUFBSyxLQUFMO0FBQ0EsUUFBSyxLQUFMLENBQVcsZ0JBQWdCLENBQTNCLEtBQWlDLGlCQUFrQixLQUFNLGNBQWMsQ0FBZixHQUFvQixDQUE1RTtBQUNBLFFBQUssUUFBTCxJQUFpQixhQUFqQjtBQUNILEdBaEJtQjs7QUFrQnBCLFNBQU8sZUFBVSxJQUFWLEVBQWdCO0FBQ25CO0FBQ0EsT0FBSSxnQkFBZ0IsS0FBSyxLQUFMLENBQVksS0FBSyxRQUFMLEdBQWdCLENBQWpCLEtBQXdCLENBQW5DLElBQXdDLElBQTVEOztBQUVBO0FBQ0EsUUFBSyxRQUFMLElBQWlCLGFBQWpCO0FBQ0g7QUF4Qm1CLEVBQXhCOztBQTRCQSxRQUFPLFNBQVMsR0FBVCxDQUFhLFFBQXBCO0FBRUEsQ0FoREMsQ0FBRDs7Ozs7OztBQ0FELENBQUUsV0FBVSxJQUFWLEVBQWdCLE9BQWhCLEVBQXlCLEtBQXpCLEVBQWdDO0FBQ2pDLEtBQUksUUFBTyxPQUFQLHlDQUFPLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDaEM7QUFDQSxTQUFPLE9BQVAsR0FBaUIsVUFBVSxRQUFRLFFBQVEsUUFBUixDQUFSLEVBQTJCLFFBQVEsZUFBUixDQUEzQixDQUEzQjtBQUNBLEVBSEQsTUFJSyxJQUFJLE9BQU8sTUFBUCxLQUFrQixVQUFsQixJQUFnQyxPQUFPLEdBQTNDLEVBQWdEO0FBQ3BEO0FBQ0EsU0FBTyxDQUFDLFFBQUQsRUFBVyxlQUFYLENBQVAsRUFBb0MsT0FBcEM7QUFDQSxFQUhJLE1BSUE7QUFDSjtBQUNBLFVBQVEsS0FBSyxRQUFiO0FBQ0E7QUFDRCxDQWJDLGFBYU0sVUFBVSxRQUFWLEVBQW9COztBQUUzQjs7O0FBR0EsVUFBUyxHQUFULENBQWEsUUFBYixHQUF3QjtBQUNwQixPQUFLLGFBQVUsSUFBVixFQUFnQixTQUFoQixFQUEyQjtBQUM1QjtBQUNBLE9BQUksaUJBQWlCLFlBQVksQ0FBakM7O0FBRUE7QUFDQSxPQUFJLGdCQUFnQixpQkFBaUIsS0FBSyxRQUFMLEdBQWdCLGNBQXJEOztBQUVBO0FBQ0EsUUFBSyxNQUFMLENBQVksU0FBUyxHQUFULENBQWEsU0FBYixDQUF1QixNQUF2QixDQUE4QixnQkFBZ0IsQ0FBOUMsQ0FBWixFQUNLLE1BREwsQ0FDWSxTQUFTLEdBQVQsQ0FBYSxTQUFiLENBQXVCLE1BQXZCLENBQThCLENBQUMsaUJBQWlCLEVBQWxCLENBQTlCLEVBQXFELENBQXJELENBRFo7QUFFSCxHQVhtQjs7QUFhcEIsU0FBTyxlQUFVLElBQVYsRUFBZ0I7QUFDbkI7QUFDQSxPQUFJLGdCQUFnQixLQUFLLEtBQUwsQ0FBWSxLQUFLLFFBQUwsR0FBZ0IsQ0FBakIsS0FBd0IsQ0FBbkMsSUFBd0MsSUFBNUQ7O0FBRUE7QUFDQSxRQUFLLFFBQUwsSUFBaUIsYUFBakI7QUFDSDtBQW5CbUIsRUFBeEI7O0FBdUJBLFFBQU8sU0FBUyxHQUFULENBQWEsUUFBcEI7QUFFQSxDQTNDQyxDQUFEOzs7Ozs7O0FDQUQsQ0FBRSxXQUFVLElBQVYsRUFBZ0IsT0FBaEIsRUFBeUIsS0FBekIsRUFBZ0M7QUFDakMsS0FBSSxRQUFPLE9BQVAseUNBQU8sT0FBUCxPQUFtQixRQUF2QixFQUFpQztBQUNoQztBQUNBLFNBQU8sT0FBUCxHQUFpQixVQUFVLFFBQVEsUUFBUSxRQUFSLENBQVIsRUFBMkIsUUFBUSxlQUFSLENBQTNCLENBQTNCO0FBQ0EsRUFIRCxNQUlLLElBQUksT0FBTyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU8sR0FBM0MsRUFBZ0Q7QUFDcEQ7QUFDQSxTQUFPLENBQUMsUUFBRCxFQUFXLGVBQVgsQ0FBUCxFQUFvQyxPQUFwQztBQUNBLEVBSEksTUFJQTtBQUNKO0FBQ0EsVUFBUSxLQUFLLFFBQWI7QUFDQTtBQUNELENBYkMsYUFhTSxVQUFVLFFBQVYsRUFBb0I7O0FBRTNCOzs7QUFHQSxVQUFTLEdBQVQsQ0FBYSxRQUFiLEdBQXdCO0FBQ3BCLE9BQUssYUFBVSxJQUFWLEVBQWdCLFNBQWhCLEVBQTJCO0FBQzVCO0FBQ0EsUUFBSyxNQUFMLENBQVksU0FBUyxHQUFULENBQWEsU0FBYixDQUF1QixNQUF2QixDQUE4QixDQUFDLFVBQUQsQ0FBOUIsRUFBNEMsQ0FBNUMsQ0FBWjs7QUFFQTtBQUNBLFlBQVMsR0FBVCxDQUFhLFdBQWIsQ0FBeUIsR0FBekIsQ0FBNkIsSUFBN0IsRUFBbUMsU0FBbkM7QUFDSCxHQVBtQjs7QUFTcEIsU0FBTyxlQUFVLElBQVYsRUFBZ0I7QUFDbkI7QUFDQSxZQUFTLEdBQVQsQ0FBYSxXQUFiLENBQXlCLEtBQXpCLENBQStCLElBQS9COztBQUVBO0FBQ0EsUUFBSyxRQUFMO0FBQ0g7QUFmbUIsRUFBeEI7O0FBbUJBLFFBQU8sU0FBUyxHQUFULENBQWEsUUFBcEI7QUFFQSxDQXZDQyxDQUFEOzs7Ozs7O0FDQUQsQ0FBRSxXQUFVLElBQVYsRUFBZ0IsT0FBaEIsRUFBeUIsS0FBekIsRUFBZ0M7QUFDakMsS0FBSSxRQUFPLE9BQVAseUNBQU8sT0FBUCxPQUFtQixRQUF2QixFQUFpQztBQUNoQztBQUNBLFNBQU8sT0FBUCxHQUFpQixVQUFVLFFBQVEsUUFBUSxRQUFSLENBQVIsRUFBMkIsUUFBUSxlQUFSLENBQTNCLENBQTNCO0FBQ0EsRUFIRCxNQUlLLElBQUksT0FBTyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU8sR0FBM0MsRUFBZ0Q7QUFDcEQ7QUFDQSxTQUFPLENBQUMsUUFBRCxFQUFXLGVBQVgsQ0FBUCxFQUFvQyxPQUFwQztBQUNBLEVBSEksTUFJQTtBQUNKO0FBQ0EsVUFBUSxLQUFLLFFBQWI7QUFDQTtBQUNELENBYkMsYUFhTSxVQUFVLFFBQVYsRUFBb0I7O0FBRTNCOzs7QUFHQSxVQUFTLEdBQVQsQ0FBYSxTQUFiLEdBQXlCO0FBQ3JCLE9BQUssZUFBWSxDQUNoQixDQUZvQjs7QUFJckIsU0FBTyxpQkFBWSxDQUNsQjtBQUxvQixFQUF6Qjs7QUFTQSxRQUFPLFNBQVMsR0FBVCxDQUFhLFNBQXBCO0FBRUEsQ0E3QkMsQ0FBRDs7Ozs7OztBQ0FELENBQUUsV0FBVSxJQUFWLEVBQWdCLE9BQWhCLEVBQXlCLEtBQXpCLEVBQWdDO0FBQ2pDLEtBQUksUUFBTyxPQUFQLHlDQUFPLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDaEM7QUFDQSxTQUFPLE9BQVAsR0FBaUIsVUFBVSxRQUFRLFFBQVEsUUFBUixDQUFSLEVBQTJCLFFBQVEsZUFBUixDQUEzQixDQUEzQjtBQUNBLEVBSEQsTUFJSyxJQUFJLE9BQU8sTUFBUCxLQUFrQixVQUFsQixJQUFnQyxPQUFPLEdBQTNDLEVBQWdEO0FBQ3BEO0FBQ0EsU0FBTyxDQUFDLFFBQUQsRUFBVyxlQUFYLENBQVAsRUFBb0MsT0FBcEM7QUFDQSxFQUhJLE1BSUE7QUFDSjtBQUNBLFVBQVEsS0FBSyxRQUFiO0FBQ0E7QUFDRCxDQWJDLGFBYU0sVUFBVSxRQUFWLEVBQW9COztBQUUzQjs7O0FBR0EsVUFBUyxHQUFULENBQWEsV0FBYixHQUEyQjtBQUN2QixPQUFLLGFBQVUsSUFBVixFQUFnQixTQUFoQixFQUEyQjtBQUM1QjtBQUNBLE9BQUksaUJBQWlCLFlBQVksQ0FBakM7O0FBRUE7QUFDQSxRQUFLLEtBQUw7QUFDQSxRQUFLLFFBQUwsSUFBaUIsa0JBQW1CLEtBQUssUUFBTCxHQUFnQixjQUFqQixJQUFvQyxjQUF0RCxDQUFqQjtBQUNILEdBUnNCOztBQVV2QixTQUFPLGVBQVUsSUFBVixFQUFnQjtBQUNuQjtBQUNBLE9BQUksWUFBWSxLQUFLLEtBQXJCOztBQUVBO0FBQ0EsT0FBSSxJQUFJLEtBQUssUUFBTCxHQUFnQixDQUF4QjtBQUNBLFVBQU8sRUFBRyxVQUFVLE1BQU0sQ0FBaEIsTUFBd0IsS0FBTSxJQUFJLENBQUwsR0FBVSxDQUF4QyxHQUE4QyxJQUFoRCxDQUFQLEVBQThEO0FBQzFEO0FBQ0g7QUFDRCxRQUFLLFFBQUwsR0FBZ0IsSUFBSSxDQUFwQjtBQUNIO0FBcEJzQixFQUEzQjs7QUF3QkEsUUFBTyxTQUFTLEdBQVQsQ0FBYSxXQUFwQjtBQUVBLENBNUNDLENBQUQ7Ozs7Ozs7QUNBRCxDQUFFLFdBQVUsSUFBVixFQUFnQixPQUFoQixFQUF5QixLQUF6QixFQUFnQztBQUNqQyxLQUFJLFFBQU8sT0FBUCx5Q0FBTyxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQ2hDO0FBQ0EsU0FBTyxPQUFQLEdBQWlCLFVBQVUsUUFBUSxRQUFRLFFBQVIsQ0FBUixFQUEyQixRQUFRLFFBQVIsQ0FBM0IsRUFBOEMsUUFBUSxRQUFSLENBQTlDLENBQTNCO0FBQ0EsRUFIRCxNQUlLLElBQUksT0FBTyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU8sR0FBM0MsRUFBZ0Q7QUFDcEQ7QUFDQSxTQUFPLENBQUMsUUFBRCxFQUFXLFFBQVgsRUFBcUIsUUFBckIsQ0FBUCxFQUF1QyxPQUF2QztBQUNBLEVBSEksTUFJQTtBQUNKO0FBQ0EsVUFBUSxLQUFLLFFBQWI7QUFDQTtBQUNELENBYkMsYUFhTSxVQUFVLFFBQVYsRUFBb0I7O0FBRTFCLGNBQVk7QUFDVDtBQUNBLE1BQUksSUFBSSxRQUFSO0FBQ0EsTUFBSSxRQUFRLEVBQUUsR0FBZDtBQUNBLE1BQUksT0FBTyxNQUFNLElBQWpCO0FBQ0EsTUFBSSxZQUFZLE1BQU0sU0FBdEI7QUFDQSxNQUFJLFNBQVMsRUFBRSxJQUFmO0FBQ0EsTUFBSSxPQUFPLE9BQU8sSUFBbEI7QUFDQSxNQUFJLE9BQU8sT0FBTyxJQUFsQjs7QUFFQTs7O0FBR0EsTUFBSSxTQUFTLE9BQU8sTUFBUCxHQUFnQixLQUFLLE1BQUwsQ0FBWTtBQUNyQzs7Ozs7OztBQU9BLFFBQUssS0FBSyxNQUFMLENBQVk7QUFDYixhQUFTLE1BQUksRUFEQTtBQUViLFlBQVEsSUFGSztBQUdiLGdCQUFZO0FBSEMsSUFBWixDQVJnQzs7QUFjckM7Ozs7Ozs7Ozs7O0FBV0EsU0FBTSxjQUFVLEdBQVYsRUFBZTtBQUNqQixTQUFLLEdBQUwsR0FBVyxLQUFLLEdBQUwsQ0FBUyxNQUFULENBQWdCLEdBQWhCLENBQVg7QUFDSCxJQTNCb0M7O0FBNkJyQzs7Ozs7Ozs7Ozs7O0FBWUEsWUFBUyxpQkFBVSxRQUFWLEVBQW9CLElBQXBCLEVBQTBCO0FBQy9CO0FBQ0EsUUFBSSxNQUFNLEtBQUssR0FBZjs7QUFFQTtBQUNBLFFBQUksT0FBTyxLQUFLLE1BQUwsQ0FBWSxJQUFJLE1BQWhCLEVBQXdCLFFBQXhCLENBQVg7O0FBRUE7QUFDQSxRQUFJLGFBQWEsVUFBVSxNQUFWLEVBQWpCO0FBQ0EsUUFBSSxhQUFhLFVBQVUsTUFBVixDQUFpQixDQUFDLFVBQUQsQ0FBakIsQ0FBakI7O0FBRUE7QUFDQSxRQUFJLGtCQUFrQixXQUFXLEtBQWpDO0FBQ0EsUUFBSSxrQkFBa0IsV0FBVyxLQUFqQztBQUNBLFFBQUksVUFBVSxJQUFJLE9BQWxCO0FBQ0EsUUFBSSxhQUFhLElBQUksVUFBckI7O0FBRUE7QUFDQSxXQUFPLGdCQUFnQixNQUFoQixHQUF5QixPQUFoQyxFQUF5QztBQUNyQyxTQUFJLFFBQVEsS0FBSyxNQUFMLENBQVksSUFBWixFQUFrQixRQUFsQixDQUEyQixVQUEzQixDQUFaO0FBQ0EsVUFBSyxLQUFMOztBQUVBO0FBQ0EsU0FBSSxhQUFhLE1BQU0sS0FBdkI7QUFDQSxTQUFJLG1CQUFtQixXQUFXLE1BQWxDOztBQUVBO0FBQ0EsU0FBSSxlQUFlLEtBQW5CO0FBQ0EsVUFBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLFVBQXBCLEVBQWdDLEdBQWhDLEVBQXFDO0FBQ2pDLHFCQUFlLEtBQUssUUFBTCxDQUFjLFlBQWQsQ0FBZjtBQUNBLFdBQUssS0FBTDs7QUFFQTtBQUNBLFVBQUksb0JBQW9CLGFBQWEsS0FBckM7O0FBRUE7QUFDQSxXQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksZ0JBQXBCLEVBQXNDLEdBQXRDLEVBQTJDO0FBQ3ZDLGtCQUFXLENBQVgsS0FBaUIsa0JBQWtCLENBQWxCLENBQWpCO0FBQ0g7QUFDSjs7QUFFRCxnQkFBVyxNQUFYLENBQWtCLEtBQWxCO0FBQ0EscUJBQWdCLENBQWhCO0FBQ0g7QUFDRCxlQUFXLFFBQVgsR0FBc0IsVUFBVSxDQUFoQzs7QUFFQSxXQUFPLFVBQVA7QUFDSDtBQXhGb0MsR0FBWixDQUE3Qjs7QUEyRkE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUJBLElBQUUsTUFBRixHQUFXLFVBQVUsUUFBVixFQUFvQixJQUFwQixFQUEwQixHQUExQixFQUErQjtBQUN0QyxVQUFPLE9BQU8sTUFBUCxDQUFjLEdBQWQsRUFBbUIsT0FBbkIsQ0FBMkIsUUFBM0IsRUFBcUMsSUFBckMsQ0FBUDtBQUNILEdBRkQ7QUFHSCxFQTVIQSxHQUFEOztBQStIQSxRQUFPLFNBQVMsTUFBaEI7QUFFQSxDQWhKQyxDQUFEOzs7Ozs7O0FDQUQsQ0FBRSxXQUFVLElBQVYsRUFBZ0IsT0FBaEIsRUFBeUIsS0FBekIsRUFBZ0M7QUFDakMsS0FBSSxRQUFPLE9BQVAseUNBQU8sT0FBUCxPQUFtQixRQUF2QixFQUFpQztBQUNoQztBQUNBLFNBQU8sT0FBUCxHQUFpQixVQUFVLFFBQVEsUUFBUSxRQUFSLENBQVIsRUFBMkIsUUFBUSxjQUFSLENBQTNCLEVBQW9ELFFBQVEsT0FBUixDQUFwRCxFQUFzRSxRQUFRLFVBQVIsQ0FBdEUsRUFBMkYsUUFBUSxlQUFSLENBQTNGLENBQTNCO0FBQ0EsRUFIRCxNQUlLLElBQUksT0FBTyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU8sR0FBM0MsRUFBZ0Q7QUFDcEQ7QUFDQSxTQUFPLENBQUMsUUFBRCxFQUFXLGNBQVgsRUFBMkIsT0FBM0IsRUFBb0MsVUFBcEMsRUFBZ0QsZUFBaEQsQ0FBUCxFQUF5RSxPQUF6RTtBQUNBLEVBSEksTUFJQTtBQUNKO0FBQ0EsVUFBUSxLQUFLLFFBQWI7QUFDQTtBQUNELENBYkMsYUFhTSxVQUFVLFFBQVYsRUFBb0I7O0FBRTFCLGNBQVk7QUFDVDtBQUNBLE1BQUksSUFBSSxRQUFSO0FBQ0EsTUFBSSxRQUFRLEVBQUUsR0FBZDtBQUNBLE1BQUksZUFBZSxNQUFNLFlBQXpCO0FBQ0EsTUFBSSxTQUFTLEVBQUUsSUFBZjs7QUFFQTtBQUNBLE1BQUksSUFBSyxFQUFUO0FBQ0EsTUFBSSxLQUFLLEVBQVQ7QUFDQSxNQUFJLElBQUssRUFBVDs7QUFFQTs7Ozs7OztBQU9BLE1BQUksZUFBZSxPQUFPLFlBQVAsR0FBc0IsYUFBYSxNQUFiLENBQW9CO0FBQ3pELGFBQVUsb0JBQVk7QUFDbEI7QUFDQSxRQUFJLElBQUksS0FBSyxJQUFMLENBQVUsS0FBbEI7QUFDQSxRQUFJLEtBQUssS0FBSyxHQUFMLENBQVMsRUFBbEI7O0FBRUE7QUFDQSxRQUFJLElBQUksS0FBSyxFQUFMLEdBQVUsQ0FDZCxFQUFFLENBQUYsQ0FEYyxFQUNQLEVBQUUsQ0FBRixLQUFRLEVBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFEakIsRUFFZCxFQUFFLENBQUYsQ0FGYyxFQUVQLEVBQUUsQ0FBRixLQUFRLEVBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFGakIsRUFHZCxFQUFFLENBQUYsQ0FIYyxFQUdQLEVBQUUsQ0FBRixLQUFRLEVBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFIakIsRUFJZCxFQUFFLENBQUYsQ0FKYyxFQUlQLEVBQUUsQ0FBRixLQUFRLEVBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFKakIsQ0FBbEI7O0FBT0E7QUFDQSxRQUFJLElBQUksS0FBSyxFQUFMLEdBQVUsQ0FDYixFQUFFLENBQUYsS0FBUSxFQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBRFgsRUFDaUIsRUFBRSxDQUFGLElBQU8sVUFBUixHQUF1QixFQUFFLENBQUYsSUFBTyxVQUQ5QyxFQUViLEVBQUUsQ0FBRixLQUFRLEVBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFGWCxFQUVpQixFQUFFLENBQUYsSUFBTyxVQUFSLEdBQXVCLEVBQUUsQ0FBRixJQUFPLFVBRjlDLEVBR2IsRUFBRSxDQUFGLEtBQVEsRUFBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxFQUhYLEVBR2lCLEVBQUUsQ0FBRixJQUFPLFVBQVIsR0FBdUIsRUFBRSxDQUFGLElBQU8sVUFIOUMsRUFJYixFQUFFLENBQUYsS0FBUSxFQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBSlgsRUFJaUIsRUFBRSxDQUFGLElBQU8sVUFBUixHQUF1QixFQUFFLENBQUYsSUFBTyxVQUo5QyxDQUFsQjs7QUFPQTtBQUNBLFNBQUssRUFBTCxHQUFVLENBQVY7O0FBRUE7QUFDQSxTQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksQ0FBcEIsRUFBdUIsR0FBdkIsRUFBNEI7QUFDeEIsZUFBVSxJQUFWLENBQWUsSUFBZjtBQUNIOztBQUVEO0FBQ0EsU0FBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLENBQXBCLEVBQXVCLEdBQXZCLEVBQTRCO0FBQ3hCLE9BQUUsQ0FBRixLQUFRLEVBQUcsSUFBSSxDQUFMLEdBQVUsQ0FBWixDQUFSO0FBQ0g7O0FBRUQ7QUFDQSxRQUFJLEVBQUosRUFBUTtBQUNKO0FBQ0EsU0FBSSxLQUFLLEdBQUcsS0FBWjtBQUNBLFNBQUksT0FBTyxHQUFHLENBQUgsQ0FBWDtBQUNBLFNBQUksT0FBTyxHQUFHLENBQUgsQ0FBWDs7QUFFQTtBQUNBLFNBQUksS0FBTSxDQUFFLFFBQVEsQ0FBVCxHQUFlLFNBQVMsRUFBekIsSUFBZ0MsVUFBakMsR0FBZ0QsQ0FBRSxRQUFRLEVBQVQsR0FBZ0IsU0FBUyxDQUExQixJQUFnQyxVQUF6RjtBQUNBLFNBQUksS0FBTSxDQUFFLFFBQVEsQ0FBVCxHQUFlLFNBQVMsRUFBekIsSUFBZ0MsVUFBakMsR0FBZ0QsQ0FBRSxRQUFRLEVBQVQsR0FBZ0IsU0FBUyxDQUExQixJQUFnQyxVQUF6RjtBQUNBLFNBQUksS0FBTSxPQUFPLEVBQVIsR0FBZSxLQUFLLFVBQTdCO0FBQ0EsU0FBSSxLQUFNLE1BQU0sRUFBUCxHQUFlLEtBQUssVUFBN0I7O0FBRUE7QUFDQSxPQUFFLENBQUYsS0FBUSxFQUFSO0FBQ0EsT0FBRSxDQUFGLEtBQVEsRUFBUjtBQUNBLE9BQUUsQ0FBRixLQUFRLEVBQVI7QUFDQSxPQUFFLENBQUYsS0FBUSxFQUFSO0FBQ0EsT0FBRSxDQUFGLEtBQVEsRUFBUjtBQUNBLE9BQUUsQ0FBRixLQUFRLEVBQVI7QUFDQSxPQUFFLENBQUYsS0FBUSxFQUFSO0FBQ0EsT0FBRSxDQUFGLEtBQVEsRUFBUjs7QUFFQTtBQUNBLFVBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxDQUFwQixFQUF1QixHQUF2QixFQUE0QjtBQUN4QixnQkFBVSxJQUFWLENBQWUsSUFBZjtBQUNIO0FBQ0o7QUFDSixJQS9Ed0Q7O0FBaUV6RCxvQkFBaUIseUJBQVUsQ0FBVixFQUFhLE1BQWIsRUFBcUI7QUFDbEM7QUFDQSxRQUFJLElBQUksS0FBSyxFQUFiOztBQUVBO0FBQ0EsY0FBVSxJQUFWLENBQWUsSUFBZjs7QUFFQTtBQUNBLE1BQUUsQ0FBRixJQUFPLEVBQUUsQ0FBRixJQUFRLEVBQUUsQ0FBRixNQUFTLEVBQWpCLEdBQXdCLEVBQUUsQ0FBRixLQUFRLEVBQXZDO0FBQ0EsTUFBRSxDQUFGLElBQU8sRUFBRSxDQUFGLElBQVEsRUFBRSxDQUFGLE1BQVMsRUFBakIsR0FBd0IsRUFBRSxDQUFGLEtBQVEsRUFBdkM7QUFDQSxNQUFFLENBQUYsSUFBTyxFQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsTUFBUyxFQUFqQixHQUF3QixFQUFFLENBQUYsS0FBUSxFQUF2QztBQUNBLE1BQUUsQ0FBRixJQUFPLEVBQUUsQ0FBRixJQUFRLEVBQUUsQ0FBRixNQUFTLEVBQWpCLEdBQXdCLEVBQUUsQ0FBRixLQUFRLEVBQXZDOztBQUVBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxDQUFwQixFQUF1QixHQUF2QixFQUE0QjtBQUN4QjtBQUNBLE9BQUUsQ0FBRixJQUFRLENBQUUsRUFBRSxDQUFGLEtBQVEsQ0FBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxFQUExQixJQUFpQyxVQUFsQyxHQUNDLENBQUUsRUFBRSxDQUFGLEtBQVEsRUFBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxDQUExQixJQUFpQyxVQUR6Qzs7QUFHQTtBQUNBLE9BQUUsU0FBUyxDQUFYLEtBQWlCLEVBQUUsQ0FBRixDQUFqQjtBQUNIO0FBQ0osSUF0RndEOztBQXdGekQsY0FBVyxNQUFJLEVBeEYwQzs7QUEwRnpELFdBQVEsS0FBRztBQTFGOEMsR0FBcEIsQ0FBekM7O0FBNkZBLFdBQVMsU0FBVCxHQUFxQjtBQUNqQjtBQUNBLE9BQUksSUFBSSxLQUFLLEVBQWI7QUFDQSxPQUFJLElBQUksS0FBSyxFQUFiOztBQUVBO0FBQ0EsUUFBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLENBQXBCLEVBQXVCLEdBQXZCLEVBQTRCO0FBQ3hCLE9BQUcsQ0FBSCxJQUFRLEVBQUUsQ0FBRixDQUFSO0FBQ0g7O0FBRUQ7QUFDQSxLQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxVQUFQLEdBQW9CLEtBQUssRUFBMUIsR0FBZ0MsQ0FBdkM7QUFDQSxLQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxVQUFQLElBQXNCLEVBQUUsQ0FBRixNQUFTLENBQVYsR0FBZ0IsR0FBRyxDQUFILE1BQVUsQ0FBMUIsR0FBK0IsQ0FBL0IsR0FBbUMsQ0FBeEQsQ0FBRCxHQUErRCxDQUF0RTtBQUNBLEtBQUUsQ0FBRixJQUFRLEVBQUUsQ0FBRixJQUFPLFVBQVAsSUFBc0IsRUFBRSxDQUFGLE1BQVMsQ0FBVixHQUFnQixHQUFHLENBQUgsTUFBVSxDQUExQixHQUErQixDQUEvQixHQUFtQyxDQUF4RCxDQUFELEdBQStELENBQXRFO0FBQ0EsS0FBRSxDQUFGLElBQVEsRUFBRSxDQUFGLElBQU8sVUFBUCxJQUFzQixFQUFFLENBQUYsTUFBUyxDQUFWLEdBQWdCLEdBQUcsQ0FBSCxNQUFVLENBQTFCLEdBQStCLENBQS9CLEdBQW1DLENBQXhELENBQUQsR0FBK0QsQ0FBdEU7QUFDQSxLQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxVQUFQLElBQXNCLEVBQUUsQ0FBRixNQUFTLENBQVYsR0FBZ0IsR0FBRyxDQUFILE1BQVUsQ0FBMUIsR0FBK0IsQ0FBL0IsR0FBbUMsQ0FBeEQsQ0FBRCxHQUErRCxDQUF0RTtBQUNBLEtBQUUsQ0FBRixJQUFRLEVBQUUsQ0FBRixJQUFPLFVBQVAsSUFBc0IsRUFBRSxDQUFGLE1BQVMsQ0FBVixHQUFnQixHQUFHLENBQUgsTUFBVSxDQUExQixHQUErQixDQUEvQixHQUFtQyxDQUF4RCxDQUFELEdBQStELENBQXRFO0FBQ0EsS0FBRSxDQUFGLElBQVEsRUFBRSxDQUFGLElBQU8sVUFBUCxJQUFzQixFQUFFLENBQUYsTUFBUyxDQUFWLEdBQWdCLEdBQUcsQ0FBSCxNQUFVLENBQTFCLEdBQStCLENBQS9CLEdBQW1DLENBQXhELENBQUQsR0FBK0QsQ0FBdEU7QUFDQSxLQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxVQUFQLElBQXNCLEVBQUUsQ0FBRixNQUFTLENBQVYsR0FBZ0IsR0FBRyxDQUFILE1BQVUsQ0FBMUIsR0FBK0IsQ0FBL0IsR0FBbUMsQ0FBeEQsQ0FBRCxHQUErRCxDQUF0RTtBQUNBLFFBQUssRUFBTCxHQUFXLEVBQUUsQ0FBRixNQUFTLENBQVYsR0FBZ0IsR0FBRyxDQUFILE1BQVUsQ0FBMUIsR0FBK0IsQ0FBL0IsR0FBbUMsQ0FBN0M7O0FBRUE7QUFDQSxRQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksQ0FBcEIsRUFBdUIsR0FBdkIsRUFBNEI7QUFDeEIsUUFBSSxLQUFLLEVBQUUsQ0FBRixJQUFPLEVBQUUsQ0FBRixDQUFoQjs7QUFFQTtBQUNBLFFBQUksS0FBSyxLQUFLLE1BQWQ7QUFDQSxRQUFJLEtBQUssT0FBTyxFQUFoQjs7QUFFQTtBQUNBLFFBQUksS0FBSyxDQUFFLENBQUUsS0FBSyxFQUFOLEtBQWMsRUFBZixJQUFxQixLQUFLLEVBQTNCLEtBQW1DLEVBQXBDLElBQTBDLEtBQUssRUFBeEQ7QUFDQSxRQUFJLEtBQUssQ0FBRSxDQUFDLEtBQUssVUFBTixJQUFvQixFQUFyQixHQUEyQixDQUE1QixLQUFtQyxDQUFDLEtBQUssVUFBTixJQUFvQixFQUFyQixHQUEyQixDQUE3RCxDQUFUOztBQUVBO0FBQ0EsTUFBRSxDQUFGLElBQU8sS0FBSyxFQUFaO0FBQ0g7O0FBRUQ7QUFDQSxLQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsS0FBUyxFQUFFLENBQUYsS0FBUSxFQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBQWpDLEtBQTBDLEVBQUUsQ0FBRixLQUFRLEVBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFBbEUsQ0FBRCxHQUEyRSxDQUFsRjtBQUNBLEtBQUUsQ0FBRixJQUFRLEVBQUUsQ0FBRixLQUFTLEVBQUUsQ0FBRixLQUFRLENBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFBakMsSUFBd0MsRUFBRSxDQUFGLENBQXpDLEdBQWlELENBQXhEO0FBQ0EsS0FBRSxDQUFGLElBQVEsRUFBRSxDQUFGLEtBQVMsRUFBRSxDQUFGLEtBQVEsRUFBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxFQUFqQyxLQUEwQyxFQUFFLENBQUYsS0FBUSxFQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBQWxFLENBQUQsR0FBMkUsQ0FBbEY7QUFDQSxLQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsS0FBUyxFQUFFLENBQUYsS0FBUSxDQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBQWpDLElBQXdDLEVBQUUsQ0FBRixDQUF6QyxHQUFpRCxDQUF4RDtBQUNBLEtBQUUsQ0FBRixJQUFRLEVBQUUsQ0FBRixLQUFTLEVBQUUsQ0FBRixLQUFRLEVBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFBakMsS0FBMEMsRUFBRSxDQUFGLEtBQVEsRUFBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxFQUFsRSxDQUFELEdBQTJFLENBQWxGO0FBQ0EsS0FBRSxDQUFGLElBQVEsRUFBRSxDQUFGLEtBQVMsRUFBRSxDQUFGLEtBQVEsQ0FBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxFQUFqQyxJQUF3QyxFQUFFLENBQUYsQ0FBekMsR0FBaUQsQ0FBeEQ7QUFDQSxLQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsS0FBUyxFQUFFLENBQUYsS0FBUSxFQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBQWpDLEtBQTBDLEVBQUUsQ0FBRixLQUFRLEVBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFBbEUsQ0FBRCxHQUEyRSxDQUFsRjtBQUNBLEtBQUUsQ0FBRixJQUFRLEVBQUUsQ0FBRixLQUFTLEVBQUUsQ0FBRixLQUFRLENBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFBakMsSUFBd0MsRUFBRSxDQUFGLENBQXpDLEdBQWlELENBQXhEO0FBQ0g7O0FBRUQ7Ozs7Ozs7O0FBUUEsSUFBRSxZQUFGLEdBQWlCLGFBQWEsYUFBYixDQUEyQixZQUEzQixDQUFqQjtBQUNILEVBektBLEdBQUQ7O0FBNEtBLFFBQU8sU0FBUyxZQUFoQjtBQUVBLENBN0xDLENBQUQ7Ozs7Ozs7QUNBRCxDQUFFLFdBQVUsSUFBVixFQUFnQixPQUFoQixFQUF5QixLQUF6QixFQUFnQztBQUNqQyxLQUFJLFFBQU8sT0FBUCx5Q0FBTyxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQ2hDO0FBQ0EsU0FBTyxPQUFQLEdBQWlCLFVBQVUsUUFBUSxRQUFRLFFBQVIsQ0FBUixFQUEyQixRQUFRLGNBQVIsQ0FBM0IsRUFBb0QsUUFBUSxPQUFSLENBQXBELEVBQXNFLFFBQVEsVUFBUixDQUF0RSxFQUEyRixRQUFRLGVBQVIsQ0FBM0YsQ0FBM0I7QUFDQSxFQUhELE1BSUssSUFBSSxPQUFPLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0MsT0FBTyxHQUEzQyxFQUFnRDtBQUNwRDtBQUNBLFNBQU8sQ0FBQyxRQUFELEVBQVcsY0FBWCxFQUEyQixPQUEzQixFQUFvQyxVQUFwQyxFQUFnRCxlQUFoRCxDQUFQLEVBQXlFLE9BQXpFO0FBQ0EsRUFISSxNQUlBO0FBQ0o7QUFDQSxVQUFRLEtBQUssUUFBYjtBQUNBO0FBQ0QsQ0FiQyxhQWFNLFVBQVUsUUFBVixFQUFvQjs7QUFFMUIsY0FBWTtBQUNUO0FBQ0EsTUFBSSxJQUFJLFFBQVI7QUFDQSxNQUFJLFFBQVEsRUFBRSxHQUFkO0FBQ0EsTUFBSSxlQUFlLE1BQU0sWUFBekI7QUFDQSxNQUFJLFNBQVMsRUFBRSxJQUFmOztBQUVBO0FBQ0EsTUFBSSxJQUFLLEVBQVQ7QUFDQSxNQUFJLEtBQUssRUFBVDtBQUNBLE1BQUksSUFBSyxFQUFUOztBQUVBOzs7QUFHQSxNQUFJLFNBQVMsT0FBTyxNQUFQLEdBQWdCLGFBQWEsTUFBYixDQUFvQjtBQUM3QyxhQUFVLG9CQUFZO0FBQ2xCO0FBQ0EsUUFBSSxJQUFJLEtBQUssSUFBTCxDQUFVLEtBQWxCO0FBQ0EsUUFBSSxLQUFLLEtBQUssR0FBTCxDQUFTLEVBQWxCOztBQUVBO0FBQ0EsU0FBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLENBQXBCLEVBQXVCLEdBQXZCLEVBQTRCO0FBQ3hCLE9BQUUsQ0FBRixJQUFRLENBQUUsRUFBRSxDQUFGLEtBQVEsQ0FBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxFQUExQixJQUFpQyxVQUFsQyxHQUNDLENBQUUsRUFBRSxDQUFGLEtBQVEsRUFBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxDQUExQixJQUFpQyxVQUR6QztBQUVIOztBQUVEO0FBQ0EsUUFBSSxJQUFJLEtBQUssRUFBTCxHQUFVLENBQ2QsRUFBRSxDQUFGLENBRGMsRUFDUCxFQUFFLENBQUYsS0FBUSxFQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBRGpCLEVBRWQsRUFBRSxDQUFGLENBRmMsRUFFUCxFQUFFLENBQUYsS0FBUSxFQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBRmpCLEVBR2QsRUFBRSxDQUFGLENBSGMsRUFHUCxFQUFFLENBQUYsS0FBUSxFQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBSGpCLEVBSWQsRUFBRSxDQUFGLENBSmMsRUFJUCxFQUFFLENBQUYsS0FBUSxFQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBSmpCLENBQWxCOztBQU9BO0FBQ0EsUUFBSSxJQUFJLEtBQUssRUFBTCxHQUFVLENBQ2IsRUFBRSxDQUFGLEtBQVEsRUFBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxFQURYLEVBQ2lCLEVBQUUsQ0FBRixJQUFPLFVBQVIsR0FBdUIsRUFBRSxDQUFGLElBQU8sVUFEOUMsRUFFYixFQUFFLENBQUYsS0FBUSxFQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBRlgsRUFFaUIsRUFBRSxDQUFGLElBQU8sVUFBUixHQUF1QixFQUFFLENBQUYsSUFBTyxVQUY5QyxFQUdiLEVBQUUsQ0FBRixLQUFRLEVBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFIWCxFQUdpQixFQUFFLENBQUYsSUFBTyxVQUFSLEdBQXVCLEVBQUUsQ0FBRixJQUFPLFVBSDlDLEVBSWIsRUFBRSxDQUFGLEtBQVEsRUFBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxFQUpYLEVBSWlCLEVBQUUsQ0FBRixJQUFPLFVBQVIsR0FBdUIsRUFBRSxDQUFGLElBQU8sVUFKOUMsQ0FBbEI7O0FBT0E7QUFDQSxTQUFLLEVBQUwsR0FBVSxDQUFWOztBQUVBO0FBQ0EsU0FBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLENBQXBCLEVBQXVCLEdBQXZCLEVBQTRCO0FBQ3hCLGVBQVUsSUFBVixDQUFlLElBQWY7QUFDSDs7QUFFRDtBQUNBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxDQUFwQixFQUF1QixHQUF2QixFQUE0QjtBQUN4QixPQUFFLENBQUYsS0FBUSxFQUFHLElBQUksQ0FBTCxHQUFVLENBQVosQ0FBUjtBQUNIOztBQUVEO0FBQ0EsUUFBSSxFQUFKLEVBQVE7QUFDSjtBQUNBLFNBQUksS0FBSyxHQUFHLEtBQVo7QUFDQSxTQUFJLE9BQU8sR0FBRyxDQUFILENBQVg7QUFDQSxTQUFJLE9BQU8sR0FBRyxDQUFILENBQVg7O0FBRUE7QUFDQSxTQUFJLEtBQU0sQ0FBRSxRQUFRLENBQVQsR0FBZSxTQUFTLEVBQXpCLElBQWdDLFVBQWpDLEdBQWdELENBQUUsUUFBUSxFQUFULEdBQWdCLFNBQVMsQ0FBMUIsSUFBZ0MsVUFBekY7QUFDQSxTQUFJLEtBQU0sQ0FBRSxRQUFRLENBQVQsR0FBZSxTQUFTLEVBQXpCLElBQWdDLFVBQWpDLEdBQWdELENBQUUsUUFBUSxFQUFULEdBQWdCLFNBQVMsQ0FBMUIsSUFBZ0MsVUFBekY7QUFDQSxTQUFJLEtBQU0sT0FBTyxFQUFSLEdBQWUsS0FBSyxVQUE3QjtBQUNBLFNBQUksS0FBTSxNQUFNLEVBQVAsR0FBZSxLQUFLLFVBQTdCOztBQUVBO0FBQ0EsT0FBRSxDQUFGLEtBQVEsRUFBUjtBQUNBLE9BQUUsQ0FBRixLQUFRLEVBQVI7QUFDQSxPQUFFLENBQUYsS0FBUSxFQUFSO0FBQ0EsT0FBRSxDQUFGLEtBQVEsRUFBUjtBQUNBLE9BQUUsQ0FBRixLQUFRLEVBQVI7QUFDQSxPQUFFLENBQUYsS0FBUSxFQUFSO0FBQ0EsT0FBRSxDQUFGLEtBQVEsRUFBUjtBQUNBLE9BQUUsQ0FBRixLQUFRLEVBQVI7O0FBRUE7QUFDQSxVQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksQ0FBcEIsRUFBdUIsR0FBdkIsRUFBNEI7QUFDeEIsZ0JBQVUsSUFBVixDQUFlLElBQWY7QUFDSDtBQUNKO0FBQ0osSUFyRTRDOztBQXVFN0Msb0JBQWlCLHlCQUFVLENBQVYsRUFBYSxNQUFiLEVBQXFCO0FBQ2xDO0FBQ0EsUUFBSSxJQUFJLEtBQUssRUFBYjs7QUFFQTtBQUNBLGNBQVUsSUFBVixDQUFlLElBQWY7O0FBRUE7QUFDQSxNQUFFLENBQUYsSUFBTyxFQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsTUFBUyxFQUFqQixHQUF3QixFQUFFLENBQUYsS0FBUSxFQUF2QztBQUNBLE1BQUUsQ0FBRixJQUFPLEVBQUUsQ0FBRixJQUFRLEVBQUUsQ0FBRixNQUFTLEVBQWpCLEdBQXdCLEVBQUUsQ0FBRixLQUFRLEVBQXZDO0FBQ0EsTUFBRSxDQUFGLElBQU8sRUFBRSxDQUFGLElBQVEsRUFBRSxDQUFGLE1BQVMsRUFBakIsR0FBd0IsRUFBRSxDQUFGLEtBQVEsRUFBdkM7QUFDQSxNQUFFLENBQUYsSUFBTyxFQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsTUFBUyxFQUFqQixHQUF3QixFQUFFLENBQUYsS0FBUSxFQUF2Qzs7QUFFQSxTQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksQ0FBcEIsRUFBdUIsR0FBdkIsRUFBNEI7QUFDeEI7QUFDQSxPQUFFLENBQUYsSUFBUSxDQUFFLEVBQUUsQ0FBRixLQUFRLENBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFBMUIsSUFBaUMsVUFBbEMsR0FDQyxDQUFFLEVBQUUsQ0FBRixLQUFRLEVBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsQ0FBMUIsSUFBaUMsVUFEekM7O0FBR0E7QUFDQSxPQUFFLFNBQVMsQ0FBWCxLQUFpQixFQUFFLENBQUYsQ0FBakI7QUFDSDtBQUNKLElBNUY0Qzs7QUE4RjdDLGNBQVcsTUFBSSxFQTlGOEI7O0FBZ0c3QyxXQUFRLEtBQUc7QUFoR2tDLEdBQXBCLENBQTdCOztBQW1HQSxXQUFTLFNBQVQsR0FBcUI7QUFDakI7QUFDQSxPQUFJLElBQUksS0FBSyxFQUFiO0FBQ0EsT0FBSSxJQUFJLEtBQUssRUFBYjs7QUFFQTtBQUNBLFFBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxDQUFwQixFQUF1QixHQUF2QixFQUE0QjtBQUN4QixPQUFHLENBQUgsSUFBUSxFQUFFLENBQUYsQ0FBUjtBQUNIOztBQUVEO0FBQ0EsS0FBRSxDQUFGLElBQVEsRUFBRSxDQUFGLElBQU8sVUFBUCxHQUFvQixLQUFLLEVBQTFCLEdBQWdDLENBQXZDO0FBQ0EsS0FBRSxDQUFGLElBQVEsRUFBRSxDQUFGLElBQU8sVUFBUCxJQUFzQixFQUFFLENBQUYsTUFBUyxDQUFWLEdBQWdCLEdBQUcsQ0FBSCxNQUFVLENBQTFCLEdBQStCLENBQS9CLEdBQW1DLENBQXhELENBQUQsR0FBK0QsQ0FBdEU7QUFDQSxLQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxVQUFQLElBQXNCLEVBQUUsQ0FBRixNQUFTLENBQVYsR0FBZ0IsR0FBRyxDQUFILE1BQVUsQ0FBMUIsR0FBK0IsQ0FBL0IsR0FBbUMsQ0FBeEQsQ0FBRCxHQUErRCxDQUF0RTtBQUNBLEtBQUUsQ0FBRixJQUFRLEVBQUUsQ0FBRixJQUFPLFVBQVAsSUFBc0IsRUFBRSxDQUFGLE1BQVMsQ0FBVixHQUFnQixHQUFHLENBQUgsTUFBVSxDQUExQixHQUErQixDQUEvQixHQUFtQyxDQUF4RCxDQUFELEdBQStELENBQXRFO0FBQ0EsS0FBRSxDQUFGLElBQVEsRUFBRSxDQUFGLElBQU8sVUFBUCxJQUFzQixFQUFFLENBQUYsTUFBUyxDQUFWLEdBQWdCLEdBQUcsQ0FBSCxNQUFVLENBQTFCLEdBQStCLENBQS9CLEdBQW1DLENBQXhELENBQUQsR0FBK0QsQ0FBdEU7QUFDQSxLQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxVQUFQLElBQXNCLEVBQUUsQ0FBRixNQUFTLENBQVYsR0FBZ0IsR0FBRyxDQUFILE1BQVUsQ0FBMUIsR0FBK0IsQ0FBL0IsR0FBbUMsQ0FBeEQsQ0FBRCxHQUErRCxDQUF0RTtBQUNBLEtBQUUsQ0FBRixJQUFRLEVBQUUsQ0FBRixJQUFPLFVBQVAsSUFBc0IsRUFBRSxDQUFGLE1BQVMsQ0FBVixHQUFnQixHQUFHLENBQUgsTUFBVSxDQUExQixHQUErQixDQUEvQixHQUFtQyxDQUF4RCxDQUFELEdBQStELENBQXRFO0FBQ0EsS0FBRSxDQUFGLElBQVEsRUFBRSxDQUFGLElBQU8sVUFBUCxJQUFzQixFQUFFLENBQUYsTUFBUyxDQUFWLEdBQWdCLEdBQUcsQ0FBSCxNQUFVLENBQTFCLEdBQStCLENBQS9CLEdBQW1DLENBQXhELENBQUQsR0FBK0QsQ0FBdEU7QUFDQSxRQUFLLEVBQUwsR0FBVyxFQUFFLENBQUYsTUFBUyxDQUFWLEdBQWdCLEdBQUcsQ0FBSCxNQUFVLENBQTFCLEdBQStCLENBQS9CLEdBQW1DLENBQTdDOztBQUVBO0FBQ0EsUUFBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLENBQXBCLEVBQXVCLEdBQXZCLEVBQTRCO0FBQ3hCLFFBQUksS0FBSyxFQUFFLENBQUYsSUFBTyxFQUFFLENBQUYsQ0FBaEI7O0FBRUE7QUFDQSxRQUFJLEtBQUssS0FBSyxNQUFkO0FBQ0EsUUFBSSxLQUFLLE9BQU8sRUFBaEI7O0FBRUE7QUFDQSxRQUFJLEtBQUssQ0FBRSxDQUFFLEtBQUssRUFBTixLQUFjLEVBQWYsSUFBcUIsS0FBSyxFQUEzQixLQUFtQyxFQUFwQyxJQUEwQyxLQUFLLEVBQXhEO0FBQ0EsUUFBSSxLQUFLLENBQUUsQ0FBQyxLQUFLLFVBQU4sSUFBb0IsRUFBckIsR0FBMkIsQ0FBNUIsS0FBbUMsQ0FBQyxLQUFLLFVBQU4sSUFBb0IsRUFBckIsR0FBMkIsQ0FBN0QsQ0FBVDs7QUFFQTtBQUNBLE1BQUUsQ0FBRixJQUFPLEtBQUssRUFBWjtBQUNIOztBQUVEO0FBQ0EsS0FBRSxDQUFGLElBQVEsRUFBRSxDQUFGLEtBQVMsRUFBRSxDQUFGLEtBQVEsRUFBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxFQUFqQyxLQUEwQyxFQUFFLENBQUYsS0FBUSxFQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBQWxFLENBQUQsR0FBMkUsQ0FBbEY7QUFDQSxLQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsS0FBUyxFQUFFLENBQUYsS0FBUSxDQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBQWpDLElBQXdDLEVBQUUsQ0FBRixDQUF6QyxHQUFpRCxDQUF4RDtBQUNBLEtBQUUsQ0FBRixJQUFRLEVBQUUsQ0FBRixLQUFTLEVBQUUsQ0FBRixLQUFRLEVBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFBakMsS0FBMEMsRUFBRSxDQUFGLEtBQVEsRUFBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxFQUFsRSxDQUFELEdBQTJFLENBQWxGO0FBQ0EsS0FBRSxDQUFGLElBQVEsRUFBRSxDQUFGLEtBQVMsRUFBRSxDQUFGLEtBQVEsQ0FBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxFQUFqQyxJQUF3QyxFQUFFLENBQUYsQ0FBekMsR0FBaUQsQ0FBeEQ7QUFDQSxLQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsS0FBUyxFQUFFLENBQUYsS0FBUSxFQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBQWpDLEtBQTBDLEVBQUUsQ0FBRixLQUFRLEVBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFBbEUsQ0FBRCxHQUEyRSxDQUFsRjtBQUNBLEtBQUUsQ0FBRixJQUFRLEVBQUUsQ0FBRixLQUFTLEVBQUUsQ0FBRixLQUFRLENBQVQsR0FBZ0IsRUFBRSxDQUFGLE1BQVMsRUFBakMsSUFBd0MsRUFBRSxDQUFGLENBQXpDLEdBQWlELENBQXhEO0FBQ0EsS0FBRSxDQUFGLElBQVEsRUFBRSxDQUFGLEtBQVMsRUFBRSxDQUFGLEtBQVEsRUFBVCxHQUFnQixFQUFFLENBQUYsTUFBUyxFQUFqQyxLQUEwQyxFQUFFLENBQUYsS0FBUSxFQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBQWxFLENBQUQsR0FBMkUsQ0FBbEY7QUFDQSxLQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsS0FBUyxFQUFFLENBQUYsS0FBUSxDQUFULEdBQWdCLEVBQUUsQ0FBRixNQUFTLEVBQWpDLElBQXdDLEVBQUUsQ0FBRixDQUF6QyxHQUFpRCxDQUF4RDtBQUNIOztBQUVEOzs7Ozs7OztBQVFBLElBQUUsTUFBRixHQUFXLGFBQWEsYUFBYixDQUEyQixNQUEzQixDQUFYO0FBQ0gsRUEzS0EsR0FBRDs7QUE4S0EsUUFBTyxTQUFTLE1BQWhCO0FBRUEsQ0EvTEMsQ0FBRDs7Ozs7OztBQ0FELENBQUUsV0FBVSxJQUFWLEVBQWdCLE9BQWhCLEVBQXlCLEtBQXpCLEVBQWdDO0FBQ2pDLEtBQUksUUFBTyxPQUFQLHlDQUFPLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDaEM7QUFDQSxTQUFPLE9BQVAsR0FBaUIsVUFBVSxRQUFRLFFBQVEsUUFBUixDQUFSLEVBQTJCLFFBQVEsY0FBUixDQUEzQixFQUFvRCxRQUFRLE9BQVIsQ0FBcEQsRUFBc0UsUUFBUSxVQUFSLENBQXRFLEVBQTJGLFFBQVEsZUFBUixDQUEzRixDQUEzQjtBQUNBLEVBSEQsTUFJSyxJQUFJLE9BQU8sTUFBUCxLQUFrQixVQUFsQixJQUFnQyxPQUFPLEdBQTNDLEVBQWdEO0FBQ3BEO0FBQ0EsU0FBTyxDQUFDLFFBQUQsRUFBVyxjQUFYLEVBQTJCLE9BQTNCLEVBQW9DLFVBQXBDLEVBQWdELGVBQWhELENBQVAsRUFBeUUsT0FBekU7QUFDQSxFQUhJLE1BSUE7QUFDSjtBQUNBLFVBQVEsS0FBSyxRQUFiO0FBQ0E7QUFDRCxDQWJDLGFBYU0sVUFBVSxRQUFWLEVBQW9COztBQUUxQixjQUFZO0FBQ1Q7QUFDQSxNQUFJLElBQUksUUFBUjtBQUNBLE1BQUksUUFBUSxFQUFFLEdBQWQ7QUFDQSxNQUFJLGVBQWUsTUFBTSxZQUF6QjtBQUNBLE1BQUksU0FBUyxFQUFFLElBQWY7O0FBRUE7OztBQUdBLE1BQUksTUFBTSxPQUFPLEdBQVAsR0FBYSxhQUFhLE1BQWIsQ0FBb0I7QUFDdkMsYUFBVSxvQkFBWTtBQUNsQjtBQUNBLFFBQUksTUFBTSxLQUFLLElBQWY7QUFDQSxRQUFJLFdBQVcsSUFBSSxLQUFuQjtBQUNBLFFBQUksY0FBYyxJQUFJLFFBQXRCOztBQUVBO0FBQ0EsUUFBSSxJQUFJLEtBQUssRUFBTCxHQUFVLEVBQWxCO0FBQ0EsU0FBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLEdBQXBCLEVBQXlCLEdBQXpCLEVBQThCO0FBQzFCLE9BQUUsQ0FBRixJQUFPLENBQVA7QUFDSDs7QUFFRDtBQUNBLFNBQUssSUFBSSxJQUFJLENBQVIsRUFBVyxJQUFJLENBQXBCLEVBQXVCLElBQUksR0FBM0IsRUFBZ0MsR0FBaEMsRUFBcUM7QUFDakMsU0FBSSxlQUFlLElBQUksV0FBdkI7QUFDQSxTQUFJLFVBQVcsU0FBUyxpQkFBaUIsQ0FBMUIsTUFBa0MsS0FBTSxlQUFlLENBQWhCLEdBQXFCLENBQTdELEdBQW1FLElBQWpGOztBQUVBLFNBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBRixDQUFKLEdBQVcsT0FBWixJQUF1QixHQUEzQjs7QUFFQTtBQUNBLFNBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjtBQUNBLE9BQUUsQ0FBRixJQUFPLEVBQUUsQ0FBRixDQUFQO0FBQ0EsT0FBRSxDQUFGLElBQU8sQ0FBUDtBQUNIOztBQUVEO0FBQ0EsU0FBSyxFQUFMLEdBQVUsS0FBSyxFQUFMLEdBQVUsQ0FBcEI7QUFDSCxJQTVCc0M7O0FBOEJ2QyxvQkFBaUIseUJBQVUsQ0FBVixFQUFhLE1BQWIsRUFBcUI7QUFDbEMsTUFBRSxNQUFGLEtBQWEsc0JBQXNCLElBQXRCLENBQTJCLElBQTNCLENBQWI7QUFDSCxJQWhDc0M7O0FBa0N2QyxZQUFTLE1BQUksRUFsQzBCOztBQW9DdkMsV0FBUTtBQXBDK0IsR0FBcEIsQ0FBdkI7O0FBdUNBLFdBQVMscUJBQVQsR0FBaUM7QUFDN0I7QUFDQSxPQUFJLElBQUksS0FBSyxFQUFiO0FBQ0EsT0FBSSxJQUFJLEtBQUssRUFBYjtBQUNBLE9BQUksSUFBSSxLQUFLLEVBQWI7O0FBRUE7QUFDQSxPQUFJLGdCQUFnQixDQUFwQjtBQUNBLFFBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxDQUFwQixFQUF1QixHQUF2QixFQUE0QjtBQUN4QixRQUFJLENBQUMsSUFBSSxDQUFMLElBQVUsR0FBZDtBQUNBLFFBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBRixDQUFMLElBQWEsR0FBakI7O0FBRUE7QUFDQSxRQUFJLElBQUksRUFBRSxDQUFGLENBQVI7QUFDQSxNQUFFLENBQUYsSUFBTyxFQUFFLENBQUYsQ0FBUDtBQUNBLE1BQUUsQ0FBRixJQUFPLENBQVA7O0FBRUEscUJBQWlCLEVBQUUsQ0FBQyxFQUFFLENBQUYsSUFBTyxFQUFFLENBQUYsQ0FBUixJQUFnQixHQUFsQixLQUEyQixLQUFLLElBQUksQ0FBckQ7QUFDSDs7QUFFRDtBQUNBLFFBQUssRUFBTCxHQUFVLENBQVY7QUFDQSxRQUFLLEVBQUwsR0FBVSxDQUFWOztBQUVBLFVBQU8sYUFBUDtBQUNIOztBQUVEOzs7Ozs7OztBQVFBLElBQUUsR0FBRixHQUFRLGFBQWEsYUFBYixDQUEyQixHQUEzQixDQUFSOztBQUVBOzs7QUFHQSxNQUFJLFVBQVUsT0FBTyxPQUFQLEdBQWlCLElBQUksTUFBSixDQUFXO0FBQ3RDOzs7OztBQUtBLFFBQUssSUFBSSxHQUFKLENBQVEsTUFBUixDQUFlO0FBQ2hCLFVBQU07QUFEVSxJQUFmLENBTmlDOztBQVV0QyxhQUFVLG9CQUFZO0FBQ2xCLFFBQUksUUFBSixDQUFhLElBQWIsQ0FBa0IsSUFBbEI7O0FBRUE7QUFDQSxTQUFLLElBQUksSUFBSSxLQUFLLEdBQUwsQ0FBUyxJQUF0QixFQUE0QixJQUFJLENBQWhDLEVBQW1DLEdBQW5DLEVBQXdDO0FBQ3BDLDJCQUFzQixJQUF0QixDQUEyQixJQUEzQjtBQUNIO0FBQ0o7QUFqQnFDLEdBQVgsQ0FBL0I7O0FBb0JBOzs7Ozs7OztBQVFBLElBQUUsT0FBRixHQUFZLGFBQWEsYUFBYixDQUEyQixPQUEzQixDQUFaO0FBQ0gsRUF0SEEsR0FBRDs7QUF5SEEsUUFBTyxTQUFTLEdBQWhCO0FBRUEsQ0ExSUMsQ0FBRDs7Ozs7OztBQ0FELENBQUUsV0FBVSxJQUFWLEVBQWdCLE9BQWhCLEVBQXlCO0FBQzFCLEtBQUksUUFBTyxPQUFQLHlDQUFPLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDaEM7QUFDQSxTQUFPLE9BQVAsR0FBaUIsVUFBVSxRQUFRLFFBQVEsUUFBUixDQUFSLENBQTNCO0FBQ0EsRUFIRCxNQUlLLElBQUksT0FBTyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU8sR0FBM0MsRUFBZ0Q7QUFDcEQ7QUFDQSxTQUFPLENBQUMsUUFBRCxDQUFQLEVBQW1CLE9BQW5CO0FBQ0EsRUFISSxNQUlBO0FBQ0o7QUFDQSxVQUFRLEtBQUssUUFBYjtBQUNBO0FBQ0QsQ0FiQyxhQWFNLFVBQVUsUUFBVixFQUFvQjs7QUFFM0I7Ozs7Ozs7O0FBV0MsWUFBVSxJQUFWLEVBQWdCO0FBQ2I7QUFDQSxNQUFJLElBQUksUUFBUjtBQUNBLE1BQUksUUFBUSxFQUFFLEdBQWQ7QUFDQSxNQUFJLFlBQVksTUFBTSxTQUF0QjtBQUNBLE1BQUksU0FBUyxNQUFNLE1BQW5CO0FBQ0EsTUFBSSxTQUFTLEVBQUUsSUFBZjs7QUFFQTtBQUNBLE1BQUksTUFBTSxVQUFVLE1BQVYsQ0FBaUIsQ0FDdkIsQ0FEdUIsRUFDbkIsQ0FEbUIsRUFDZixDQURlLEVBQ1gsQ0FEVyxFQUNQLENBRE8sRUFDSCxDQURHLEVBQ0MsQ0FERCxFQUNLLENBREwsRUFDUyxDQURULEVBQ2EsQ0FEYixFQUNnQixFQURoQixFQUNvQixFQURwQixFQUN3QixFQUR4QixFQUM0QixFQUQ1QixFQUNnQyxFQURoQyxFQUNvQyxFQURwQyxFQUV2QixDQUZ1QixFQUVuQixDQUZtQixFQUVoQixFQUZnQixFQUVYLENBRlcsRUFFUixFQUZRLEVBRUgsQ0FGRyxFQUVBLEVBRkEsRUFFSyxDQUZMLEVBRVEsRUFGUixFQUVhLENBRmIsRUFFaUIsQ0FGakIsRUFFcUIsQ0FGckIsRUFFeUIsQ0FGekIsRUFFNEIsRUFGNUIsRUFFZ0MsRUFGaEMsRUFFcUMsQ0FGckMsRUFHdkIsQ0FIdUIsRUFHcEIsRUFIb0IsRUFHaEIsRUFIZ0IsRUFHWCxDQUhXLEVBR1AsQ0FITyxFQUdKLEVBSEksRUFHQyxDQUhELEVBR0ssQ0FITCxFQUdTLENBSFQsRUFHYSxDQUhiLEVBR2lCLENBSGpCLEVBR3FCLENBSHJCLEVBR3dCLEVBSHhCLEVBRzRCLEVBSDVCLEVBR2lDLENBSGpDLEVBR29DLEVBSHBDLEVBSXZCLENBSnVCLEVBSW5CLENBSm1CLEVBSWhCLEVBSmdCLEVBSVosRUFKWSxFQUlQLENBSk8sRUFJSCxDQUpHLEVBSUEsRUFKQSxFQUlLLENBSkwsRUFJUSxFQUpSLEVBSWEsQ0FKYixFQUlpQixDQUpqQixFQUlvQixFQUpwQixFQUl3QixFQUp4QixFQUk2QixDQUo3QixFQUlpQyxDQUpqQyxFQUlxQyxDQUpyQyxFQUt2QixDQUx1QixFQUtuQixDQUxtQixFQUtmLENBTGUsRUFLWCxDQUxXLEVBS1AsQ0FMTyxFQUtKLEVBTEksRUFLQyxDQUxELEVBS0ksRUFMSixFQUtRLEVBTFIsRUFLYSxDQUxiLEVBS2lCLENBTGpCLEVBS3FCLENBTHJCLEVBS3dCLEVBTHhCLEVBSzZCLENBTDdCLEVBS2dDLEVBTGhDLEVBS29DLEVBTHBDLENBQWpCLENBQVY7QUFNQSxNQUFJLE1BQU0sVUFBVSxNQUFWLENBQWlCLENBQ3ZCLENBRHVCLEVBQ3BCLEVBRG9CLEVBQ2YsQ0FEZSxFQUNYLENBRFcsRUFDUCxDQURPLEVBQ0gsQ0FERyxFQUNBLEVBREEsRUFDSyxDQURMLEVBQ1EsRUFEUixFQUNhLENBRGIsRUFDZ0IsRUFEaEIsRUFDcUIsQ0FEckIsRUFDeUIsQ0FEekIsRUFDNEIsRUFENUIsRUFDaUMsQ0FEakMsRUFDb0MsRUFEcEMsRUFFdkIsQ0FGdUIsRUFFcEIsRUFGb0IsRUFFZixDQUZlLEVBRVgsQ0FGVyxFQUVQLENBRk8sRUFFSixFQUZJLEVBRUMsQ0FGRCxFQUVJLEVBRkosRUFFUSxFQUZSLEVBRVksRUFGWixFQUVpQixDQUZqQixFQUVvQixFQUZwQixFQUV5QixDQUZ6QixFQUU2QixDQUY3QixFQUVpQyxDQUZqQyxFQUVxQyxDQUZyQyxFQUd2QixFQUh1QixFQUdsQixDQUhrQixFQUdkLENBSGMsRUFHVixDQUhVLEVBR04sQ0FITSxFQUdILEVBSEcsRUFHRSxDQUhGLEVBR00sQ0FITixFQUdTLEVBSFQsRUFHYyxDQUhkLEVBR2lCLEVBSGpCLEVBR3NCLENBSHRCLEVBR3lCLEVBSHpCLEVBRzhCLENBSDlCLEVBR2tDLENBSGxDLEVBR3FDLEVBSHJDLEVBSXZCLENBSnVCLEVBSW5CLENBSm1CLEVBSWYsQ0FKZSxFQUlYLENBSlcsRUFJUCxDQUpPLEVBSUosRUFKSSxFQUlBLEVBSkEsRUFJSyxDQUpMLEVBSVMsQ0FKVCxFQUlZLEVBSlosRUFJaUIsQ0FKakIsRUFJb0IsRUFKcEIsRUFJeUIsQ0FKekIsRUFJNkIsQ0FKN0IsRUFJZ0MsRUFKaEMsRUFJb0MsRUFKcEMsRUFLdkIsRUFMdUIsRUFLbkIsRUFMbUIsRUFLZixFQUxlLEVBS1YsQ0FMVSxFQUtOLENBTE0sRUFLRixDQUxFLEVBS0UsQ0FMRixFQUtNLENBTE4sRUFLVSxDQUxWLEVBS2MsQ0FMZCxFQUtpQixFQUxqQixFQUtxQixFQUxyQixFQUswQixDQUwxQixFQUs4QixDQUw5QixFQUtrQyxDQUxsQyxFQUtxQyxFQUxyQyxDQUFqQixDQUFWO0FBTUEsTUFBSSxNQUFNLFVBQVUsTUFBVixDQUFpQixDQUN0QixFQURzQixFQUNsQixFQURrQixFQUNkLEVBRGMsRUFDVixFQURVLEVBQ0wsQ0FESyxFQUNELENBREMsRUFDRyxDQURILEVBQ08sQ0FEUCxFQUNVLEVBRFYsRUFDYyxFQURkLEVBQ2tCLEVBRGxCLEVBQ3NCLEVBRHRCLEVBQzJCLENBRDNCLEVBQytCLENBRC9CLEVBQ21DLENBRG5DLEVBQ3VDLENBRHZDLEVBRXZCLENBRnVCLEVBRXBCLENBRm9CLEVBRWYsQ0FGZSxFQUVaLEVBRlksRUFFUixFQUZRLEVBRUgsQ0FGRyxFQUVDLENBRkQsRUFFSSxFQUZKLEVBRVMsQ0FGVCxFQUVZLEVBRlosRUFFZ0IsRUFGaEIsRUFFcUIsQ0FGckIsRUFFd0IsRUFGeEIsRUFFNkIsQ0FGN0IsRUFFZ0MsRUFGaEMsRUFFb0MsRUFGcEMsRUFHdkIsRUFIdUIsRUFHbkIsRUFIbUIsRUFHZCxDQUhjLEVBR1YsQ0FIVSxFQUdQLEVBSE8sRUFHRixDQUhFLEVBR0MsRUFIRCxFQUdLLEVBSEwsRUFHUyxFQUhULEVBR2MsQ0FIZCxFQUdpQixFQUhqQixFQUdzQixDQUh0QixFQUcwQixDQUgxQixFQUc2QixFQUg3QixFQUdrQyxDQUhsQyxFQUdzQyxDQUh0QyxFQUlyQixFQUpxQixFQUlqQixFQUppQixFQUliLEVBSmEsRUFJVCxFQUpTLEVBSUwsRUFKSyxFQUlELEVBSkMsRUFJSSxDQUpKLEVBSVEsQ0FKUixFQUlZLENBSlosRUFJZSxFQUpmLEVBSW9CLENBSnBCLEVBSXdCLENBSnhCLEVBSTRCLENBSjVCLEVBSWdDLENBSmhDLEVBSW9DLENBSnBDLEVBSXVDLEVBSnZDLEVBS3ZCLENBTHVCLEVBS3BCLEVBTG9CLEVBS2YsQ0FMZSxFQUtaLEVBTFksRUFLUCxDQUxPLEVBS0gsQ0FMRyxFQUtBLEVBTEEsRUFLSSxFQUxKLEVBS1MsQ0FMVCxFQUtZLEVBTFosRUFLZ0IsRUFMaEIsRUFLb0IsRUFMcEIsRUFLd0IsRUFMeEIsRUFLNkIsQ0FMN0IsRUFLaUMsQ0FMakMsRUFLcUMsQ0FMckMsQ0FBakIsQ0FBVjtBQU1BLE1BQUksTUFBTSxVQUFVLE1BQVYsQ0FBaUIsQ0FDdkIsQ0FEdUIsRUFDbkIsQ0FEbUIsRUFDZixDQURlLEVBQ1osRUFEWSxFQUNSLEVBRFEsRUFDSixFQURJLEVBQ0EsRUFEQSxFQUNLLENBREwsRUFDUyxDQURULEVBQ2EsQ0FEYixFQUNpQixDQURqQixFQUNvQixFQURwQixFQUN3QixFQUR4QixFQUM0QixFQUQ1QixFQUNnQyxFQURoQyxFQUNxQyxDQURyQyxFQUV2QixDQUZ1QixFQUVwQixFQUZvQixFQUVoQixFQUZnQixFQUVYLENBRlcsRUFFUixFQUZRLEVBRUgsQ0FGRyxFQUVDLENBRkQsRUFFSSxFQUZKLEVBRVMsQ0FGVCxFQUVhLENBRmIsRUFFZ0IsRUFGaEIsRUFFcUIsQ0FGckIsRUFFeUIsQ0FGekIsRUFFNEIsRUFGNUIsRUFFZ0MsRUFGaEMsRUFFb0MsRUFGcEMsRUFHdkIsQ0FIdUIsRUFHbkIsQ0FIbUIsRUFHaEIsRUFIZ0IsRUFHWixFQUhZLEVBR1AsQ0FITyxFQUdILENBSEcsRUFHQyxDQUhELEVBR0ksRUFISixFQUdRLEVBSFIsRUFHWSxFQUhaLEVBR2lCLENBSGpCLEVBR29CLEVBSHBCLEVBR3dCLEVBSHhCLEVBRzRCLEVBSDVCLEVBR2lDLENBSGpDLEVBR3FDLENBSHJDLEVBSXZCLEVBSnVCLEVBSWxCLENBSmtCLEVBSWQsQ0FKYyxFQUlYLEVBSlcsRUFJUCxFQUpPLEVBSUgsRUFKRyxFQUlFLENBSkYsRUFJSyxFQUpMLEVBSVUsQ0FKVixFQUljLENBSmQsRUFJaUIsRUFKakIsRUFJc0IsQ0FKdEIsRUFJeUIsRUFKekIsRUFJOEIsQ0FKOUIsRUFJaUMsRUFKakMsRUFJc0MsQ0FKdEMsRUFLdkIsQ0FMdUIsRUFLbkIsQ0FMbUIsRUFLaEIsRUFMZ0IsRUFLWCxDQUxXLEVBS1IsRUFMUSxFQUtILENBTEcsRUFLQSxFQUxBLEVBS0ssQ0FMTCxFQUtTLENBTFQsRUFLWSxFQUxaLEVBS2lCLENBTGpCLEVBS3FCLENBTHJCLEVBS3dCLEVBTHhCLEVBSzRCLEVBTDVCLEVBS2dDLEVBTGhDLEVBS29DLEVBTHBDLENBQWpCLENBQVY7O0FBT0EsTUFBSSxNQUFPLFVBQVUsTUFBVixDQUFpQixDQUFFLFVBQUYsRUFBYyxVQUFkLEVBQTBCLFVBQTFCLEVBQXNDLFVBQXRDLEVBQWtELFVBQWxELENBQWpCLENBQVg7QUFDQSxNQUFJLE1BQU8sVUFBVSxNQUFWLENBQWlCLENBQUUsVUFBRixFQUFjLFVBQWQsRUFBMEIsVUFBMUIsRUFBc0MsVUFBdEMsRUFBa0QsVUFBbEQsQ0FBakIsQ0FBWDs7QUFFQTs7O0FBR0EsTUFBSSxZQUFZLE9BQU8sU0FBUCxHQUFtQixPQUFPLE1BQVAsQ0FBYztBQUM3QyxhQUFVLG9CQUFZO0FBQ2xCLFNBQUssS0FBTCxHQUFjLFVBQVUsTUFBVixDQUFpQixDQUFDLFVBQUQsRUFBYSxVQUFiLEVBQXlCLFVBQXpCLEVBQXFDLFVBQXJDLEVBQWlELFVBQWpELENBQWpCLENBQWQ7QUFDSCxJQUg0Qzs7QUFLN0Msb0JBQWlCLHlCQUFVLENBQVYsRUFBYSxNQUFiLEVBQXFCOztBQUVsQztBQUNBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxFQUFwQixFQUF3QixHQUF4QixFQUE2QjtBQUN6QjtBQUNBLFNBQUksV0FBVyxTQUFTLENBQXhCO0FBQ0EsU0FBSSxhQUFhLEVBQUUsUUFBRixDQUFqQjs7QUFFQTtBQUNBLE9BQUUsUUFBRixJQUNLLENBQUUsY0FBYyxDQUFmLEdBQXNCLGVBQWUsRUFBdEMsSUFBNkMsVUFBOUMsR0FDQyxDQUFFLGNBQWMsRUFBZixHQUFzQixlQUFlLENBQXRDLElBQTZDLFVBRmxEO0FBSUg7QUFDRDtBQUNBLFFBQUksSUFBSyxLQUFLLEtBQUwsQ0FBVyxLQUFwQjtBQUNBLFFBQUksS0FBSyxJQUFJLEtBQWI7QUFDQSxRQUFJLEtBQUssSUFBSSxLQUFiO0FBQ0EsUUFBSSxLQUFLLElBQUksS0FBYjtBQUNBLFFBQUksS0FBSyxJQUFJLEtBQWI7QUFDQSxRQUFJLEtBQUssSUFBSSxLQUFiO0FBQ0EsUUFBSSxLQUFLLElBQUksS0FBYjs7QUFFQTtBQUNBLFFBQUksRUFBSixFQUFRLEVBQVIsRUFBWSxFQUFaLEVBQWdCLEVBQWhCLEVBQW9CLEVBQXBCO0FBQ0EsUUFBSSxFQUFKLEVBQVEsRUFBUixFQUFZLEVBQVosRUFBZ0IsRUFBaEIsRUFBb0IsRUFBcEI7O0FBRUEsU0FBSyxLQUFLLEVBQUUsQ0FBRixDQUFWO0FBQ0EsU0FBSyxLQUFLLEVBQUUsQ0FBRixDQUFWO0FBQ0EsU0FBSyxLQUFLLEVBQUUsQ0FBRixDQUFWO0FBQ0EsU0FBSyxLQUFLLEVBQUUsQ0FBRixDQUFWO0FBQ0EsU0FBSyxLQUFLLEVBQUUsQ0FBRixDQUFWO0FBQ0E7QUFDQSxRQUFJLENBQUo7QUFDQSxTQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksRUFBcEIsRUFBd0IsS0FBSyxDQUE3QixFQUFnQztBQUM1QixTQUFLLEtBQU0sRUFBRSxTQUFPLEdBQUcsQ0FBSCxDQUFULENBQVAsR0FBd0IsQ0FBNUI7QUFDQSxTQUFJLElBQUUsRUFBTixFQUFTO0FBQ1osV0FBTSxHQUFHLEVBQUgsRUFBTSxFQUFOLEVBQVMsRUFBVCxJQUFlLEdBQUcsQ0FBSCxDQUFyQjtBQUNJLE1BRkQsTUFFTyxJQUFJLElBQUUsRUFBTixFQUFVO0FBQ3BCLFdBQU0sR0FBRyxFQUFILEVBQU0sRUFBTixFQUFTLEVBQVQsSUFBZSxHQUFHLENBQUgsQ0FBckI7QUFDSSxNQUZNLE1BRUEsSUFBSSxJQUFFLEVBQU4sRUFBVTtBQUNwQixXQUFNLEdBQUcsRUFBSCxFQUFNLEVBQU4sRUFBUyxFQUFULElBQWUsR0FBRyxDQUFILENBQXJCO0FBQ0ksTUFGTSxNQUVBLElBQUksSUFBRSxFQUFOLEVBQVU7QUFDcEIsV0FBTSxHQUFHLEVBQUgsRUFBTSxFQUFOLEVBQVMsRUFBVCxJQUFlLEdBQUcsQ0FBSCxDQUFyQjtBQUNJLE1BRk0sTUFFQTtBQUFDO0FBQ1gsV0FBTSxHQUFHLEVBQUgsRUFBTSxFQUFOLEVBQVMsRUFBVCxJQUFlLEdBQUcsQ0FBSCxDQUFyQjtBQUNJO0FBQ0QsU0FBSSxJQUFFLENBQU47QUFDQSxTQUFLLEtBQUssQ0FBTCxFQUFPLEdBQUcsQ0FBSCxDQUFQLENBQUw7QUFDQSxTQUFLLElBQUUsRUFBSCxHQUFPLENBQVg7QUFDQSxVQUFLLEVBQUw7QUFDQSxVQUFLLEVBQUw7QUFDQSxVQUFLLEtBQUssRUFBTCxFQUFTLEVBQVQsQ0FBTDtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQUssQ0FBTDs7QUFFQSxTQUFLLEtBQUssRUFBRSxTQUFPLEdBQUcsQ0FBSCxDQUFULENBQU4sR0FBdUIsQ0FBM0I7QUFDQSxTQUFJLElBQUUsRUFBTixFQUFTO0FBQ1osV0FBTSxHQUFHLEVBQUgsRUFBTSxFQUFOLEVBQVMsRUFBVCxJQUFlLEdBQUcsQ0FBSCxDQUFyQjtBQUNJLE1BRkQsTUFFTyxJQUFJLElBQUUsRUFBTixFQUFVO0FBQ3BCLFdBQU0sR0FBRyxFQUFILEVBQU0sRUFBTixFQUFTLEVBQVQsSUFBZSxHQUFHLENBQUgsQ0FBckI7QUFDSSxNQUZNLE1BRUEsSUFBSSxJQUFFLEVBQU4sRUFBVTtBQUNwQixXQUFNLEdBQUcsRUFBSCxFQUFNLEVBQU4sRUFBUyxFQUFULElBQWUsR0FBRyxDQUFILENBQXJCO0FBQ0ksTUFGTSxNQUVBLElBQUksSUFBRSxFQUFOLEVBQVU7QUFDcEIsV0FBTSxHQUFHLEVBQUgsRUFBTSxFQUFOLEVBQVMsRUFBVCxJQUFlLEdBQUcsQ0FBSCxDQUFyQjtBQUNJLE1BRk0sTUFFQTtBQUFDO0FBQ1gsV0FBTSxHQUFHLEVBQUgsRUFBTSxFQUFOLEVBQVMsRUFBVCxJQUFlLEdBQUcsQ0FBSCxDQUFyQjtBQUNJO0FBQ0QsU0FBSSxJQUFFLENBQU47QUFDQSxTQUFLLEtBQUssQ0FBTCxFQUFPLEdBQUcsQ0FBSCxDQUFQLENBQUw7QUFDQSxTQUFLLElBQUUsRUFBSCxHQUFPLENBQVg7QUFDQSxVQUFLLEVBQUw7QUFDQSxVQUFLLEVBQUw7QUFDQSxVQUFLLEtBQUssRUFBTCxFQUFTLEVBQVQsQ0FBTDtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQUssQ0FBTDtBQUNIO0FBQ0Q7QUFDQSxRQUFRLEVBQUUsQ0FBRixJQUFPLEVBQVAsR0FBWSxFQUFiLEdBQWlCLENBQXhCO0FBQ0EsTUFBRSxDQUFGLElBQVEsRUFBRSxDQUFGLElBQU8sRUFBUCxHQUFZLEVBQWIsR0FBaUIsQ0FBeEI7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxFQUFQLEdBQVksRUFBYixHQUFpQixDQUF4QjtBQUNBLE1BQUUsQ0FBRixJQUFRLEVBQUUsQ0FBRixJQUFPLEVBQVAsR0FBWSxFQUFiLEdBQWlCLENBQXhCO0FBQ0EsTUFBRSxDQUFGLElBQVEsRUFBRSxDQUFGLElBQU8sRUFBUCxHQUFZLEVBQWIsR0FBaUIsQ0FBeEI7QUFDQSxNQUFFLENBQUYsSUFBUSxDQUFSO0FBQ0gsSUF6RjRDOztBQTJGN0MsZ0JBQWEsdUJBQVk7QUFDckI7QUFDQSxRQUFJLE9BQU8sS0FBSyxLQUFoQjtBQUNBLFFBQUksWUFBWSxLQUFLLEtBQXJCOztBQUVBLFFBQUksYUFBYSxLQUFLLFdBQUwsR0FBbUIsQ0FBcEM7QUFDQSxRQUFJLFlBQVksS0FBSyxRQUFMLEdBQWdCLENBQWhDOztBQUVBO0FBQ0EsY0FBVSxjQUFjLENBQXhCLEtBQThCLFFBQVMsS0FBSyxZQUFZLEVBQXhEO0FBQ0EsY0FBVSxDQUFHLFlBQVksRUFBYixLQUFxQixDQUF0QixJQUE0QixDQUE3QixJQUFrQyxFQUE1QyxJQUNLLENBQUUsY0FBYyxDQUFmLEdBQXNCLGVBQWUsRUFBdEMsSUFBNkMsVUFBOUMsR0FDQyxDQUFFLGNBQWMsRUFBZixHQUFzQixlQUFlLENBQXRDLElBQTZDLFVBRmxEO0FBSUEsU0FBSyxRQUFMLEdBQWdCLENBQUMsVUFBVSxNQUFWLEdBQW1CLENBQXBCLElBQXlCLENBQXpDOztBQUVBO0FBQ0EsU0FBSyxRQUFMOztBQUVBO0FBQ0EsUUFBSSxPQUFPLEtBQUssS0FBaEI7QUFDQSxRQUFJLElBQUksS0FBSyxLQUFiOztBQUVBO0FBQ0EsU0FBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLENBQXBCLEVBQXVCLEdBQXZCLEVBQTRCO0FBQ3hCO0FBQ0EsU0FBSSxNQUFNLEVBQUUsQ0FBRixDQUFWOztBQUVBO0FBQ0EsT0FBRSxDQUFGLElBQVEsQ0FBRSxPQUFPLENBQVIsR0FBZSxRQUFRLEVBQXhCLElBQStCLFVBQWhDLEdBQ0MsQ0FBRSxPQUFPLEVBQVIsR0FBZSxRQUFRLENBQXhCLElBQStCLFVBRHZDO0FBRUg7O0FBRUQ7QUFDQSxXQUFPLElBQVA7QUFDSCxJQTlINEM7O0FBZ0k3QyxVQUFPLGlCQUFZO0FBQ2YsUUFBSSxRQUFRLE9BQU8sS0FBUCxDQUFhLElBQWIsQ0FBa0IsSUFBbEIsQ0FBWjtBQUNBLFVBQU0sS0FBTixHQUFjLEtBQUssS0FBTCxDQUFXLEtBQVgsRUFBZDs7QUFFQSxXQUFPLEtBQVA7QUFDSDtBQXJJNEMsR0FBZCxDQUFuQzs7QUF5SUEsV0FBUyxFQUFULENBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUI7QUFDakIsVUFBUyxDQUFELEdBQU8sQ0FBUCxHQUFhLENBQXJCO0FBRUg7O0FBRUQsV0FBUyxFQUFULENBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUI7QUFDakIsVUFBVSxDQUFELEdBQUssQ0FBTixHQUFjLENBQUMsQ0FBRixHQUFNLENBQTNCO0FBQ0g7O0FBRUQsV0FBUyxFQUFULENBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUI7QUFDakIsVUFBUSxDQUFFLENBQUQsR0FBTyxDQUFFLENBQVYsSUFBa0IsQ0FBMUI7QUFDSDs7QUFFRCxXQUFTLEVBQVQsQ0FBWSxDQUFaLEVBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQjtBQUNqQixVQUFVLENBQUQsR0FBTyxDQUFSLEdBQWdCLENBQUQsR0FBSyxDQUFFLENBQTlCO0FBQ0g7O0FBRUQsV0FBUyxFQUFULENBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUI7QUFDakIsVUFBUyxDQUFELElBQVEsQ0FBRCxHQUFNLENBQUUsQ0FBZixDQUFSO0FBRUg7O0FBRUQsV0FBUyxJQUFULENBQWMsQ0FBZCxFQUFnQixDQUFoQixFQUFtQjtBQUNmLFVBQVEsS0FBRyxDQUFKLEdBQVUsTUFBSyxLQUFHLENBQXpCO0FBQ0g7O0FBR0Q7Ozs7Ozs7Ozs7Ozs7O0FBY0EsSUFBRSxTQUFGLEdBQWMsT0FBTyxhQUFQLENBQXFCLFNBQXJCLENBQWQ7O0FBRUE7Ozs7Ozs7Ozs7Ozs7O0FBY0EsSUFBRSxhQUFGLEdBQWtCLE9BQU8saUJBQVAsQ0FBeUIsU0FBekIsQ0FBbEI7QUFDSCxFQTNPQSxFQTJPQyxJQTNPRCxDQUFEOztBQThPQSxRQUFPLFNBQVMsU0FBaEI7QUFFQSxDQTFRQyxDQUFEOzs7Ozs7O0FDQUQsQ0FBRSxXQUFVLElBQVYsRUFBZ0IsT0FBaEIsRUFBeUI7QUFDMUIsS0FBSSxRQUFPLE9BQVAseUNBQU8sT0FBUCxPQUFtQixRQUF2QixFQUFpQztBQUNoQztBQUNBLFNBQU8sT0FBUCxHQUFpQixVQUFVLFFBQVEsUUFBUSxRQUFSLENBQVIsQ0FBM0I7QUFDQSxFQUhELE1BSUssSUFBSSxPQUFPLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0MsT0FBTyxHQUEzQyxFQUFnRDtBQUNwRDtBQUNBLFNBQU8sQ0FBQyxRQUFELENBQVAsRUFBbUIsT0FBbkI7QUFDQSxFQUhJLE1BSUE7QUFDSjtBQUNBLFVBQVEsS0FBSyxRQUFiO0FBQ0E7QUFDRCxDQWJDLGFBYU0sVUFBVSxRQUFWLEVBQW9COztBQUUxQixjQUFZO0FBQ1Q7QUFDQSxNQUFJLElBQUksUUFBUjtBQUNBLE1BQUksUUFBUSxFQUFFLEdBQWQ7QUFDQSxNQUFJLFlBQVksTUFBTSxTQUF0QjtBQUNBLE1BQUksU0FBUyxNQUFNLE1BQW5CO0FBQ0EsTUFBSSxTQUFTLEVBQUUsSUFBZjs7QUFFQTtBQUNBLE1BQUksSUFBSSxFQUFSOztBQUVBOzs7QUFHQSxNQUFJLE9BQU8sT0FBTyxJQUFQLEdBQWMsT0FBTyxNQUFQLENBQWM7QUFDbkMsYUFBVSxvQkFBWTtBQUNsQixTQUFLLEtBQUwsR0FBYSxJQUFJLFVBQVUsSUFBZCxDQUFtQixDQUM1QixVQUQ0QixFQUNoQixVQURnQixFQUU1QixVQUY0QixFQUVoQixVQUZnQixFQUc1QixVQUg0QixDQUFuQixDQUFiO0FBS0gsSUFQa0M7O0FBU25DLG9CQUFpQix5QkFBVSxDQUFWLEVBQWEsTUFBYixFQUFxQjtBQUNsQztBQUNBLFFBQUksSUFBSSxLQUFLLEtBQUwsQ0FBVyxLQUFuQjs7QUFFQTtBQUNBLFFBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjtBQUNBLFFBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjtBQUNBLFFBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjtBQUNBLFFBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjtBQUNBLFFBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjs7QUFFQTtBQUNBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxFQUFwQixFQUF3QixHQUF4QixFQUE2QjtBQUN6QixTQUFJLElBQUksRUFBUixFQUFZO0FBQ1IsUUFBRSxDQUFGLElBQU8sRUFBRSxTQUFTLENBQVgsSUFBZ0IsQ0FBdkI7QUFDSCxNQUZELE1BRU87QUFDSCxVQUFJLElBQUksRUFBRSxJQUFJLENBQU4sSUFBVyxFQUFFLElBQUksQ0FBTixDQUFYLEdBQXNCLEVBQUUsSUFBSSxFQUFOLENBQXRCLEdBQWtDLEVBQUUsSUFBSSxFQUFOLENBQTFDO0FBQ0EsUUFBRSxDQUFGLElBQVEsS0FBSyxDQUFOLEdBQVksTUFBTSxFQUF6QjtBQUNIOztBQUVELFNBQUksSUFBSSxDQUFFLEtBQUssQ0FBTixHQUFZLE1BQU0sRUFBbkIsSUFBMEIsQ0FBMUIsR0FBOEIsRUFBRSxDQUFGLENBQXRDO0FBQ0EsU0FBSSxJQUFJLEVBQVIsRUFBWTtBQUNSLFdBQUssQ0FBRSxJQUFJLENBQUwsR0FBVyxDQUFDLENBQUQsR0FBSyxDQUFqQixJQUF1QixVQUE1QjtBQUNILE1BRkQsTUFFTyxJQUFJLElBQUksRUFBUixFQUFZO0FBQ2YsV0FBSyxDQUFDLElBQUksQ0FBSixHQUFRLENBQVQsSUFBYyxVQUFuQjtBQUNILE1BRk0sTUFFQSxJQUFJLElBQUksRUFBUixFQUFZO0FBQ2YsV0FBSyxDQUFFLElBQUksQ0FBTCxHQUFXLElBQUksQ0FBZixHQUFxQixJQUFJLENBQTFCLElBQWdDLFVBQXJDO0FBQ0gsTUFGTSxNQUVBLGlCQUFrQjtBQUNyQixZQUFLLENBQUMsSUFBSSxDQUFKLEdBQVEsQ0FBVCxJQUFjLFVBQW5CO0FBQ0g7O0FBRUQsU0FBSSxDQUFKO0FBQ0EsU0FBSSxDQUFKO0FBQ0EsU0FBSyxLQUFLLEVBQU4sR0FBYSxNQUFNLENBQXZCO0FBQ0EsU0FBSSxDQUFKO0FBQ0EsU0FBSSxDQUFKO0FBQ0g7O0FBRUQ7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxDQUFSLEdBQWEsQ0FBcEI7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxDQUFSLEdBQWEsQ0FBcEI7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxDQUFSLEdBQWEsQ0FBcEI7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxDQUFSLEdBQWEsQ0FBcEI7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxDQUFSLEdBQWEsQ0FBcEI7QUFDSCxJQXJEa0M7O0FBdURuQyxnQkFBYSx1QkFBWTtBQUNyQjtBQUNBLFFBQUksT0FBTyxLQUFLLEtBQWhCO0FBQ0EsUUFBSSxZQUFZLEtBQUssS0FBckI7O0FBRUEsUUFBSSxhQUFhLEtBQUssV0FBTCxHQUFtQixDQUFwQztBQUNBLFFBQUksWUFBWSxLQUFLLFFBQUwsR0FBZ0IsQ0FBaEM7O0FBRUE7QUFDQSxjQUFVLGNBQWMsQ0FBeEIsS0FBOEIsUUFBUyxLQUFLLFlBQVksRUFBeEQ7QUFDQSxjQUFVLENBQUcsWUFBWSxFQUFiLEtBQXFCLENBQXRCLElBQTRCLENBQTdCLElBQWtDLEVBQTVDLElBQWtELEtBQUssS0FBTCxDQUFXLGFBQWEsV0FBeEIsQ0FBbEQ7QUFDQSxjQUFVLENBQUcsWUFBWSxFQUFiLEtBQXFCLENBQXRCLElBQTRCLENBQTdCLElBQWtDLEVBQTVDLElBQWtELFVBQWxEO0FBQ0EsU0FBSyxRQUFMLEdBQWdCLFVBQVUsTUFBVixHQUFtQixDQUFuQzs7QUFFQTtBQUNBLFNBQUssUUFBTDs7QUFFQTtBQUNBLFdBQU8sS0FBSyxLQUFaO0FBQ0gsSUExRWtDOztBQTRFbkMsVUFBTyxpQkFBWTtBQUNmLFFBQUksUUFBUSxPQUFPLEtBQVAsQ0FBYSxJQUFiLENBQWtCLElBQWxCLENBQVo7QUFDQSxVQUFNLEtBQU4sR0FBYyxLQUFLLEtBQUwsQ0FBVyxLQUFYLEVBQWQ7O0FBRUEsV0FBTyxLQUFQO0FBQ0g7QUFqRmtDLEdBQWQsQ0FBekI7O0FBb0ZBOzs7Ozs7Ozs7Ozs7OztBQWNBLElBQUUsSUFBRixHQUFTLE9BQU8sYUFBUCxDQUFxQixJQUFyQixDQUFUOztBQUVBOzs7Ozs7Ozs7Ozs7OztBQWNBLElBQUUsUUFBRixHQUFhLE9BQU8saUJBQVAsQ0FBeUIsSUFBekIsQ0FBYjtBQUNILEVBaklBLEdBQUQ7O0FBb0lBLFFBQU8sU0FBUyxJQUFoQjtBQUVBLENBckpDLENBQUQ7Ozs7Ozs7QUNBRCxDQUFFLFdBQVUsSUFBVixFQUFnQixPQUFoQixFQUF5QixLQUF6QixFQUFnQztBQUNqQyxLQUFJLFFBQU8sT0FBUCx5Q0FBTyxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQ2hDO0FBQ0EsU0FBTyxPQUFQLEdBQWlCLFVBQVUsUUFBUSxRQUFRLFFBQVIsQ0FBUixFQUEyQixRQUFRLFVBQVIsQ0FBM0IsQ0FBM0I7QUFDQSxFQUhELE1BSUssSUFBSSxPQUFPLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0MsT0FBTyxHQUEzQyxFQUFnRDtBQUNwRDtBQUNBLFNBQU8sQ0FBQyxRQUFELEVBQVcsVUFBWCxDQUFQLEVBQStCLE9BQS9CO0FBQ0EsRUFISSxNQUlBO0FBQ0o7QUFDQSxVQUFRLEtBQUssUUFBYjtBQUNBO0FBQ0QsQ0FiQyxhQWFNLFVBQVUsUUFBVixFQUFvQjs7QUFFMUIsY0FBWTtBQUNUO0FBQ0EsTUFBSSxJQUFJLFFBQVI7QUFDQSxNQUFJLFFBQVEsRUFBRSxHQUFkO0FBQ0EsTUFBSSxZQUFZLE1BQU0sU0FBdEI7QUFDQSxNQUFJLFNBQVMsRUFBRSxJQUFmO0FBQ0EsTUFBSSxTQUFTLE9BQU8sTUFBcEI7O0FBRUE7OztBQUdBLE1BQUksU0FBUyxPQUFPLE1BQVAsR0FBZ0IsT0FBTyxNQUFQLENBQWM7QUFDdkMsYUFBVSxvQkFBWTtBQUNsQixTQUFLLEtBQUwsR0FBYSxJQUFJLFVBQVUsSUFBZCxDQUFtQixDQUM1QixVQUQ0QixFQUNoQixVQURnQixFQUNKLFVBREksRUFDUSxVQURSLEVBRTVCLFVBRjRCLEVBRWhCLFVBRmdCLEVBRUosVUFGSSxFQUVRLFVBRlIsQ0FBbkIsQ0FBYjtBQUlILElBTnNDOztBQVF2QyxnQkFBYSx1QkFBWTtBQUNyQixRQUFJLE9BQU8sT0FBTyxXQUFQLENBQW1CLElBQW5CLENBQXdCLElBQXhCLENBQVg7O0FBRUEsU0FBSyxRQUFMLElBQWlCLENBQWpCOztBQUVBLFdBQU8sSUFBUDtBQUNIO0FBZHNDLEdBQWQsQ0FBN0I7O0FBaUJBOzs7Ozs7Ozs7Ozs7OztBQWNBLElBQUUsTUFBRixHQUFXLE9BQU8sYUFBUCxDQUFxQixNQUFyQixDQUFYOztBQUVBOzs7Ozs7Ozs7Ozs7OztBQWNBLElBQUUsVUFBRixHQUFlLE9BQU8saUJBQVAsQ0FBeUIsTUFBekIsQ0FBZjtBQUNILEVBM0RBLEdBQUQ7O0FBOERBLFFBQU8sU0FBUyxNQUFoQjtBQUVBLENBL0VDLENBQUQ7Ozs7Ozs7QUNBRCxDQUFFLFdBQVUsSUFBVixFQUFnQixPQUFoQixFQUF5QjtBQUMxQixLQUFJLFFBQU8sT0FBUCx5Q0FBTyxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQ2hDO0FBQ0EsU0FBTyxPQUFQLEdBQWlCLFVBQVUsUUFBUSxRQUFRLFFBQVIsQ0FBUixDQUEzQjtBQUNBLEVBSEQsTUFJSyxJQUFJLE9BQU8sTUFBUCxLQUFrQixVQUFsQixJQUFnQyxPQUFPLEdBQTNDLEVBQWdEO0FBQ3BEO0FBQ0EsU0FBTyxDQUFDLFFBQUQsQ0FBUCxFQUFtQixPQUFuQjtBQUNBLEVBSEksTUFJQTtBQUNKO0FBQ0EsVUFBUSxLQUFLLFFBQWI7QUFDQTtBQUNELENBYkMsYUFhTSxVQUFVLFFBQVYsRUFBb0I7O0FBRTFCLFlBQVUsSUFBVixFQUFnQjtBQUNiO0FBQ0EsTUFBSSxJQUFJLFFBQVI7QUFDQSxNQUFJLFFBQVEsRUFBRSxHQUFkO0FBQ0EsTUFBSSxZQUFZLE1BQU0sU0FBdEI7QUFDQSxNQUFJLFNBQVMsTUFBTSxNQUFuQjtBQUNBLE1BQUksU0FBUyxFQUFFLElBQWY7O0FBRUE7QUFDQSxNQUFJLElBQUksRUFBUjtBQUNBLE1BQUksSUFBSSxFQUFSOztBQUVBO0FBQ0MsZUFBWTtBQUNULFlBQVMsT0FBVCxDQUFpQixDQUFqQixFQUFvQjtBQUNoQixRQUFJLFFBQVEsS0FBSyxJQUFMLENBQVUsQ0FBVixDQUFaO0FBQ0EsU0FBSyxJQUFJLFNBQVMsQ0FBbEIsRUFBcUIsVUFBVSxLQUEvQixFQUFzQyxRQUF0QyxFQUFnRDtBQUM1QyxTQUFJLEVBQUUsSUFBSSxNQUFOLENBQUosRUFBbUI7QUFDZixhQUFPLEtBQVA7QUFDSDtBQUNKOztBQUVELFdBQU8sSUFBUDtBQUNIOztBQUVELFlBQVMsaUJBQVQsQ0FBMkIsQ0FBM0IsRUFBOEI7QUFDMUIsV0FBUSxDQUFDLEtBQUssSUFBSSxDQUFULENBQUQsSUFBZ0IsV0FBakIsR0FBZ0MsQ0FBdkM7QUFDSDs7QUFFRCxPQUFJLElBQUksQ0FBUjtBQUNBLE9BQUksU0FBUyxDQUFiO0FBQ0EsVUFBTyxTQUFTLEVBQWhCLEVBQW9CO0FBQ2hCLFFBQUksUUFBUSxDQUFSLENBQUosRUFBZ0I7QUFDWixTQUFJLFNBQVMsQ0FBYixFQUFnQjtBQUNaLFFBQUUsTUFBRixJQUFZLGtCQUFrQixLQUFLLEdBQUwsQ0FBUyxDQUFULEVBQVksSUFBSSxDQUFoQixDQUFsQixDQUFaO0FBQ0g7QUFDRCxPQUFFLE1BQUYsSUFBWSxrQkFBa0IsS0FBSyxHQUFMLENBQVMsQ0FBVCxFQUFZLElBQUksQ0FBaEIsQ0FBbEIsQ0FBWjs7QUFFQTtBQUNIOztBQUVEO0FBQ0g7QUFDSixHQTlCQSxHQUFEOztBQWdDQTtBQUNBLE1BQUksSUFBSSxFQUFSOztBQUVBOzs7QUFHQSxNQUFJLFNBQVMsT0FBTyxNQUFQLEdBQWdCLE9BQU8sTUFBUCxDQUFjO0FBQ3ZDLGFBQVUsb0JBQVk7QUFDbEIsU0FBSyxLQUFMLEdBQWEsSUFBSSxVQUFVLElBQWQsQ0FBbUIsRUFBRSxLQUFGLENBQVEsQ0FBUixDQUFuQixDQUFiO0FBQ0gsSUFIc0M7O0FBS3ZDLG9CQUFpQix5QkFBVSxDQUFWLEVBQWEsTUFBYixFQUFxQjtBQUNsQztBQUNBLFFBQUksSUFBSSxLQUFLLEtBQUwsQ0FBVyxLQUFuQjs7QUFFQTtBQUNBLFFBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjtBQUNBLFFBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjtBQUNBLFFBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjtBQUNBLFFBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjtBQUNBLFFBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjtBQUNBLFFBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjtBQUNBLFFBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjtBQUNBLFFBQUksSUFBSSxFQUFFLENBQUYsQ0FBUjs7QUFFQTtBQUNBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxFQUFwQixFQUF3QixHQUF4QixFQUE2QjtBQUN6QixTQUFJLElBQUksRUFBUixFQUFZO0FBQ1IsUUFBRSxDQUFGLElBQU8sRUFBRSxTQUFTLENBQVgsSUFBZ0IsQ0FBdkI7QUFDSCxNQUZELE1BRU87QUFDSCxVQUFJLFVBQVUsRUFBRSxJQUFJLEVBQU4sQ0FBZDtBQUNBLFVBQUksU0FBVSxDQUFFLFdBQVcsRUFBWixHQUFtQixZQUFZLENBQWhDLEtBQ0UsV0FBVyxFQUFaLEdBQW1CLFlBQVksRUFEaEMsSUFFRSxZQUFZLENBRjVCOztBQUlBLFVBQUksVUFBVSxFQUFFLElBQUksQ0FBTixDQUFkO0FBQ0EsVUFBSSxTQUFVLENBQUUsV0FBVyxFQUFaLEdBQW1CLFlBQVksRUFBaEMsS0FDRSxXQUFXLEVBQVosR0FBbUIsWUFBWSxFQURoQyxJQUVFLFlBQVksRUFGNUI7O0FBSUEsUUFBRSxDQUFGLElBQU8sU0FBUyxFQUFFLElBQUksQ0FBTixDQUFULEdBQW9CLE1BQXBCLEdBQTZCLEVBQUUsSUFBSSxFQUFOLENBQXBDO0FBQ0g7O0FBRUQsU0FBSSxLQUFPLElBQUksQ0FBTCxHQUFXLENBQUMsQ0FBRCxHQUFLLENBQTFCO0FBQ0EsU0FBSSxNQUFPLElBQUksQ0FBTCxHQUFXLElBQUksQ0FBZixHQUFxQixJQUFJLENBQW5DOztBQUVBLFNBQUksU0FBUyxDQUFFLEtBQUssRUFBTixHQUFhLE1BQU0sQ0FBcEIsS0FBNEIsS0FBSyxFQUFOLEdBQWEsTUFBTSxFQUE5QyxLQUF1RCxLQUFLLEVBQU4sR0FBYSxNQUFNLEVBQXpFLENBQWI7QUFDQSxTQUFJLFNBQVMsQ0FBRSxLQUFLLEVBQU4sR0FBYSxNQUFNLENBQXBCLEtBQTRCLEtBQUssRUFBTixHQUFhLE1BQU0sRUFBOUMsS0FBdUQsS0FBSyxDQUFOLEdBQWEsTUFBTSxFQUF6RSxDQUFiOztBQUVBLFNBQUksS0FBSyxJQUFJLE1BQUosR0FBYSxFQUFiLEdBQWtCLEVBQUUsQ0FBRixDQUFsQixHQUF5QixFQUFFLENBQUYsQ0FBbEM7QUFDQSxTQUFJLEtBQUssU0FBUyxHQUFsQjs7QUFFQSxTQUFJLENBQUo7QUFDQSxTQUFJLENBQUo7QUFDQSxTQUFJLENBQUo7QUFDQSxTQUFLLElBQUksRUFBTCxHQUFXLENBQWY7QUFDQSxTQUFJLENBQUo7QUFDQSxTQUFJLENBQUo7QUFDQSxTQUFJLENBQUo7QUFDQSxTQUFLLEtBQUssRUFBTixHQUFZLENBQWhCO0FBQ0g7O0FBRUQ7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxDQUFSLEdBQWEsQ0FBcEI7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxDQUFSLEdBQWEsQ0FBcEI7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxDQUFSLEdBQWEsQ0FBcEI7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxDQUFSLEdBQWEsQ0FBcEI7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxDQUFSLEdBQWEsQ0FBcEI7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxDQUFSLEdBQWEsQ0FBcEI7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxDQUFSLEdBQWEsQ0FBcEI7QUFDQSxNQUFFLENBQUYsSUFBUSxFQUFFLENBQUYsSUFBTyxDQUFSLEdBQWEsQ0FBcEI7QUFDSCxJQWpFc0M7O0FBbUV2QyxnQkFBYSx1QkFBWTtBQUNyQjtBQUNBLFFBQUksT0FBTyxLQUFLLEtBQWhCO0FBQ0EsUUFBSSxZQUFZLEtBQUssS0FBckI7O0FBRUEsUUFBSSxhQUFhLEtBQUssV0FBTCxHQUFtQixDQUFwQztBQUNBLFFBQUksWUFBWSxLQUFLLFFBQUwsR0FBZ0IsQ0FBaEM7O0FBRUE7QUFDQSxjQUFVLGNBQWMsQ0FBeEIsS0FBOEIsUUFBUyxLQUFLLFlBQVksRUFBeEQ7QUFDQSxjQUFVLENBQUcsWUFBWSxFQUFiLEtBQXFCLENBQXRCLElBQTRCLENBQTdCLElBQWtDLEVBQTVDLElBQWtELEtBQUssS0FBTCxDQUFXLGFBQWEsV0FBeEIsQ0FBbEQ7QUFDQSxjQUFVLENBQUcsWUFBWSxFQUFiLEtBQXFCLENBQXRCLElBQTRCLENBQTdCLElBQWtDLEVBQTVDLElBQWtELFVBQWxEO0FBQ0EsU0FBSyxRQUFMLEdBQWdCLFVBQVUsTUFBVixHQUFtQixDQUFuQzs7QUFFQTtBQUNBLFNBQUssUUFBTDs7QUFFQTtBQUNBLFdBQU8sS0FBSyxLQUFaO0FBQ0gsSUF0RnNDOztBQXdGdkMsVUFBTyxpQkFBWTtBQUNmLFFBQUksUUFBUSxPQUFPLEtBQVAsQ0FBYSxJQUFiLENBQWtCLElBQWxCLENBQVo7QUFDQSxVQUFNLEtBQU4sR0FBYyxLQUFLLEtBQUwsQ0FBVyxLQUFYLEVBQWQ7O0FBRUEsV0FBTyxLQUFQO0FBQ0g7QUE3RnNDLEdBQWQsQ0FBN0I7O0FBZ0dBOzs7Ozs7Ozs7Ozs7OztBQWNBLElBQUUsTUFBRixHQUFXLE9BQU8sYUFBUCxDQUFxQixNQUFyQixDQUFYOztBQUVBOzs7Ozs7Ozs7Ozs7OztBQWNBLElBQUUsVUFBRixHQUFlLE9BQU8saUJBQVAsQ0FBeUIsTUFBekIsQ0FBZjtBQUNILEVBbExBLEVBa0xDLElBbExELENBQUQ7O0FBcUxBLFFBQU8sU0FBUyxNQUFoQjtBQUVBLENBdE1DLENBQUQ7Ozs7Ozs7QUNBRCxDQUFFLFdBQVUsSUFBVixFQUFnQixPQUFoQixFQUF5QixLQUF6QixFQUFnQztBQUNqQyxLQUFJLFFBQU8sT0FBUCx5Q0FBTyxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQ2hDO0FBQ0EsU0FBTyxPQUFQLEdBQWlCLFVBQVUsUUFBUSxRQUFRLFFBQVIsQ0FBUixFQUEyQixRQUFRLFlBQVIsQ0FBM0IsQ0FBM0I7QUFDQSxFQUhELE1BSUssSUFBSSxPQUFPLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0MsT0FBTyxHQUEzQyxFQUFnRDtBQUNwRDtBQUNBLFNBQU8sQ0FBQyxRQUFELEVBQVcsWUFBWCxDQUFQLEVBQWlDLE9BQWpDO0FBQ0EsRUFISSxNQUlBO0FBQ0o7QUFDQSxVQUFRLEtBQUssUUFBYjtBQUNBO0FBQ0QsQ0FiQyxhQWFNLFVBQVUsUUFBVixFQUFvQjs7QUFFMUIsWUFBVSxJQUFWLEVBQWdCO0FBQ2I7QUFDQSxNQUFJLElBQUksUUFBUjtBQUNBLE1BQUksUUFBUSxFQUFFLEdBQWQ7QUFDQSxNQUFJLFlBQVksTUFBTSxTQUF0QjtBQUNBLE1BQUksU0FBUyxNQUFNLE1BQW5CO0FBQ0EsTUFBSSxRQUFRLEVBQUUsR0FBZDtBQUNBLE1BQUksVUFBVSxNQUFNLElBQXBCO0FBQ0EsTUFBSSxTQUFTLEVBQUUsSUFBZjs7QUFFQTtBQUNBLE1BQUksY0FBYyxFQUFsQjtBQUNBLE1BQUksYUFBYyxFQUFsQjtBQUNBLE1BQUksa0JBQWtCLEVBQXRCOztBQUVBO0FBQ0MsZUFBWTtBQUNUO0FBQ0EsT0FBSSxJQUFJLENBQVI7QUFBQSxPQUFXLElBQUksQ0FBZjtBQUNBLFFBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxFQUFwQixFQUF3QixHQUF4QixFQUE2QjtBQUN6QixnQkFBWSxJQUFJLElBQUksQ0FBcEIsSUFBMEIsQ0FBQyxJQUFJLENBQUwsS0FBVyxJQUFJLENBQWYsSUFBb0IsQ0FBckIsR0FBMEIsRUFBbkQ7O0FBRUEsUUFBSSxPQUFPLElBQUksQ0FBZjtBQUNBLFFBQUksT0FBTyxDQUFDLElBQUksQ0FBSixHQUFRLElBQUksQ0FBYixJQUFrQixDQUE3QjtBQUNBLFFBQUksSUFBSjtBQUNBLFFBQUksSUFBSjtBQUNIOztBQUVEO0FBQ0EsUUFBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLENBQXBCLEVBQXVCLEdBQXZCLEVBQTRCO0FBQ3hCLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxDQUFwQixFQUF1QixHQUF2QixFQUE0QjtBQUN4QixnQkFBVyxJQUFJLElBQUksQ0FBbkIsSUFBd0IsSUFBSyxDQUFDLElBQUksQ0FBSixHQUFRLElBQUksQ0FBYixJQUFrQixDQUFuQixHQUF3QixDQUFwRDtBQUNIO0FBQ0o7O0FBRUQ7QUFDQSxPQUFJLE9BQU8sSUFBWDtBQUNBLFFBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxFQUFwQixFQUF3QixHQUF4QixFQUE2QjtBQUN6QixRQUFJLG1CQUFtQixDQUF2QjtBQUNBLFFBQUksbUJBQW1CLENBQXZCOztBQUVBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxDQUFwQixFQUF1QixHQUF2QixFQUE0QjtBQUN4QixTQUFJLE9BQU8sSUFBWCxFQUFpQjtBQUNiLFVBQUksY0FBYyxDQUFDLEtBQUssQ0FBTixJQUFXLENBQTdCO0FBQ0EsVUFBSSxjQUFjLEVBQWxCLEVBQXNCO0FBQ2xCLDJCQUFvQixLQUFLLFdBQXpCO0FBQ0gsT0FGRCxNQUVPLDRCQUE2QjtBQUNoQyw0QkFBb0IsS0FBTSxjQUFjLEVBQXhDO0FBQ0g7QUFDSjs7QUFFRDtBQUNBLFNBQUksT0FBTyxJQUFYLEVBQWlCO0FBQ2I7QUFDQSxhQUFRLFFBQVEsQ0FBVCxHQUFjLElBQXJCO0FBQ0gsTUFIRCxNQUdPO0FBQ0gsZUFBUyxDQUFUO0FBQ0g7QUFDSjs7QUFFRCxvQkFBZ0IsQ0FBaEIsSUFBcUIsUUFBUSxNQUFSLENBQWUsZ0JBQWYsRUFBaUMsZ0JBQWpDLENBQXJCO0FBQ0g7QUFDSixHQTlDQSxHQUFEOztBQWdEQTtBQUNBLE1BQUksSUFBSSxFQUFSO0FBQ0MsZUFBWTtBQUNULFFBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxFQUFwQixFQUF3QixHQUF4QixFQUE2QjtBQUN6QixNQUFFLENBQUYsSUFBTyxRQUFRLE1BQVIsRUFBUDtBQUNIO0FBQ0osR0FKQSxHQUFEOztBQU1BOzs7QUFHQSxNQUFJLE9BQU8sT0FBTyxJQUFQLEdBQWMsT0FBTyxNQUFQLENBQWM7QUFDbkM7Ozs7Ozs7O0FBUUEsUUFBSyxPQUFPLEdBQVAsQ0FBVyxNQUFYLENBQWtCO0FBQ25CLGtCQUFjO0FBREssSUFBbEIsQ0FUOEI7O0FBYW5DLGFBQVUsb0JBQVk7QUFDbEIsUUFBSSxRQUFRLEtBQUssTUFBTCxHQUFjLEVBQTFCO0FBQ0EsU0FBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLEVBQXBCLEVBQXdCLEdBQXhCLEVBQTZCO0FBQ3pCLFdBQU0sQ0FBTixJQUFXLElBQUksUUFBUSxJQUFaLEVBQVg7QUFDSDs7QUFFRCxTQUFLLFNBQUwsR0FBaUIsQ0FBQyxPQUFPLElBQUksS0FBSyxHQUFMLENBQVMsWUFBckIsSUFBcUMsRUFBdEQ7QUFDSCxJQXBCa0M7O0FBc0JuQyxvQkFBaUIseUJBQVUsQ0FBVixFQUFhLE1BQWIsRUFBcUI7QUFDbEM7QUFDQSxRQUFJLFFBQVEsS0FBSyxNQUFqQjtBQUNBLFFBQUksa0JBQWtCLEtBQUssU0FBTCxHQUFpQixDQUF2Qzs7QUFFQTtBQUNBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxlQUFwQixFQUFxQyxHQUFyQyxFQUEwQztBQUN0QztBQUNBLFNBQUksTUFBTyxFQUFFLFNBQVMsSUFBSSxDQUFmLENBQVg7QUFDQSxTQUFJLE9BQU8sRUFBRSxTQUFTLElBQUksQ0FBYixHQUFpQixDQUFuQixDQUFYOztBQUVBO0FBQ0EsV0FDSyxDQUFFLE9BQU8sQ0FBUixHQUFlLFFBQVEsRUFBeEIsSUFBK0IsVUFBaEMsR0FDQyxDQUFFLE9BQU8sRUFBUixHQUFlLFFBQVEsQ0FBeEIsSUFBK0IsVUFGcEM7QUFJQSxZQUNLLENBQUUsUUFBUSxDQUFULEdBQWdCLFNBQVMsRUFBMUIsSUFBaUMsVUFBbEMsR0FDQyxDQUFFLFFBQVEsRUFBVCxHQUFnQixTQUFTLENBQTFCLElBQWlDLFVBRnRDOztBQUtBO0FBQ0EsU0FBSSxPQUFPLE1BQU0sQ0FBTixDQUFYO0FBQ0EsVUFBSyxJQUFMLElBQWEsSUFBYjtBQUNBLFVBQUssR0FBTCxJQUFhLEdBQWI7QUFDSDs7QUFFRDtBQUNBLFNBQUssSUFBSSxRQUFRLENBQWpCLEVBQW9CLFFBQVEsRUFBNUIsRUFBZ0MsT0FBaEMsRUFBeUM7QUFDckM7QUFDQSxVQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksQ0FBcEIsRUFBdUIsR0FBdkIsRUFBNEI7QUFDeEI7QUFDQSxVQUFJLE9BQU8sQ0FBWDtBQUFBLFVBQWMsT0FBTyxDQUFyQjtBQUNBLFdBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxDQUFwQixFQUF1QixHQUF2QixFQUE0QjtBQUN4QixXQUFJLE9BQU8sTUFBTSxJQUFJLElBQUksQ0FBZCxDQUFYO0FBQ0EsZUFBUSxLQUFLLElBQWI7QUFDQSxlQUFRLEtBQUssR0FBYjtBQUNIOztBQUVEO0FBQ0EsVUFBSSxLQUFLLEVBQUUsQ0FBRixDQUFUO0FBQ0EsU0FBRyxJQUFILEdBQVUsSUFBVjtBQUNBLFNBQUcsR0FBSCxHQUFVLElBQVY7QUFDSDtBQUNELFVBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxDQUFwQixFQUF1QixHQUF2QixFQUE0QjtBQUN4QjtBQUNBLFVBQUksTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFMLElBQVUsQ0FBWixDQUFWO0FBQ0EsVUFBSSxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUwsSUFBVSxDQUFaLENBQVY7QUFDQSxVQUFJLFNBQVMsSUFBSSxJQUFqQjtBQUNBLFVBQUksU0FBUyxJQUFJLEdBQWpCOztBQUVBO0FBQ0EsVUFBSSxPQUFPLElBQUksSUFBSixJQUFhLFVBQVUsQ0FBWCxHQUFpQixXQUFXLEVBQXhDLENBQVg7QUFDQSxVQUFJLE9BQU8sSUFBSSxHQUFKLElBQWEsVUFBVSxDQUFYLEdBQWlCLFdBQVcsRUFBeEMsQ0FBWDtBQUNBLFdBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxDQUFwQixFQUF1QixHQUF2QixFQUE0QjtBQUN4QixXQUFJLE9BQU8sTUFBTSxJQUFJLElBQUksQ0FBZCxDQUFYO0FBQ0EsWUFBSyxJQUFMLElBQWEsSUFBYjtBQUNBLFlBQUssR0FBTCxJQUFhLElBQWI7QUFDSDtBQUNKOztBQUVEO0FBQ0EsVUFBSyxJQUFJLFlBQVksQ0FBckIsRUFBd0IsWUFBWSxFQUFwQyxFQUF3QyxXQUF4QyxFQUFxRDtBQUNqRDtBQUNBLFVBQUksT0FBTyxNQUFNLFNBQU4sQ0FBWDtBQUNBLFVBQUksVUFBVSxLQUFLLElBQW5CO0FBQ0EsVUFBSSxVQUFVLEtBQUssR0FBbkI7QUFDQSxVQUFJLFlBQVksWUFBWSxTQUFaLENBQWhCOztBQUVBO0FBQ0EsVUFBSSxZQUFZLEVBQWhCLEVBQW9CO0FBQ2hCLFdBQUksT0FBUSxXQUFXLFNBQVosR0FBMEIsWUFBYSxLQUFLLFNBQXZEO0FBQ0EsV0FBSSxPQUFRLFdBQVcsU0FBWixHQUEwQixZQUFhLEtBQUssU0FBdkQ7QUFDSCxPQUhELE1BR08sMEJBQTJCO0FBQzlCLFlBQUksT0FBUSxXQUFZLFlBQVksRUFBekIsR0FBaUMsWUFBYSxLQUFLLFNBQTlEO0FBQ0EsWUFBSSxPQUFRLFdBQVksWUFBWSxFQUF6QixHQUFpQyxZQUFhLEtBQUssU0FBOUQ7QUFDSDs7QUFFRDtBQUNBLFVBQUksVUFBVSxFQUFFLFdBQVcsU0FBWCxDQUFGLENBQWQ7QUFDQSxjQUFRLElBQVIsR0FBZSxJQUFmO0FBQ0EsY0FBUSxHQUFSLEdBQWUsSUFBZjtBQUNIOztBQUVEO0FBQ0EsU0FBSSxLQUFLLEVBQUUsQ0FBRixDQUFUO0FBQ0EsU0FBSSxTQUFTLE1BQU0sQ0FBTixDQUFiO0FBQ0EsUUFBRyxJQUFILEdBQVUsT0FBTyxJQUFqQjtBQUNBLFFBQUcsR0FBSCxHQUFVLE9BQU8sR0FBakI7O0FBRUE7QUFDQSxVQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksQ0FBcEIsRUFBdUIsR0FBdkIsRUFBNEI7QUFDeEIsV0FBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLENBQXBCLEVBQXVCLEdBQXZCLEVBQTRCO0FBQ3hCO0FBQ0EsV0FBSSxZQUFZLElBQUksSUFBSSxDQUF4QjtBQUNBLFdBQUksT0FBTyxNQUFNLFNBQU4sQ0FBWDtBQUNBLFdBQUksUUFBUSxFQUFFLFNBQUYsQ0FBWjtBQUNBLFdBQUksVUFBVSxFQUFHLENBQUMsSUFBSSxDQUFMLElBQVUsQ0FBWCxHQUFnQixJQUFJLENBQXRCLENBQWQ7QUFDQSxXQUFJLFVBQVUsRUFBRyxDQUFDLElBQUksQ0FBTCxJQUFVLENBQVgsR0FBZ0IsSUFBSSxDQUF0QixDQUFkOztBQUVBO0FBQ0EsWUFBSyxJQUFMLEdBQVksTUFBTSxJQUFOLEdBQWMsQ0FBQyxRQUFRLElBQVQsR0FBZ0IsUUFBUSxJQUFsRDtBQUNBLFlBQUssR0FBTCxHQUFZLE1BQU0sR0FBTixHQUFjLENBQUMsUUFBUSxHQUFULEdBQWdCLFFBQVEsR0FBbEQ7QUFDSDtBQUNKOztBQUVEO0FBQ0EsU0FBSSxPQUFPLE1BQU0sQ0FBTixDQUFYO0FBQ0EsU0FBSSxnQkFBZ0IsZ0JBQWdCLEtBQWhCLENBQXBCO0FBQ0EsVUFBSyxJQUFMLElBQWEsY0FBYyxJQUEzQjtBQUNBLFVBQUssR0FBTCxJQUFhLGNBQWMsR0FBM0IsQ0FBK0I7QUFDbEM7QUFDSixJQXRJa0M7O0FBd0luQyxnQkFBYSx1QkFBWTtBQUNyQjtBQUNBLFFBQUksT0FBTyxLQUFLLEtBQWhCO0FBQ0EsUUFBSSxZQUFZLEtBQUssS0FBckI7QUFDQSxRQUFJLGFBQWEsS0FBSyxXQUFMLEdBQW1CLENBQXBDO0FBQ0EsUUFBSSxZQUFZLEtBQUssUUFBTCxHQUFnQixDQUFoQztBQUNBLFFBQUksZ0JBQWdCLEtBQUssU0FBTCxHQUFpQixFQUFyQzs7QUFFQTtBQUNBLGNBQVUsY0FBYyxDQUF4QixLQUE4QixPQUFRLEtBQUssWUFBWSxFQUF2RDtBQUNBLGNBQVUsQ0FBRSxLQUFLLElBQUwsQ0FBVSxDQUFDLFlBQVksQ0FBYixJQUFrQixhQUE1QixJQUE2QyxhQUE5QyxLQUFpRSxDQUFsRSxJQUF1RSxDQUFqRixLQUF1RixJQUF2RjtBQUNBLFNBQUssUUFBTCxHQUFnQixVQUFVLE1BQVYsR0FBbUIsQ0FBbkM7O0FBRUE7QUFDQSxTQUFLLFFBQUw7O0FBRUE7QUFDQSxRQUFJLFFBQVEsS0FBSyxNQUFqQjtBQUNBLFFBQUksb0JBQW9CLEtBQUssR0FBTCxDQUFTLFlBQVQsR0FBd0IsQ0FBaEQ7QUFDQSxRQUFJLG9CQUFvQixvQkFBb0IsQ0FBNUM7O0FBRUE7QUFDQSxRQUFJLFlBQVksRUFBaEI7QUFDQSxTQUFLLElBQUksSUFBSSxDQUFiLEVBQWdCLElBQUksaUJBQXBCLEVBQXVDLEdBQXZDLEVBQTRDO0FBQ3hDO0FBQ0EsU0FBSSxPQUFPLE1BQU0sQ0FBTixDQUFYO0FBQ0EsU0FBSSxVQUFVLEtBQUssSUFBbkI7QUFDQSxTQUFJLFVBQVUsS0FBSyxHQUFuQjs7QUFFQTtBQUNBLGVBQ0ssQ0FBRSxXQUFXLENBQVosR0FBbUIsWUFBWSxFQUFoQyxJQUF1QyxVQUF4QyxHQUNDLENBQUUsV0FBVyxFQUFaLEdBQW1CLFlBQVksQ0FBaEMsSUFBdUMsVUFGNUM7QUFJQSxlQUNLLENBQUUsV0FBVyxDQUFaLEdBQW1CLFlBQVksRUFBaEMsSUFBdUMsVUFBeEMsR0FDQyxDQUFFLFdBQVcsRUFBWixHQUFtQixZQUFZLENBQWhDLElBQXVDLFVBRjVDOztBQUtBO0FBQ0EsZUFBVSxJQUFWLENBQWUsT0FBZjtBQUNBLGVBQVUsSUFBVixDQUFlLE9BQWY7QUFDSDs7QUFFRDtBQUNBLFdBQU8sSUFBSSxVQUFVLElBQWQsQ0FBbUIsU0FBbkIsRUFBOEIsaUJBQTlCLENBQVA7QUFDSCxJQXRMa0M7O0FBd0xuQyxVQUFPLGlCQUFZO0FBQ2YsUUFBSSxRQUFRLE9BQU8sS0FBUCxDQUFhLElBQWIsQ0FBa0IsSUFBbEIsQ0FBWjs7QUFFQSxRQUFJLFFBQVEsTUFBTSxNQUFOLEdBQWUsS0FBSyxNQUFMLENBQVksS0FBWixDQUFrQixDQUFsQixDQUEzQjtBQUNBLFNBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxFQUFwQixFQUF3QixHQUF4QixFQUE2QjtBQUN6QixXQUFNLENBQU4sSUFBVyxNQUFNLENBQU4sRUFBUyxLQUFULEVBQVg7QUFDSDs7QUFFRCxXQUFPLEtBQVA7QUFDSDtBQWpNa0MsR0FBZCxDQUF6Qjs7QUFvTUE7Ozs7Ozs7Ozs7Ozs7O0FBY0EsSUFBRSxJQUFGLEdBQVMsT0FBTyxhQUFQLENBQXFCLElBQXJCLENBQVQ7O0FBRUE7Ozs7Ozs7Ozs7Ozs7O0FBY0EsSUFBRSxRQUFGLEdBQWEsT0FBTyxpQkFBUCxDQUF5QixJQUF6QixDQUFiO0FBQ0gsRUE5U0EsRUE4U0MsSUE5U0QsQ0FBRDs7QUFpVEEsUUFBTyxTQUFTLElBQWhCO0FBRUEsQ0FsVUMsQ0FBRDs7Ozs7OztBQ0FELENBQUUsV0FBVSxJQUFWLEVBQWdCLE9BQWhCLEVBQXlCLEtBQXpCLEVBQWdDO0FBQ2pDLEtBQUksUUFBTyxPQUFQLHlDQUFPLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDaEM7QUFDQSxTQUFPLE9BQVAsR0FBaUIsVUFBVSxRQUFRLFFBQVEsUUFBUixDQUFSLEVBQTJCLFFBQVEsWUFBUixDQUEzQixFQUFrRCxRQUFRLFVBQVIsQ0FBbEQsQ0FBM0I7QUFDQSxFQUhELE1BSUssSUFBSSxPQUFPLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0MsT0FBTyxHQUEzQyxFQUFnRDtBQUNwRDtBQUNBLFNBQU8sQ0FBQyxRQUFELEVBQVcsWUFBWCxFQUF5QixVQUF6QixDQUFQLEVBQTZDLE9BQTdDO0FBQ0EsRUFISSxNQUlBO0FBQ0o7QUFDQSxVQUFRLEtBQUssUUFBYjtBQUNBO0FBQ0QsQ0FiQyxhQWFNLFVBQVUsUUFBVixFQUFvQjs7QUFFMUIsY0FBWTtBQUNUO0FBQ0EsTUFBSSxJQUFJLFFBQVI7QUFDQSxNQUFJLFFBQVEsRUFBRSxHQUFkO0FBQ0EsTUFBSSxVQUFVLE1BQU0sSUFBcEI7QUFDQSxNQUFJLGVBQWUsTUFBTSxTQUF6QjtBQUNBLE1BQUksU0FBUyxFQUFFLElBQWY7QUFDQSxNQUFJLFNBQVMsT0FBTyxNQUFwQjs7QUFFQTs7O0FBR0EsTUFBSSxTQUFTLE9BQU8sTUFBUCxHQUFnQixPQUFPLE1BQVAsQ0FBYztBQUN2QyxhQUFVLG9CQUFZO0FBQ2xCLFNBQUssS0FBTCxHQUFhLElBQUksYUFBYSxJQUFqQixDQUFzQixDQUMvQixJQUFJLFFBQVEsSUFBWixDQUFpQixVQUFqQixFQUE2QixVQUE3QixDQUQrQixFQUNXLElBQUksUUFBUSxJQUFaLENBQWlCLFVBQWpCLEVBQTZCLFVBQTdCLENBRFgsRUFFL0IsSUFBSSxRQUFRLElBQVosQ0FBaUIsVUFBakIsRUFBNkIsVUFBN0IsQ0FGK0IsRUFFVyxJQUFJLFFBQVEsSUFBWixDQUFpQixVQUFqQixFQUE2QixVQUE3QixDQUZYLEVBRy9CLElBQUksUUFBUSxJQUFaLENBQWlCLFVBQWpCLEVBQTZCLFVBQTdCLENBSCtCLEVBR1csSUFBSSxRQUFRLElBQVosQ0FBaUIsVUFBakIsRUFBNkIsVUFBN0IsQ0FIWCxFQUkvQixJQUFJLFFBQVEsSUFBWixDQUFpQixVQUFqQixFQUE2QixVQUE3QixDQUorQixFQUlXLElBQUksUUFBUSxJQUFaLENBQWlCLFVBQWpCLEVBQTZCLFVBQTdCLENBSlgsQ0FBdEIsQ0FBYjtBQU1ILElBUnNDOztBQVV2QyxnQkFBYSx1QkFBWTtBQUNyQixRQUFJLE9BQU8sT0FBTyxXQUFQLENBQW1CLElBQW5CLENBQXdCLElBQXhCLENBQVg7O0FBRUEsU0FBSyxRQUFMLElBQWlCLEVBQWpCOztBQUVBLFdBQU8sSUFBUDtBQUNIO0FBaEJzQyxHQUFkLENBQTdCOztBQW1CQTs7Ozs7Ozs7Ozs7Ozs7QUFjQSxJQUFFLE1BQUYsR0FBVyxPQUFPLGFBQVAsQ0FBcUIsTUFBckIsQ0FBWDs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7QUFjQSxJQUFFLFVBQUYsR0FBZSxPQUFPLGlCQUFQLENBQXlCLE1BQXpCLENBQWY7QUFDSCxFQTlEQSxHQUFEOztBQWlFQSxRQUFPLFNBQVMsTUFBaEI7QUFFQSxDQWxGQyxDQUFEOzs7Ozs7O0FDQUQsQ0FBRSxXQUFVLElBQVYsRUFBZ0IsT0FBaEIsRUFBeUIsS0FBekIsRUFBZ0M7QUFDakMsS0FBSSxRQUFPLE9BQVAseUNBQU8sT0FBUCxPQUFtQixRQUF2QixFQUFpQztBQUNoQztBQUNBLFNBQU8sT0FBUCxHQUFpQixVQUFVLFFBQVEsUUFBUSxRQUFSLENBQVIsRUFBMkIsUUFBUSxZQUFSLENBQTNCLENBQTNCO0FBQ0EsRUFIRCxNQUlLLElBQUksT0FBTyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU8sR0FBM0MsRUFBZ0Q7QUFDcEQ7QUFDQSxTQUFPLENBQUMsUUFBRCxFQUFXLFlBQVgsQ0FBUCxFQUFpQyxPQUFqQztBQUNBLEVBSEksTUFJQTtBQUNKO0FBQ0EsVUFBUSxLQUFLLFFBQWI7QUFDQTtBQUNELENBYkMsYUFhTSxVQUFVLFFBQVYsRUFBb0I7O0FBRTFCLGNBQVk7QUFDVDtBQUNBLE1BQUksSUFBSSxRQUFSO0FBQ0EsTUFBSSxRQUFRLEVBQUUsR0FBZDtBQUNBLE1BQUksU0FBUyxNQUFNLE1BQW5CO0FBQ0EsTUFBSSxRQUFRLEVBQUUsR0FBZDtBQUNBLE1BQUksVUFBVSxNQUFNLElBQXBCO0FBQ0EsTUFBSSxlQUFlLE1BQU0sU0FBekI7QUFDQSxNQUFJLFNBQVMsRUFBRSxJQUFmOztBQUVBLFdBQVMsY0FBVCxHQUEwQjtBQUN0QixVQUFPLFFBQVEsTUFBUixDQUFlLEtBQWYsQ0FBcUIsT0FBckIsRUFBOEIsU0FBOUIsQ0FBUDtBQUNIOztBQUVEO0FBQ0EsTUFBSSxJQUFJLENBQ0osZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBREksRUFDb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBRHBDLEVBRUosZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBRkksRUFFb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBRnBDLEVBR0osZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBSEksRUFHb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBSHBDLEVBSUosZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBSkksRUFJb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBSnBDLEVBS0osZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBTEksRUFLb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBTHBDLEVBTUosZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBTkksRUFNb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBTnBDLEVBT0osZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBUEksRUFPb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBUHBDLEVBUUosZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBUkksRUFRb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBUnBDLEVBU0osZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBVEksRUFTb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBVHBDLEVBVUosZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBVkksRUFVb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBVnBDLEVBV0osZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBWEksRUFXb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBWHBDLEVBWUosZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBWkksRUFZb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBWnBDLEVBYUosZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBYkksRUFhb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBYnBDLEVBY0osZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBZEksRUFjb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBZHBDLEVBZUosZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBZkksRUFlb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBZnBDLEVBZ0JKLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQWhCSSxFQWdCb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBaEJwQyxFQWlCSixlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0FqQkksRUFpQm9DLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQWpCcEMsRUFrQkosZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBbEJJLEVBa0JvQyxlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0FsQnBDLEVBbUJKLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQW5CSSxFQW1Cb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBbkJwQyxFQW9CSixlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0FwQkksRUFvQm9DLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQXBCcEMsRUFxQkosZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBckJJLEVBcUJvQyxlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0FyQnBDLEVBc0JKLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQXRCSSxFQXNCb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBdEJwQyxFQXVCSixlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0F2QkksRUF1Qm9DLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQXZCcEMsRUF3QkosZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBeEJJLEVBd0JvQyxlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0F4QnBDLEVBeUJKLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQXpCSSxFQXlCb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBekJwQyxFQTBCSixlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0ExQkksRUEwQm9DLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQTFCcEMsRUEyQkosZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBM0JJLEVBMkJvQyxlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0EzQnBDLEVBNEJKLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQTVCSSxFQTRCb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBNUJwQyxFQTZCSixlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0E3QkksRUE2Qm9DLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQTdCcEMsRUE4QkosZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBOUJJLEVBOEJvQyxlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0E5QnBDLEVBK0JKLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQS9CSSxFQStCb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBL0JwQyxFQWdDSixlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0FoQ0ksRUFnQ29DLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQWhDcEMsRUFpQ0osZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBakNJLEVBaUNvQyxlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0FqQ3BDLEVBa0NKLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQWxDSSxFQWtDb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBbENwQyxFQW1DSixlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0FuQ0ksRUFtQ29DLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQW5DcEMsRUFvQ0osZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBcENJLEVBb0NvQyxlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0FwQ3BDLEVBcUNKLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQXJDSSxFQXFDb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBckNwQyxFQXNDSixlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0F0Q0ksRUFzQ29DLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQXRDcEMsRUF1Q0osZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBdkNJLEVBdUNvQyxlQUFlLFVBQWYsRUFBMkIsVUFBM0IsQ0F2Q3BDLEVBd0NKLGVBQWUsVUFBZixFQUEyQixVQUEzQixDQXhDSSxFQXdDb0MsZUFBZSxVQUFmLEVBQTJCLFVBQTNCLENBeENwQyxDQUFSOztBQTJDQTtBQUNBLE1BQUksSUFBSSxFQUFSO0FBQ0MsZUFBWTtBQUNULFFBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxFQUFwQixFQUF3QixHQUF4QixFQUE2QjtBQUN6QixNQUFFLENBQUYsSUFBTyxnQkFBUDtBQUNIO0FBQ0osR0FKQSxHQUFEOztBQU1BOzs7QUFHQSxNQUFJLFNBQVMsT0FBTyxNQUFQLEdBQWdCLE9BQU8sTUFBUCxDQUFjO0FBQ3ZDLGFBQVUsb0JBQVk7QUFDbEIsU0FBSyxLQUFMLEdBQWEsSUFBSSxhQUFhLElBQWpCLENBQXNCLENBQy9CLElBQUksUUFBUSxJQUFaLENBQWlCLFVBQWpCLEVBQTZCLFVBQTdCLENBRCtCLEVBQ1csSUFBSSxRQUFRLElBQVosQ0FBaUIsVUFBakIsRUFBNkIsVUFBN0IsQ0FEWCxFQUUvQixJQUFJLFFBQVEsSUFBWixDQUFpQixVQUFqQixFQUE2QixVQUE3QixDQUYrQixFQUVXLElBQUksUUFBUSxJQUFaLENBQWlCLFVBQWpCLEVBQTZCLFVBQTdCLENBRlgsRUFHL0IsSUFBSSxRQUFRLElBQVosQ0FBaUIsVUFBakIsRUFBNkIsVUFBN0IsQ0FIK0IsRUFHVyxJQUFJLFFBQVEsSUFBWixDQUFpQixVQUFqQixFQUE2QixVQUE3QixDQUhYLEVBSS9CLElBQUksUUFBUSxJQUFaLENBQWlCLFVBQWpCLEVBQTZCLFVBQTdCLENBSitCLEVBSVcsSUFBSSxRQUFRLElBQVosQ0FBaUIsVUFBakIsRUFBNkIsVUFBN0IsQ0FKWCxDQUF0QixDQUFiO0FBTUgsSUFSc0M7O0FBVXZDLG9CQUFpQix5QkFBVSxDQUFWLEVBQWEsTUFBYixFQUFxQjtBQUNsQztBQUNBLFFBQUksSUFBSSxLQUFLLEtBQUwsQ0FBVyxLQUFuQjs7QUFFQSxRQUFJLEtBQUssRUFBRSxDQUFGLENBQVQ7QUFDQSxRQUFJLEtBQUssRUFBRSxDQUFGLENBQVQ7QUFDQSxRQUFJLEtBQUssRUFBRSxDQUFGLENBQVQ7QUFDQSxRQUFJLEtBQUssRUFBRSxDQUFGLENBQVQ7QUFDQSxRQUFJLEtBQUssRUFBRSxDQUFGLENBQVQ7QUFDQSxRQUFJLEtBQUssRUFBRSxDQUFGLENBQVQ7QUFDQSxRQUFJLEtBQUssRUFBRSxDQUFGLENBQVQ7QUFDQSxRQUFJLEtBQUssRUFBRSxDQUFGLENBQVQ7O0FBRUEsUUFBSSxNQUFNLEdBQUcsSUFBYjtBQUNBLFFBQUksTUFBTSxHQUFHLEdBQWI7QUFDQSxRQUFJLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSSxNQUFNLEdBQUcsR0FBYjtBQUNBLFFBQUksTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJLE1BQU0sR0FBRyxHQUFiO0FBQ0EsUUFBSSxNQUFNLEdBQUcsSUFBYjtBQUNBLFFBQUksTUFBTSxHQUFHLEdBQWI7QUFDQSxRQUFJLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSSxNQUFNLEdBQUcsR0FBYjtBQUNBLFFBQUksTUFBTSxHQUFHLElBQWI7QUFDQSxRQUFJLE1BQU0sR0FBRyxHQUFiO0FBQ0EsUUFBSSxNQUFNLEdBQUcsSUFBYjtBQUNBLFFBQUksTUFBTSxHQUFHLEdBQWI7QUFDQSxRQUFJLE1BQU0sR0FBRyxJQUFiO0FBQ0EsUUFBSSxNQUFNLEdBQUcsR0FBYjs7QUFFQTtBQUNBLFFBQUksS0FBSyxHQUFUO0FBQ0EsUUFBSSxLQUFLLEdBQVQ7QUFDQSxRQUFJLEtBQUssR0FBVDtBQUNBLFFBQUksS0FBSyxHQUFUO0FBQ0EsUUFBSSxLQUFLLEdBQVQ7QUFDQSxRQUFJLEtBQUssR0FBVDtBQUNBLFFBQUksS0FBSyxHQUFUO0FBQ0EsUUFBSSxLQUFLLEdBQVQ7QUFDQSxRQUFJLEtBQUssR0FBVDtBQUNBLFFBQUksS0FBSyxHQUFUO0FBQ0EsUUFBSSxLQUFLLEdBQVQ7QUFDQSxRQUFJLEtBQUssR0FBVDtBQUNBLFFBQUksS0FBSyxHQUFUO0FBQ0EsUUFBSSxLQUFLLEdBQVQ7QUFDQSxRQUFJLEtBQUssR0FBVDtBQUNBLFFBQUksS0FBSyxHQUFUOztBQUVBO0FBQ0EsU0FBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLEVBQXBCLEVBQXdCLEdBQXhCLEVBQTZCO0FBQ3pCO0FBQ0EsU0FBSSxLQUFLLEVBQUUsQ0FBRixDQUFUOztBQUVBO0FBQ0EsU0FBSSxJQUFJLEVBQVIsRUFBWTtBQUNSLFVBQUksTUFBTSxHQUFHLElBQUgsR0FBVSxFQUFFLFNBQVMsSUFBSSxDQUFmLElBQXdCLENBQTVDO0FBQ0EsVUFBSSxNQUFNLEdBQUcsR0FBSCxHQUFVLEVBQUUsU0FBUyxJQUFJLENBQWIsR0FBaUIsQ0FBbkIsSUFBd0IsQ0FBNUM7QUFDSCxNQUhELE1BR087QUFDSDtBQUNBLFVBQUksVUFBVyxFQUFFLElBQUksRUFBTixDQUFmO0FBQ0EsVUFBSSxXQUFXLFFBQVEsSUFBdkI7QUFDQSxVQUFJLFdBQVcsUUFBUSxHQUF2QjtBQUNBLFVBQUksVUFBVyxDQUFFLGFBQWEsQ0FBZCxHQUFvQixZQUFZLEVBQWpDLEtBQTBDLGFBQWEsQ0FBZCxHQUFvQixZQUFZLEVBQXpFLElBQWlGLGFBQWEsQ0FBN0c7QUFDQSxVQUFJLFVBQVcsQ0FBRSxhQUFhLENBQWQsR0FBb0IsWUFBWSxFQUFqQyxLQUEwQyxhQUFhLENBQWQsR0FBb0IsWUFBWSxFQUF6RSxLQUFrRixhQUFhLENBQWQsR0FBb0IsWUFBWSxFQUFqSCxDQUFmOztBQUVBO0FBQ0EsVUFBSSxVQUFXLEVBQUUsSUFBSSxDQUFOLENBQWY7QUFDQSxVQUFJLFdBQVcsUUFBUSxJQUF2QjtBQUNBLFVBQUksV0FBVyxRQUFRLEdBQXZCO0FBQ0EsVUFBSSxVQUFXLENBQUUsYUFBYSxFQUFkLEdBQXFCLFlBQVksRUFBbEMsS0FBMkMsWUFBWSxDQUFiLEdBQW1CLGFBQWEsRUFBMUUsSUFBa0YsYUFBYSxDQUE5RztBQUNBLFVBQUksVUFBVyxDQUFFLGFBQWEsRUFBZCxHQUFxQixZQUFZLEVBQWxDLEtBQTJDLFlBQVksQ0FBYixHQUFtQixhQUFhLEVBQTFFLEtBQW1GLGFBQWEsQ0FBZCxHQUFvQixZQUFZLEVBQWxILENBQWY7O0FBRUE7QUFDQSxVQUFJLE1BQU8sRUFBRSxJQUFJLENBQU4sQ0FBWDtBQUNBLFVBQUksT0FBTyxJQUFJLElBQWY7QUFDQSxVQUFJLE9BQU8sSUFBSSxHQUFmOztBQUVBLFVBQUksT0FBUSxFQUFFLElBQUksRUFBTixDQUFaO0FBQ0EsVUFBSSxRQUFRLEtBQUssSUFBakI7QUFDQSxVQUFJLFFBQVEsS0FBSyxHQUFqQjs7QUFFQSxVQUFJLE1BQU0sVUFBVSxJQUFwQjtBQUNBLFVBQUksTUFBTSxVQUFVLElBQVYsSUFBbUIsUUFBUSxDQUFULEdBQWUsWUFBWSxDQUEzQixHQUFnQyxDQUFoQyxHQUFvQyxDQUF0RCxDQUFWO0FBQ0EsVUFBSSxNQUFNLE1BQU0sT0FBaEI7QUFDQSxVQUFJLE1BQU0sTUFBTSxPQUFOLElBQWtCLFFBQVEsQ0FBVCxHQUFlLFlBQVksQ0FBM0IsR0FBZ0MsQ0FBaEMsR0FBb0MsQ0FBckQsQ0FBVjtBQUNBLFVBQUksTUFBTSxNQUFNLEtBQWhCO0FBQ0EsVUFBSSxNQUFNLE1BQU0sS0FBTixJQUFnQixRQUFRLENBQVQsR0FBZSxVQUFVLENBQXpCLEdBQThCLENBQTlCLEdBQWtDLENBQWpELENBQVY7O0FBRUEsU0FBRyxJQUFILEdBQVUsR0FBVjtBQUNBLFNBQUcsR0FBSCxHQUFVLEdBQVY7QUFDSDs7QUFFRCxTQUFJLE1BQVEsS0FBSyxFQUFOLEdBQWEsQ0FBQyxFQUFELEdBQU0sRUFBOUI7QUFDQSxTQUFJLE1BQVEsS0FBSyxFQUFOLEdBQWEsQ0FBQyxFQUFELEdBQU0sRUFBOUI7QUFDQSxTQUFJLE9BQVEsS0FBSyxFQUFOLEdBQWEsS0FBSyxFQUFsQixHQUF5QixLQUFLLEVBQXpDO0FBQ0EsU0FBSSxPQUFRLEtBQUssRUFBTixHQUFhLEtBQUssRUFBbEIsR0FBeUIsS0FBSyxFQUF6Qzs7QUFFQSxTQUFJLFVBQVUsQ0FBRSxPQUFPLEVBQVIsR0FBZSxNQUFNLENBQXRCLEtBQStCLE1BQU0sRUFBUCxHQUFlLE9BQU8sQ0FBcEQsS0FBNEQsTUFBTSxFQUFQLEdBQWMsT0FBTyxDQUFoRixDQUFkO0FBQ0EsU0FBSSxVQUFVLENBQUUsT0FBTyxFQUFSLEdBQWUsTUFBTSxDQUF0QixLQUErQixNQUFNLEVBQVAsR0FBZSxPQUFPLENBQXBELEtBQTRELE1BQU0sRUFBUCxHQUFjLE9BQU8sQ0FBaEYsQ0FBZDtBQUNBLFNBQUksVUFBVSxDQUFFLE9BQU8sRUFBUixHQUFlLE1BQU0sRUFBdEIsS0FBK0IsT0FBTyxFQUFSLEdBQWUsTUFBTSxFQUFuRCxLQUE0RCxNQUFNLEVBQVAsR0FBYyxPQUFPLENBQWhGLENBQWQ7QUFDQSxTQUFJLFVBQVUsQ0FBRSxPQUFPLEVBQVIsR0FBZSxNQUFNLEVBQXRCLEtBQStCLE9BQU8sRUFBUixHQUFlLE1BQU0sRUFBbkQsS0FBNEQsTUFBTSxFQUFQLEdBQWMsT0FBTyxDQUFoRixDQUFkOztBQUVBO0FBQ0EsU0FBSSxLQUFNLEVBQUUsQ0FBRixDQUFWO0FBQ0EsU0FBSSxNQUFNLEdBQUcsSUFBYjtBQUNBLFNBQUksTUFBTSxHQUFHLEdBQWI7O0FBRUEsU0FBSSxNQUFNLEtBQUssT0FBZjtBQUNBLFNBQUksTUFBTSxLQUFLLE9BQUwsSUFBaUIsUUFBUSxDQUFULEdBQWUsT0FBTyxDQUF0QixHQUEyQixDQUEzQixHQUErQixDQUEvQyxDQUFWO0FBQ0EsU0FBSSxNQUFNLE1BQU0sR0FBaEI7QUFDQSxTQUFJLE1BQU0sTUFBTSxHQUFOLElBQWMsUUFBUSxDQUFULEdBQWUsUUFBUSxDQUF2QixHQUE0QixDQUE1QixHQUFnQyxDQUE3QyxDQUFWO0FBQ0EsU0FBSSxNQUFNLE1BQU0sR0FBaEI7QUFDQSxTQUFJLE1BQU0sTUFBTSxHQUFOLElBQWMsUUFBUSxDQUFULEdBQWUsUUFBUSxDQUF2QixHQUE0QixDQUE1QixHQUFnQyxDQUE3QyxDQUFWO0FBQ0EsU0FBSSxNQUFNLE1BQU0sR0FBaEI7QUFDQSxTQUFJLE1BQU0sTUFBTSxHQUFOLElBQWMsUUFBUSxDQUFULEdBQWUsUUFBUSxDQUF2QixHQUE0QixDQUE1QixHQUFnQyxDQUE3QyxDQUFWOztBQUVBO0FBQ0EsU0FBSSxNQUFNLFVBQVUsSUFBcEI7QUFDQSxTQUFJLE1BQU0sVUFBVSxJQUFWLElBQW1CLFFBQVEsQ0FBVCxHQUFlLFlBQVksQ0FBM0IsR0FBZ0MsQ0FBaEMsR0FBb0MsQ0FBdEQsQ0FBVjs7QUFFQTtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQU0sS0FBSyxHQUFOLEdBQWEsQ0FBbEI7QUFDQSxVQUFNLEtBQUssR0FBTCxJQUFhLE9BQU8sQ0FBUixHQUFjLE9BQU8sQ0FBckIsR0FBMEIsQ0FBMUIsR0FBOEIsQ0FBMUMsQ0FBRCxHQUFpRCxDQUF0RDtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQUssRUFBTDtBQUNBLFVBQU0sTUFBTSxHQUFQLEdBQWMsQ0FBbkI7QUFDQSxVQUFNLE1BQU0sR0FBTixJQUFjLE9BQU8sQ0FBUixHQUFjLFFBQVEsQ0FBdEIsR0FBMkIsQ0FBM0IsR0FBK0IsQ0FBNUMsQ0FBRCxHQUFtRCxDQUF4RDtBQUNIOztBQUVEO0FBQ0EsVUFBTSxHQUFHLEdBQUgsR0FBVyxNQUFNLEVBQXZCO0FBQ0EsT0FBRyxJQUFILEdBQVcsTUFBTSxFQUFOLElBQWEsUUFBUSxDQUFULEdBQWUsT0FBTyxDQUF0QixHQUEyQixDQUEzQixHQUErQixDQUEzQyxDQUFYO0FBQ0EsVUFBTSxHQUFHLEdBQUgsR0FBVyxNQUFNLEVBQXZCO0FBQ0EsT0FBRyxJQUFILEdBQVcsTUFBTSxFQUFOLElBQWEsUUFBUSxDQUFULEdBQWUsT0FBTyxDQUF0QixHQUEyQixDQUEzQixHQUErQixDQUEzQyxDQUFYO0FBQ0EsVUFBTSxHQUFHLEdBQUgsR0FBVyxNQUFNLEVBQXZCO0FBQ0EsT0FBRyxJQUFILEdBQVcsTUFBTSxFQUFOLElBQWEsUUFBUSxDQUFULEdBQWUsT0FBTyxDQUF0QixHQUEyQixDQUEzQixHQUErQixDQUEzQyxDQUFYO0FBQ0EsVUFBTSxHQUFHLEdBQUgsR0FBVyxNQUFNLEVBQXZCO0FBQ0EsT0FBRyxJQUFILEdBQVcsTUFBTSxFQUFOLElBQWEsUUFBUSxDQUFULEdBQWUsT0FBTyxDQUF0QixHQUEyQixDQUEzQixHQUErQixDQUEzQyxDQUFYO0FBQ0EsVUFBTSxHQUFHLEdBQUgsR0FBVyxNQUFNLEVBQXZCO0FBQ0EsT0FBRyxJQUFILEdBQVcsTUFBTSxFQUFOLElBQWEsUUFBUSxDQUFULEdBQWUsT0FBTyxDQUF0QixHQUEyQixDQUEzQixHQUErQixDQUEzQyxDQUFYO0FBQ0EsVUFBTSxHQUFHLEdBQUgsR0FBVyxNQUFNLEVBQXZCO0FBQ0EsT0FBRyxJQUFILEdBQVcsTUFBTSxFQUFOLElBQWEsUUFBUSxDQUFULEdBQWUsT0FBTyxDQUF0QixHQUEyQixDQUEzQixHQUErQixDQUEzQyxDQUFYO0FBQ0EsVUFBTSxHQUFHLEdBQUgsR0FBVyxNQUFNLEVBQXZCO0FBQ0EsT0FBRyxJQUFILEdBQVcsTUFBTSxFQUFOLElBQWEsUUFBUSxDQUFULEdBQWUsT0FBTyxDQUF0QixHQUEyQixDQUEzQixHQUErQixDQUEzQyxDQUFYO0FBQ0EsVUFBTSxHQUFHLEdBQUgsR0FBVyxNQUFNLEVBQXZCO0FBQ0EsT0FBRyxJQUFILEdBQVcsTUFB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5UEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiY29uc3QgXyAgICAgICAgICAgPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IGNyZWF0ZUNsYXNzID0gcmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNsYXNzJyk7XG5jb25zdCBSZWFjdCAgICAgICA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbmNvbnN0IHN0cmluZ0xpc3QgPSBbXG4gICAgJ0FzeW5jaHJvbm91cyBFdGhlcmV1bS4nLFxuICAgICdSZWxpYWJsZS4gQW5kIHBvd2VyZnVsLicsXG4gICAgJ0Jsb2NrY2hhaW4gU3RhdGUgTWFjaGluZXMuJyxcbiAgICAnVHJ1c3RsZXNzLiBBbHdheXMuJyxcbl07XG5cbmNvbnN0IHRpbWVvdXRzID0gW107XG5cblxuY29uc3QgQWJvdXRQYWdlID0gY3JlYXRlQ2xhc3Moe1xuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG5cbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGN1cnNvclZpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgY3VycmVudFN0cmluZzogJ0FzeW5jaHJvbm91cyBFdGhlcmV1bScsXG4gICAgICAgICAgICBjdXJyZW50U3RyaW5nSW5kZXg6IDAsXG4gICAgICAgICAgICBlZGl0aW5nU3RyaW5nOiB0cnVlLFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICB0b2dnbGVDdXJzb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGN1cnNvclZpc2libGU6IHRoaXMuc3RhdGUuZWRpdGluZ1N0cmluZyA/IHRydWUgOiAhdGhpcy5zdGF0ZS5jdXJzb3JWaXNpYmxlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGltZW91dHNbMF0gPSBzZXRUaW1lb3V0KCgpID0+IHt0aGlzLnRvZ2dsZUN1cnNvcigpO30sIDYwMCk7XG4gICAgfSxcblxuICAgIHJlbW92ZUNoYXJhY3RlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuY3VycmVudFN0cmluZykge1xuICAgICAgICAgICAgdGhpcy5ob2xkQ2hhcmFjdGVycygpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgY3VycmVudFN0cmluZ0luZGV4OiAodGhpcy5zdGF0ZS5jdXJyZW50U3RyaW5nSW5kZXggKyAxKSAlIHN0cmluZ0xpc3QubGVuZ3RoLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjdXJyZW50U3RyaW5nOiB0aGlzLnN0YXRlLmN1cnJlbnRTdHJpbmcuc2xpY2UoMCwgLTEpLFxuICAgICAgICAgICAgZWRpdGluZ1N0cmluZzogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRpbWVvdXRzWzFdID0gc2V0VGltZW91dCgoKSA9PiB7dGhpcy5yZW1vdmVDaGFyYWN0ZXJzKCk7fSwgMzApO1xuICAgIH0sXG5cbiAgICBhZGRDaGFyYWN0ZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuY3VycmVudFN0cmluZyA9PT0gc3RyaW5nTGlzdFt0aGlzLnN0YXRlLmN1cnJlbnRTdHJpbmdJbmRleF0pIHtcbiAgICAgICAgICAgIHRoaXMuaG9sZENoYXJhY3RlcnMoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGN1cnJlbnRTdHJpbmc6IHN0cmluZ0xpc3RbdGhpcy5zdGF0ZS5jdXJyZW50U3RyaW5nSW5kZXhdLnNsaWNlKDAsIHRoaXMuc3RhdGUuY3VycmVudFN0cmluZy5sZW5ndGggKyAxKSxcbiAgICAgICAgICAgIGVkaXRpbmdTdHJpbmc6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3RyaW5nTGlzdFt0aGlzLnN0YXRlLmN1cnJlbnRTdHJpbmdJbmRleF1bdGhpcy5zdGF0ZS5jdXJyZW50U3RyaW5nLmxlbmd0aCAtIDFdID09ICcuJykge1xuICAgICAgICAgICAgdGltZW91dHNbMV0gPSBzZXRUaW1lb3V0KCgpID0+IHt0aGlzLmFkZENoYXJhY3RlcnMoKTt9LCA4MDApIDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVvdXRzWzFdID0gc2V0VGltZW91dCgoKSA9PiB7dGhpcy5hZGRDaGFyYWN0ZXJzKCk7fSwgOTApO1xuICAgICAgICB9XG5cbiAgICB9LFxuXG4gICAgaG9sZENoYXJhY3RlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGVkaXRpbmdTdHJpbmc6ICF0aGlzLnN0YXRlLmVkaXRpbmdTdHJpbmcsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmN1cnJlbnRTdHJpbmcpIHtcbiAgICAgICAgICAgIHRpbWVvdXRzWzFdID0gc2V0VGltZW91dCgoKSA9PiB7dGhpcy5yZW1vdmVDaGFyYWN0ZXJzKCk7fSwgNDAwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lb3V0c1sxXSA9IHNldFRpbWVvdXQoKCkgPT4ge3RoaXMuYWRkQ2hhcmFjdGVycygpO30sIDQwMCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHt0aGlzLnRvZ2dsZUN1cnNvcigpO30sIDYwMCk7XG4gICAgICAgIHRoaXMuaG9sZENoYXJhY3RlcnMoKTtcbiAgICB9LFxuICAgIFxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRzWzBdKTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRzWzFdKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdhYm91dHBhZ2UnPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3N0YW5kc3RpbGwnPlxuICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9J3RhZ2xpbmUnPlByb21ldGhldXMgPHNwYW4+aXM8L3NwYW4+PC9oMz5cbiAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPSd0YWdsaW5lIHNlY29uZCc+e3RoaXMuc3RhdGUuY3VycmVudFN0cmluZ308ZGl2IGNsYXNzTmFtZT17YGN1cnNvciR7dGhpcy5zdGF0ZS5jdXJzb3JWaXNpYmxlID8gJycgOiAnIGhpZGRlbid9YH0gLz48L2gzPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYm94IHBhcnQzJz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncGFyYSc+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdzdWJQYXJhJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBc3luY2hyb25vdXMgRXRoZXJldW0uIFJpZ2h0IG5vdywgYW5kIGFueSBvdGhlciB0aW1lLlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZXJlJ3Mgc2FmZXR5IGluIG51bWJlcnMuIEJ5IGNyb3dkc291cmNpbmcgYXN5bmNocm9ub3VzIGZ1bmN0aW9uIGNhbGxzIGFjcm9zcyBhIHdpZGUgZW5vdWdoIHBvcHVsYXRpb24sIHdlIGNhbiBidWlsZCBhIGNhbGxiYWNrIG1hcmtldHBsYWNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncGFyYSc+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdzdWJQYXJhJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBVbmxlYXNoIHlvdXIgREFwcCB3aXRoIHRoZSBwb3dlciBvZiBhIFN0YXRlIE1hY2hpbmUuXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+UHJvbWV0aGV1cyBnaXZlcyB5b3VyIGNvbnRyYWN0cyB0aGUgYWJpbGl0eSB0byBhY3QgdXBvbiBjaGFuZ2VzIG9mIHN0YXRlIHdpdGhpbiB0aGUgRXRoZXJldW0gbmV0d29yay4gV2l0aCBuZXcgb3JhY2xlcyBiZWluZyBjcmVhdGVkIGV2ZXJ5IGRheSwgdGhhdCdzIGEgd2hvbGUgd29ybGQgb2YgcG9zc2liaWxpdGllcy48L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdwYXJhJz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3N1YlBhcmEnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpc3RyaWJ1dGVkLiBUcnVzdGxlc3MuIFZlcnNhdGlsZS4gUHJvbWV0aGV1cy5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5Qcm9tZXRoZXVzIGNvbnRhaW5zIGFsbCB0aGUgbmVjY2VzYXJ5IHNhZmVndWFyZHMgdG8gcHJvdGVjdCB1c2VycyBhbmQgY3VzdG9tZXJzIGZyb20gZWFjaCBvdGhlciwgYWxsb3dpbmcgZm9yIGEgc3RhYmxlLCB0cnVzdGxlc3MsIGFuZCBvcGVuLXNvdXJjZSBlY29zeXN0ZW0uIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdib3ggZGlhZ3JhbSc+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2JhY2tkcm9wJyAvPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2x1bW4nPlxuICAgICAgICAgICAgICAgICAgICA8aDM+QWdlbnRzPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSdkZXNjcmlwdGlvbic+QW55IG9mIHlvdXIgY29udHJhY3RzIGNhbiBiZSBhbiBhZ2VudC4gQnkgZGVmaW5pbmcgYSBjb3VwbGUgb2YgZnVuY3Rpb25zLCBBZ2VudHMgY2FuIHJlY2lldmUgYXN5bmNocm9ub3VzIGNhbGxiYWNrcyBiYXNlZCBvbiBhbnkgcG9zc2libGUgZnVuY3Rpb24gb2YgaXRzIHN0YXRlLjwvcD5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2JveGVzJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdhZ2VudCc+PGRpdiBjbGFzc05hbWU9J2xpbmUnIC8+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYWdlbnQnPjxkaXYgY2xhc3NOYW1lPSdsaW5lJyAvPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2FnZW50Jz48ZGl2IGNsYXNzTmFtZT0nbGluZScgLz48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdhZ2VudCc+PGRpdiBjbGFzc05hbWU9J2xpbmUnIC8+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2x1bW4nPlxuICAgICAgICAgICAgICAgICAgICA8aDM+UHJvbUV0aHM8L2gzPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9J2Rlc2NyaXB0aW9uJz5FYWNoIFByb21FdGggaXMgYm91bmQgdG8gYSBzaW5nbGUgQWdlbnQsIGFuZCBpdCByZW1vdmVzIHRoZSBuZWVkIGZvciB0cnVzdC4gSXQgc3RvcmVzIHRoZSBFdGhlciByZXdhcmRzIG9uIHlvdXIgYmVoYWxmLCB0byBlbnN1cmUgbm9ib2R5IGNhbiBjaGVhdCwgYW5kIHBlb3BsZSBnZXQgdGhlIHJld2FyZHMgdGhleSBleHBlY3QuPC9wPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYm94ZXMnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Byb21ldGgnPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Byb21ldGgnPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Byb21ldGgnPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Byb21ldGgnPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sdW1uJz5cbiAgICAgICAgICAgICAgICAgICAgPGgzPlByb21ldGhldXM8L2gzPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9J2Rlc2NyaXB0aW9uJz5BIHNpbmdsZSBjZW50cmFsIGNvbnRyYWN0LiBJdCdzIGpvYiBpcyB0byBidWlsZCB5b3VyIFByb21ldGhzLCBhbmQga2VlcCB0cmFjayBvZiB0aGVtIGZvciB0aGUgUmF2ZW5zIHRvIGZpbmQuIFByb21ldGhldXMgaXMgb3BlbiBzb3VyY2UsIGFuZCBpbmRlcGVuZGVudGx5IHZlcmlmaWFibGUuPC9wPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYm94ZXMnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Byb21ldGhldXMnPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29sdW1uJz5cbiAgICAgICAgICAgICAgICAgICAgPGgzPlJhdmVuczwvaDM+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0nZGVzY3JpcHRpb24nPkEgbGFyZ2UgcG9vbCBvZiB1c2VycyBydW5uaW5nIG91ciBvcGVuLXNvdXJjZSBOb2RlIGNsaWVudCwgXCJSYXZlblwiLiBUaGV5IGdldCBwYWlkIHRvIHN1cHBseSBnYXMsIHdoZW4gYW5kIHdoZXJlIHlvdSB3YW50LiBJdCdzIGFuIEV0aGVyIHBheW91dCBmb3IgZmFyIGxlc3Mgd29yayB0aGFuIG1pbmluZy48L3A+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdib3hlcyc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nc3BhY2VyJyAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3JhdmVuJz48ZGl2IGNsYXNzTmFtZT0nbGluZScgLz48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyYXZlbic+PGRpdiBjbGFzc05hbWU9J2xpbmUnIC8+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmF2ZW4nPjxkaXYgY2xhc3NOYW1lPSdsaW5lJyAvPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3JhdmVuJz48ZGl2IGNsYXNzTmFtZT0nbGluZScgLz48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyYXZlbic+PGRpdiBjbGFzc05hbWU9J2xpbmUnIC8+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmF2ZW4nPjxkaXYgY2xhc3NOYW1lPSdsaW5lJyAvPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3NwYWNlcicgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdib3ggZm9vdGVyJz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29weXJpZ2h0Jz7CqSAyMDE3IFByb21ldGhldXMuPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvcHlyaWdodCc+V2lsbCBDbGFyayAmIEtleWFuIFJhYWhlbWlmYXI8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj47XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQWJvdXRQYWdlO1xuIiwiY29uc3QgXyAgICAgICAgICAgPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IGNyZWF0ZUNsYXNzID0gcmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNsYXNzJyk7XG5jb25zdCBSZWFjdCAgICAgICA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBXZWIzICAgICAgICA9IHJlcXVpcmUoJ3dlYjMnKTtcblxuY29uc3QgcHJvbWV0aGV1c0FCSSA9IHJlcXVpcmUoJy4uLy4uLy4uL3dlYjMvcHJvbWV0aGV1cy5qc29uJykuYWJpO1xuY29uc3QgcHJvbWV0aEFCSSA9IHJlcXVpcmUoJy4uLy4uLy4uL3dlYjMvcHJvbWV0aC5qc29uJykuYWJpO1xuY29uc3QgYWdlbnRBQkkgPSByZXF1aXJlKCcuLi8uLi8uLi93ZWIzL2FnZW50Lmpzb24nKS5hYmk7XG5cbmNvbnN0IEFnZW50cGFnZSA9IGNyZWF0ZUNsYXNzKHtcbiAgICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBcbiAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2ViMzogZmFsc2UsXG4gICAgICAgICAgICBwcm9tZXRoZXVzOiB7fSxcbiAgICAgICAgICAgIHByb21ldGhBZGRyZXNzOiAnJyxcbiAgICAgICAgICAgIGFnZW50QWRkcmVzczogJycsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBcbiAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2ViMyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHdlYjMgPSBuZXcgV2ViMyhuZXcgV2ViMy5wcm92aWRlcnMuSHR0cFByb3ZpZGVyKFwiaHR0cDovL2xvY2FsaG9zdDo4NTQ1XCIpKTtcbiAgICAgICAgICAgIGxldCBwcm9tZXRoZXVzID0gd2ViMy5ldGguY29udHJhY3QocHJvbWV0aGV1c0FCSSkuYXQoJzB4ZjRiYzY3OWQyYWUwNDIxYjM3NmY5YmIwZWFhZTkwZGQyYjQ3YjZjMicpO1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgd2ViMzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcm9tZXRoZXVzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSAgICBcbiAgICB9LFxuICAgIFxuICAgIGNyZWF0ZVByb21ldGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGUud2ViMykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhc2ggPSB0aGlzLnN0YXRlLnByb21ldGhldXMuY3JlYXRlUHJvbWV0aC5zZW5kVHJhbnNhY3Rpb24odGhpcy5zdGF0ZS5hZ2VudEFkZHJlc3MsIHsgZnJvbTogd2ViMy5ldGguYWNjb3VudHNbMF0sIGdhczogMTAwMDAwMCB9KTtcbiAgICAgICAgY29uc3QgcHJvbWV0aEFkZHJlc3MgPSB0aGlzLnN0YXRlLnByb21ldGhldXMucHJvbWV0aHModGhpcy5zdGF0ZS5wcm9tZXRoZXVzLnByb21ldGhDb3VudCgpLnRvTnVtYmVyKCkgLSAxKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHByb21ldGhBZGRyZXNzIH0pO1xuICAgIH0sXG4gICAgXG4gICAgaGFuZGxlQWdlbnRBZGRyZXNzOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBhZ2VudEFkZHJlc3M6IGUudGFyZ2V0LnZhbHVlfSk7XG4gICAgfSxcbiAgICBcbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J2FnZW50cGFnZSc+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYm94IGRlc2NyaXB0aW9uJz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ndGV4dEFyZWEnPlxuICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPSd0aXRsZSc+RGV2ZWxvcGluZyB3aXRoIFByb21ldGhldXM/IEl0IGNvdWxkbid0IGJlIGVhc2llciE8L2gzPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9J3BhcmEnPlNpbXBseSBpbXBsZW1lbnQgYW4gQWdlbnQgY29udHJhY3Qgd2l0aCB0d28gaGVhZGVycyBtYXRjaGluZyB0aG9zZSBzaG93biB0byB0aGUgbGVmdCwgZGVwbG95IGl0IHRvIHRoZSBFdGhlcmV1bSBibG9ja2NoYWluLCBhbmQgdGhlbiBzdWJtaXQgdGhlIGFkZHJlc3MgdXNpbmcgdGhlIGZvcm0gYmVsb3cuIFRoYXQncyBpdCE8L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0ncGFyYSc+SW4gcmV0dXJuLCB5b3UnbGwgZ2V0IHRoZSBhZGRyZXNzIG9mIHlvdXIgY29udHJhY3QncyB2ZXJ5IG93biBQcm9tZXRoLiBNYWtlIHN1cmUgdG8ga2VlcCBpdHMgYmFsYW5jZSB0b3BwZWQgdXAsIG9yIGVsc2Ugbm8tb25lIGluIG91ciBnbG9iYWwgbmV0d29yayBvZiBSYXZlbnMgd2lsbCB3YW50IHRvIGV4ZWN1dGUgdGhlIGNhbGxzLjwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29kZUFyZWEnPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29kZUJsb2NrJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2RlTGluZSc+e2Bjb250cmFjdCBhZ2VudCB7IGB9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29kZUxpbmUgaW5kZW50Jz57YGZ1bmN0aW9uIHByb21ldGhDb3N0KCkgY29uc3RhbnQgcHVibGljIHJldHVybnMgKHVpbnQxMjgsIHVpbnQxMjgpIHt9YH08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjb2RlTGluZSBpbmRlbnQnPntgZnVuY3Rpb24gcHJvbWV0aEV4ZWN1dGUoKSBwdWJsaWMge31gfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvZGVMaW5lJz57YH1gfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2JveCBzdWJtaXQnPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdzdWJtaXNzaW9uQXJlYSc+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nc3VibWlzc2lvbkJveCcgXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0nQWdlbnQgYWRkcmVzcycgXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVBZ2VudEFkZHJlc3N9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdzdWJtaXRCdXR0b24nIFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5jcmVhdGVQcm9tZXRofT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkNyZWF0ZSBBZ2VudDwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2FkZHJlc3NEaXNwbGF5Jz5cbiAgICAgICAgICAgICAgICAgICAgPHA+UHJvbWV0aCBhZGRyZXNzOiB7dGhpcy5zdGF0ZS5wcm9tZXRoQWRkcmVzc308L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdib3ggZm9vdGVyJz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29weXJpZ2h0Jz7CqSAyMDE3IFByb21ldGhldXM8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nY29weXJpZ2h0Jz5XaWxsIENsYXJrICYgS2V5YW4gUmFhaGVtaWZhcjwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PjtcbiAgICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBZ2VudHBhZ2U7XG4iLCJjb25zdCBfICAgICAgICAgICA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgY3JlYXRlQ2xhc3MgPSByZXF1aXJlKCdjcmVhdGUtcmVhY3QtY2xhc3MnKTtcbmNvbnN0IFJlYWN0ICAgICAgID0gcmVxdWlyZSgncmVhY3QnKTtcblxuXG5jb25zdCBGb3Vyb2hmb3VyID0gY3JlYXRlQ2xhc3Moe1xuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG5cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0nZm91cm9oZm91cic+XG4gICAgICAgICAgICBGb3Vyb2hmb3VyIENvbXBvbmVudCBSZWFkeS5cbiAgICAgICAgPC9kaXY+O1xuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZvdXJvaGZvdXI7XG4iLCJjb25zdCBfICAgICAgICAgICAgPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmNvbnN0IGNyZWF0ZUNsYXNzICA9IHJlcXVpcmUoJ2NyZWF0ZS1yZWFjdC1jbGFzcycpO1xuY29uc3QgY3JlYXRlUm91dGVyID0gcmVxdWlyZSgncGljby1yb3V0ZXInKS5jcmVhdGVSb3V0ZXI7XG5jb25zdCBMaW5rICAgICAgICAgPSByZXF1aXJlKCdwaWNvLXJvdXRlcicpLkxpbms7XG5jb25zdCBSZWFjdCAgICAgICAgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5jb25zdCBBYm91dFBhZ2UgID0gcmVxdWlyZSgnLi9hYm91dHBhZ2UvYWJvdXRwYWdlLmpzeCcpO1xuY29uc3QgQWdlbnRQYWdlICA9IHJlcXVpcmUoJy4vYWdlbnRwYWdlL2FnZW50cGFnZS5qc3gnKTtcbmNvbnN0IFJhdmVuUGFnZSAgPSByZXF1aXJlKCcuL3JhdmVucGFnZS9yYXZlbnBhZ2UuanN4Jyk7XG5jb25zdCBGb3VyT2hGb3VyID0gcmVxdWlyZSgnLi9mb3Vyb2hmb3VyL2ZvdXJvaGZvdXIuanN4Jyk7XG5cbmNvbnN0IFRvcEJhciAgID0gcmVxdWlyZSgnLi4vc2hhcmVkL3RvcGJhci90b3BiYXIuanN4Jyk7XG5cbmNvbnN0IFJvdXRlciA9IGNyZWF0ZVJvdXRlcih7XG4gICAgJy8nOiA8QWJvdXRQYWdlIC8+LFxuICAgICcvZGV2ZWxvcCc6IDxBZ2VudFBhZ2UgLz4sXG4gICAgJy8qJzogPEZvdXJPaEZvdXIgLz5cbn0pO1xuXG5jb25zdCBuYXZCYXJMaW5rcyA9IFtcbiAgICB7XG4gICAgICAgIG5hbWU6ICdBYm91dCcsXG4gICAgICAgIGxpbms6ICcvJyxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ0RldmVsb3AnLFxuICAgICAgICBsaW5rOiAnL2RldmVsb3AnLFxuICAgIH0sXG5dO1xuXG5jb25zdCBNYWluID0gY3JlYXRlQ2xhc3Moe1xuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1cmw6ICcvJ1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdtYWluJz5cbiAgICAgICAgICAgIDxUb3BCYXIgcGFnZXM9e25hdkJhckxpbmtzfSAvPlxuICAgICAgICAgICAgPFJvdXRlciBkZWZhdWx0VXJsPXt0aGlzLnByb3BzLnVybH0gLz5cbiAgICAgICAgPC9kaXY+O1xuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1haW47XG4iLCJjb25zdCBfICAgICAgICAgICA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgY3JlYXRlQ2xhc3MgPSByZXF1aXJlKCdjcmVhdGUtcmVhY3QtY2xhc3MnKTtcbmNvbnN0IFJlYWN0ICAgICAgID0gcmVxdWlyZSgncmVhY3QnKTtcblxuXG5jb25zdCBSYXZlbnBhZ2UgPSBjcmVhdGVDbGFzcyh7XG4gICAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcblxuICAgICAgICB9O1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPSdyYXZlbnBhZ2UnPlxuICAgICAgICAgICAgUmF2ZW5wYWdlIENvbXBvbmVudCBSZWFkeS5cbiAgICAgICAgPC9kaXY+O1xuICAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJhdmVucGFnZTtcbiIsImNvbnN0IF8gICAgICAgICAgID0gcmVxdWlyZSgnbG9kYXNoJyk7XG5jb25zdCBjeCAgICAgICAgICA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcbmNvbnN0IGNyZWF0ZUNsYXNzID0gcmVxdWlyZSgnY3JlYXRlLXJlYWN0LWNsYXNzJyk7XG5jb25zdCBSZWFjdCAgICAgICA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBMaW5rICAgICAgICA9IHJlcXVpcmUoJ3BpY28tcm91dGVyJykuTGluaztcblxuY29uc3QgVG9wQmFyID0gY3JlYXRlQ2xhc3Moe1xuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYWdlczogW10sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3VycmVudFBhZ2U6ICcvJ1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgZ2V0Q3VycmVudFBhZ2U6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjdXJyZW50UGFnZTogZGVjb2RlVVJJKGUuY3VycmVudFRhcmdldC5ocmVmLnNwbGl0KHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pWzFdKVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlOiBkZWNvZGVVUkkod2luZG93LmxvY2F0aW9uLmhyZWYuc3BsaXQod2luZG93LmxvY2F0aW9uLm9yaWdpbilbMV0pXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICByZW5kZXJQYWdlTGlua3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gXy5tYXAodGhpcy5wcm9wcy5wYWdlcywgKHBhZ2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8TGluayBjbGFzc05hbWU9e2N4KCdwYWdlTGluaycsIHsgYWN0aXZlUGFnZTogdGhpcy5zdGF0ZS5jdXJyZW50UGFnZSA9PT0gcGFnZS5saW5rIH0pfSBocmVmPXtgJHtwYWdlLmxpbmt9YH0gb25DbGljaz17dGhpcy5nZXRDdXJyZW50UGFnZX0+XG4gICAgICAgICAgICAgICAge3BhZ2UubmFtZX1cbiAgICAgICAgICAgIDwvTGluaz47XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9J3RvcGJhcic+XG4gICAgICAgICAgICA8aDMgY2xhc3NOYW1lPSdzaXRlTmFtZSc+UHJvbWV0aGV1czwvaDM+XG4gICAgICAgICAgICA8bmF2IGNsYXNzTmFtZT0ncGFnZUxpbmtMaXN0Jz5cbiAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJQYWdlTGlua3MoKX1cbiAgICAgICAgICAgIDwvbmF2PlxuICAgICAgICA8L2Rpdj47XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVG9wQmFyO1xuIiwidmFyIGFzbjEgPSBleHBvcnRzO1xuXG5hc24xLmJpZ251bSA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5cbmFzbjEuZGVmaW5lID0gcmVxdWlyZSgnLi9hc24xL2FwaScpLmRlZmluZTtcbmFzbjEuYmFzZSA9IHJlcXVpcmUoJy4vYXNuMS9iYXNlJyk7XG5hc24xLmNvbnN0YW50cyA9IHJlcXVpcmUoJy4vYXNuMS9jb25zdGFudHMnKTtcbmFzbjEuZGVjb2RlcnMgPSByZXF1aXJlKCcuL2FzbjEvZGVjb2RlcnMnKTtcbmFzbjEuZW5jb2RlcnMgPSByZXF1aXJlKCcuL2FzbjEvZW5jb2RlcnMnKTtcbiIsInZhciBhc24xID0gcmVxdWlyZSgnLi4vYXNuMScpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGFwaSA9IGV4cG9ydHM7XG5cbmFwaS5kZWZpbmUgPSBmdW5jdGlvbiBkZWZpbmUobmFtZSwgYm9keSkge1xuICByZXR1cm4gbmV3IEVudGl0eShuYW1lLCBib2R5KTtcbn07XG5cbmZ1bmN0aW9uIEVudGl0eShuYW1lLCBib2R5KSB7XG4gIHRoaXMubmFtZSA9IG5hbWU7XG4gIHRoaXMuYm9keSA9IGJvZHk7XG5cbiAgdGhpcy5kZWNvZGVycyA9IHt9O1xuICB0aGlzLmVuY29kZXJzID0ge307XG59O1xuXG5FbnRpdHkucHJvdG90eXBlLl9jcmVhdGVOYW1lZCA9IGZ1bmN0aW9uIGNyZWF0ZU5hbWVkKGJhc2UpIHtcbiAgdmFyIG5hbWVkO1xuICB0cnkge1xuICAgIG5hbWVkID0gcmVxdWlyZSgndm0nKS5ydW5JblRoaXNDb250ZXh0KFxuICAgICAgJyhmdW5jdGlvbiAnICsgdGhpcy5uYW1lICsgJyhlbnRpdHkpIHtcXG4nICtcbiAgICAgICcgIHRoaXMuX2luaXROYW1lZChlbnRpdHkpO1xcbicgK1xuICAgICAgJ30pJ1xuICAgICk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBuYW1lZCA9IGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAgIHRoaXMuX2luaXROYW1lZChlbnRpdHkpO1xuICAgIH07XG4gIH1cbiAgaW5oZXJpdHMobmFtZWQsIGJhc2UpO1xuICBuYW1lZC5wcm90b3R5cGUuX2luaXROYW1lZCA9IGZ1bmN0aW9uIGluaXRuYW1lZChlbnRpdHkpIHtcbiAgICBiYXNlLmNhbGwodGhpcywgZW50aXR5KTtcbiAgfTtcblxuICByZXR1cm4gbmV3IG5hbWVkKHRoaXMpO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5fZ2V0RGVjb2RlciA9IGZ1bmN0aW9uIF9nZXREZWNvZGVyKGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ2Rlcic7XG4gIC8vIExhemlseSBjcmVhdGUgZGVjb2RlclxuICBpZiAoIXRoaXMuZGVjb2RlcnMuaGFzT3duUHJvcGVydHkoZW5jKSlcbiAgICB0aGlzLmRlY29kZXJzW2VuY10gPSB0aGlzLl9jcmVhdGVOYW1lZChhc24xLmRlY29kZXJzW2VuY10pO1xuICByZXR1cm4gdGhpcy5kZWNvZGVyc1tlbmNdO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgZW5jLCBvcHRpb25zKSB7XG4gIHJldHVybiB0aGlzLl9nZXREZWNvZGVyKGVuYykuZGVjb2RlKGRhdGEsIG9wdGlvbnMpO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5fZ2V0RW5jb2RlciA9IGZ1bmN0aW9uIF9nZXRFbmNvZGVyKGVuYykge1xuICBlbmMgPSBlbmMgfHwgJ2Rlcic7XG4gIC8vIExhemlseSBjcmVhdGUgZW5jb2RlclxuICBpZiAoIXRoaXMuZW5jb2RlcnMuaGFzT3duUHJvcGVydHkoZW5jKSlcbiAgICB0aGlzLmVuY29kZXJzW2VuY10gPSB0aGlzLl9jcmVhdGVOYW1lZChhc24xLmVuY29kZXJzW2VuY10pO1xuICByZXR1cm4gdGhpcy5lbmNvZGVyc1tlbmNdO1xufTtcblxuRW50aXR5LnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgZW5jLCAvKiBpbnRlcm5hbCAqLyByZXBvcnRlcikge1xuICByZXR1cm4gdGhpcy5fZ2V0RW5jb2RlcihlbmMpLmVuY29kZShkYXRhLCByZXBvcnRlcik7XG59O1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBSZXBvcnRlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5SZXBvcnRlcjtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbmZ1bmN0aW9uIERlY29kZXJCdWZmZXIoYmFzZSwgb3B0aW9ucykge1xuICBSZXBvcnRlci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiYXNlKSkge1xuICAgIHRoaXMuZXJyb3IoJ0lucHV0IG5vdCBCdWZmZXInKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB0aGlzLmJhc2UgPSBiYXNlO1xuICB0aGlzLm9mZnNldCA9IDA7XG4gIHRoaXMubGVuZ3RoID0gYmFzZS5sZW5ndGg7XG59XG5pbmhlcml0cyhEZWNvZGVyQnVmZmVyLCBSZXBvcnRlcik7XG5leHBvcnRzLkRlY29kZXJCdWZmZXIgPSBEZWNvZGVyQnVmZmVyO1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gc2F2ZSgpIHtcbiAgcmV0dXJuIHsgb2Zmc2V0OiB0aGlzLm9mZnNldCwgcmVwb3J0ZXI6IFJlcG9ydGVyLnByb3RvdHlwZS5zYXZlLmNhbGwodGhpcykgfTtcbn07XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbiByZXN0b3JlKHNhdmUpIHtcbiAgLy8gUmV0dXJuIHNraXBwZWQgZGF0YVxuICB2YXIgcmVzID0gbmV3IERlY29kZXJCdWZmZXIodGhpcy5iYXNlKTtcbiAgcmVzLm9mZnNldCA9IHNhdmUub2Zmc2V0O1xuICByZXMubGVuZ3RoID0gdGhpcy5vZmZzZXQ7XG5cbiAgdGhpcy5vZmZzZXQgPSBzYXZlLm9mZnNldDtcbiAgUmVwb3J0ZXIucHJvdG90eXBlLnJlc3RvcmUuY2FsbCh0aGlzLCBzYXZlLnJlcG9ydGVyKTtcblxuICByZXR1cm4gcmVzO1xufTtcblxuRGVjb2RlckJ1ZmZlci5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gIHJldHVybiB0aGlzLm9mZnNldCA9PT0gdGhpcy5sZW5ndGg7XG59O1xuXG5EZWNvZGVyQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDgoZmFpbCkge1xuICBpZiAodGhpcy5vZmZzZXQgKyAxIDw9IHRoaXMubGVuZ3RoKVxuICAgIHJldHVybiB0aGlzLmJhc2UucmVhZFVJbnQ4KHRoaXMub2Zmc2V0KyssIHRydWUpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuZXJyb3IoZmFpbCB8fCAnRGVjb2RlckJ1ZmZlciBvdmVycnVuJyk7XG59XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbiBza2lwKGJ5dGVzLCBmYWlsKSB7XG4gIGlmICghKHRoaXMub2Zmc2V0ICsgYnl0ZXMgPD0gdGhpcy5sZW5ndGgpKVxuICAgIHJldHVybiB0aGlzLmVycm9yKGZhaWwgfHwgJ0RlY29kZXJCdWZmZXIgb3ZlcnJ1bicpO1xuXG4gIHZhciByZXMgPSBuZXcgRGVjb2RlckJ1ZmZlcih0aGlzLmJhc2UpO1xuXG4gIC8vIFNoYXJlIHJlcG9ydGVyIHN0YXRlXG4gIHJlcy5fcmVwb3J0ZXJTdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG5cbiAgcmVzLm9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICByZXMubGVuZ3RoID0gdGhpcy5vZmZzZXQgKyBieXRlcztcbiAgdGhpcy5vZmZzZXQgKz0gYnl0ZXM7XG4gIHJldHVybiByZXM7XG59XG5cbkRlY29kZXJCdWZmZXIucHJvdG90eXBlLnJhdyA9IGZ1bmN0aW9uIHJhdyhzYXZlKSB7XG4gIHJldHVybiB0aGlzLmJhc2Uuc2xpY2Uoc2F2ZSA/IHNhdmUub2Zmc2V0IDogdGhpcy5vZmZzZXQsIHRoaXMubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gRW5jb2RlckJ1ZmZlcih2YWx1ZSwgcmVwb3J0ZXIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaWYgKCEoaXRlbSBpbnN0YW5jZW9mIEVuY29kZXJCdWZmZXIpKVxuICAgICAgICBpdGVtID0gbmV3IEVuY29kZXJCdWZmZXIoaXRlbSwgcmVwb3J0ZXIpO1xuICAgICAgdGhpcy5sZW5ndGggKz0gaXRlbS5sZW5ndGg7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9LCB0aGlzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKCEoMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAweGZmKSlcbiAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignbm9uLWJ5dGUgRW5jb2RlckJ1ZmZlciB2YWx1ZScpO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcbiAgfSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMubGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVW5zdXBwb3J0ZWQgdHlwZTogJyArIHR5cGVvZiB2YWx1ZSk7XG4gIH1cbn1cbmV4cG9ydHMuRW5jb2RlckJ1ZmZlciA9IEVuY29kZXJCdWZmZXI7XG5cbkVuY29kZXJCdWZmZXIucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKG91dCwgb2Zmc2V0KSB7XG4gIGlmICghb3V0KVxuICAgIG91dCA9IG5ldyBCdWZmZXIodGhpcy5sZW5ndGgpO1xuICBpZiAoIW9mZnNldClcbiAgICBvZmZzZXQgPSAwO1xuXG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMClcbiAgICByZXR1cm4gb3V0O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgdGhpcy52YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGl0ZW0uam9pbihvdXQsIG9mZnNldCk7XG4gICAgICBvZmZzZXQgKz0gaXRlbS5sZW5ndGg7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnbnVtYmVyJylcbiAgICAgIG91dFtvZmZzZXRdID0gdGhpcy52YWx1ZTtcbiAgICBlbHNlIGlmICh0eXBlb2YgdGhpcy52YWx1ZSA9PT0gJ3N0cmluZycpXG4gICAgICBvdXQud3JpdGUodGhpcy52YWx1ZSwgb2Zmc2V0KTtcbiAgICBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIodGhpcy52YWx1ZSkpXG4gICAgICB0aGlzLnZhbHVlLmNvcHkob3V0LCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSB0aGlzLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59O1xuIiwidmFyIGJhc2UgPSBleHBvcnRzO1xuXG5iYXNlLlJlcG9ydGVyID0gcmVxdWlyZSgnLi9yZXBvcnRlcicpLlJlcG9ydGVyO1xuYmFzZS5EZWNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi9idWZmZXInKS5EZWNvZGVyQnVmZmVyO1xuYmFzZS5FbmNvZGVyQnVmZmVyID0gcmVxdWlyZSgnLi9idWZmZXInKS5FbmNvZGVyQnVmZmVyO1xuYmFzZS5Ob2RlID0gcmVxdWlyZSgnLi9ub2RlJyk7XG4iLCJ2YXIgUmVwb3J0ZXIgPSByZXF1aXJlKCcuLi9iYXNlJykuUmVwb3J0ZXI7XG52YXIgRW5jb2RlckJ1ZmZlciA9IHJlcXVpcmUoJy4uL2Jhc2UnKS5FbmNvZGVyQnVmZmVyO1xudmFyIERlY29kZXJCdWZmZXIgPSByZXF1aXJlKCcuLi9iYXNlJykuRGVjb2RlckJ1ZmZlcjtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbi8vIFN1cHBvcnRlZCB0YWdzXG52YXIgdGFncyA9IFtcbiAgJ3NlcScsICdzZXFvZicsICdzZXQnLCAnc2V0b2YnLCAnb2JqaWQnLCAnYm9vbCcsXG4gICdnZW50aW1lJywgJ3V0Y3RpbWUnLCAnbnVsbF8nLCAnZW51bScsICdpbnQnLCAnb2JqRGVzYycsXG4gICdiaXRzdHInLCAnYm1wc3RyJywgJ2NoYXJzdHInLCAnZ2Vuc3RyJywgJ2dyYXBoc3RyJywgJ2lhNXN0cicsICdpc282NDZzdHInLFxuICAnbnVtc3RyJywgJ29jdHN0cicsICdwcmludHN0cicsICd0NjFzdHInLCAndW5pc3RyJywgJ3V0ZjhzdHInLCAndmlkZW9zdHInXG5dO1xuXG4vLyBQdWJsaWMgbWV0aG9kcyBsaXN0XG52YXIgbWV0aG9kcyA9IFtcbiAgJ2tleScsICdvYmonLCAndXNlJywgJ29wdGlvbmFsJywgJ2V4cGxpY2l0JywgJ2ltcGxpY2l0JywgJ2RlZicsICdjaG9pY2UnLFxuICAnYW55JywgJ2NvbnRhaW5zJ1xuXS5jb25jYXQodGFncyk7XG5cbi8vIE92ZXJyaWRlZCBtZXRob2RzIGxpc3RcbnZhciBvdmVycmlkZWQgPSBbXG4gICdfcGVla1RhZycsICdfZGVjb2RlVGFnJywgJ191c2UnLFxuICAnX2RlY29kZVN0cicsICdfZGVjb2RlT2JqaWQnLCAnX2RlY29kZVRpbWUnLFxuICAnX2RlY29kZU51bGwnLCAnX2RlY29kZUludCcsICdfZGVjb2RlQm9vbCcsICdfZGVjb2RlTGlzdCcsXG5cbiAgJ19lbmNvZGVDb21wb3NpdGUnLCAnX2VuY29kZVN0cicsICdfZW5jb2RlT2JqaWQnLCAnX2VuY29kZVRpbWUnLFxuICAnX2VuY29kZU51bGwnLCAnX2VuY29kZUludCcsICdfZW5jb2RlQm9vbCdcbl07XG5cbmZ1bmN0aW9uIE5vZGUoZW5jLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0ge307XG4gIHRoaXMuX2Jhc2VTdGF0ZSA9IHN0YXRlO1xuXG4gIHN0YXRlLmVuYyA9IGVuYztcblxuICBzdGF0ZS5wYXJlbnQgPSBwYXJlbnQgfHwgbnVsbDtcbiAgc3RhdGUuY2hpbGRyZW4gPSBudWxsO1xuXG4gIC8vIFN0YXRlXG4gIHN0YXRlLnRhZyA9IG51bGw7XG4gIHN0YXRlLmFyZ3MgPSBudWxsO1xuICBzdGF0ZS5yZXZlcnNlQXJncyA9IG51bGw7XG4gIHN0YXRlLmNob2ljZSA9IG51bGw7XG4gIHN0YXRlLm9wdGlvbmFsID0gZmFsc2U7XG4gIHN0YXRlLmFueSA9IGZhbHNlO1xuICBzdGF0ZS5vYmogPSBmYWxzZTtcbiAgc3RhdGUudXNlID0gbnVsbDtcbiAgc3RhdGUudXNlRGVjb2RlciA9IG51bGw7XG4gIHN0YXRlLmtleSA9IG51bGw7XG4gIHN0YXRlWydkZWZhdWx0J10gPSBudWxsO1xuICBzdGF0ZS5leHBsaWNpdCA9IG51bGw7XG4gIHN0YXRlLmltcGxpY2l0ID0gbnVsbDtcbiAgc3RhdGUuY29udGFpbnMgPSBudWxsO1xuXG4gIC8vIFNob3VsZCBjcmVhdGUgbmV3IGluc3RhbmNlIG9uIGVhY2ggbWV0aG9kXG4gIGlmICghc3RhdGUucGFyZW50KSB7XG4gICAgc3RhdGUuY2hpbGRyZW4gPSBbXTtcbiAgICB0aGlzLl93cmFwKCk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gTm9kZTtcblxudmFyIHN0YXRlUHJvcHMgPSBbXG4gICdlbmMnLCAncGFyZW50JywgJ2NoaWxkcmVuJywgJ3RhZycsICdhcmdzJywgJ3JldmVyc2VBcmdzJywgJ2Nob2ljZScsXG4gICdvcHRpb25hbCcsICdhbnknLCAnb2JqJywgJ3VzZScsICdhbHRlcmVkVXNlJywgJ2tleScsICdkZWZhdWx0JywgJ2V4cGxpY2l0JyxcbiAgJ2ltcGxpY2l0JywgJ2NvbnRhaW5zJ1xuXTtcblxuTm9kZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgY3N0YXRlID0ge307XG4gIHN0YXRlUHJvcHMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgY3N0YXRlW3Byb3BdID0gc3RhdGVbcHJvcF07XG4gIH0pO1xuICB2YXIgcmVzID0gbmV3IHRoaXMuY29uc3RydWN0b3IoY3N0YXRlLnBhcmVudCk7XG4gIHJlcy5fYmFzZVN0YXRlID0gY3N0YXRlO1xuICByZXR1cm4gcmVzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX3dyYXAgPSBmdW5jdGlvbiB3cmFwKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICB0aGlzW21ldGhvZF0gPSBmdW5jdGlvbiBfd3JhcHBlZE1ldGhvZCgpIHtcbiAgICAgIHZhciBjbG9uZSA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMpO1xuICAgICAgc3RhdGUuY2hpbGRyZW4ucHVzaChjbG9uZSk7XG4gICAgICByZXR1cm4gY2xvbmVbbWV0aG9kXS5hcHBseShjbG9uZSwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9LCB0aGlzKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdChib2R5KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUucGFyZW50ID09PSBudWxsKTtcbiAgYm9keS5jYWxsKHRoaXMpO1xuXG4gIC8vIEZpbHRlciBjaGlsZHJlblxuICBzdGF0ZS5jaGlsZHJlbiA9IHN0YXRlLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbihjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZC5fYmFzZVN0YXRlLnBhcmVudCA9PT0gdGhpcztcbiAgfSwgdGhpcyk7XG4gIGFzc2VydC5lcXVhbChzdGF0ZS5jaGlsZHJlbi5sZW5ndGgsIDEsICdSb290IG5vZGUgY2FuIGhhdmUgb25seSBvbmUgY2hpbGQnKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl91c2VBcmdzID0gZnVuY3Rpb24gdXNlQXJncyhhcmdzKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBGaWx0ZXIgY2hpbGRyZW4gYW5kIGFyZ3NcbiAgdmFyIGNoaWxkcmVuID0gYXJncy5maWx0ZXIoZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3I7XG4gIH0sIHRoaXMpO1xuICBhcmdzID0gYXJncy5maWx0ZXIoZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuICEoYXJnIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0sIHRoaXMpO1xuXG4gIGlmIChjaGlsZHJlbi5sZW5ndGggIT09IDApIHtcbiAgICBhc3NlcnQoc3RhdGUuY2hpbGRyZW4gPT09IG51bGwpO1xuICAgIHN0YXRlLmNoaWxkcmVuID0gY2hpbGRyZW47XG5cbiAgICAvLyBSZXBsYWNlIHBhcmVudCB0byBtYWludGFpbiBiYWNrd2FyZCBsaW5rXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgY2hpbGQuX2Jhc2VTdGF0ZS5wYXJlbnQgPSB0aGlzO1xuICAgIH0sIHRoaXMpO1xuICB9XG4gIGlmIChhcmdzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzc2VydChzdGF0ZS5hcmdzID09PSBudWxsKTtcbiAgICBzdGF0ZS5hcmdzID0gYXJncztcbiAgICBzdGF0ZS5yZXZlcnNlQXJncyA9IGFyZ3MubWFwKGZ1bmN0aW9uKGFyZykge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgIT09ICdvYmplY3QnIHx8IGFyZy5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0KVxuICAgICAgICByZXR1cm4gYXJnO1xuXG4gICAgICB2YXIgcmVzID0ge307XG4gICAgICBPYmplY3Qua2V5cyhhcmcpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChrZXkgPT0gKGtleSB8IDApKVxuICAgICAgICAgIGtleSB8PSAwO1xuICAgICAgICB2YXIgdmFsdWUgPSBhcmdba2V5XTtcbiAgICAgICAgcmVzW3ZhbHVlXSA9IGtleTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9KTtcbiAgfVxufTtcblxuLy9cbi8vIE92ZXJyaWRlZCBtZXRob2RzXG4vL1xuXG5vdmVycmlkZWQuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgTm9kZS5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uIF9vdmVycmlkZWQoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyAnIG5vdCBpbXBsZW1lbnRlZCBmb3IgZW5jb2Rpbmc6ICcgKyBzdGF0ZS5lbmMpO1xuICB9O1xufSk7XG5cbi8vXG4vLyBQdWJsaWMgbWV0aG9kc1xuLy9cblxudGFncy5mb3JFYWNoKGZ1bmN0aW9uKHRhZykge1xuICBOb2RlLnByb3RvdHlwZVt0YWddID0gZnVuY3Rpb24gX3RhZ01ldGhvZCgpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgYXNzZXJ0KHN0YXRlLnRhZyA9PT0gbnVsbCk7XG4gICAgc3RhdGUudGFnID0gdGFnO1xuXG4gICAgdGhpcy5fdXNlQXJncyhhcmdzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufSk7XG5cbk5vZGUucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShpdGVtKSB7XG4gIGFzc2VydChpdGVtKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS51c2UgPT09IG51bGwpO1xuICBzdGF0ZS51c2UgPSBpdGVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUub3B0aW9uYWwgPSBmdW5jdGlvbiBvcHRpb25hbCgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIHN0YXRlLm9wdGlvbmFsID0gdHJ1ZTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmRlZiA9IGZ1bmN0aW9uIGRlZih2YWwpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZVsnZGVmYXVsdCddID09PSBudWxsKTtcbiAgc3RhdGVbJ2RlZmF1bHQnXSA9IHZhbDtcbiAgc3RhdGUub3B0aW9uYWwgPSB0cnVlO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuZXhwbGljaXQgPSBmdW5jdGlvbiBleHBsaWNpdChudW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5leHBsaWNpdCA9PT0gbnVsbCAmJiBzdGF0ZS5pbXBsaWNpdCA9PT0gbnVsbCk7XG4gIHN0YXRlLmV4cGxpY2l0ID0gbnVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuaW1wbGljaXQgPSBmdW5jdGlvbiBpbXBsaWNpdChudW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGFzc2VydChzdGF0ZS5leHBsaWNpdCA9PT0gbnVsbCAmJiBzdGF0ZS5pbXBsaWNpdCA9PT0gbnVsbCk7XG4gIHN0YXRlLmltcGxpY2l0ID0gbnVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUub2JqID0gZnVuY3Rpb24gb2JqKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblxuICBzdGF0ZS5vYmogPSB0cnVlO1xuXG4gIGlmIChhcmdzLmxlbmd0aCAhPT0gMClcbiAgICB0aGlzLl91c2VBcmdzKGFyZ3MpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUua2V5ID0gZnVuY3Rpb24ga2V5KG5ld0tleSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgYXNzZXJ0KHN0YXRlLmtleSA9PT0gbnVsbCk7XG4gIHN0YXRlLmtleSA9IG5ld0tleTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk5vZGUucHJvdG90eXBlLmFueSA9IGZ1bmN0aW9uIGFueSgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIHN0YXRlLmFueSA9IHRydWU7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5jaG9pY2UgPSBmdW5jdGlvbiBjaG9pY2Uob2JqKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUuY2hvaWNlID09PSBudWxsKTtcbiAgc3RhdGUuY2hvaWNlID0gb2JqO1xuICB0aGlzLl91c2VBcmdzKE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfSkpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuTm9kZS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyhpdGVtKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICBhc3NlcnQoc3RhdGUudXNlID09PSBudWxsKTtcbiAgc3RhdGUuY29udGFpbnMgPSBpdGVtO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy9cbi8vIERlY29kaW5nXG4vL1xuXG5Ob2RlLnByb3RvdHlwZS5fZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAvLyBEZWNvZGUgcm9vdCBub2RlXG4gIGlmIChzdGF0ZS5wYXJlbnQgPT09IG51bGwpXG4gICAgcmV0dXJuIGlucHV0LndyYXBSZXN1bHQoc3RhdGUuY2hpbGRyZW5bMF0uX2RlY29kZShpbnB1dCwgb3B0aW9ucykpO1xuXG4gIHZhciByZXN1bHQgPSBzdGF0ZVsnZGVmYXVsdCddO1xuICB2YXIgcHJlc2VudCA9IHRydWU7XG5cbiAgdmFyIHByZXZLZXkgPSBudWxsO1xuICBpZiAoc3RhdGUua2V5ICE9PSBudWxsKVxuICAgIHByZXZLZXkgPSBpbnB1dC5lbnRlcktleShzdGF0ZS5rZXkpO1xuXG4gIC8vIENoZWNrIGlmIHRhZyBpcyB0aGVyZVxuICBpZiAoc3RhdGUub3B0aW9uYWwpIHtcbiAgICB2YXIgdGFnID0gbnVsbDtcbiAgICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpXG4gICAgICB0YWcgPSBzdGF0ZS5leHBsaWNpdDtcbiAgICBlbHNlIGlmIChzdGF0ZS5pbXBsaWNpdCAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLmltcGxpY2l0O1xuICAgIGVsc2UgaWYgKHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIHRhZyA9IHN0YXRlLnRhZztcblxuICAgIGlmICh0YWcgPT09IG51bGwgJiYgIXN0YXRlLmFueSkge1xuICAgICAgLy8gVHJpYWwgYW5kIEVycm9yXG4gICAgICB2YXIgc2F2ZSA9IGlucHV0LnNhdmUoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChzdGF0ZS5jaG9pY2UgPT09IG51bGwpXG4gICAgICAgICAgdGhpcy5fZGVjb2RlR2VuZXJpYyhzdGF0ZS50YWcsIGlucHV0LCBvcHRpb25zKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHRoaXMuX2RlY29kZUNob2ljZShpbnB1dCwgb3B0aW9ucyk7XG4gICAgICAgIHByZXNlbnQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBwcmVzZW50ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpbnB1dC5yZXN0b3JlKHNhdmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmVzZW50ID0gdGhpcy5fcGVla1RhZyhpbnB1dCwgdGFnLCBzdGF0ZS5hbnkpO1xuXG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcihwcmVzZW50KSlcbiAgICAgICAgcmV0dXJuIHByZXNlbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8gUHVzaCBvYmplY3Qgb24gc3RhY2tcbiAgdmFyIHByZXZPYmo7XG4gIGlmIChzdGF0ZS5vYmogJiYgcHJlc2VudClcbiAgICBwcmV2T2JqID0gaW5wdXQuZW50ZXJPYmplY3QoKTtcblxuICBpZiAocHJlc2VudCkge1xuICAgIC8vIFVud3JhcCBleHBsaWNpdCB2YWx1ZXNcbiAgICBpZiAoc3RhdGUuZXhwbGljaXQgIT09IG51bGwpIHtcbiAgICAgIHZhciBleHBsaWNpdCA9IHRoaXMuX2RlY29kZVRhZyhpbnB1dCwgc3RhdGUuZXhwbGljaXQpO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IoZXhwbGljaXQpKVxuICAgICAgICByZXR1cm4gZXhwbGljaXQ7XG4gICAgICBpbnB1dCA9IGV4cGxpY2l0O1xuICAgIH1cblxuICAgIHZhciBzdGFydCA9IGlucHV0Lm9mZnNldDtcblxuICAgIC8vIFVud3JhcCBpbXBsaWNpdCBhbmQgbm9ybWFsIHZhbHVlc1xuICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsKSB7XG4gICAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgICB2YXIgc2F2ZSA9IGlucHV0LnNhdmUoKTtcbiAgICAgIHZhciBib2R5ID0gdGhpcy5fZGVjb2RlVGFnKFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgc3RhdGUuaW1wbGljaXQgIT09IG51bGwgPyBzdGF0ZS5pbXBsaWNpdCA6IHN0YXRlLnRhZyxcbiAgICAgICAgc3RhdGUuYW55XG4gICAgICApO1xuICAgICAgaWYgKGlucHV0LmlzRXJyb3IoYm9keSkpXG4gICAgICAgIHJldHVybiBib2R5O1xuXG4gICAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgICByZXN1bHQgPSBpbnB1dC5yYXcoc2F2ZSk7XG4gICAgICBlbHNlXG4gICAgICAgIGlucHV0ID0gYm9keTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYWNrICYmIHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIG9wdGlvbnMudHJhY2soaW5wdXQucGF0aCgpLCBzdGFydCwgaW5wdXQubGVuZ3RoLCAndGFnZ2VkJyk7XG5cbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRyYWNrICYmIHN0YXRlLnRhZyAhPT0gbnVsbClcbiAgICAgIG9wdGlvbnMudHJhY2soaW5wdXQucGF0aCgpLCBpbnB1dC5vZmZzZXQsIGlucHV0Lmxlbmd0aCwgJ2NvbnRlbnQnKTtcblxuICAgIC8vIFNlbGVjdCBwcm9wZXIgbWV0aG9kIGZvciB0YWdcbiAgICBpZiAoc3RhdGUuYW55KVxuICAgICAgcmVzdWx0ID0gcmVzdWx0O1xuICAgIGVsc2UgaWYgKHN0YXRlLmNob2ljZSA9PT0gbnVsbClcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2RlY29kZUdlbmVyaWMoc3RhdGUudGFnLCBpbnB1dCwgb3B0aW9ucyk7XG4gICAgZWxzZVxuICAgICAgcmVzdWx0ID0gdGhpcy5fZGVjb2RlQ2hvaWNlKGlucHV0LCBvcHRpb25zKTtcblxuICAgIGlmIChpbnB1dC5pc0Vycm9yKHJlc3VsdCkpXG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgLy8gRGVjb2RlIGNoaWxkcmVuXG4gICAgaWYgKCFzdGF0ZS5hbnkgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsICYmIHN0YXRlLmNoaWxkcmVuICE9PSBudWxsKSB7XG4gICAgICBzdGF0ZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIGRlY29kZUNoaWxkcmVuKGNoaWxkKSB7XG4gICAgICAgIC8vIE5PVEU6IFdlIGFyZSBpZ25vcmluZyBlcnJvcnMgaGVyZSwgdG8gbGV0IHBhcnNlciBjb250aW51ZSB3aXRoIG90aGVyXG4gICAgICAgIC8vIHBhcnRzIG9mIGVuY29kZWQgZGF0YVxuICAgICAgICBjaGlsZC5fZGVjb2RlKGlucHV0LCBvcHRpb25zKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIERlY29kZSBjb250YWluZWQvZW5jb2RlZCBieSBzY2hlbWEsIG9ubHkgaW4gYml0IG9yIG9jdGV0IHN0cmluZ3NcbiAgICBpZiAoc3RhdGUuY29udGFpbnMgJiYgKHN0YXRlLnRhZyA9PT0gJ29jdHN0cicgfHwgc3RhdGUudGFnID09PSAnYml0c3RyJykpIHtcbiAgICAgIHZhciBkYXRhID0gbmV3IERlY29kZXJCdWZmZXIocmVzdWx0KTtcbiAgICAgIHJlc3VsdCA9IHRoaXMuX2dldFVzZShzdGF0ZS5jb250YWlucywgaW5wdXQuX3JlcG9ydGVyU3RhdGUub2JqKVxuICAgICAgICAgIC5fZGVjb2RlKGRhdGEsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFBvcCBvYmplY3RcbiAgaWYgKHN0YXRlLm9iaiAmJiBwcmVzZW50KVxuICAgIHJlc3VsdCA9IGlucHV0LmxlYXZlT2JqZWN0KHByZXZPYmopO1xuXG4gIC8vIFNldCBrZXlcbiAgaWYgKHN0YXRlLmtleSAhPT0gbnVsbCAmJiAocmVzdWx0ICE9PSBudWxsIHx8IHByZXNlbnQgPT09IHRydWUpKVxuICAgIGlucHV0LmxlYXZlS2V5KHByZXZLZXksIHN0YXRlLmtleSwgcmVzdWx0KTtcbiAgZWxzZSBpZiAocHJldktleSAhPT0gbnVsbClcbiAgICBpbnB1dC5leGl0S2V5KHByZXZLZXkpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZGVjb2RlR2VuZXJpYyA9IGZ1bmN0aW9uIGRlY29kZUdlbmVyaWModGFnLCBpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG5cbiAgaWYgKHRhZyA9PT0gJ3NlcScgfHwgdGFnID09PSAnc2V0JylcbiAgICByZXR1cm4gbnVsbDtcbiAgaWYgKHRhZyA9PT0gJ3NlcW9mJyB8fCB0YWcgPT09ICdzZXRvZicpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZUxpc3QoaW5wdXQsIHRhZywgc3RhdGUuYXJnc1swXSwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKC9zdHIkLy50ZXN0KHRhZykpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZVN0cihpbnB1dCwgdGFnLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnICYmIHN0YXRlLmFyZ3MpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU9iamlkKGlucHV0LCBzdGF0ZS5hcmdzWzBdLCBzdGF0ZS5hcmdzWzFdLCBvcHRpb25zKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVPYmppZChpbnB1dCwgbnVsbCwgbnVsbCwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnIHx8IHRhZyA9PT0gJ3V0Y3RpbWUnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVUaW1lKGlucHV0LCB0YWcsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdudWxsXycpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZU51bGwoaW5wdXQsIG9wdGlvbnMpO1xuICBlbHNlIGlmICh0YWcgPT09ICdib29sJylcbiAgICByZXR1cm4gdGhpcy5fZGVjb2RlQm9vbChpbnB1dCwgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKVxuICAgIHJldHVybiB0aGlzLl9kZWNvZGVTdHIoaW5wdXQsIHRhZywgb3B0aW9ucyk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2ludCcgfHwgdGFnID09PSAnZW51bScpXG4gICAgcmV0dXJuIHRoaXMuX2RlY29kZUludChpbnB1dCwgc3RhdGUuYXJncyAmJiBzdGF0ZS5hcmdzWzBdLCBvcHRpb25zKTtcblxuICBpZiAoc3RhdGUudXNlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFVzZShzdGF0ZS51c2UsIGlucHV0Ll9yZXBvcnRlclN0YXRlLm9iailcbiAgICAgICAgLl9kZWNvZGUoaW5wdXQsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbnB1dC5lcnJvcigndW5rbm93biB0YWc6ICcgKyB0YWcpO1xuICB9XG59O1xuXG5Ob2RlLnByb3RvdHlwZS5fZ2V0VXNlID0gZnVuY3Rpb24gX2dldFVzZShlbnRpdHksIG9iaikge1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgLy8gQ3JlYXRlIGFsdGVyZWQgdXNlIGRlY29kZXIgaWYgaW1wbGljaXQgaXMgc2V0XG4gIHN0YXRlLnVzZURlY29kZXIgPSB0aGlzLl91c2UoZW50aXR5LCBvYmopO1xuICBhc3NlcnQoc3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLnBhcmVudCA9PT0gbnVsbCk7XG4gIHN0YXRlLnVzZURlY29kZXIgPSBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuY2hpbGRyZW5bMF07XG4gIGlmIChzdGF0ZS5pbXBsaWNpdCAhPT0gc3RhdGUudXNlRGVjb2Rlci5fYmFzZVN0YXRlLmltcGxpY2l0KSB7XG4gICAgc3RhdGUudXNlRGVjb2RlciA9IHN0YXRlLnVzZURlY29kZXIuY2xvbmUoKTtcbiAgICBzdGF0ZS51c2VEZWNvZGVyLl9iYXNlU3RhdGUuaW1wbGljaXQgPSBzdGF0ZS5pbXBsaWNpdDtcbiAgfVxuICByZXR1cm4gc3RhdGUudXNlRGVjb2Rlcjtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9kZWNvZGVDaG9pY2UgPSBmdW5jdGlvbiBkZWNvZGVDaG9pY2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgdmFyIG1hdGNoID0gZmFsc2U7XG5cbiAgT2JqZWN0LmtleXMoc3RhdGUuY2hvaWNlKS5zb21lKGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBzYXZlID0gaW5wdXQuc2F2ZSgpO1xuICAgIHZhciBub2RlID0gc3RhdGUuY2hvaWNlW2tleV07XG4gICAgdHJ5IHtcbiAgICAgIHZhciB2YWx1ZSA9IG5vZGUuX2RlY29kZShpbnB1dCwgb3B0aW9ucyk7XG4gICAgICBpZiAoaW5wdXQuaXNFcnJvcih2YWx1ZSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgcmVzdWx0ID0geyB0eXBlOiBrZXksIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgbWF0Y2ggPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlucHV0LnJlc3RvcmUoc2F2ZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LCB0aGlzKTtcblxuICBpZiAoIW1hdGNoKVxuICAgIHJldHVybiBpbnB1dC5lcnJvcignQ2hvaWNlIG5vdCBtYXRjaGVkJyk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vXG4vLyBFbmNvZGluZ1xuLy9cblxuTm9kZS5wcm90b3R5cGUuX2NyZWF0ZUVuY29kZXJCdWZmZXIgPSBmdW5jdGlvbiBjcmVhdGVFbmNvZGVyQnVmZmVyKGRhdGEpIHtcbiAgcmV0dXJuIG5ldyBFbmNvZGVyQnVmZmVyKGRhdGEsIHRoaXMucmVwb3J0ZXIpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShkYXRhLCByZXBvcnRlciwgcGFyZW50KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgaWYgKHN0YXRlWydkZWZhdWx0J10gIT09IG51bGwgJiYgc3RhdGVbJ2RlZmF1bHQnXSA9PT0gZGF0YSlcbiAgICByZXR1cm47XG5cbiAgdmFyIHJlc3VsdCA9IHRoaXMuX2VuY29kZVZhbHVlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpO1xuICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuO1xuXG4gIGlmICh0aGlzLl9za2lwRGVmYXVsdChyZXN1bHQsIHJlcG9ydGVyLCBwYXJlbnQpKVxuICAgIHJldHVybjtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZVZhbHVlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyLCBwYXJlbnQpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIC8vIERlY29kZSByb290IG5vZGVcbiAgaWYgKHN0YXRlLnBhcmVudCA9PT0gbnVsbClcbiAgICByZXR1cm4gc3RhdGUuY2hpbGRyZW5bMF0uX2VuY29kZShkYXRhLCByZXBvcnRlciB8fCBuZXcgUmVwb3J0ZXIoKSk7XG5cbiAgdmFyIHJlc3VsdCA9IG51bGw7XG5cbiAgLy8gU2V0IHJlcG9ydGVyIHRvIHNoYXJlIGl0IHdpdGggYSBjaGlsZCBjbGFzc1xuICB0aGlzLnJlcG9ydGVyID0gcmVwb3J0ZXI7XG5cbiAgLy8gQ2hlY2sgaWYgZGF0YSBpcyB0aGVyZVxuICBpZiAoc3RhdGUub3B0aW9uYWwgJiYgZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHN0YXRlWydkZWZhdWx0J10gIT09IG51bGwpXG4gICAgICBkYXRhID0gc3RhdGVbJ2RlZmF1bHQnXVxuICAgIGVsc2VcbiAgICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEVuY29kZSBjaGlsZHJlbiBmaXJzdFxuICB2YXIgY29udGVudCA9IG51bGw7XG4gIHZhciBwcmltaXRpdmUgPSBmYWxzZTtcbiAgaWYgKHN0YXRlLmFueSkge1xuICAgIC8vIEFueXRoaW5nIHRoYXQgd2FzIGdpdmVuIGlzIHRyYW5zbGF0ZWQgdG8gYnVmZmVyXG4gICAgcmVzdWx0ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihkYXRhKTtcbiAgfSBlbHNlIGlmIChzdGF0ZS5jaG9pY2UpIHtcbiAgICByZXN1bHQgPSB0aGlzLl9lbmNvZGVDaG9pY2UoZGF0YSwgcmVwb3J0ZXIpO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNvbnRhaW5zKSB7XG4gICAgY29udGVudCA9IHRoaXMuX2dldFVzZShzdGF0ZS5jb250YWlucywgcGFyZW50KS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTtcbiAgICBwcmltaXRpdmUgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHN0YXRlLmNoaWxkcmVuKSB7XG4gICAgY29udGVudCA9IHN0YXRlLmNoaWxkcmVuLm1hcChmdW5jdGlvbihjaGlsZCkge1xuICAgICAgaWYgKGNoaWxkLl9iYXNlU3RhdGUudGFnID09PSAnbnVsbF8nKVxuICAgICAgICByZXR1cm4gY2hpbGQuX2VuY29kZShudWxsLCByZXBvcnRlciwgZGF0YSk7XG5cbiAgICAgIGlmIChjaGlsZC5fYmFzZVN0YXRlLmtleSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdDaGlsZCBzaG91bGQgaGF2ZSBhIGtleScpO1xuICAgICAgdmFyIHByZXZLZXkgPSByZXBvcnRlci5lbnRlcktleShjaGlsZC5fYmFzZVN0YXRlLmtleSk7XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ29iamVjdCcpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignQ2hpbGQgZXhwZWN0ZWQsIGJ1dCBpbnB1dCBpcyBub3Qgb2JqZWN0Jyk7XG5cbiAgICAgIHZhciByZXMgPSBjaGlsZC5fZW5jb2RlKGRhdGFbY2hpbGQuX2Jhc2VTdGF0ZS5rZXldLCByZXBvcnRlciwgZGF0YSk7XG4gICAgICByZXBvcnRlci5sZWF2ZUtleShwcmV2S2V5KTtcblxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LCB0aGlzKS5maWx0ZXIoZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9KTtcbiAgICBjb250ZW50ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihjb250ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3RhdGUudGFnID09PSAnc2Vxb2YnIHx8IHN0YXRlLnRhZyA9PT0gJ3NldG9mJykge1xuICAgICAgLy8gVE9ETyhpbmR1dG55KTogdGhpcyBzaG91bGQgYmUgdGhyb3duIG9uIERTTCBsZXZlbFxuICAgICAgaWYgKCEoc3RhdGUuYXJncyAmJiBzdGF0ZS5hcmdzLmxlbmd0aCA9PT0gMSkpXG4gICAgICAgIHJldHVybiByZXBvcnRlci5lcnJvcignVG9vIG1hbnkgYXJncyBmb3IgOiAnICsgc3RhdGUudGFnKTtcblxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKVxuICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoJ3NlcW9mL3NldG9mLCBidXQgZGF0YSBpcyBub3QgQXJyYXknKTtcblxuICAgICAgdmFyIGNoaWxkID0gdGhpcy5jbG9uZSgpO1xuICAgICAgY2hpbGQuX2Jhc2VTdGF0ZS5pbXBsaWNpdCA9IG51bGw7XG4gICAgICBjb250ZW50ID0gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihkYXRhLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VXNlKHN0YXRlLmFyZ3NbMF0sIGRhdGEpLl9lbmNvZGUoaXRlbSwgcmVwb3J0ZXIpO1xuICAgICAgfSwgY2hpbGQpKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLnVzZSAhPT0gbnVsbCkge1xuICAgICAgcmVzdWx0ID0gdGhpcy5fZ2V0VXNlKHN0YXRlLnVzZSwgcGFyZW50KS5fZW5jb2RlKGRhdGEsIHJlcG9ydGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudCA9IHRoaXMuX2VuY29kZVByaW1pdGl2ZShzdGF0ZS50YWcsIGRhdGEpO1xuICAgICAgcHJpbWl0aXZlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBFbmNvZGUgZGF0YSBpdHNlbGZcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCFzdGF0ZS5hbnkgJiYgc3RhdGUuY2hvaWNlID09PSBudWxsKSB7XG4gICAgdmFyIHRhZyA9IHN0YXRlLmltcGxpY2l0ICE9PSBudWxsID8gc3RhdGUuaW1wbGljaXQgOiBzdGF0ZS50YWc7XG4gICAgdmFyIGNscyA9IHN0YXRlLmltcGxpY2l0ID09PSBudWxsID8gJ3VuaXZlcnNhbCcgOiAnY29udGV4dCc7XG5cbiAgICBpZiAodGFnID09PSBudWxsKSB7XG4gICAgICBpZiAoc3RhdGUudXNlID09PSBudWxsKVxuICAgICAgICByZXBvcnRlci5lcnJvcignVGFnIGNvdWxkIGJlIG9tbWl0ZWQgb25seSBmb3IgLnVzZSgpJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdGF0ZS51c2UgPT09IG51bGwpXG4gICAgICAgIHJlc3VsdCA9IHRoaXMuX2VuY29kZUNvbXBvc2l0ZSh0YWcsIHByaW1pdGl2ZSwgY2xzLCBjb250ZW50KTtcbiAgICB9XG4gIH1cblxuICAvLyBXcmFwIGluIGV4cGxpY2l0XG4gIGlmIChzdGF0ZS5leHBsaWNpdCAhPT0gbnVsbClcbiAgICByZXN1bHQgPSB0aGlzLl9lbmNvZGVDb21wb3NpdGUoc3RhdGUuZXhwbGljaXQsIGZhbHNlLCAnY29udGV4dCcsIHJlc3VsdCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9lbmNvZGVDaG9pY2UgPSBmdW5jdGlvbiBlbmNvZGVDaG9pY2UoZGF0YSwgcmVwb3J0ZXIpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIHZhciBub2RlID0gc3RhdGUuY2hvaWNlW2RhdGEudHlwZV07XG4gIGlmICghbm9kZSkge1xuICAgIGFzc2VydChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGRhdGEudHlwZSArICcgbm90IGZvdW5kIGluICcgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmtleXMoc3RhdGUuY2hvaWNlKSkpO1xuICB9XG4gIHJldHVybiBub2RlLl9lbmNvZGUoZGF0YS52YWx1ZSwgcmVwb3J0ZXIpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2VuY29kZVByaW1pdGl2ZSA9IGZ1bmN0aW9uIGVuY29kZVByaW1pdGl2ZSh0YWcsIGRhdGEpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuXG4gIGlmICgvc3RyJC8udGVzdCh0YWcpKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoZGF0YSwgdGFnKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnICYmIHN0YXRlLmFyZ3MpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZU9iamlkKGRhdGEsIHN0YXRlLnJldmVyc2VBcmdzWzBdLCBzdGF0ZS5hcmdzWzFdKTtcbiAgZWxzZSBpZiAodGFnID09PSAnb2JqaWQnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVPYmppZChkYXRhLCBudWxsLCBudWxsKTtcbiAgZWxzZSBpZiAodGFnID09PSAnZ2VudGltZScgfHwgdGFnID09PSAndXRjdGltZScpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZVRpbWUoZGF0YSwgdGFnKTtcbiAgZWxzZSBpZiAodGFnID09PSAnbnVsbF8nKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVOdWxsKCk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ2ludCcgfHwgdGFnID09PSAnZW51bScpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZUludChkYXRhLCBzdGF0ZS5hcmdzICYmIHN0YXRlLnJldmVyc2VBcmdzWzBdKTtcbiAgZWxzZSBpZiAodGFnID09PSAnYm9vbCcpXG4gICAgcmV0dXJuIHRoaXMuX2VuY29kZUJvb2woZGF0YSk7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKVxuICAgIHJldHVybiB0aGlzLl9lbmNvZGVTdHIoZGF0YSwgdGFnKTtcbiAgZWxzZVxuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdGFnOiAnICsgdGFnKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLl9pc051bXN0ciA9IGZ1bmN0aW9uIGlzTnVtc3RyKHN0cikge1xuICByZXR1cm4gL15bMC05IF0qJC8udGVzdChzdHIpO1xufTtcblxuTm9kZS5wcm90b3R5cGUuX2lzUHJpbnRzdHIgPSBmdW5jdGlvbiBpc1ByaW50c3RyKHN0cikge1xuICByZXR1cm4gL15bQS1aYS16MC05ICdcXChcXClcXCssXFwtXFwuXFwvOj1cXD9dKiQvLnRlc3Qoc3RyKTtcbn07XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5mdW5jdGlvbiBSZXBvcnRlcihvcHRpb25zKSB7XG4gIHRoaXMuX3JlcG9ydGVyU3RhdGUgPSB7XG4gICAgb2JqOiBudWxsLFxuICAgIHBhdGg6IFtdLFxuICAgIG9wdGlvbnM6IG9wdGlvbnMgfHwge30sXG4gICAgZXJyb3JzOiBbXVxuICB9O1xufVxuZXhwb3J0cy5SZXBvcnRlciA9IFJlcG9ydGVyO1xuXG5SZXBvcnRlci5wcm90b3R5cGUuaXNFcnJvciA9IGZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiBSZXBvcnRlckVycm9yO1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiBzYXZlKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHJldHVybiB7IG9iajogc3RhdGUub2JqLCBwYXRoTGVuOiBzdGF0ZS5wYXRoLmxlbmd0aCB9O1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbiByZXN0b3JlKGRhdGEpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICBzdGF0ZS5vYmogPSBkYXRhLm9iajtcbiAgc3RhdGUucGF0aCA9IHN0YXRlLnBhdGguc2xpY2UoMCwgZGF0YS5wYXRoTGVuKTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5lbnRlcktleSA9IGZ1bmN0aW9uIGVudGVyS2V5KGtleSkge1xuICByZXR1cm4gdGhpcy5fcmVwb3J0ZXJTdGF0ZS5wYXRoLnB1c2goa2V5KTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5leGl0S2V5ID0gZnVuY3Rpb24gZXhpdEtleShpbmRleCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHN0YXRlLnBhdGggPSBzdGF0ZS5wYXRoLnNsaWNlKDAsIGluZGV4IC0gMSk7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUubGVhdmVLZXkgPSBmdW5jdGlvbiBsZWF2ZUtleShpbmRleCwga2V5LCB2YWx1ZSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHRoaXMuZXhpdEtleShpbmRleCk7XG4gIGlmIChzdGF0ZS5vYmogIT09IG51bGwpXG4gICAgc3RhdGUub2JqW2tleV0gPSB2YWx1ZTtcbn07XG5cblJlcG9ydGVyLnByb3RvdHlwZS5wYXRoID0gZnVuY3Rpb24gcGF0aCgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlcG9ydGVyU3RhdGUucGF0aC5qb2luKCcvJyk7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZW50ZXJPYmplY3QgPSBmdW5jdGlvbiBlbnRlck9iamVjdCgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICB2YXIgcHJldiA9IHN0YXRlLm9iajtcbiAgc3RhdGUub2JqID0ge307XG4gIHJldHVybiBwcmV2O1xufTtcblxuUmVwb3J0ZXIucHJvdG90eXBlLmxlYXZlT2JqZWN0ID0gZnVuY3Rpb24gbGVhdmVPYmplY3QocHJldikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZXBvcnRlclN0YXRlO1xuXG4gIHZhciBub3cgPSBzdGF0ZS5vYmo7XG4gIHN0YXRlLm9iaiA9IHByZXY7XG4gIHJldHVybiBub3c7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiBlcnJvcihtc2cpIHtcbiAgdmFyIGVycjtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVwb3J0ZXJTdGF0ZTtcblxuICB2YXIgaW5oZXJpdGVkID0gbXNnIGluc3RhbmNlb2YgUmVwb3J0ZXJFcnJvcjtcbiAgaWYgKGluaGVyaXRlZCkge1xuICAgIGVyciA9IG1zZztcbiAgfSBlbHNlIHtcbiAgICBlcnIgPSBuZXcgUmVwb3J0ZXJFcnJvcihzdGF0ZS5wYXRoLm1hcChmdW5jdGlvbihlbGVtKSB7XG4gICAgICByZXR1cm4gJ1snICsgSlNPTi5zdHJpbmdpZnkoZWxlbSkgKyAnXSc7XG4gICAgfSkuam9pbignJyksIG1zZy5tZXNzYWdlIHx8IG1zZywgbXNnLnN0YWNrKTtcbiAgfVxuXG4gIGlmICghc3RhdGUub3B0aW9ucy5wYXJ0aWFsKVxuICAgIHRocm93IGVycjtcblxuICBpZiAoIWluaGVyaXRlZClcbiAgICBzdGF0ZS5lcnJvcnMucHVzaChlcnIpO1xuXG4gIHJldHVybiBlcnI7XG59O1xuXG5SZXBvcnRlci5wcm90b3R5cGUud3JhcFJlc3VsdCA9IGZ1bmN0aW9uIHdyYXBSZXN1bHQocmVzdWx0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlcG9ydGVyU3RhdGU7XG4gIGlmICghc3RhdGUub3B0aW9ucy5wYXJ0aWFsKVxuICAgIHJldHVybiByZXN1bHQ7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN1bHQ6IHRoaXMuaXNFcnJvcihyZXN1bHQpID8gbnVsbCA6IHJlc3VsdCxcbiAgICBlcnJvcnM6IHN0YXRlLmVycm9yc1xuICB9O1xufTtcblxuZnVuY3Rpb24gUmVwb3J0ZXJFcnJvcihwYXRoLCBtc2cpIHtcbiAgdGhpcy5wYXRoID0gcGF0aDtcbiAgdGhpcy5yZXRocm93KG1zZyk7XG59O1xuaW5oZXJpdHMoUmVwb3J0ZXJFcnJvciwgRXJyb3IpO1xuXG5SZXBvcnRlckVycm9yLnByb3RvdHlwZS5yZXRocm93ID0gZnVuY3Rpb24gcmV0aHJvdyhtc2cpIHtcbiAgdGhpcy5tZXNzYWdlID0gbXNnICsgJyBhdDogJyArICh0aGlzLnBhdGggfHwgJyhzaGFsbG93KScpO1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgUmVwb3J0ZXJFcnJvcik7XG5cbiAgaWYgKCF0aGlzLnN0YWNrKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIElFIG9ubHkgYWRkcyBzdGFjayB3aGVuIHRocm93blxuICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMubWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5zdGFjayA9IGUuc3RhY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcbiIsInZhciBjb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKTtcblxuZXhwb3J0cy50YWdDbGFzcyA9IHtcbiAgMDogJ3VuaXZlcnNhbCcsXG4gIDE6ICdhcHBsaWNhdGlvbicsXG4gIDI6ICdjb250ZXh0JyxcbiAgMzogJ3ByaXZhdGUnXG59O1xuZXhwb3J0cy50YWdDbGFzc0J5TmFtZSA9IGNvbnN0YW50cy5fcmV2ZXJzZShleHBvcnRzLnRhZ0NsYXNzKTtcblxuZXhwb3J0cy50YWcgPSB7XG4gIDB4MDA6ICdlbmQnLFxuICAweDAxOiAnYm9vbCcsXG4gIDB4MDI6ICdpbnQnLFxuICAweDAzOiAnYml0c3RyJyxcbiAgMHgwNDogJ29jdHN0cicsXG4gIDB4MDU6ICdudWxsXycsXG4gIDB4MDY6ICdvYmppZCcsXG4gIDB4MDc6ICdvYmpEZXNjJyxcbiAgMHgwODogJ2V4dGVybmFsJyxcbiAgMHgwOTogJ3JlYWwnLFxuICAweDBhOiAnZW51bScsXG4gIDB4MGI6ICdlbWJlZCcsXG4gIDB4MGM6ICd1dGY4c3RyJyxcbiAgMHgwZDogJ3JlbGF0aXZlT2lkJyxcbiAgMHgxMDogJ3NlcScsXG4gIDB4MTE6ICdzZXQnLFxuICAweDEyOiAnbnVtc3RyJyxcbiAgMHgxMzogJ3ByaW50c3RyJyxcbiAgMHgxNDogJ3Q2MXN0cicsXG4gIDB4MTU6ICd2aWRlb3N0cicsXG4gIDB4MTY6ICdpYTVzdHInLFxuICAweDE3OiAndXRjdGltZScsXG4gIDB4MTg6ICdnZW50aW1lJyxcbiAgMHgxOTogJ2dyYXBoc3RyJyxcbiAgMHgxYTogJ2lzbzY0NnN0cicsXG4gIDB4MWI6ICdnZW5zdHInLFxuICAweDFjOiAndW5pc3RyJyxcbiAgMHgxZDogJ2NoYXJzdHInLFxuICAweDFlOiAnYm1wc3RyJ1xufTtcbmV4cG9ydHMudGFnQnlOYW1lID0gY29uc3RhbnRzLl9yZXZlcnNlKGV4cG9ydHMudGFnKTtcbiIsInZhciBjb25zdGFudHMgPSBleHBvcnRzO1xuXG4vLyBIZWxwZXJcbmNvbnN0YW50cy5fcmV2ZXJzZSA9IGZ1bmN0aW9uIHJldmVyc2UobWFwKSB7XG4gIHZhciByZXMgPSB7fTtcblxuICBPYmplY3Qua2V5cyhtYXApLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgLy8gQ29udmVydCBrZXkgdG8gaW50ZWdlciBpZiBpdCBpcyBzdHJpbmdpZmllZFxuICAgIGlmICgoa2V5IHwgMCkgPT0ga2V5KVxuICAgICAga2V5ID0ga2V5IHwgMDtcblxuICAgIHZhciB2YWx1ZSA9IG1hcFtrZXldO1xuICAgIHJlc1t2YWx1ZV0gPSBrZXk7XG4gIH0pO1xuXG4gIHJldHVybiByZXM7XG59O1xuXG5jb25zdGFudHMuZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBhc24xID0gcmVxdWlyZSgnLi4vLi4vYXNuMScpO1xudmFyIGJhc2UgPSBhc24xLmJhc2U7XG52YXIgYmlnbnVtID0gYXNuMS5iaWdudW07XG5cbi8vIEltcG9ydCBERVIgY29uc3RhbnRzXG52YXIgZGVyID0gYXNuMS5jb25zdGFudHMuZGVyO1xuXG5mdW5jdGlvbiBERVJEZWNvZGVyKGVudGl0eSkge1xuICB0aGlzLmVuYyA9ICdkZXInO1xuICB0aGlzLm5hbWUgPSBlbnRpdHkubmFtZTtcbiAgdGhpcy5lbnRpdHkgPSBlbnRpdHk7XG5cbiAgLy8gQ29uc3RydWN0IGJhc2UgdHJlZVxuICB0aGlzLnRyZWUgPSBuZXcgREVSTm9kZSgpO1xuICB0aGlzLnRyZWUuX2luaXQoZW50aXR5LmJvZHkpO1xufTtcbm1vZHVsZS5leHBvcnRzID0gREVSRGVjb2RlcjtcblxuREVSRGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKGRhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIGJhc2UuRGVjb2RlckJ1ZmZlcikpXG4gICAgZGF0YSA9IG5ldyBiYXNlLkRlY29kZXJCdWZmZXIoZGF0YSwgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIHRoaXMudHJlZS5fZGVjb2RlKGRhdGEsIG9wdGlvbnMpO1xufTtcblxuLy8gVHJlZSBtZXRob2RzXG5cbmZ1bmN0aW9uIERFUk5vZGUocGFyZW50KSB7XG4gIGJhc2UuTm9kZS5jYWxsKHRoaXMsICdkZXInLCBwYXJlbnQpO1xufVxuaW5oZXJpdHMoREVSTm9kZSwgYmFzZS5Ob2RlKTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3BlZWtUYWcgPSBmdW5jdGlvbiBwZWVrVGFnKGJ1ZmZlciwgdGFnLCBhbnkpIHtcbiAgaWYgKGJ1ZmZlci5pc0VtcHR5KCkpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBzdGF0ZSA9IGJ1ZmZlci5zYXZlKCk7XG4gIHZhciBkZWNvZGVkVGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlciwgJ0ZhaWxlZCB0byBwZWVrIHRhZzogXCInICsgdGFnICsgJ1wiJyk7XG4gIGlmIChidWZmZXIuaXNFcnJvcihkZWNvZGVkVGFnKSlcbiAgICByZXR1cm4gZGVjb2RlZFRhZztcblxuICBidWZmZXIucmVzdG9yZShzdGF0ZSk7XG5cbiAgcmV0dXJuIGRlY29kZWRUYWcudGFnID09PSB0YWcgfHwgZGVjb2RlZFRhZy50YWdTdHIgPT09IHRhZyB8fFxuICAgIChkZWNvZGVkVGFnLnRhZ1N0ciArICdvZicpID09PSB0YWcgfHwgYW55O1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZVRhZyA9IGZ1bmN0aW9uIGRlY29kZVRhZyhidWZmZXIsIHRhZywgYW55KSB7XG4gIHZhciBkZWNvZGVkVGFnID0gZGVyRGVjb2RlVGFnKGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZhaWxlZCB0byBkZWNvZGUgdGFnIG9mIFwiJyArIHRhZyArICdcIicpO1xuICBpZiAoYnVmZmVyLmlzRXJyb3IoZGVjb2RlZFRhZykpXG4gICAgcmV0dXJuIGRlY29kZWRUYWc7XG5cbiAgdmFyIGxlbiA9IGRlckRlY29kZUxlbihidWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgZGVjb2RlZFRhZy5wcmltaXRpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ0ZhaWxlZCB0byBnZXQgbGVuZ3RoIG9mIFwiJyArIHRhZyArICdcIicpO1xuXG4gIC8vIEZhaWx1cmVcbiAgaWYgKGJ1ZmZlci5pc0Vycm9yKGxlbikpXG4gICAgcmV0dXJuIGxlbjtcblxuICBpZiAoIWFueSAmJlxuICAgICAgZGVjb2RlZFRhZy50YWcgIT09IHRhZyAmJlxuICAgICAgZGVjb2RlZFRhZy50YWdTdHIgIT09IHRhZyAmJlxuICAgICAgZGVjb2RlZFRhZy50YWdTdHIgKyAnb2YnICE9PSB0YWcpIHtcbiAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdGYWlsZWQgdG8gbWF0Y2ggdGFnOiBcIicgKyB0YWcgKyAnXCInKTtcbiAgfVxuXG4gIGlmIChkZWNvZGVkVGFnLnByaW1pdGl2ZSB8fCBsZW4gIT09IG51bGwpXG4gICAgcmV0dXJuIGJ1ZmZlci5za2lwKGxlbiwgJ0ZhaWxlZCB0byBtYXRjaCBib2R5IG9mOiBcIicgKyB0YWcgKyAnXCInKTtcblxuICAvLyBJbmRlZmluaXRlIGxlbmd0aC4uLiBmaW5kIEVORCB0YWdcbiAgdmFyIHN0YXRlID0gYnVmZmVyLnNhdmUoKTtcbiAgdmFyIHJlcyA9IHRoaXMuX3NraXBVbnRpbEVuZChcbiAgICAgIGJ1ZmZlcixcbiAgICAgICdGYWlsZWQgdG8gc2tpcCBpbmRlZmluaXRlIGxlbmd0aCBib2R5OiBcIicgKyB0aGlzLnRhZyArICdcIicpO1xuICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSlcbiAgICByZXR1cm4gcmVzO1xuXG4gIGxlbiA9IGJ1ZmZlci5vZmZzZXQgLSBzdGF0ZS5vZmZzZXQ7XG4gIGJ1ZmZlci5yZXN0b3JlKHN0YXRlKTtcbiAgcmV0dXJuIGJ1ZmZlci5za2lwKGxlbiwgJ0ZhaWxlZCB0byBtYXRjaCBib2R5IG9mOiBcIicgKyB0YWcgKyAnXCInKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9za2lwVW50aWxFbmQgPSBmdW5jdGlvbiBza2lwVW50aWxFbmQoYnVmZmVyLCBmYWlsKSB7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgdmFyIHRhZyA9IGRlckRlY29kZVRhZyhidWZmZXIsIGZhaWwpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcih0YWcpKVxuICAgICAgcmV0dXJuIHRhZztcbiAgICB2YXIgbGVuID0gZGVyRGVjb2RlTGVuKGJ1ZmZlciwgdGFnLnByaW1pdGl2ZSwgZmFpbCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKGxlbikpXG4gICAgICByZXR1cm4gbGVuO1xuXG4gICAgdmFyIHJlcztcbiAgICBpZiAodGFnLnByaW1pdGl2ZSB8fCBsZW4gIT09IG51bGwpXG4gICAgICByZXMgPSBidWZmZXIuc2tpcChsZW4pXG4gICAgZWxzZVxuICAgICAgcmVzID0gdGhpcy5fc2tpcFVudGlsRW5kKGJ1ZmZlciwgZmFpbCk7XG5cbiAgICAvLyBGYWlsdXJlXG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHJlcykpXG4gICAgICByZXR1cm4gcmVzO1xuXG4gICAgaWYgKHRhZy50YWdTdHIgPT09ICdlbmQnKVxuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVMaXN0ID0gZnVuY3Rpb24gZGVjb2RlTGlzdChidWZmZXIsIHRhZywgZGVjb2RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgdmFyIHBvc3NpYmxlRW5kID0gdGhpcy5fcGVla1RhZyhidWZmZXIsICdlbmQnKTtcbiAgICBpZiAoYnVmZmVyLmlzRXJyb3IocG9zc2libGVFbmQpKVxuICAgICAgcmV0dXJuIHBvc3NpYmxlRW5kO1xuXG4gICAgdmFyIHJlcyA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlciwgJ2RlcicsIG9wdGlvbnMpO1xuICAgIGlmIChidWZmZXIuaXNFcnJvcihyZXMpICYmIHBvc3NpYmxlRW5kKVxuICAgICAgYnJlYWs7XG4gICAgcmVzdWx0LnB1c2gocmVzKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZVN0ciA9IGZ1bmN0aW9uIGRlY29kZVN0cihidWZmZXIsIHRhZykge1xuICBpZiAodGFnID09PSAnYml0c3RyJykge1xuICAgIHZhciB1bnVzZWQgPSBidWZmZXIucmVhZFVJbnQ4KCk7XG4gICAgaWYgKGJ1ZmZlci5pc0Vycm9yKHVudXNlZCkpXG4gICAgICByZXR1cm4gdW51c2VkO1xuICAgIHJldHVybiB7IHVudXNlZDogdW51c2VkLCBkYXRhOiBidWZmZXIucmF3KCkgfTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdibXBzdHInKSB7XG4gICAgdmFyIHJhdyA9IGJ1ZmZlci5yYXcoKTtcbiAgICBpZiAocmF3Lmxlbmd0aCAlIDIgPT09IDEpXG4gICAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyBvZiBzdHJpbmcgdHlwZTogYm1wc3RyIGxlbmd0aCBtaXNtYXRjaCcpO1xuXG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Lmxlbmd0aCAvIDI7IGkrKykge1xuICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocmF3LnJlYWRVSW50MTZCRShpICogMikpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ251bXN0cicpIHtcbiAgICB2YXIgbnVtc3RyID0gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCdhc2NpaScpO1xuICAgIGlmICghdGhpcy5faXNOdW1zdHIobnVtc3RyKSkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnbnVtc3RyIHVuc3VwcG9ydGVkIGNoYXJhY3RlcnMnKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bXN0cjtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdvY3RzdHInKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5yYXcoKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdvYmpEZXNjJykge1xuICAgIHJldHVybiBidWZmZXIucmF3KCk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAncHJpbnRzdHInKSB7XG4gICAgdmFyIHByaW50c3RyID0gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCdhc2NpaScpO1xuICAgIGlmICghdGhpcy5faXNQcmludHN0cihwcmludHN0cikpIHtcbiAgICAgIHJldHVybiBidWZmZXIuZXJyb3IoJ0RlY29kaW5nIG9mIHN0cmluZyB0eXBlOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ByaW50c3RyIHVuc3VwcG9ydGVkIGNoYXJhY3RlcnMnKTtcbiAgICB9XG4gICAgcmV0dXJuIHByaW50c3RyO1xuICB9IGVsc2UgaWYgKC9zdHIkLy50ZXN0KHRhZykpIHtcbiAgICByZXR1cm4gYnVmZmVyLnJhdygpLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5lcnJvcignRGVjb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgKyB0YWcgKyAnIHVuc3VwcG9ydGVkJyk7XG4gIH1cbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVPYmppZCA9IGZ1bmN0aW9uIGRlY29kZU9iamlkKGJ1ZmZlciwgdmFsdWVzLCByZWxhdGl2ZSkge1xuICB2YXIgcmVzdWx0O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgdmFyIGlkZW50ID0gMDtcbiAgd2hpbGUgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgdmFyIHN1YmlkZW50ID0gYnVmZmVyLnJlYWRVSW50OCgpO1xuICAgIGlkZW50IDw8PSA3O1xuICAgIGlkZW50IHw9IHN1YmlkZW50ICYgMHg3ZjtcbiAgICBpZiAoKHN1YmlkZW50ICYgMHg4MCkgPT09IDApIHtcbiAgICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnQpO1xuICAgICAgaWRlbnQgPSAwO1xuICAgIH1cbiAgfVxuICBpZiAoc3ViaWRlbnQgJiAweDgwKVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnQpO1xuXG4gIHZhciBmaXJzdCA9IChpZGVudGlmaWVyc1swXSAvIDQwKSB8IDA7XG4gIHZhciBzZWNvbmQgPSBpZGVudGlmaWVyc1swXSAlIDQwO1xuXG4gIGlmIChyZWxhdGl2ZSlcbiAgICByZXN1bHQgPSBpZGVudGlmaWVycztcbiAgZWxzZVxuICAgIHJlc3VsdCA9IFtmaXJzdCwgc2Vjb25kXS5jb25jYXQoaWRlbnRpZmllcnMuc2xpY2UoMSkpO1xuXG4gIGlmICh2YWx1ZXMpIHtcbiAgICB2YXIgdG1wID0gdmFsdWVzW3Jlc3VsdC5qb2luKCcgJyldO1xuICAgIGlmICh0bXAgPT09IHVuZGVmaW5lZClcbiAgICAgIHRtcCA9IHZhbHVlc1tyZXN1bHQuam9pbignLicpXTtcbiAgICBpZiAodG1wICE9PSB1bmRlZmluZWQpXG4gICAgICByZXN1bHQgPSB0bXA7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZVRpbWUgPSBmdW5jdGlvbiBkZWNvZGVUaW1lKGJ1ZmZlciwgdGFnKSB7XG4gIHZhciBzdHIgPSBidWZmZXIucmF3KCkudG9TdHJpbmcoKTtcbiAgaWYgKHRhZyA9PT0gJ2dlbnRpbWUnKSB7XG4gICAgdmFyIHllYXIgPSBzdHIuc2xpY2UoMCwgNCkgfCAwO1xuICAgIHZhciBtb24gPSBzdHIuc2xpY2UoNCwgNikgfCAwO1xuICAgIHZhciBkYXkgPSBzdHIuc2xpY2UoNiwgOCkgfCAwO1xuICAgIHZhciBob3VyID0gc3RyLnNsaWNlKDgsIDEwKSB8IDA7XG4gICAgdmFyIG1pbiA9IHN0ci5zbGljZSgxMCwgMTIpIHwgMDtcbiAgICB2YXIgc2VjID0gc3RyLnNsaWNlKDEyLCAxNCkgfCAwO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3V0Y3RpbWUnKSB7XG4gICAgdmFyIHllYXIgPSBzdHIuc2xpY2UoMCwgMikgfCAwO1xuICAgIHZhciBtb24gPSBzdHIuc2xpY2UoMiwgNCkgfCAwO1xuICAgIHZhciBkYXkgPSBzdHIuc2xpY2UoNCwgNikgfCAwO1xuICAgIHZhciBob3VyID0gc3RyLnNsaWNlKDYsIDgpIHwgMDtcbiAgICB2YXIgbWluID0gc3RyLnNsaWNlKDgsIDEwKSB8IDA7XG4gICAgdmFyIHNlYyA9IHN0ci5zbGljZSgxMCwgMTIpIHwgMDtcbiAgICBpZiAoeWVhciA8IDcwKVxuICAgICAgeWVhciA9IDIwMDAgKyB5ZWFyO1xuICAgIGVsc2VcbiAgICAgIHllYXIgPSAxOTAwICsgeWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmZmVyLmVycm9yKCdEZWNvZGluZyAnICsgdGFnICsgJyB0aW1lIGlzIG5vdCBzdXBwb3J0ZWQgeWV0Jyk7XG4gIH1cblxuICByZXR1cm4gRGF0ZS5VVEMoeWVhciwgbW9uIC0gMSwgZGF5LCBob3VyLCBtaW4sIHNlYywgMCk7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fZGVjb2RlTnVsbCA9IGZ1bmN0aW9uIGRlY29kZU51bGwoYnVmZmVyKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2RlY29kZUJvb2wgPSBmdW5jdGlvbiBkZWNvZGVCb29sKGJ1ZmZlcikge1xuICB2YXIgcmVzID0gYnVmZmVyLnJlYWRVSW50OCgpO1xuICBpZiAoYnVmZmVyLmlzRXJyb3IocmVzKSlcbiAgICByZXR1cm4gcmVzO1xuICBlbHNlXG4gICAgcmV0dXJuIHJlcyAhPT0gMDtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9kZWNvZGVJbnQgPSBmdW5jdGlvbiBkZWNvZGVJbnQoYnVmZmVyLCB2YWx1ZXMpIHtcbiAgLy8gQmlnaW50LCByZXR1cm4gYXMgaXQgaXMgKGFzc3VtZSBiaWcgZW5kaWFuKVxuICB2YXIgcmF3ID0gYnVmZmVyLnJhdygpO1xuICB2YXIgcmVzID0gbmV3IGJpZ251bShyYXcpO1xuXG4gIGlmICh2YWx1ZXMpXG4gICAgcmVzID0gdmFsdWVzW3Jlcy50b1N0cmluZygxMCldIHx8IHJlcztcblxuICByZXR1cm4gcmVzO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX3VzZSA9IGZ1bmN0aW9uIHVzZShlbnRpdHksIG9iaikge1xuICBpZiAodHlwZW9mIGVudGl0eSA9PT0gJ2Z1bmN0aW9uJylcbiAgICBlbnRpdHkgPSBlbnRpdHkob2JqKTtcbiAgcmV0dXJuIGVudGl0eS5fZ2V0RGVjb2RlcignZGVyJykudHJlZTtcbn07XG5cbi8vIFV0aWxpdHkgbWV0aG9kc1xuXG5mdW5jdGlvbiBkZXJEZWNvZGVUYWcoYnVmLCBmYWlsKSB7XG4gIHZhciB0YWcgPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICBpZiAoYnVmLmlzRXJyb3IodGFnKSlcbiAgICByZXR1cm4gdGFnO1xuXG4gIHZhciBjbHMgPSBkZXIudGFnQ2xhc3NbdGFnID4+IDZdO1xuICB2YXIgcHJpbWl0aXZlID0gKHRhZyAmIDB4MjApID09PSAwO1xuXG4gIC8vIE11bHRpLW9jdGV0IHRhZyAtIGxvYWRcbiAgaWYgKCh0YWcgJiAweDFmKSA9PT0gMHgxZikge1xuICAgIHZhciBvY3QgPSB0YWc7XG4gICAgdGFnID0gMDtcbiAgICB3aGlsZSAoKG9jdCAmIDB4ODApID09PSAweDgwKSB7XG4gICAgICBvY3QgPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICAgICAgaWYgKGJ1Zi5pc0Vycm9yKG9jdCkpXG4gICAgICAgIHJldHVybiBvY3Q7XG5cbiAgICAgIHRhZyA8PD0gNztcbiAgICAgIHRhZyB8PSBvY3QgJiAweDdmO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0YWcgJj0gMHgxZjtcbiAgfVxuICB2YXIgdGFnU3RyID0gZGVyLnRhZ1t0YWddO1xuXG4gIHJldHVybiB7XG4gICAgY2xzOiBjbHMsXG4gICAgcHJpbWl0aXZlOiBwcmltaXRpdmUsXG4gICAgdGFnOiB0YWcsXG4gICAgdGFnU3RyOiB0YWdTdHJcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVyRGVjb2RlTGVuKGJ1ZiwgcHJpbWl0aXZlLCBmYWlsKSB7XG4gIHZhciBsZW4gPSBidWYucmVhZFVJbnQ4KGZhaWwpO1xuICBpZiAoYnVmLmlzRXJyb3IobGVuKSlcbiAgICByZXR1cm4gbGVuO1xuXG4gIC8vIEluZGVmaW5pdGUgZm9ybVxuICBpZiAoIXByaW1pdGl2ZSAmJiBsZW4gPT09IDB4ODApXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgLy8gRGVmaW5pdGUgZm9ybVxuICBpZiAoKGxlbiAmIDB4ODApID09PSAwKSB7XG4gICAgLy8gU2hvcnQgZm9ybVxuICAgIHJldHVybiBsZW47XG4gIH1cblxuICAvLyBMb25nIGZvcm1cbiAgdmFyIG51bSA9IGxlbiAmIDB4N2Y7XG4gIGlmIChudW0gPiA0KVxuICAgIHJldHVybiBidWYuZXJyb3IoJ2xlbmd0aCBvY3RlY3QgaXMgdG9vIGxvbmcnKTtcblxuICBsZW4gPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG51bTsgaSsrKSB7XG4gICAgbGVuIDw8PSA4O1xuICAgIHZhciBqID0gYnVmLnJlYWRVSW50OChmYWlsKTtcbiAgICBpZiAoYnVmLmlzRXJyb3IoaikpXG4gICAgICByZXR1cm4gajtcbiAgICBsZW4gfD0gajtcbiAgfVxuXG4gIHJldHVybiBsZW47XG59XG4iLCJ2YXIgZGVjb2RlcnMgPSBleHBvcnRzO1xuXG5kZWNvZGVycy5kZXIgPSByZXF1aXJlKCcuL2RlcicpO1xuZGVjb2RlcnMucGVtID0gcmVxdWlyZSgnLi9wZW0nKTtcbiIsInZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgREVSRGVjb2RlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5cbmZ1bmN0aW9uIFBFTURlY29kZXIoZW50aXR5KSB7XG4gIERFUkRlY29kZXIuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB0aGlzLmVuYyA9ICdwZW0nO1xufTtcbmluaGVyaXRzKFBFTURlY29kZXIsIERFUkRlY29kZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBQRU1EZWNvZGVyO1xuXG5QRU1EZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgbGluZXMgPSBkYXRhLnRvU3RyaW5nKCkuc3BsaXQoL1tcXHJcXG5dKy9nKTtcblxuICB2YXIgbGFiZWwgPSBvcHRpb25zLmxhYmVsLnRvVXBwZXJDYXNlKCk7XG5cbiAgdmFyIHJlID0gL14tLS0tLShCRUdJTnxFTkQpIChbXi1dKyktLS0tLSQvO1xuICB2YXIgc3RhcnQgPSAtMTtcbiAgdmFyIGVuZCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1hdGNoID0gbGluZXNbaV0ubWF0Y2gocmUpO1xuICAgIGlmIChtYXRjaCA9PT0gbnVsbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKG1hdGNoWzJdICE9PSBsYWJlbClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgaWYgKHN0YXJ0ID09PSAtMSkge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnQkVHSU4nKVxuICAgICAgICBicmVhaztcbiAgICAgIHN0YXJ0ID0gaTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hdGNoWzFdICE9PSAnRU5EJylcbiAgICAgICAgYnJlYWs7XG4gICAgICBlbmQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChzdGFydCA9PT0gLTEgfHwgZW5kID09PSAtMSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BFTSBzZWN0aW9uIG5vdCBmb3VuZCBmb3I6ICcgKyBsYWJlbCk7XG5cbiAgdmFyIGJhc2U2NCA9IGxpbmVzLnNsaWNlKHN0YXJ0ICsgMSwgZW5kKS5qb2luKCcnKTtcbiAgLy8gUmVtb3ZlIGV4Y2Vzc2l2ZSBzeW1ib2xzXG4gIGJhc2U2NC5yZXBsYWNlKC9bXmEtejAtOVxcK1xcLz1dKy9naSwgJycpO1xuXG4gIHZhciBpbnB1dCA9IG5ldyBCdWZmZXIoYmFzZTY0LCAnYmFzZTY0Jyk7XG4gIHJldHVybiBERVJEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUuY2FsbCh0aGlzLCBpbnB1dCwgb3B0aW9ucyk7XG59O1xuIiwidmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG5cbnZhciBhc24xID0gcmVxdWlyZSgnLi4vLi4vYXNuMScpO1xudmFyIGJhc2UgPSBhc24xLmJhc2U7XG5cbi8vIEltcG9ydCBERVIgY29uc3RhbnRzXG52YXIgZGVyID0gYXNuMS5jb25zdGFudHMuZGVyO1xuXG5mdW5jdGlvbiBERVJFbmNvZGVyKGVudGl0eSkge1xuICB0aGlzLmVuYyA9ICdkZXInO1xuICB0aGlzLm5hbWUgPSBlbnRpdHkubmFtZTtcbiAgdGhpcy5lbnRpdHkgPSBlbnRpdHk7XG5cbiAgLy8gQ29uc3RydWN0IGJhc2UgdHJlZVxuICB0aGlzLnRyZWUgPSBuZXcgREVSTm9kZSgpO1xuICB0aGlzLnRyZWUuX2luaXQoZW50aXR5LmJvZHkpO1xufTtcbm1vZHVsZS5leHBvcnRzID0gREVSRW5jb2RlcjtcblxuREVSRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGRhdGEsIHJlcG9ydGVyKSB7XG4gIHJldHVybiB0aGlzLnRyZWUuX2VuY29kZShkYXRhLCByZXBvcnRlcikuam9pbigpO1xufTtcblxuLy8gVHJlZSBtZXRob2RzXG5cbmZ1bmN0aW9uIERFUk5vZGUocGFyZW50KSB7XG4gIGJhc2UuTm9kZS5jYWxsKHRoaXMsICdkZXInLCBwYXJlbnQpO1xufVxuaW5oZXJpdHMoREVSTm9kZSwgYmFzZS5Ob2RlKTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZUNvbXBvc2l0ZSA9IGZ1bmN0aW9uIGVuY29kZUNvbXBvc2l0ZSh0YWcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50KSB7XG4gIHZhciBlbmNvZGVkVGFnID0gZW5jb2RlVGFnKHRhZywgcHJpbWl0aXZlLCBjbHMsIHRoaXMucmVwb3J0ZXIpO1xuXG4gIC8vIFNob3J0IGZvcm1cbiAgaWYgKGNvbnRlbnQubGVuZ3RoIDwgMHg4MCkge1xuICAgIHZhciBoZWFkZXIgPSBuZXcgQnVmZmVyKDIpO1xuICAgIGhlYWRlclswXSA9IGVuY29kZWRUYWc7XG4gICAgaGVhZGVyWzFdID0gY29udGVudC5sZW5ndGg7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoWyBoZWFkZXIsIGNvbnRlbnQgXSk7XG4gIH1cblxuICAvLyBMb25nIGZvcm1cbiAgLy8gQ291bnQgb2N0ZXRzIHJlcXVpcmVkIHRvIHN0b3JlIGxlbmd0aFxuICB2YXIgbGVuT2N0ZXRzID0gMTtcbiAgZm9yICh2YXIgaSA9IGNvbnRlbnQubGVuZ3RoOyBpID49IDB4MTAwOyBpID4+PSA4KVxuICAgIGxlbk9jdGV0cysrO1xuXG4gIHZhciBoZWFkZXIgPSBuZXcgQnVmZmVyKDEgKyAxICsgbGVuT2N0ZXRzKTtcbiAgaGVhZGVyWzBdID0gZW5jb2RlZFRhZztcbiAgaGVhZGVyWzFdID0gMHg4MCB8IGxlbk9jdGV0cztcblxuICBmb3IgKHZhciBpID0gMSArIGxlbk9jdGV0cywgaiA9IGNvbnRlbnQubGVuZ3RoOyBqID4gMDsgaS0tLCBqID4+PSA4KVxuICAgIGhlYWRlcltpXSA9IGogJiAweGZmO1xuXG4gIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFsgaGVhZGVyLCBjb250ZW50IF0pO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZVN0ciA9IGZ1bmN0aW9uIGVuY29kZVN0cihzdHIsIHRhZykge1xuICBpZiAodGFnID09PSAnYml0c3RyJykge1xuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKFsgc3RyLnVudXNlZCB8IDAsIHN0ci5kYXRhIF0pO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2JtcHN0cicpIHtcbiAgICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzdHIubGVuZ3RoICogMik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ1Zi53cml0ZVVJbnQxNkJFKHN0ci5jaGFyQ29kZUF0KGkpLCBpICogMik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKGJ1Zik7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnbnVtc3RyJykge1xuICAgIGlmICghdGhpcy5faXNOdW1zdHIoc3RyKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ0VuY29kaW5nIG9mIHN0cmluZyB0eXBlOiBudW1zdHIgc3VwcG9ydHMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25seSBkaWdpdHMgYW5kIHNwYWNlJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKHN0cik7XG4gIH0gZWxzZSBpZiAodGFnID09PSAncHJpbnRzdHInKSB7XG4gICAgaWYgKCF0aGlzLl9pc1ByaW50c3RyKHN0cikpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdFbmNvZGluZyBvZiBzdHJpbmcgdHlwZTogcHJpbnRzdHIgc3VwcG9ydHMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25seSBsYXRpbiB1cHBlciBhbmQgbG93ZXIgY2FzZSBsZXR0ZXJzLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaWdpdHMsIHNwYWNlLCBhcG9zdHJvcGhlLCBsZWZ0IGFuZCByaWd0aCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYXJlbnRoZXNpcywgcGx1cyBzaWduLCBjb21tYSwgaHlwaGVuLCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkb3QsIHNsYXNoLCBjb2xvbiwgZXF1YWwgc2lnbiwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncXVlc3Rpb24gbWFyaycpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2UgaWYgKC9zdHIkLy50ZXN0KHRhZykpIHtcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihzdHIpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ29iakRlc2MnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoc3RyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2Rpbmcgb2Ygc3RyaW5nIHR5cGU6ICcgKyB0YWcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgdW5zdXBwb3J0ZWQnKTtcbiAgfVxufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZU9iamlkID0gZnVuY3Rpb24gZW5jb2RlT2JqaWQoaWQsIHZhbHVlcywgcmVsYXRpdmUpIHtcbiAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIXZhbHVlcylcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdzdHJpbmcgb2JqaWQgZ2l2ZW4sIGJ1dCBubyB2YWx1ZXMgbWFwIGZvdW5kJyk7XG4gICAgaWYgKCF2YWx1ZXMuaGFzT3duUHJvcGVydHkoaWQpKVxuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ29iamlkIG5vdCBmb3VuZCBpbiB2YWx1ZXMgbWFwJyk7XG4gICAgaWQgPSB2YWx1ZXNbaWRdLnNwbGl0KC9bXFxzXFwuXSsvZyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZC5sZW5ndGg7IGkrKylcbiAgICAgIGlkW2ldIHw9IDA7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpZCkpIHtcbiAgICBpZCA9IGlkLnNsaWNlKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZC5sZW5ndGg7IGkrKylcbiAgICAgIGlkW2ldIHw9IDA7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkoaWQpKSB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ29iamlkKCkgc2hvdWxkIGJlIGVpdGhlciBhcnJheSBvciBzdHJpbmcsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnb3Q6ICcgKyBKU09OLnN0cmluZ2lmeShpZCkpO1xuICB9XG5cbiAgaWYgKCFyZWxhdGl2ZSkge1xuICAgIGlmIChpZFsxXSA+PSA0MClcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdTZWNvbmQgb2JqaWQgaWRlbnRpZmllciBPT0InKTtcbiAgICBpZC5zcGxpY2UoMCwgMiwgaWRbMF0gKiA0MCArIGlkWzFdKTtcbiAgfVxuXG4gIC8vIENvdW50IG51bWJlciBvZiBvY3RldHNcbiAgdmFyIHNpemUgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGlkZW50ID0gaWRbaV07XG4gICAgZm9yIChzaXplKys7IGlkZW50ID49IDB4ODA7IGlkZW50ID4+PSA3KVxuICAgICAgc2l6ZSsrO1xuICB9XG5cbiAgdmFyIG9iamlkID0gbmV3IEJ1ZmZlcihzaXplKTtcbiAgdmFyIG9mZnNldCA9IG9iamlkLmxlbmd0aCAtIDE7XG4gIGZvciAodmFyIGkgPSBpZC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBpZGVudCA9IGlkW2ldO1xuICAgIG9iamlkW29mZnNldC0tXSA9IGlkZW50ICYgMHg3ZjtcbiAgICB3aGlsZSAoKGlkZW50ID4+PSA3KSA+IDApXG4gICAgICBvYmppZFtvZmZzZXQtLV0gPSAweDgwIHwgKGlkZW50ICYgMHg3Zik7XG4gIH1cblxuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihvYmppZCk7XG59O1xuXG5mdW5jdGlvbiB0d28obnVtKSB7XG4gIGlmIChudW0gPCAxMClcbiAgICByZXR1cm4gJzAnICsgbnVtO1xuICBlbHNlXG4gICAgcmV0dXJuIG51bTtcbn1cblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZVRpbWUgPSBmdW5jdGlvbiBlbmNvZGVUaW1lKHRpbWUsIHRhZykge1xuICB2YXIgc3RyO1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHRpbWUpO1xuXG4gIGlmICh0YWcgPT09ICdnZW50aW1lJykge1xuICAgIHN0ciA9IFtcbiAgICAgIHR3byhkYXRlLmdldEZ1bGxZZWFyKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDRGF0ZSgpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ0hvdXJzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDTWludXRlcygpKSxcbiAgICAgIHR3byhkYXRlLmdldFVUQ1NlY29uZHMoKSksXG4gICAgICAnWidcbiAgICBdLmpvaW4oJycpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3V0Y3RpbWUnKSB7XG4gICAgc3RyID0gW1xuICAgICAgdHdvKGRhdGUuZ2V0RnVsbFllYXIoKSAlIDEwMCksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNb250aCgpICsgMSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENEYXRlKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDSG91cnMoKSksXG4gICAgICB0d28oZGF0ZS5nZXRVVENNaW51dGVzKCkpLFxuICAgICAgdHdvKGRhdGUuZ2V0VVRDU2Vjb25kcygpKSxcbiAgICAgICdaJ1xuICAgIF0uam9pbignJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZXBvcnRlci5lcnJvcignRW5jb2RpbmcgJyArIHRhZyArICcgdGltZSBpcyBub3Qgc3VwcG9ydGVkIHlldCcpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2VuY29kZVN0cihzdHIsICdvY3RzdHInKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVOdWxsID0gZnVuY3Rpb24gZW5jb2RlTnVsbCgpIHtcbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIoJycpO1xufTtcblxuREVSTm9kZS5wcm90b3R5cGUuX2VuY29kZUludCA9IGZ1bmN0aW9uIGVuY29kZUludChudW0sIHZhbHVlcykge1xuICBpZiAodHlwZW9mIG51bSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIXZhbHVlcylcbiAgICAgIHJldHVybiB0aGlzLnJlcG9ydGVyLmVycm9yKCdTdHJpbmcgaW50IG9yIGVudW0gZ2l2ZW4sIGJ1dCBubyB2YWx1ZXMgbWFwJyk7XG4gICAgaWYgKCF2YWx1ZXMuaGFzT3duUHJvcGVydHkobnVtKSkge1xuICAgICAgcmV0dXJuIHRoaXMucmVwb3J0ZXIuZXJyb3IoJ1ZhbHVlcyBtYXAgZG9lc25cXCd0IGNvbnRhaW46ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkobnVtKSk7XG4gICAgfVxuICAgIG51bSA9IHZhbHVlc1tudW1dO1xuICB9XG5cbiAgLy8gQmlnbnVtLCBhc3N1bWUgYmlnIGVuZGlhblxuICBpZiAodHlwZW9mIG51bSAhPT0gJ251bWJlcicgJiYgIUJ1ZmZlci5pc0J1ZmZlcihudW0pKSB7XG4gICAgdmFyIG51bUFycmF5ID0gbnVtLnRvQXJyYXkoKTtcbiAgICBpZiAoIW51bS5zaWduICYmIG51bUFycmF5WzBdICYgMHg4MCkge1xuICAgICAgbnVtQXJyYXkudW5zaGlmdCgwKTtcbiAgICB9XG4gICAgbnVtID0gbmV3IEJ1ZmZlcihudW1BcnJheSk7XG4gIH1cblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG51bSkpIHtcbiAgICB2YXIgc2l6ZSA9IG51bS5sZW5ndGg7XG4gICAgaWYgKG51bS5sZW5ndGggPT09IDApXG4gICAgICBzaXplKys7XG5cbiAgICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcihzaXplKTtcbiAgICBudW0uY29weShvdXQpO1xuICAgIGlmIChudW0ubGVuZ3RoID09PSAwKVxuICAgICAgb3V0WzBdID0gMFxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVFbmNvZGVyQnVmZmVyKG91dCk7XG4gIH1cblxuICBpZiAobnVtIDwgMHg4MClcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihudW0pO1xuXG4gIGlmIChudW0gPCAweDEwMClcbiAgICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcihbMCwgbnVtXSk7XG5cbiAgdmFyIHNpemUgPSAxO1xuICBmb3IgKHZhciBpID0gbnVtOyBpID49IDB4MTAwOyBpID4+PSA4KVxuICAgIHNpemUrKztcblxuICB2YXIgb3V0ID0gbmV3IEFycmF5KHNpemUpO1xuICBmb3IgKHZhciBpID0gb3V0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgb3V0W2ldID0gbnVtICYgMHhmZjtcbiAgICBudW0gPj49IDg7XG4gIH1cbiAgaWYob3V0WzBdICYgMHg4MCkge1xuICAgIG91dC51bnNoaWZ0KDApO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2NyZWF0ZUVuY29kZXJCdWZmZXIobmV3IEJ1ZmZlcihvdXQpKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl9lbmNvZGVCb29sID0gZnVuY3Rpb24gZW5jb2RlQm9vbCh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fY3JlYXRlRW5jb2RlckJ1ZmZlcih2YWx1ZSA/IDB4ZmYgOiAwKTtcbn07XG5cbkRFUk5vZGUucHJvdG90eXBlLl91c2UgPSBmdW5jdGlvbiB1c2UoZW50aXR5LCBvYmopIHtcbiAgaWYgKHR5cGVvZiBlbnRpdHkgPT09ICdmdW5jdGlvbicpXG4gICAgZW50aXR5ID0gZW50aXR5KG9iaik7XG4gIHJldHVybiBlbnRpdHkuX2dldEVuY29kZXIoJ2RlcicpLnRyZWU7XG59O1xuXG5ERVJOb2RlLnByb3RvdHlwZS5fc2tpcERlZmF1bHQgPSBmdW5jdGlvbiBza2lwRGVmYXVsdChkYXRhQnVmZmVyLCByZXBvcnRlciwgcGFyZW50KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2Jhc2VTdGF0ZTtcbiAgdmFyIGk7XG4gIGlmIChzdGF0ZVsnZGVmYXVsdCddID09PSBudWxsKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgZGF0YSA9IGRhdGFCdWZmZXIuam9pbigpO1xuICBpZiAoc3RhdGUuZGVmYXVsdEJ1ZmZlciA9PT0gdW5kZWZpbmVkKVxuICAgIHN0YXRlLmRlZmF1bHRCdWZmZXIgPSB0aGlzLl9lbmNvZGVWYWx1ZShzdGF0ZVsnZGVmYXVsdCddLCByZXBvcnRlciwgcGFyZW50KS5qb2luKCk7XG5cbiAgaWYgKGRhdGEubGVuZ3RoICE9PSBzdGF0ZS5kZWZhdWx0QnVmZmVyLmxlbmd0aClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgZm9yIChpPTA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKVxuICAgIGlmIChkYXRhW2ldICE9PSBzdGF0ZS5kZWZhdWx0QnVmZmVyW2ldKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLy8gVXRpbGl0eSBtZXRob2RzXG5cbmZ1bmN0aW9uIGVuY29kZVRhZyh0YWcsIHByaW1pdGl2ZSwgY2xzLCByZXBvcnRlcikge1xuICB2YXIgcmVzO1xuXG4gIGlmICh0YWcgPT09ICdzZXFvZicpXG4gICAgdGFnID0gJ3NlcSc7XG4gIGVsc2UgaWYgKHRhZyA9PT0gJ3NldG9mJylcbiAgICB0YWcgPSAnc2V0JztcblxuICBpZiAoZGVyLnRhZ0J5TmFtZS5oYXNPd25Qcm9wZXJ0eSh0YWcpKVxuICAgIHJlcyA9IGRlci50YWdCeU5hbWVbdGFnXTtcbiAgZWxzZSBpZiAodHlwZW9mIHRhZyA9PT0gJ251bWJlcicgJiYgKHRhZyB8IDApID09PSB0YWcpXG4gICAgcmVzID0gdGFnO1xuICBlbHNlXG4gICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKCdVbmtub3duIHRhZzogJyArIHRhZyk7XG5cbiAgaWYgKHJlcyA+PSAweDFmKVxuICAgIHJldHVybiByZXBvcnRlci5lcnJvcignTXVsdGktb2N0ZXQgdGFnIGVuY29kaW5nIHVuc3VwcG9ydGVkJyk7XG5cbiAgaWYgKCFwcmltaXRpdmUpXG4gICAgcmVzIHw9IDB4MjA7XG5cbiAgcmVzIHw9IChkZXIudGFnQ2xhc3NCeU5hbWVbY2xzIHx8ICd1bml2ZXJzYWwnXSA8PCA2KTtcblxuICByZXR1cm4gcmVzO1xufVxuIiwidmFyIGVuY29kZXJzID0gZXhwb3J0cztcblxuZW5jb2RlcnMuZGVyID0gcmVxdWlyZSgnLi9kZXInKTtcbmVuY29kZXJzLnBlbSA9IHJlcXVpcmUoJy4vcGVtJyk7XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG52YXIgREVSRW5jb2RlciA9IHJlcXVpcmUoJy4vZGVyJyk7XG5cbmZ1bmN0aW9uIFBFTUVuY29kZXIoZW50aXR5KSB7XG4gIERFUkVuY29kZXIuY2FsbCh0aGlzLCBlbnRpdHkpO1xuICB0aGlzLmVuYyA9ICdwZW0nO1xufTtcbmluaGVyaXRzKFBFTUVuY29kZXIsIERFUkVuY29kZXIpO1xubW9kdWxlLmV4cG9ydHMgPSBQRU1FbmNvZGVyO1xuXG5QRU1FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgYnVmID0gREVSRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlLmNhbGwodGhpcywgZGF0YSk7XG5cbiAgdmFyIHAgPSBidWYudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICB2YXIgb3V0ID0gWyAnLS0tLS1CRUdJTiAnICsgb3B0aW9ucy5sYWJlbCArICctLS0tLScgXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSArPSA2NClcbiAgICBvdXQucHVzaChwLnNsaWNlKGksIGkgKyA2NCkpO1xuICBvdXQucHVzaCgnLS0tLS1FTkQgJyArIG9wdGlvbnMubGFiZWwgKyAnLS0tLS0nKTtcbiAgcmV0dXJuIG91dC5qb2luKCdcXG4nKTtcbn07XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBwbGFjZUhvbGRlcnNDb3VudCAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyB0aGUgbnVtYmVyIG9mIGVxdWFsIHNpZ25zIChwbGFjZSBob2xkZXJzKVxuICAvLyBpZiB0aGVyZSBhcmUgdHdvIHBsYWNlaG9sZGVycywgdGhhbiB0aGUgdHdvIGNoYXJhY3RlcnMgYmVmb3JlIGl0XG4gIC8vIHJlcHJlc2VudCBvbmUgYnl0ZVxuICAvLyBpZiB0aGVyZSBpcyBvbmx5IG9uZSwgdGhlbiB0aGUgdGhyZWUgY2hhcmFjdGVycyBiZWZvcmUgaXQgcmVwcmVzZW50IDIgYnl0ZXNcbiAgLy8gdGhpcyBpcyBqdXN0IGEgY2hlYXAgaGFjayB0byBub3QgZG8gaW5kZXhPZiB0d2ljZVxuICByZXR1cm4gYjY0W2xlbiAtIDJdID09PSAnPScgPyAyIDogYjY0W2xlbiAtIDFdID09PSAnPScgPyAxIDogMFxufVxuXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG4gIHJldHVybiAoYjY0Lmxlbmd0aCAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0NvdW50KGI2NClcbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgaSwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFyclxuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuICBwbGFjZUhvbGRlcnMgPSBwbGFjZUhvbGRlcnNDb3VudChiNjQpXG5cbiAgYXJyID0gbmV3IEFycigobGVuICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzKVxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgbCA9IHBsYWNlSG9sZGVycyA+IDAgPyBsZW4gLSA0IDogbGVuXG5cbiAgdmFyIEwgPSAwXG5cbiAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gNCkge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltMKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICsgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICsgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gKyBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgb3V0cHV0ID0gJydcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDJdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz09J1xuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyAodWludDhbbGVuIC0gMV0pXG4gICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMTBdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXVxuICAgIG91dHB1dCArPSAnPSdcbiAgfVxuXG4gIHBhcnRzLnB1c2gob3V0cHV0KVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuXG4gIEJOLmlzQk4gPSBmdW5jdGlvbiBpc0JOIChudW0pIHtcbiAgICBpZiAobnVtIGluc3RhbmNlb2YgQk4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBudW0gIT09IG51bGwgJiYgdHlwZW9mIG51bSA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG51bS5jb25zdHJ1Y3Rvci53b3JkU2l6ZSA9PT0gQk4ud29yZFNpemUgJiYgQXJyYXkuaXNBcnJheShudW0ud29yZHMpO1xuICB9O1xuXG4gIEJOLm1heCA9IGZ1bmN0aW9uIG1heCAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpID4gMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLm1pbiA9IGZ1bmN0aW9uIG1pbiAobGVmdCwgcmlnaHQpIHtcbiAgICBpZiAobGVmdC5jbXAocmlnaHQpIDwgMCkgcmV0dXJuIGxlZnQ7XG4gICAgcmV0dXJuIHJpZ2h0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIGluaXQgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdE51bWJlcihudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdEFycmF5KG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIGJhc2UgPSAxNjtcbiAgICB9XG4gICAgYXNzZXJ0KGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpO1xuXG4gICAgbnVtYmVyID0gbnVtYmVyLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHN0YXJ0Kys7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IDE2KSB7XG4gICAgICB0aGlzLl9wYXJzZUhleChudW1iZXIsIHN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFyc2VCYXNlKG51bWJlciwgYmFzZSwgc3RhcnQpO1xuICAgIH1cblxuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdE51bWJlciA9IGZ1bmN0aW9uIF9pbml0TnVtYmVyIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPCAweDQwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIG51bWJlciAmIDB4M2ZmZmZmZiBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMHgxMDAwMDAwMDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZlxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG51bWJlciA8IDB4MjAwMDAwMDAwMDAwMDApOyAvLyAyIF4gNTMgKHVuc2FmZSlcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmYsXG4gICAgICAgIDFcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDM7XG4gICAgfVxuXG4gICAgaWYgKGVuZGlhbiAhPT0gJ2xlJykgcmV0dXJuO1xuXG4gICAgLy8gUmV2ZXJzZSB0aGUgYnl0ZXNcbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0QXJyYXkgPSBmdW5jdGlvbiBfaW5pdEFycmF5IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIC8vIFBlcmhhcHMgYSBVaW50OEFycmF5XG4gICAgYXNzZXJ0KHR5cGVvZiBudW1iZXIubGVuZ3RoID09PSAnbnVtYmVyJyk7XG4gICAgaWYgKG51bWJlci5sZW5ndGggPD0gMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwobnVtYmVyLmxlbmd0aCAvIDMpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgdmFyIG9mZiA9IDA7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JlJykge1xuICAgICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDEsIGogPSAwOyBpID49IDA7IGkgLT0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpIC0gMV0gPDwgOCkgfCAobnVtYmVyW2kgLSAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVuZGlhbiA9PT0gJ2xlJykge1xuICAgICAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSArIDFdIDw8IDgpIHwgKG51bWJlcltpICsgMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VIZXggKHN0ciwgc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByIDw8PSA0O1xuXG4gICAgICAvLyAnYScgLSAnZidcbiAgICAgIGlmIChjID49IDQ5ICYmIGMgPD0gNTQpIHtcbiAgICAgICAgciB8PSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJyAtICdGJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3ICYmIGMgPD0gMjIpIHtcbiAgICAgICAgciB8PSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciB8PSBjICYgMHhmO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VIZXggPSBmdW5jdGlvbiBfcGFyc2VIZXggKG51bWJlciwgc3RhcnQpIHtcbiAgICAvLyBDcmVhdGUgcG9zc2libHkgYmlnZ2VyIGFycmF5IHRvIGVuc3VyZSB0aGF0IGl0IGZpdHMgdGhlIG51bWJlclxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKChudW1iZXIubGVuZ3RoIC0gc3RhcnQpIC8gNik7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICAvLyBTY2FuIDI0LWJpdCBjaHVua3MgYW5kIGFkZCB0aGVtIHRvIHRoZSBudW1iZXJcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gNiwgaiA9IDA7IGkgPj0gc3RhcnQ7IGkgLT0gNikge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgaSwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgLy8gTk9URTogYDB4M2ZmZmZmYCBpcyBpbnRlbnRpb25hbCBoZXJlLCAyNmJpdHMgbWF4IHNoaWZ0ICsgMjRiaXQgaGV4IGxpbWJcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICAgIG9mZiArPSAyNDtcbiAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpICsgNiAhPT0gc3RhcnQpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIHN0YXJ0LCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgfVxuICAgIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUJhc2UgKHN0ciwgc3RhcnQsIGVuZCwgbXVsKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgKj0gbXVsO1xuXG4gICAgICAvLyAnYSdcbiAgICAgIGlmIChjID49IDQ5KSB7XG4gICAgICAgIHIgKz0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQSdcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNykge1xuICAgICAgICByICs9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByICs9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUJhc2UgPSBmdW5jdGlvbiBfcGFyc2VCYXNlIChudW1iZXIsIGJhc2UsIHN0YXJ0KSB7XG4gICAgLy8gSW5pdGlhbGl6ZSBhcyB6ZXJvXG4gICAgdGhpcy53b3JkcyA9IFsgMCBdO1xuICAgIHRoaXMubGVuZ3RoID0gMTtcblxuICAgIC8vIEZpbmQgbGVuZ3RoIG9mIGxpbWIgaW4gYmFzZVxuICAgIGZvciAodmFyIGxpbWJMZW4gPSAwLCBsaW1iUG93ID0gMTsgbGltYlBvdyA8PSAweDNmZmZmZmY7IGxpbWJQb3cgKj0gYmFzZSkge1xuICAgICAgbGltYkxlbisrO1xuICAgIH1cbiAgICBsaW1iTGVuLS07XG4gICAgbGltYlBvdyA9IChsaW1iUG93IC8gYmFzZSkgfCAwO1xuXG4gICAgdmFyIHRvdGFsID0gbnVtYmVyLmxlbmd0aCAtIHN0YXJ0O1xuICAgIHZhciBtb2QgPSB0b3RhbCAlIGxpbWJMZW47XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRvdGFsLCB0b3RhbCAtIG1vZCkgKyBzdGFydDtcblxuICAgIHZhciB3b3JkID0gMDtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gbGltYkxlbikge1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIGkgKyBsaW1iTGVuLCBiYXNlKTtcblxuICAgICAgdGhpcy5pbXVsbihsaW1iUG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kICE9PSAwKSB7XG4gICAgICB2YXIgcG93ID0gMTtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBudW1iZXIubGVuZ3RoLCBiYXNlKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IG1vZDsgaSsrKSB7XG4gICAgICAgIHBvdyAqPSBiYXNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmltdWxuKHBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZGVzdCkge1xuICAgIGRlc3Qud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzdC53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgfVxuICAgIGRlc3QubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgZGVzdC5uZWdhdGl2ZSA9IHRoaXMubmVnYXRpdmU7XG4gICAgZGVzdC5yZWQgPSB0aGlzLnJlZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4obnVsbCk7XG4gICAgdGhpcy5jb3B5KHIpO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZXhwYW5kID0gZnVuY3Rpb24gX2V4cGFuZCAoc2l6ZSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IHNpemUpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBSZW1vdmUgbGVhZGluZyBgMGAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN0cmlwID0gZnVuY3Rpb24gc3RyaXAgKCkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDEgJiYgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICB0aGlzLmxlbmd0aC0tO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX25vcm1TaWduID0gZnVuY3Rpb24gX25vcm1TaWduICgpIHtcbiAgICAvLyAtMCA9IDBcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZCA/ICc8Qk4tUjogJyA6ICc8Qk46ICcpICsgdGhpcy50b1N0cmluZygxNikgKyAnPic7XG4gIH07XG5cbiAgLypcblxuICB2YXIgemVyb3MgPSBbXTtcbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXTtcbiAgdmFyIGdyb3VwQmFzZXMgPSBbXTtcblxuICB2YXIgcyA9ICcnO1xuICB2YXIgaSA9IC0xO1xuICB3aGlsZSAoKytpIDwgQk4ud29yZFNpemUpIHtcbiAgICB6ZXJvc1tpXSA9IHM7XG4gICAgcyArPSAnMCc7XG4gIH1cbiAgZ3JvdXBTaXplc1swXSA9IDA7XG4gIGdyb3VwU2l6ZXNbMV0gPSAwO1xuICBncm91cEJhc2VzWzBdID0gMDtcbiAgZ3JvdXBCYXNlc1sxXSA9IDA7XG4gIHZhciBiYXNlID0gMiAtIDE7XG4gIHdoaWxlICgrK2Jhc2UgPCAzNiArIDEpIHtcbiAgICB2YXIgZ3JvdXBTaXplID0gMDtcbiAgICB2YXIgZ3JvdXBCYXNlID0gMTtcbiAgICB3aGlsZSAoZ3JvdXBCYXNlIDwgKDEgPDwgQk4ud29yZFNpemUpIC8gYmFzZSkge1xuICAgICAgZ3JvdXBCYXNlICo9IGJhc2U7XG4gICAgICBncm91cFNpemUgKz0gMTtcbiAgICB9XG4gICAgZ3JvdXBTaXplc1tiYXNlXSA9IGdyb3VwU2l6ZTtcbiAgICBncm91cEJhc2VzW2Jhc2VdID0gZ3JvdXBCYXNlO1xuICB9XG5cbiAgKi9cblxuICB2YXIgemVyb3MgPSBbXG4gICAgJycsXG4gICAgJzAnLFxuICAgICcwMCcsXG4gICAgJzAwMCcsXG4gICAgJzAwMDAnLFxuICAgICcwMDAwMCcsXG4gICAgJzAwMDAwMCcsXG4gICAgJzAwMDAwMDAnLFxuICAgICcwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnXG4gIF07XG5cbiAgdmFyIGdyb3VwU2l6ZXMgPSBbXG4gICAgMCwgMCxcbiAgICAyNSwgMTYsIDEyLCAxMSwgMTAsIDksIDgsXG4gICAgOCwgNywgNywgNywgNywgNiwgNixcbiAgICA2LCA2LCA2LCA2LCA2LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNVxuICBdO1xuXG4gIHZhciBncm91cEJhc2VzID0gW1xuICAgIDAsIDAsXG4gICAgMzM1NTQ0MzIsIDQzMDQ2NzIxLCAxNjc3NzIxNiwgNDg4MjgxMjUsIDYwNDY2MTc2LCA0MDM1MzYwNywgMTY3NzcyMTYsXG4gICAgNDMwNDY3MjEsIDEwMDAwMDAwLCAxOTQ4NzE3MSwgMzU4MzE4MDgsIDYyNzQ4NTE3LCA3NTI5NTM2LCAxMTM5MDYyNSxcbiAgICAxNjc3NzIxNiwgMjQxMzc1NjksIDM0MDEyMjI0LCA0NzA0NTg4MSwgNjQwMDAwMDAsIDQwODQxMDEsIDUxNTM2MzIsXG4gICAgNjQzNjM0MywgNzk2MjYyNCwgOTc2NTYyNSwgMTE4ODEzNzYsIDE0MzQ4OTA3LCAxNzIxMDM2OCwgMjA1MTExNDksXG4gICAgMjQzMDAwMDAsIDI4NjI5MTUxLCAzMzU1NDQzMiwgMzkxMzUzOTMsIDQ1NDM1NDI0LCA1MjUyMTg3NSwgNjA0NjYxNzZcbiAgXTtcblxuICBCTi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoYmFzZSwgcGFkZGluZykge1xuICAgIGJhc2UgPSBiYXNlIHx8IDEwO1xuICAgIHBhZGRpbmcgPSBwYWRkaW5nIHwgMCB8fCAxO1xuXG4gICAgdmFyIG91dDtcbiAgICBpZiAoYmFzZSA9PT0gMTYgfHwgYmFzZSA9PT0gJ2hleCcpIHtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIG9mZiA9IDA7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgICAgdmFyIHdvcmQgPSAoKCh3IDw8IG9mZikgfCBjYXJyeSkgJiAweGZmZmZmZikudG9TdHJpbmcoMTYpO1xuICAgICAgICBjYXJyeSA9ICh3ID4+PiAoMjQgLSBvZmYpKSAmIDB4ZmZmZmZmO1xuICAgICAgICBpZiAoY2FycnkgIT09IDAgfHwgaSAhPT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbNiAtIHdvcmQubGVuZ3RoXSArIHdvcmQgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gd29yZCArIG91dDtcbiAgICAgICAgfVxuICAgICAgICBvZmYgKz0gMjtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgICBvdXQgPSBjYXJyeS50b1N0cmluZygxNikgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNikge1xuICAgICAgLy8gdmFyIGdyb3VwU2l6ZSA9IE1hdGguZmxvb3IoQk4ud29yZFNpemUgKiBNYXRoLkxOMiAvIE1hdGgubG9nKGJhc2UpKTtcbiAgICAgIHZhciBncm91cFNpemUgPSBncm91cFNpemVzW2Jhc2VdO1xuICAgICAgLy8gdmFyIGdyb3VwQmFzZSA9IE1hdGgucG93KGJhc2UsIGdyb3VwU2l6ZSk7XG4gICAgICB2YXIgZ3JvdXBCYXNlID0gZ3JvdXBCYXNlc1tiYXNlXTtcbiAgICAgIG91dCA9ICcnO1xuICAgICAgdmFyIGMgPSB0aGlzLmNsb25lKCk7XG4gICAgICBjLm5lZ2F0aXZlID0gMDtcbiAgICAgIHdoaWxlICghYy5pc1plcm8oKSkge1xuICAgICAgICB2YXIgciA9IGMubW9kbihncm91cEJhc2UpLnRvU3RyaW5nKGJhc2UpO1xuICAgICAgICBjID0gYy5pZGl2bihncm91cEJhc2UpO1xuXG4gICAgICAgIGlmICghYy5pc1plcm8oKSkge1xuICAgICAgICAgIG91dCA9IHplcm9zW2dyb3VwU2l6ZSAtIHIubGVuZ3RoXSArIHIgKyBvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0ID0gciArIG91dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGZhbHNlLCAnQmFzZSBzaG91bGQgYmUgYmV0d2VlbiAyIGFuZCAzNicpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyICgpIHtcbiAgICB2YXIgcmV0ID0gdGhpcy53b3Jkc1swXTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldCArPSB0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPT09IDMgJiYgdGhpcy53b3Jkc1syXSA9PT0gMHgwMSkge1xuICAgICAgLy8gTk9URTogYXQgdGhpcyBzdGFnZSBpdCBpcyBrbm93biB0aGF0IHRoZSB0b3AgYml0IGlzIHNldFxuICAgICAgcmV0ICs9IDB4MTAwMDAwMDAwMDAwMDAgKyAodGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IDIpIHtcbiAgICAgIGFzc2VydChmYWxzZSwgJ051bWJlciBjYW4gb25seSBzYWZlbHkgc3RvcmUgdXAgdG8gNTMgYml0cycpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMubmVnYXRpdmUgIT09IDApID8gLXJldCA6IHJldDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygxNik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQnVmZmVyID0gZnVuY3Rpb24gdG9CdWZmZXIgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShCdWZmZXIsIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkgKGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQXJyYXksIGVuZGlhbiwgbGVuZ3RoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9BcnJheUxpa2UgPSBmdW5jdGlvbiB0b0FycmF5TGlrZSAoQXJyYXlUeXBlLCBlbmRpYW4sIGxlbmd0aCkge1xuICAgIHZhciBieXRlTGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoKCk7XG4gICAgdmFyIHJlcUxlbmd0aCA9IGxlbmd0aCB8fCBNYXRoLm1heCgxLCBieXRlTGVuZ3RoKTtcbiAgICBhc3NlcnQoYnl0ZUxlbmd0aCA8PSByZXFMZW5ndGgsICdieXRlIGFycmF5IGxvbmdlciB0aGFuIGRlc2lyZWQgbGVuZ3RoJyk7XG4gICAgYXNzZXJ0KHJlcUxlbmd0aCA+IDAsICdSZXF1ZXN0ZWQgYXJyYXkgbGVuZ3RoIDw9IDAnKTtcblxuICAgIHRoaXMuc3RyaXAoKTtcbiAgICB2YXIgbGl0dGxlRW5kaWFuID0gZW5kaWFuID09PSAnbGUnO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXlUeXBlKHJlcUxlbmd0aCk7XG5cbiAgICB2YXIgYiwgaTtcbiAgICB2YXIgcSA9IHRoaXMuY2xvbmUoKTtcbiAgICBpZiAoIWxpdHRsZUVuZGlhbikge1xuICAgICAgLy8gQXNzdW1lIGJpZy1lbmRpYW5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZXFMZW5ndGggLSBieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW3JlcUxlbmd0aCAtIGkgLSAxXSA9IGI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tpXSA9IGI7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBpIDwgcmVxTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIGlmIChNYXRoLmNsejMyKSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICByZXR1cm4gMzIgLSBNYXRoLmNsejMyKHcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgQk4ucHJvdG90eXBlLl9jb3VudEJpdHMgPSBmdW5jdGlvbiBfY291bnRCaXRzICh3KSB7XG4gICAgICB2YXIgdCA9IHc7XG4gICAgICB2YXIgciA9IDA7XG4gICAgICBpZiAodCA+PSAweDEwMDApIHtcbiAgICAgICAgciArPSAxMztcbiAgICAgICAgdCA+Pj49IDEzO1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg0MCkge1xuICAgICAgICByICs9IDc7XG4gICAgICAgIHQgPj4+PSA3O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHg4KSB7XG4gICAgICAgIHIgKz0gNDtcbiAgICAgICAgdCA+Pj49IDQ7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDAyKSB7XG4gICAgICAgIHIgKz0gMjtcbiAgICAgICAgdCA+Pj49IDI7XG4gICAgICB9XG4gICAgICByZXR1cm4gciArIHQ7XG4gICAgfTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5femVyb0JpdHMgPSBmdW5jdGlvbiBfemVyb0JpdHMgKHcpIHtcbiAgICAvLyBTaG9ydC1jdXRcbiAgICBpZiAodyA9PT0gMCkgcmV0dXJuIDI2O1xuXG4gICAgdmFyIHQgPSB3O1xuICAgIHZhciByID0gMDtcbiAgICBpZiAoKHQgJiAweDFmZmYpID09PSAwKSB7XG4gICAgICByICs9IDEzO1xuICAgICAgdCA+Pj49IDEzO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDdmKSA9PT0gMCkge1xuICAgICAgciArPSA3O1xuICAgICAgdCA+Pj49IDc7XG4gICAgfVxuICAgIGlmICgodCAmIDB4ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNDtcbiAgICAgIHQgPj4+PSA0O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDMpID09PSAwKSB7XG4gICAgICByICs9IDI7XG4gICAgICB0ID4+Pj0gMjtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgxKSA9PT0gMCkge1xuICAgICAgcisrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICAvLyBSZXR1cm4gbnVtYmVyIG9mIHVzZWQgYml0cyBpbiBhIEJOXG4gIEJOLnByb3RvdHlwZS5iaXRMZW5ndGggPSBmdW5jdGlvbiBiaXRMZW5ndGggKCkge1xuICAgIHZhciB3ID0gdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdO1xuICAgIHZhciBoaSA9IHRoaXMuX2NvdW50Qml0cyh3KTtcbiAgICByZXR1cm4gKHRoaXMubGVuZ3RoIC0gMSkgKiAyNiArIGhpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHRvQml0QXJyYXkgKG51bSkge1xuICAgIHZhciB3ID0gbmV3IEFycmF5KG51bS5iaXRMZW5ndGgoKSk7XG5cbiAgICBmb3IgKHZhciBiaXQgPSAwOyBiaXQgPCB3Lmxlbmd0aDsgYml0KyspIHtcbiAgICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICAgIHdbYml0XSA9IChudW0ud29yZHNbb2ZmXSAmICgxIDw8IHdiaXQpKSA+Pj4gd2JpdDtcbiAgICB9XG5cbiAgICByZXR1cm4gdztcbiAgfVxuXG4gIC8vIE51bWJlciBvZiB0cmFpbGluZyB6ZXJvIGJpdHNcbiAgQk4ucHJvdG90eXBlLnplcm9CaXRzID0gZnVuY3Rpb24gemVyb0JpdHMgKCkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gMDtcblxuICAgIHZhciByID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBiID0gdGhpcy5femVyb0JpdHModGhpcy53b3Jkc1tpXSk7XG4gICAgICByICs9IGI7XG4gICAgICBpZiAoYiAhPT0gMjYpIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYnl0ZUxlbmd0aCA9IGZ1bmN0aW9uIGJ5dGVMZW5ndGggKCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5iaXRMZW5ndGgoKSAvIDgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1R3b3MgPSBmdW5jdGlvbiB0b1R3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFicygpLmlub3RuKHdpZHRoKS5pYWRkbigxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVR3b3MgPSBmdW5jdGlvbiBmcm9tVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy50ZXN0bih3aWR0aCAtIDEpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3RuKHdpZHRoKS5pYWRkbigxKS5pbmVnKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzTmVnID0gZnVuY3Rpb24gaXNOZWcgKCkge1xuICAgIHJldHVybiB0aGlzLm5lZ2F0aXZlICE9PSAwO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbmVnKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluZWcgPSBmdW5jdGlvbiBpbmVnICgpIHtcbiAgICBpZiAoIXRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVvciA9IGZ1bmN0aW9uIGl1b3IgKG51bSkge1xuICAgIHdoaWxlICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGgrK10gPSAwO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSB8IG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pb3IgPSBmdW5jdGlvbiBpb3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1b3IobnVtKTtcbiAgfTtcblxuICAvLyBPciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUub3IgPSBmdW5jdGlvbiBvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pb3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaW9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51b3IgPSBmdW5jdGlvbiB1b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdW9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVhbmQgPSBmdW5jdGlvbiBpdWFuZCAobnVtKSB7XG4gICAgLy8gYiA9IG1pbi1sZW5ndGgobnVtLCB0aGlzKVxuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gJiBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhbmQgPSBmdW5jdGlvbiBpYW5kIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdWFuZChudW0pO1xuICB9O1xuXG4gIC8vIEFuZCBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYW5kID0gZnVuY3Rpb24gYW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFuZCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudWFuZCA9IGZ1bmN0aW9uIHVhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXVhbmQobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVhbmQodGhpcyk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXhvciA9IGZ1bmN0aW9uIGl1eG9yIChudW0pIHtcbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGE7XG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXSBeIGIud29yZHNbaV07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMgIT09IGEpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXhvciA9IGZ1bmN0aW9uIGl4b3IgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1eG9yKG51bSk7XG4gIH07XG5cbiAgLy8gWG9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5peG9yKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51eG9yID0gZnVuY3Rpb24gdXhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXhvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdXhvcih0aGlzKTtcbiAgfTtcblxuICAvLyBOb3QgYGB0aGlzYGAgd2l0aCBgYHdpZHRoYGAgYml0d2lkdGhcbiAgQk4ucHJvdG90eXBlLmlub3RuID0gZnVuY3Rpb24gaW5vdG4gKHdpZHRoKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgJiYgd2lkdGggPj0gMCk7XG5cbiAgICB2YXIgYnl0ZXNOZWVkZWQgPSBNYXRoLmNlaWwod2lkdGggLyAyNikgfCAwO1xuICAgIHZhciBiaXRzTGVmdCA9IHdpZHRoICUgMjY7XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJ1ZmZlciB3aXRoIGxlYWRpbmcgemVyb2VzXG4gICAgdGhpcy5fZXhwYW5kKGJ5dGVzTmVlZGVkKTtcblxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIGJ5dGVzTmVlZGVkLS07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGNvbXBsZXRlIHdvcmRzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlc05lZWRlZDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHRoZSByZXNpZHVlXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgKDB4M2ZmZmZmZiA+PiAoMjYgLSBiaXRzTGVmdCkpO1xuICAgIH1cblxuICAgIC8vIEFuZCByZW1vdmUgbGVhZGluZyB6ZXJvZXNcbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ub3RuID0gZnVuY3Rpb24gbm90biAod2lkdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlub3RuKHdpZHRoKTtcbiAgfTtcblxuICAvLyBTZXQgYGJpdGAgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zZXRuID0gZnVuY3Rpb24gc2V0biAoYml0LCB2YWwpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuXG4gICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgIHZhciB3Yml0ID0gYml0ICUgMjY7XG5cbiAgICB0aGlzLl9leHBhbmQob2ZmICsgMSk7XG5cbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gfCAoMSA8PCB3Yml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdICYgfigxIDw8IHdiaXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKG51bSkge1xuICAgIHZhciByO1xuXG4gICAgLy8gbmVnYXRpdmUgKyBwb3NpdGl2ZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcblxuICAgIC8vIHBvc2l0aXZlICsgbmVnYXRpdmVcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGEubGVuZ3RoO1xuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aF0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgLy8gQ29weSB0aGUgcmVzdCBvZiB0aGUgd29yZHNcbiAgICB9IGVsc2UgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKG51bSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCAmJiB0aGlzLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gdGhpcy5zdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9IGVsc2UgaWYgKG51bS5uZWdhdGl2ZSA9PT0gMCAmJiB0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IG51bS5zdWIodGhpcyk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkKG51bSk7XG5cbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaWFkZCh0aGlzKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKG51bSkge1xuICAgIC8vIHRoaXMgLSAoLW51bSkgPSB0aGlzICsgbnVtXG4gICAgaWYgKG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHZhciByID0gdGhpcy5pYWRkKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG5cbiAgICAvLyAtdGhpcyAtIG51bSA9IC0odGhpcyArIG51bSlcbiAgICB9IGVsc2UgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZVxuICAgIHZhciBjbXAgPSB0aGlzLmNtcChudW0pO1xuXG4gICAgLy8gT3B0aW1pemF0aW9uIC0gemVyb2lmeVxuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBhID4gYlxuICAgIHZhciBhLCBiO1xuICAgIGlmIChjbXAgPiAwKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgLSAoYi53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgLy8gQ29weSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIGlmIChjYXJyeSA9PT0gMCAmJiBpIDwgYS5sZW5ndGggJiYgYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkpO1xuXG4gICAgaWYgKGEgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3ViKG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gc21hbGxNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIHZhciBsZW4gPSAoc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoKSB8IDA7XG4gICAgb3V0Lmxlbmd0aCA9IGxlbjtcbiAgICBsZW4gPSAobGVuIC0gMSkgfCAwO1xuXG4gICAgLy8gUGVlbCBvbmUgaXRlcmF0aW9uIChjb21waWxlciBjYW4ndCBkbyBpdCwgYmVjYXVzZSBvZiBjb2RlIGNvbXBsZXhpdHkpXG4gICAgdmFyIGEgPSBzZWxmLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgYiA9IG51bS53b3Jkc1swXSB8IDA7XG4gICAgdmFyIHIgPSBhICogYjtcblxuICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgdmFyIGNhcnJ5ID0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICBvdXQud29yZHNbMF0gPSBsbztcblxuICAgIGZvciAodmFyIGsgPSAxOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gY2FycnkgPj4+IDI2O1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSAoayAtIGopIHwgMDtcbiAgICAgICAgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgciA9IGEgKiBiICsgcndvcmQ7XG4gICAgICAgIG5jYXJyeSArPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgICByd29yZCA9IHIgJiAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZCB8IDA7XG4gICAgICBjYXJyeSA9IG5jYXJyeSB8IDA7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2FycnkgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgLy8gVE9ETyhpbmR1dG55KTogaXQgbWF5IGJlIHJlYXNvbmFibGUgdG8gb21pdCBpdCBmb3IgdXNlcnMgd2hvIGRvbid0IG5lZWRcbiAgLy8gdG8gd29yayB3aXRoIDI1Ni1iaXQgbnVtYmVycywgb3RoZXJ3aXNlIGl0IGdpdmVzIDIwJSBpbXByb3ZlbWVudCBmb3IgMjU2LWJpdFxuICAvLyBtdWx0aXBsaWNhdGlvbiAobGlrZSBlbGxpcHRpYyBzZWNwMjU2azEpLlxuICB2YXIgY29tYjEwTXVsVG8gPSBmdW5jdGlvbiBjb21iMTBNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgYSA9IHNlbGYud29yZHM7XG4gICAgdmFyIGIgPSBudW0ud29yZHM7XG4gICAgdmFyIG8gPSBvdXQud29yZHM7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBsbztcbiAgICB2YXIgbWlkO1xuICAgIHZhciBoaTtcbiAgICB2YXIgYTAgPSBhWzBdIHwgMDtcbiAgICB2YXIgYWwwID0gYTAgJiAweDFmZmY7XG4gICAgdmFyIGFoMCA9IGEwID4+PiAxMztcbiAgICB2YXIgYTEgPSBhWzFdIHwgMDtcbiAgICB2YXIgYWwxID0gYTEgJiAweDFmZmY7XG4gICAgdmFyIGFoMSA9IGExID4+PiAxMztcbiAgICB2YXIgYTIgPSBhWzJdIHwgMDtcbiAgICB2YXIgYWwyID0gYTIgJiAweDFmZmY7XG4gICAgdmFyIGFoMiA9IGEyID4+PiAxMztcbiAgICB2YXIgYTMgPSBhWzNdIHwgMDtcbiAgICB2YXIgYWwzID0gYTMgJiAweDFmZmY7XG4gICAgdmFyIGFoMyA9IGEzID4+PiAxMztcbiAgICB2YXIgYTQgPSBhWzRdIHwgMDtcbiAgICB2YXIgYWw0ID0gYTQgJiAweDFmZmY7XG4gICAgdmFyIGFoNCA9IGE0ID4+PiAxMztcbiAgICB2YXIgYTUgPSBhWzVdIHwgMDtcbiAgICB2YXIgYWw1ID0gYTUgJiAweDFmZmY7XG4gICAgdmFyIGFoNSA9IGE1ID4+PiAxMztcbiAgICB2YXIgYTYgPSBhWzZdIHwgMDtcbiAgICB2YXIgYWw2ID0gYTYgJiAweDFmZmY7XG4gICAgdmFyIGFoNiA9IGE2ID4+PiAxMztcbiAgICB2YXIgYTcgPSBhWzddIHwgMDtcbiAgICB2YXIgYWw3ID0gYTcgJiAweDFmZmY7XG4gICAgdmFyIGFoNyA9IGE3ID4+PiAxMztcbiAgICB2YXIgYTggPSBhWzhdIHwgMDtcbiAgICB2YXIgYWw4ID0gYTggJiAweDFmZmY7XG4gICAgdmFyIGFoOCA9IGE4ID4+PiAxMztcbiAgICB2YXIgYTkgPSBhWzldIHwgMDtcbiAgICB2YXIgYWw5ID0gYTkgJiAweDFmZmY7XG4gICAgdmFyIGFoOSA9IGE5ID4+PiAxMztcbiAgICB2YXIgYjAgPSBiWzBdIHwgMDtcbiAgICB2YXIgYmwwID0gYjAgJiAweDFmZmY7XG4gICAgdmFyIGJoMCA9IGIwID4+PiAxMztcbiAgICB2YXIgYjEgPSBiWzFdIHwgMDtcbiAgICB2YXIgYmwxID0gYjEgJiAweDFmZmY7XG4gICAgdmFyIGJoMSA9IGIxID4+PiAxMztcbiAgICB2YXIgYjIgPSBiWzJdIHwgMDtcbiAgICB2YXIgYmwyID0gYjIgJiAweDFmZmY7XG4gICAgdmFyIGJoMiA9IGIyID4+PiAxMztcbiAgICB2YXIgYjMgPSBiWzNdIHwgMDtcbiAgICB2YXIgYmwzID0gYjMgJiAweDFmZmY7XG4gICAgdmFyIGJoMyA9IGIzID4+PiAxMztcbiAgICB2YXIgYjQgPSBiWzRdIHwgMDtcbiAgICB2YXIgYmw0ID0gYjQgJiAweDFmZmY7XG4gICAgdmFyIGJoNCA9IGI0ID4+PiAxMztcbiAgICB2YXIgYjUgPSBiWzVdIHwgMDtcbiAgICB2YXIgYmw1ID0gYjUgJiAweDFmZmY7XG4gICAgdmFyIGJoNSA9IGI1ID4+PiAxMztcbiAgICB2YXIgYjYgPSBiWzZdIHwgMDtcbiAgICB2YXIgYmw2ID0gYjYgJiAweDFmZmY7XG4gICAgdmFyIGJoNiA9IGI2ID4+PiAxMztcbiAgICB2YXIgYjcgPSBiWzddIHwgMDtcbiAgICB2YXIgYmw3ID0gYjcgJiAweDFmZmY7XG4gICAgdmFyIGJoNyA9IGI3ID4+PiAxMztcbiAgICB2YXIgYjggPSBiWzhdIHwgMDtcbiAgICB2YXIgYmw4ID0gYjggJiAweDFmZmY7XG4gICAgdmFyIGJoOCA9IGI4ID4+PiAxMztcbiAgICB2YXIgYjkgPSBiWzldIHwgMDtcbiAgICB2YXIgYmw5ID0gYjkgJiAweDFmZmY7XG4gICAgdmFyIGJoOSA9IGI5ID4+PiAxMztcblxuICAgIG91dC5uZWdhdGl2ZSA9IHNlbGYubmVnYXRpdmUgXiBudW0ubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IDE5O1xuICAgIC8qIGsgPSAwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwwLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDAsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDAsIGJoMCk7XG4gICAgdmFyIHcwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MCA+Pj4gMjYpKSB8IDA7XG4gICAgdzAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwxLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDEsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDEsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgxKSkgfCAwO1xuICAgIHZhciB3MSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEgPj4+IDI2KSkgfCAwO1xuICAgIHcxICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwyLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgyLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDIpKSB8IDA7XG4gICAgdmFyIHcyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MiA+Pj4gMjYpKSB8IDA7XG4gICAgdzIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwzLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDMsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDMsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDMpKSB8IDA7XG4gICAgdmFyIHczID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MyA+Pj4gMjYpKSB8IDA7XG4gICAgdzMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw0LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDQsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDQsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg0KSkgfCAwO1xuICAgIHZhciB3NCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzQgPj4+IDI2KSkgfCAwO1xuICAgIHc0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw1LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg1LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDUpKSB8IDA7XG4gICAgdmFyIHc1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NSA+Pj4gMjYpKSB8IDA7XG4gICAgdzUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw2LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDYsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDYsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDYpKSB8IDA7XG4gICAgdmFyIHc2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NiA+Pj4gMjYpKSB8IDA7XG4gICAgdzYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw3LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDcsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDcsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg3KSkgfCAwO1xuICAgIHZhciB3NyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzcgPj4+IDI2KSkgfCAwO1xuICAgIHc3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw4LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg4LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDgpKSB8IDA7XG4gICAgdmFyIHc4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OCA+Pj4gMjYpKSB8IDA7XG4gICAgdzggJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA5ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDkpKSB8IDA7XG4gICAgdmFyIHc5ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3OSA+Pj4gMjYpKSB8IDA7XG4gICAgdzkgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwxKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDEpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDEpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDEpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEwID4+PiAyNikpIHwgMDtcbiAgICB3MTAgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwyKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDIpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDIpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDIpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzExID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTEgPj4+IDI2KSkgfCAwO1xuICAgIHcxMSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDMpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEyID4+PiAyNikpIHwgMDtcbiAgICB3MTIgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw0KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDQpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDQpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDQpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzEzID4+PiAyNikpIHwgMDtcbiAgICB3MTMgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw1KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDUpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDUpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDUpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTQgPj4+IDI2KSkgfCAwO1xuICAgIHcxNCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDYpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE1ID4+PiAyNikpIHwgMDtcbiAgICB3MTUgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw3KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDcpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDcpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDcpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE2ID4+PiAyNikpIHwgMDtcbiAgICB3MTYgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw4KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDgpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDgpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDgpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTcgPj4+IDI2KSkgfCAwO1xuICAgIHcxNyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDkpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOSk7XG4gICAgdmFyIHcxOCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE4ID4+PiAyNikpIHwgMDtcbiAgICB3MTggJj0gMHgzZmZmZmZmO1xuICAgIG9bMF0gPSB3MDtcbiAgICBvWzFdID0gdzE7XG4gICAgb1syXSA9IHcyO1xuICAgIG9bM10gPSB3MztcbiAgICBvWzRdID0gdzQ7XG4gICAgb1s1XSA9IHc1O1xuICAgIG9bNl0gPSB3NjtcbiAgICBvWzddID0gdzc7XG4gICAgb1s4XSA9IHc4O1xuICAgIG9bOV0gPSB3OTtcbiAgICBvWzEwXSA9IHcxMDtcbiAgICBvWzExXSA9IHcxMTtcbiAgICBvWzEyXSA9IHcxMjtcbiAgICBvWzEzXSA9IHcxMztcbiAgICBvWzE0XSA9IHcxNDtcbiAgICBvWzE1XSA9IHcxNTtcbiAgICBvWzE2XSA9IHcxNjtcbiAgICBvWzE3XSA9IHcxNztcbiAgICBvWzE4XSA9IHcxODtcbiAgICBpZiAoYyAhPT0gMCkge1xuICAgICAgb1sxOV0gPSBjO1xuICAgICAgb3V0Lmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuXG4gIC8vIFBvbHlmaWxsIGNvbWJcbiAgaWYgKCFNYXRoLmltdWwpIHtcbiAgICBjb21iMTBNdWxUbyA9IHNtYWxsTXVsVG87XG4gIH1cblxuICBmdW5jdGlvbiBiaWdNdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICBvdXQubmVnYXRpdmUgPSBudW0ubmVnYXRpdmUgXiBzZWxmLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSBzZWxmLmxlbmd0aCArIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIHZhciBobmNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IG91dC5sZW5ndGggLSAxOyBrKyspIHtcbiAgICAgIC8vIFN1bSBhbGwgd29yZHMgd2l0aCB0aGUgc2FtZSBgaSArIGogPSBrYCBhbmQgYWNjdW11bGF0ZSBgbmNhcnJ5YCxcbiAgICAgIC8vIG5vdGUgdGhhdCBuY2FycnkgY291bGQgYmUgPj0gMHgzZmZmZmZmXG4gICAgICB2YXIgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICAgIGhuY2FycnkgPSAwO1xuICAgICAgdmFyIHJ3b3JkID0gY2FycnkgJiAweDNmZmZmZmY7XG4gICAgICB2YXIgbWF4SiA9IE1hdGgubWluKGssIG51bS5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGogPSBNYXRoLm1heCgwLCBrIC0gc2VsZi5sZW5ndGggKyAxKTsgaiA8PSBtYXhKOyBqKyspIHtcbiAgICAgICAgdmFyIGkgPSBrIC0gajtcbiAgICAgICAgdmFyIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgdmFyIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgICAgIHZhciBsbyA9IHIgJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAoKHIgLyAweDQwMDAwMDApIHwgMCkpIHwgMDtcbiAgICAgICAgbG8gPSAobG8gKyByd29yZCkgfCAwO1xuICAgICAgICByd29yZCA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKGxvID4+PiAyNikpIHwgMDtcblxuICAgICAgICBobmNhcnJ5ICs9IG5jYXJyeSA+Pj4gMjY7XG4gICAgICAgIG5jYXJyeSAmPSAweDNmZmZmZmY7XG4gICAgICB9XG4gICAgICBvdXQud29yZHNba10gPSByd29yZDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5O1xuICAgICAgbmNhcnJ5ID0gaG5jYXJyeTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGp1bWJvTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGZmdG0gPSBuZXcgRkZUTSgpO1xuICAgIHJldHVybiBmZnRtLm11bHAoc2VsZiwgbnVtLCBvdXQpO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLm11bFRvID0gZnVuY3Rpb24gbXVsVG8gKG51bSwgb3V0KSB7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMTAgJiYgbnVtLmxlbmd0aCA9PT0gMTApIHtcbiAgICAgIHJlcyA9IGNvbWIxME11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDYzKSB7XG4gICAgICByZXMgPSBzbWFsbE11bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2UgaWYgKGxlbiA8IDEwMjQpIHtcbiAgICAgIHJlcyA9IGJpZ011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb29sZXktVHVrZXkgYWxnb3JpdGhtIGZvciBGRlRcbiAgLy8gc2xpZ2h0bHkgcmV2aXNpdGVkIHRvIHJlbHkgb24gbG9vcGluZyBpbnN0ZWFkIG9mIHJlY3Vyc2lvblxuXG4gIGZ1bmN0aW9uIEZGVE0gKHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBGRlRNLnByb3RvdHlwZS5tYWtlUkJUID0gZnVuY3Rpb24gbWFrZVJCVCAoTikge1xuICAgIHZhciB0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBsID0gQk4ucHJvdG90eXBlLl9jb3VudEJpdHMoTikgLSAxO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB0W2ldID0gdGhpcy5yZXZCaW4oaSwgbCwgTik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBiaW5hcnktcmV2ZXJzZWQgcmVwcmVzZW50YXRpb24gb2YgYHhgXG4gIEZGVE0ucHJvdG90eXBlLnJldkJpbiA9IGZ1bmN0aW9uIHJldkJpbiAoeCwgbCwgTikge1xuICAgIGlmICh4ID09PSAwIHx8IHggPT09IE4gLSAxKSByZXR1cm4geDtcblxuICAgIHZhciByYiA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJiIHw9ICh4ICYgMSkgPDwgKGwgLSBpIC0gMSk7XG4gICAgICB4ID4+PSAxO1xuICAgIH1cblxuICAgIHJldHVybiByYjtcbiAgfTtcblxuICAvLyBQZXJmb3JtcyBcInR3ZWVkbGluZ1wiIHBoYXNlLCB0aGVyZWZvcmUgJ2VtdWxhdGluZydcbiAgLy8gYmVoYXZpb3VyIG9mIHRoZSByZWN1cnNpdmUgYWxnb3JpdGhtXG4gIEZGVE0ucHJvdG90eXBlLnBlcm11dGUgPSBmdW5jdGlvbiBwZXJtdXRlIChyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHJ0d3NbaV0gPSByd3NbcmJ0W2ldXTtcbiAgICAgIGl0d3NbaV0gPSBpd3NbcmJ0W2ldXTtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gdHJhbnNmb3JtIChyd3MsIGl3cywgcnR3cywgaXR3cywgTiwgcmJ0KSB7XG4gICAgdGhpcy5wZXJtdXRlKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pO1xuXG4gICAgZm9yICh2YXIgcyA9IDE7IHMgPCBOOyBzIDw8PSAxKSB7XG4gICAgICB2YXIgbCA9IHMgPDwgMTtcblxuICAgICAgdmFyIHJ0d2RmID0gTWF0aC5jb3MoMiAqIE1hdGguUEkgLyBsKTtcbiAgICAgIHZhciBpdHdkZiA9IE1hdGguc2luKDIgKiBNYXRoLlBJIC8gbCk7XG5cbiAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgTjsgcCArPSBsKSB7XG4gICAgICAgIHZhciBydHdkZl8gPSBydHdkZjtcbiAgICAgICAgdmFyIGl0d2RmXyA9IGl0d2RmO1xuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgczsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlID0gcnR3c1twICsgal07XG4gICAgICAgICAgdmFyIGllID0gaXR3c1twICsgal07XG5cbiAgICAgICAgICB2YXIgcm8gPSBydHdzW3AgKyBqICsgc107XG4gICAgICAgICAgdmFyIGlvID0gaXR3c1twICsgaiArIHNdO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gcnR3ZGZfICogcm8gLSBpdHdkZl8gKiBpbztcblxuICAgICAgICAgIGlvID0gcnR3ZGZfICogaW8gKyBpdHdkZl8gKiBybztcbiAgICAgICAgICBybyA9IHJ4O1xuXG4gICAgICAgICAgcnR3c1twICsgal0gPSByZSArIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGpdID0gaWUgKyBpbztcblxuICAgICAgICAgIHJ0d3NbcCArIGogKyBzXSA9IHJlIC0gcm87XG4gICAgICAgICAgaXR3c1twICsgaiArIHNdID0gaWUgLSBpbztcblxuICAgICAgICAgIC8qIGpzaGludCBtYXhkZXB0aCA6IGZhbHNlICovXG4gICAgICAgICAgaWYgKGogIT09IGwpIHtcbiAgICAgICAgICAgIHJ4ID0gcnR3ZGYgKiBydHdkZl8gLSBpdHdkZiAqIGl0d2RmXztcblxuICAgICAgICAgICAgaXR3ZGZfID0gcnR3ZGYgKiBpdHdkZl8gKyBpdHdkZiAqIHJ0d2RmXztcbiAgICAgICAgICAgIHJ0d2RmXyA9IHJ4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ndWVzc0xlbjEzYiA9IGZ1bmN0aW9uIGd1ZXNzTGVuMTNiIChuLCBtKSB7XG4gICAgdmFyIE4gPSBNYXRoLm1heChtLCBuKSB8IDE7XG4gICAgdmFyIG9kZCA9IE4gJiAxO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKE4gPSBOIC8gMiB8IDA7IE47IE4gPSBOID4+PiAxKSB7XG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIDEgPDwgaSArIDEgKyBvZGQ7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29uanVnYXRlID0gZnVuY3Rpb24gY29uanVnYXRlIChyd3MsIGl3cywgTikge1xuICAgIGlmIChOIDw9IDEpIHJldHVybjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHQgPSByd3NbaV07XG5cbiAgICAgIHJ3c1tpXSA9IHJ3c1tOIC0gaSAtIDFdO1xuICAgICAgcndzW04gLSBpIC0gMV0gPSB0O1xuXG4gICAgICB0ID0gaXdzW2ldO1xuXG4gICAgICBpd3NbaV0gPSAtaXdzW04gLSBpIC0gMV07XG4gICAgICBpd3NbTiAtIGkgLSAxXSA9IC10O1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5ub3JtYWxpemUxM2IgPSBmdW5jdGlvbiBub3JtYWxpemUxM2IgKHdzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB3ID0gTWF0aC5yb3VuZCh3c1syICogaSArIDFdIC8gTikgKiAweDIwMDAgK1xuICAgICAgICBNYXRoLnJvdW5kKHdzWzIgKiBpXSAvIE4pICtcbiAgICAgICAgY2Fycnk7XG5cbiAgICAgIHdzW2ldID0gdyAmIDB4M2ZmZmZmZjtcblxuICAgICAgaWYgKHcgPCAweDQwMDAwMDApIHtcbiAgICAgICAgY2FycnkgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FycnkgPSB3IC8gMHg0MDAwMDAwIHwgMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd3M7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuY29udmVydDEzYiA9IGZ1bmN0aW9uIGNvbnZlcnQxM2IgKHdzLCBsZW4sIHJ3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FycnkgPSBjYXJyeSArICh3c1tpXSB8IDApO1xuXG4gICAgICByd3NbMiAqIGldID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgICAgcndzWzIgKiBpICsgMV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgfVxuXG4gICAgLy8gUGFkIHdpdGggemVyb2VzXG4gICAgZm9yIChpID0gMiAqIGxlbjsgaSA8IE47ICsraSkge1xuICAgICAgcndzW2ldID0gMDtcbiAgICB9XG5cbiAgICBhc3NlcnQoY2FycnkgPT09IDApO1xuICAgIGFzc2VydCgoY2FycnkgJiB+MHgxZmZmKSA9PT0gMCk7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuc3R1YiA9IGZ1bmN0aW9uIHN0dWIgKE4pIHtcbiAgICB2YXIgcGggPSBuZXcgQXJyYXkoTik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHBoW2ldID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcGg7XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubXVscCA9IGZ1bmN0aW9uIG11bHAgKHgsIHksIG91dCkge1xuICAgIHZhciBOID0gMiAqIHRoaXMuZ3Vlc3NMZW4xM2IoeC5sZW5ndGgsIHkubGVuZ3RoKTtcblxuICAgIHZhciByYnQgPSB0aGlzLm1ha2VSQlQoTik7XG5cbiAgICB2YXIgXyA9IHRoaXMuc3R1YihOKTtcblxuICAgIHZhciByd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIHJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGl3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgbnJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbnJ3c3QgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5pd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIHJtd3MgPSBvdXQud29yZHM7XG4gICAgcm13cy5sZW5ndGggPSBOO1xuXG4gICAgdGhpcy5jb252ZXJ0MTNiKHgud29yZHMsIHgubGVuZ3RoLCByd3MsIE4pO1xuICAgIHRoaXMuY29udmVydDEzYih5LndvcmRzLCB5Lmxlbmd0aCwgbnJ3cywgTik7XG5cbiAgICB0aGlzLnRyYW5zZm9ybShyd3MsIF8sIHJ3c3QsIGl3c3QsIE4sIHJidCk7XG4gICAgdGhpcy50cmFuc2Zvcm0obnJ3cywgXywgbnJ3c3QsIG5pd3N0LCBOLCByYnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHZhciByeCA9IHJ3c3RbaV0gKiBucndzdFtpXSAtIGl3c3RbaV0gKiBuaXdzdFtpXTtcbiAgICAgIGl3c3RbaV0gPSByd3N0W2ldICogbml3c3RbaV0gKyBpd3N0W2ldICogbnJ3c3RbaV07XG4gICAgICByd3N0W2ldID0gcng7XG4gICAgfVxuXG4gICAgdGhpcy5jb25qdWdhdGUocndzdCwgaXdzdCwgTik7XG4gICAgdGhpcy50cmFuc2Zvcm0ocndzdCwgaXdzdCwgcm13cywgXywgTiwgcmJ0KTtcbiAgICB0aGlzLmNvbmp1Z2F0ZShybXdzLCBfLCBOKTtcbiAgICB0aGlzLm5vcm1hbGl6ZTEzYihybXdzLCBOKTtcblxuICAgIG91dC5uZWdhdGl2ZSA9IHgubmVnYXRpdmUgXiB5Lm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSB4Lmxlbmd0aCArIHkubGVuZ3RoO1xuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBgdGhpc2AgYnkgYG51bWBcbiAgQk4ucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4gdGhpcy5tdWxUbyhudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgZW1wbG95aW5nIEZGVFxuICBCTi5wcm90b3R5cGUubXVsZiA9IGZ1bmN0aW9uIG11bGYgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIE11bHRpcGxpY2F0aW9uXG4gIEJOLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5tdWxUbyhudW0sIHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbXVsbiA9IGZ1bmN0aW9uIGltdWxuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuXG4gICAgLy8gQ2FycnlcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICogbnVtO1xuICAgICAgdmFyIGxvID0gKHcgJiAweDNmZmZmZmYpICsgKGNhcnJ5ICYgMHgzZmZmZmZmKTtcbiAgICAgIGNhcnJ5ID4+PSAyNjtcbiAgICAgIGNhcnJ5ICs9ICh3IC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAvLyBOT1RFOiBsbyBpcyAyN2JpdCBtYXhpbXVtXG4gICAgICBjYXJyeSArPSBsbyA+Pj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tdWxuID0gZnVuY3Rpb24gbXVsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbXVsbihudW0pO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwodGhpcyk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bCh0aGlzLmNsb25lKCkpO1xuICB9O1xuXG4gIC8vIE1hdGgucG93KGB0aGlzYCwgYG51bWApXG4gIEJOLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKG51bSkge1xuICAgIHZhciB3ID0gdG9CaXRBcnJheShudW0pO1xuICAgIGlmICh3Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIG5ldyBCTigxKTtcblxuICAgIC8vIFNraXAgbGVhZGluZyB6ZXJvZXNcbiAgICB2YXIgcmVzID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHcubGVuZ3RoOyBpKyssIHJlcyA9IHJlcy5zcXIoKSkge1xuICAgICAgaWYgKHdbaV0gIT09IDApIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICgrK2kgPCB3Lmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgcSA9IHJlcy5zcXIoKTsgaSA8IHcubGVuZ3RoOyBpKyssIHEgPSBxLnNxcigpKSB7XG4gICAgICAgIGlmICh3W2ldID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSByZXMubXVsKHEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXVzaGxuID0gZnVuY3Rpb24gaXVzaGxuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuICAgIHZhciBjYXJyeU1hc2sgPSAoMHgzZmZmZmZmID4+PiAoMjYgLSByKSkgPDwgKDI2IC0gcik7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5ld0NhcnJ5ID0gdGhpcy53b3Jkc1tpXSAmIGNhcnJ5TWFzaztcbiAgICAgICAgdmFyIGMgPSAoKHRoaXMud29yZHNbaV0gfCAwKSAtIG5ld0NhcnJ5KSA8PCByO1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYyB8IGNhcnJ5O1xuICAgICAgICBjYXJyeSA9IG5ld0NhcnJ5ID4+PiAoMjYgLSByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNhcnJ5KSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocyAhPT0gMCkge1xuICAgICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyBzXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubGVuZ3RoICs9IHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNobG4gPSBmdW5jdGlvbiBpc2hsbiAoYml0cykge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHQgaW4tcGxhY2VcbiAgLy8gTk9URTogYGhpbnRgIGlzIGEgbG93ZXN0IGJpdCBiZWZvcmUgdHJhaWxpbmcgemVyb2VzXG4gIC8vIE5PVEU6IGlmIGBleHRlbmRlZGAgaXMgcHJlc2VudCAtIGl0IHdpbGwgYmUgZmlsbGVkIHdpdGggZGVzdHJveWVkIGJpdHNcbiAgQk4ucHJvdG90eXBlLml1c2hybiA9IGZ1bmN0aW9uIGl1c2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIGg7XG4gICAgaWYgKGhpbnQpIHtcbiAgICAgIGggPSAoaGludCAtIChoaW50ICUgMjYpKSAvIDI2O1xuICAgIH0gZWxzZSB7XG4gICAgICBoID0gMDtcbiAgICB9XG5cbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IE1hdGgubWluKChiaXRzIC0gcikgLyAyNiwgdGhpcy5sZW5ndGgpO1xuICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgIHZhciBtYXNrZWRXb3JkcyA9IGV4dGVuZGVkO1xuXG4gICAgaCAtPSBzO1xuICAgIGggPSBNYXRoLm1heCgwLCBoKTtcblxuICAgIC8vIEV4dGVuZGVkIG1vZGUsIGNvcHkgbWFza2VkIHBhcnRcbiAgICBpZiAobWFza2VkV29yZHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIG1hc2tlZFdvcmRzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICAgIG1hc2tlZFdvcmRzLmxlbmd0aCA9IHM7XG4gICAgfVxuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIC8vIE5vLW9wLCB3ZSBzaG91bGQgbm90IG1vdmUgYW55dGhpbmcgYXQgYWxsXG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA+IHMpIHtcbiAgICAgIHRoaXMubGVuZ3RoIC09IHM7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpICsgc107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDAgJiYgKGNhcnJ5ICE9PSAwIHx8IGkgPj0gaCk7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAoY2FycnkgPDwgKDI2IC0gcikpIHwgKHdvcmQgPj4+IHIpO1xuICAgICAgY2FycnkgPSB3b3JkICYgbWFzaztcbiAgICB9XG5cbiAgICAvLyBQdXNoIGNhcnJpZWQgYml0cyBhcyBhIG1hc2tcbiAgICBpZiAobWFza2VkV29yZHMgJiYgY2FycnkgIT09IDApIHtcbiAgICAgIG1hc2tlZFdvcmRzLndvcmRzW21hc2tlZFdvcmRzLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNocm4gPSBmdW5jdGlvbiBpc2hybiAoYml0cywgaGludCwgZXh0ZW5kZWQpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaHJuKGJpdHMsIGhpbnQsIGV4dGVuZGVkKTtcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0XG4gIEJOLnByb3RvdHlwZS5zaGxuID0gZnVuY3Rpb24gc2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNobG4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaGxuID0gZnVuY3Rpb24gdXNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodFxuICBCTi5wcm90b3R5cGUuc2hybiA9IGZ1bmN0aW9uIHNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaHJuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hybiA9IGZ1bmN0aW9uIHVzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNocm4oYml0cyk7XG4gIH07XG5cbiAgLy8gVGVzdCBpZiBuIGJpdCBpcyBzZXRcbiAgQk4ucHJvdG90eXBlLnRlc3RuID0gZnVuY3Rpb24gdGVzdG4gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gQ2hlY2sgYml0IGFuZCByZXR1cm5cbiAgICB2YXIgdyA9IHRoaXMud29yZHNbc107XG5cbiAgICByZXR1cm4gISEodyAmIHEpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlciAoaW4tcGxhY2UpXG4gIEJOLnByb3RvdHlwZS5pbWFza24gPSBmdW5jdGlvbiBpbWFza24gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG5cbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ2ltYXNrbiB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmUgbnVtYmVycycpO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICBzKys7XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5taW4ocywgdGhpcy5sZW5ndGgpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBtYXNrID0gMHgzZmZmZmZmIF4gKCgweDNmZmZmZmYgPj4+IHIpIDw8IHIpO1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCAtIDFdICY9IG1hc2s7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXJcbiAgQk4ucHJvdG90eXBlLm1hc2tuID0gZnVuY3Rpb24gbWFza24gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltYXNrbihiaXRzKTtcbiAgfTtcblxuICAvLyBBZGQgcGxhaW4gbnVtYmVyIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaWFkZG4gPSBmdW5jdGlvbiBpYWRkbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaXN1Ym4oLW51bSk7XG5cbiAgICAvLyBQb3NzaWJsZSBzaWduIGNoYW5nZVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgKHRoaXMud29yZHNbMF0gfCAwKSA8IG51bSkge1xuICAgICAgICB0aGlzLndvcmRzWzBdID0gbnVtIC0gKHRoaXMud29yZHNbMF0gfCAwKTtcbiAgICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaXN1Ym4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhvdXQgY2hlY2tzXG4gICAgcmV0dXJuIHRoaXMuX2lhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pYWRkbiA9IGZ1bmN0aW9uIF9pYWRkbiAobnVtKSB7XG4gICAgdGhpcy53b3Jkc1swXSArPSBudW07XG5cbiAgICAvLyBDYXJyeVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA+PSAweDQwMDAwMDA7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSAtPSAweDQwMDAwMDA7XG4gICAgICBpZiAoaSA9PT0gdGhpcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdKys7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5tYXgodGhpcy5sZW5ndGgsIGkgKyAxKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IHBsYWluIG51bWJlciBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuaXN1Ym4gPSBmdW5jdGlvbiBpc3VibiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcbiAgICBpZiAobnVtIDwgMCkgcmV0dXJuIHRoaXMuaWFkZG4oLW51bSk7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGRuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMud29yZHNbMF0gLT0gbnVtO1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPCAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gLXRoaXMud29yZHNbMF07XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2FycnlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggJiYgdGhpcy53b3Jkc1tpXSA8IDA7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldICs9IDB4NDAwMDAwMDtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gLT0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hZGRuID0gZnVuY3Rpb24gYWRkbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5zdWJuID0gZnVuY3Rpb24gc3VibiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc3VibihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYWJzID0gZnVuY3Rpb24gaWFicyAoKSB7XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWJzID0gZnVuY3Rpb24gYWJzICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhYnMoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lzaGxuc3VibXVsID0gZnVuY3Rpb24gX2lzaGxuc3VibXVsIChudW0sIG11bCwgc2hpZnQpIHtcbiAgICB2YXIgbGVuID0gbnVtLmxlbmd0aCArIHNoaWZ0O1xuICAgIHZhciBpO1xuXG4gICAgdGhpcy5fZXhwYW5kKGxlbik7XG5cbiAgICB2YXIgdztcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIHZhciByaWdodCA9IChudW0ud29yZHNbaV0gfCAwKSAqIG11bDtcbiAgICAgIHcgLT0gcmlnaHQgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9ICh3ID4+IDI2KSAtICgocmlnaHQgLyAweDQwMDAwMDApIHwgMCk7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IHRoaXMubGVuZ3RoIC0gc2hpZnQ7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgPT09IDApIHJldHVybiB0aGlzLnN0cmlwKCk7XG5cbiAgICAvLyBTdWJ0cmFjdGlvbiBvdmVyZmxvd1xuICAgIGFzc2VydChjYXJyeSA9PT0gLTEpO1xuICAgIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9IC0odGhpcy53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fd29yZERpdiA9IGZ1bmN0aW9uIF93b3JkRGl2IChudW0sIG1vZGUpIHtcbiAgICB2YXIgc2hpZnQgPSB0aGlzLmxlbmd0aCAtIG51bS5sZW5ndGg7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bTtcblxuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIHZhciBiaGlCaXRzID0gdGhpcy5fY291bnRCaXRzKGJoaSk7XG4gICAgc2hpZnQgPSAyNiAtIGJoaUJpdHM7XG4gICAgaWYgKHNoaWZ0ICE9PSAwKSB7XG4gICAgICBiID0gYi51c2hsbihzaGlmdCk7XG4gICAgICBhLml1c2hsbihzaGlmdCk7XG4gICAgICBiaGkgPSBiLndvcmRzW2IubGVuZ3RoIC0gMV0gfCAwO1xuICAgIH1cblxuICAgIC8vIEluaXRpYWxpemUgcXVvdGllbnRcbiAgICB2YXIgbSA9IGEubGVuZ3RoIC0gYi5sZW5ndGg7XG4gICAgdmFyIHE7XG5cbiAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgIHEgPSBuZXcgQk4obnVsbCk7XG4gICAgICBxLmxlbmd0aCA9IG0gKyAxO1xuICAgICAgcS53b3JkcyA9IG5ldyBBcnJheShxLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcS53b3Jkc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRpZmYgPSBhLmNsb25lKCkuX2lzaGxuc3VibXVsKGIsIDEsIG0pO1xuICAgIGlmIChkaWZmLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICBhID0gZGlmZjtcbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbbV0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGogPSBtIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgIHZhciBxaiA9IChhLndvcmRzW2IubGVuZ3RoICsgal0gfCAwKSAqIDB4NDAwMDAwMCArXG4gICAgICAgIChhLndvcmRzW2IubGVuZ3RoICsgaiAtIDFdIHwgMCk7XG5cbiAgICAgIC8vIE5PVEU6IChxaiAvIGJoaSkgaXMgKDB4M2ZmZmZmZiAqIDB4NDAwMDAwMCArIDB4M2ZmZmZmZikgLyAweDIwMDAwMDAgbWF4XG4gICAgICAvLyAoMHg3ZmZmZmZmKVxuICAgICAgcWogPSBNYXRoLm1pbigocWogLyBiaGkpIHwgMCwgMHgzZmZmZmZmKTtcblxuICAgICAgYS5faXNobG5zdWJtdWwoYiwgcWosIGopO1xuICAgICAgd2hpbGUgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgcWotLTtcbiAgICAgICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgICAgIGEuX2lzaGxuc3VibXVsKGIsIDEsIGopO1xuICAgICAgICBpZiAoIWEuaXNaZXJvKCkpIHtcbiAgICAgICAgICBhLm5lZ2F0aXZlIF49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChxKSB7XG4gICAgICAgIHEud29yZHNbal0gPSBxajtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHEpIHtcbiAgICAgIHEuc3RyaXAoKTtcbiAgICB9XG4gICAgYS5zdHJpcCgpO1xuXG4gICAgLy8gRGVub3JtYWxpemVcbiAgICBpZiAobW9kZSAhPT0gJ2RpdicgJiYgc2hpZnQgIT09IDApIHtcbiAgICAgIGEuaXVzaHJuKHNoaWZ0KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGl2OiBxIHx8IG51bGwsXG4gICAgICBtb2Q6IGFcbiAgICB9O1xuICB9O1xuXG4gIC8vIE5PVEU6IDEpIGBtb2RlYCBjYW4gYmUgc2V0IHRvIGBtb2RgIHRvIHJlcXVlc3QgbW9kIG9ubHksXG4gIC8vICAgICAgIHRvIGBkaXZgIHRvIHJlcXVlc3QgZGl2IG9ubHksIG9yIGJlIGFic2VudCB0b1xuICAvLyAgICAgICByZXF1ZXN0IGJvdGggZGl2ICYgbW9kXG4gIC8vICAgICAgIDIpIGBwb3NpdGl2ZWAgaXMgdHJ1ZSBpZiB1bnNpZ25lZCBtb2QgaXMgcmVxdWVzdGVkXG4gIEJOLnByb3RvdHlwZS5kaXZtb2QgPSBmdW5jdGlvbiBkaXZtb2QgKG51bSwgbW9kZSwgcG9zaXRpdmUpIHtcbiAgICBhc3NlcnQoIW51bS5pc1plcm8oKSk7XG5cbiAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogbmV3IEJOKDApXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkaXYsIG1vZCwgcmVzO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlhZGQobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogcmVzLm1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoKHRoaXMubmVnYXRpdmUgJiBudW0ubmVnYXRpdmUpICE9PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0ubmVnKCksIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pc3ViKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiByZXMuZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCb3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlIGF0IHRoaXMgcG9pbnRcblxuICAgIC8vIFN0cmlwIGJvdGggbnVtYmVycyB0byBhcHByb3hpbWF0ZSBzaGlmdCB2YWx1ZVxuICAgIGlmIChudW0ubGVuZ3RoID4gdGhpcy5sZW5ndGggfHwgdGhpcy5jbXAobnVtKSA8IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IHRoaXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gVmVyeSBzaG9ydCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgaWYgKG1vZGUgPT09ICdkaXYnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgICBtb2Q6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgPT09ICdtb2QnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGl2OiBudWxsLFxuICAgICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3dvcmREaXYobnVtLCBtb2RlKTtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAvIGBudW1gXG4gIEJOLnByb3RvdHlwZS5kaXYgPSBmdW5jdGlvbiBkaXYgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdkaXYnLCBmYWxzZSkuZGl2O1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgICUgYG51bWBcbiAgQk4ucHJvdG90eXBlLm1vZCA9IGZ1bmN0aW9uIG1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIGZhbHNlKS5tb2Q7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVtb2QgPSBmdW5jdGlvbiB1bW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgdHJ1ZSkubW9kO1xuICB9O1xuXG4gIC8vIEZpbmQgUm91bmQoYHRoaXNgIC8gYG51bWApXG4gIEJOLnByb3RvdHlwZS5kaXZSb3VuZCA9IGZ1bmN0aW9uIGRpdlJvdW5kIChudW0pIHtcbiAgICB2YXIgZG0gPSB0aGlzLmRpdm1vZChudW0pO1xuXG4gICAgLy8gRmFzdCBjYXNlIC0gZXhhY3QgZGl2aXNpb25cbiAgICBpZiAoZG0ubW9kLmlzWmVybygpKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgdmFyIG1vZCA9IGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLm1vZC5pc3ViKG51bSkgOiBkbS5tb2Q7XG5cbiAgICB2YXIgaGFsZiA9IG51bS51c2hybigxKTtcbiAgICB2YXIgcjIgPSBudW0uYW5kbG4oMSk7XG4gICAgdmFyIGNtcCA9IG1vZC5jbXAoaGFsZik7XG5cbiAgICAvLyBSb3VuZCBkb3duXG4gICAgaWYgKGNtcCA8IDAgfHwgcjIgPT09IDEgJiYgY21wID09PSAwKSByZXR1cm4gZG0uZGl2O1xuXG4gICAgLy8gUm91bmQgdXBcbiAgICByZXR1cm4gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0uZGl2LmlzdWJuKDEpIDogZG0uZGl2LmlhZGRuKDEpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5tb2RuID0gZnVuY3Rpb24gbW9kbiAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuICAgIHZhciBwID0gKDEgPDwgMjYpICUgbnVtO1xuXG4gICAgdmFyIGFjYyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGFjYyA9IChwICogYWNjICsgKHRoaXMud29yZHNbaV0gfCAwKSkgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBkaXZpc2lvbiBieSBudW1iZXJcbiAgQk4ucHJvdG90eXBlLmlkaXZuID0gZnVuY3Rpb24gaWRpdm4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5ICogMHg0MDAwMDAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9ICh3IC8gbnVtKSB8IDA7XG4gICAgICBjYXJyeSA9IHcgJSBudW07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZGl2biA9IGZ1bmN0aW9uIGRpdm4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWRpdm4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZWdjZCA9IGZ1bmN0aW9uIGVnY2QgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciB4ID0gdGhpcztcbiAgICB2YXIgeSA9IHAuY2xvbmUoKTtcblxuICAgIGlmICh4Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB4ID0geC51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geC5jbG9uZSgpO1xuICAgIH1cblxuICAgIC8vIEEgKiB4ICsgQiAqIHkgPSB4XG4gICAgdmFyIEEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIEIgPSBuZXcgQk4oMCk7XG5cbiAgICAvLyBDICogeCArIEQgKiB5ID0geVxuICAgIHZhciBDID0gbmV3IEJOKDApO1xuICAgIHZhciBEID0gbmV3IEJOKDEpO1xuXG4gICAgdmFyIGcgPSAwO1xuXG4gICAgd2hpbGUgKHguaXNFdmVuKCkgJiYgeS5pc0V2ZW4oKSkge1xuICAgICAgeC5pdXNocm4oMSk7XG4gICAgICB5Lml1c2hybigxKTtcbiAgICAgICsrZztcbiAgICB9XG5cbiAgICB2YXIgeXAgPSB5LmNsb25lKCk7XG4gICAgdmFyIHhwID0geC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCF4LmlzWmVybygpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoeC53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIHguaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmIChBLmlzT2RkKCkgfHwgQi5pc09kZCgpKSB7XG4gICAgICAgICAgICBBLmlhZGQoeXApO1xuICAgICAgICAgICAgQi5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBBLml1c2hybigxKTtcbiAgICAgICAgICBCLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoeS53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIHkuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmIChDLmlzT2RkKCkgfHwgRC5pc09kZCgpKSB7XG4gICAgICAgICAgICBDLmlhZGQoeXApO1xuICAgICAgICAgICAgRC5pc3ViKHhwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBDLml1c2hybigxKTtcbiAgICAgICAgICBELml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoeC5jbXAoeSkgPj0gMCkge1xuICAgICAgICB4LmlzdWIoeSk7XG4gICAgICAgIEEuaXN1YihDKTtcbiAgICAgICAgQi5pc3ViKEQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeS5pc3ViKHgpO1xuICAgICAgICBDLmlzdWIoQSk7XG4gICAgICAgIEQuaXN1YihCKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgYTogQyxcbiAgICAgIGI6IEQsXG4gICAgICBnY2Q6IHkuaXVzaGxuKGcpXG4gICAgfTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIHJlZHVjZWQgaW5jYXJuYXRpb24gb2YgdGhlIGJpbmFyeSBFRUFcbiAgLy8gYWJvdmUsIGRlc2lnbmF0ZWQgdG8gaW52ZXJ0IG1lbWJlcnMgb2YgdGhlXG4gIC8vIF9wcmltZV8gZmllbGRzIEYocCkgYXQgYSBtYXhpbWFsIHNwZWVkXG4gIEJOLnByb3RvdHlwZS5faW52bXAgPSBmdW5jdGlvbiBfaW52bXAgKHApIHtcbiAgICBhc3NlcnQocC5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgYXNzZXJ0KCFwLmlzWmVybygpKTtcblxuICAgIHZhciBhID0gdGhpcztcbiAgICB2YXIgYiA9IHAuY2xvbmUoKTtcblxuICAgIGlmIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBhID0gYS51bW9kKHApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHZhciB4MSA9IG5ldyBCTigxKTtcbiAgICB2YXIgeDIgPSBuZXcgQk4oMCk7XG5cbiAgICB2YXIgZGVsdGEgPSBiLmNsb25lKCk7XG5cbiAgICB3aGlsZSAoYS5jbXBuKDEpID4gMCAmJiBiLmNtcG4oMSkgPiAwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaW0gPSAxOyAoYS53b3Jkc1swXSAmIGltKSA9PT0gMCAmJiBpIDwgMjY7ICsraSwgaW0gPDw9IDEpO1xuICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgIGEuaXVzaHJuKGkpO1xuICAgICAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgICAgIGlmICh4MS5pc09kZCgpKSB7XG4gICAgICAgICAgICB4MS5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4MS5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKGIud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICBiLml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDIuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDIuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhLmNtcChiKSA+PSAwKSB7XG4gICAgICAgIGEuaXN1YihiKTtcbiAgICAgICAgeDEuaXN1Yih4Mik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiLmlzdWIoYSk7XG4gICAgICAgIHgyLmlzdWIoeDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXM7XG4gICAgaWYgKGEuY21wbigxKSA9PT0gMCkge1xuICAgICAgcmVzID0geDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHgyO1xuICAgIH1cblxuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHApO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmdjZCA9IGZ1bmN0aW9uIGdjZCAobnVtKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiBudW0uYWJzKCk7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIHRoaXMuYWJzKCk7XG5cbiAgICB2YXIgYSA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgYiA9IG51bS5jbG9uZSgpO1xuICAgIGEubmVnYXRpdmUgPSAwO1xuICAgIGIubmVnYXRpdmUgPSAwO1xuXG4gICAgLy8gUmVtb3ZlIGNvbW1vbiBmYWN0b3Igb2YgdHdvXG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBhLmlzRXZlbigpICYmIGIuaXNFdmVuKCk7IHNoaWZ0KyspIHtcbiAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgYi5pdXNocm4oMSk7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgd2hpbGUgKGEuaXNFdmVuKCkpIHtcbiAgICAgICAgYS5pdXNocm4oMSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoYi5pc0V2ZW4oKSkge1xuICAgICAgICBiLml1c2hybigxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHIgPSBhLmNtcChiKTtcbiAgICAgIGlmIChyIDwgMCkge1xuICAgICAgICAvLyBTd2FwIGBhYCBhbmQgYGJgIHRvIG1ha2UgYGFgIGFsd2F5cyBiaWdnZXIgdGhhbiBgYmBcbiAgICAgICAgdmFyIHQgPSBhO1xuICAgICAgICBhID0gYjtcbiAgICAgICAgYiA9IHQ7XG4gICAgICB9IGVsc2UgaWYgKHIgPT09IDAgfHwgYi5jbXBuKDEpID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBhLmlzdWIoYik7XG4gICAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgICByZXR1cm4gYi5pdXNobG4oc2hpZnQpO1xuICB9O1xuXG4gIC8vIEludmVydCBudW1iZXIgaW4gdGhlIGZpZWxkIEYobnVtKVxuICBCTi5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmVnY2QobnVtKS5hLnVtb2QobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNFdmVuID0gZnVuY3Rpb24gaXNFdmVuICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNPZGQgPSBmdW5jdGlvbiBpc09kZCAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDE7XG4gIH07XG5cbiAgLy8gQW5kIGZpcnN0IHdvcmQgYW5kIG51bVxuICBCTi5wcm90b3R5cGUuYW5kbG4gPSBmdW5jdGlvbiBhbmRsbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZHNbMF0gJiBudW07XG4gIH07XG5cbiAgLy8gSW5jcmVtZW50IGF0IHRoZSBiaXQgcG9zaXRpb24gaW4tbGluZVxuICBCTi5wcm90b3R5cGUuYmluY24gPSBmdW5jdGlvbiBiaW5jbiAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICB0aGlzLl9leHBhbmQocyArIDEpO1xuICAgICAgdGhpcy53b3Jkc1tzXSB8PSBxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJpdCBhbmQgcHJvcGFnYXRlLCBpZiBuZWVkZWRcbiAgICB2YXIgY2FycnkgPSBxO1xuICAgIGZvciAodmFyIGkgPSBzOyBjYXJyeSAhPT0gMCAmJiBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHcgKz0gY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4+IDI2O1xuICAgICAgdyAmPSAweDNmZmZmZmY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdztcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNaZXJvID0gZnVuY3Rpb24gaXNaZXJvICgpIHtcbiAgICByZXR1cm4gdGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY21wbiA9IGZ1bmN0aW9uIGNtcG4gKG51bSkge1xuICAgIHZhciBuZWdhdGl2ZSA9IG51bSA8IDA7XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiAhbmVnYXRpdmUpIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBuZWdhdGl2ZSkgcmV0dXJuIDE7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJlcyA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZWdhdGl2ZSkge1xuICAgICAgICBudW0gPSAtbnVtO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZiwgJ051bWJlciBpcyB0b28gYmlnJyk7XG5cbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1swXSB8IDA7XG4gICAgICByZXMgPSB3ID09PSBudW0gPyAwIDogdyA8IG51bSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvbXBhcmUgdHdvIG51bWJlcnMgYW5kIHJldHVybjpcbiAgLy8gMSAtIGlmIGB0aGlzYCA+IGBudW1gXG4gIC8vIDAgLSBpZiBgdGhpc2AgPT0gYG51bWBcbiAgLy8gLTEgLSBpZiBgdGhpc2AgPCBgbnVtYFxuICBCTi5wcm90b3R5cGUuY21wID0gZnVuY3Rpb24gY21wIChudW0pIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHJldHVybiAtMTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHJldHVybiAxO1xuXG4gICAgdmFyIHJlcyA9IHRoaXMudWNtcChudW0pO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBVbnNpZ25lZCBjb21wYXJpc29uXG4gIEJOLnByb3RvdHlwZS51Y21wID0gZnVuY3Rpb24gdWNtcCAobnVtKSB7XG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgaGF2ZSB0aGUgc2FtZSBzaWduXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIDE7XG4gICAgaWYgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkgcmV0dXJuIC0xO1xuXG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBhID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB2YXIgYiA9IG51bS53b3Jkc1tpXSB8IDA7XG5cbiAgICAgIGlmIChhID09PSBiKSBjb250aW51ZTtcbiAgICAgIGlmIChhIDwgYikge1xuICAgICAgICByZXMgPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYSA+IGIpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndG4gPSBmdW5jdGlvbiBndG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3QgPSBmdW5jdGlvbiBndCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZW4gPSBmdW5jdGlvbiBndGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlID0gZnVuY3Rpb24gZ3RlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdG4gPSBmdW5jdGlvbiBsdG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ID0gZnVuY3Rpb24gbHQgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlbiA9IGZ1bmN0aW9uIGx0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGUgPSBmdW5jdGlvbiBsdGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxbiA9IGZ1bmN0aW9uIGVxbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMDtcbiAgfTtcblxuICAvL1xuICAvLyBBIHJlZHVjZSBjb250ZXh0LCBjb3VsZCBiZSB1c2luZyBtb250Z29tZXJ5IG9yIHNvbWV0aGluZyBiZXR0ZXIsIGRlcGVuZGluZ1xuICAvLyBvbiB0aGUgYG1gIGl0c2VsZi5cbiAgLy9cbiAgQk4ucmVkID0gZnVuY3Rpb24gcmVkIChudW0pIHtcbiAgICByZXR1cm4gbmV3IFJlZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b1JlZCA9IGZ1bmN0aW9uIHRvUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICByZXR1cm4gY3R4LmNvbnZlcnRUbyh0aGlzKS5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZnJvbVJlZCA9IGZ1bmN0aW9uIGZyb21SZWQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ2Zyb21SZWQgd29ya3Mgb25seSB3aXRoIG51bWJlcnMgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuY29udmVydEZyb20odGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9mb3JjZVJlZCA9IGZ1bmN0aW9uIF9mb3JjZVJlZCAoY3R4KSB7XG4gICAgdGhpcy5yZWQgPSBjdHg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZvcmNlUmVkID0gZnVuY3Rpb24gZm9yY2VSZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEFkZCA9IGZ1bmN0aW9uIHJlZEFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5hZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSUFkZCA9IGZ1bmN0aW9uIHJlZElBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlhZGQodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3ViID0gZnVuY3Rpb24gcmVkU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3ViID0gZnVuY3Rpb24gcmVkSVN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXN1Yih0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTaGwgPSBmdW5jdGlvbiByZWRTaGwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNobCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc2hsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZE11bCA9IGZ1bmN0aW9uIHJlZE11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJTXVsID0gZnVuY3Rpb24gcmVkSU11bCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTXVsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkyKHRoaXMsIG51bSk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmltdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU3FyID0gZnVuY3Rpb24gcmVkU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVNxciA9IGZ1bmN0aW9uIHJlZElTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTcXIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzcXIodGhpcyk7XG4gIH07XG5cbiAgLy8gU3F1YXJlIHJvb3Qgb3ZlciBwXG4gIEJOLnByb3RvdHlwZS5yZWRTcXJ0ID0gZnVuY3Rpb24gcmVkU3FydCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FydCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FydCh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSW52bSA9IGZ1bmN0aW9uIHJlZEludm0gKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEludm0gd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmludm0odGhpcyk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYCAlIGByZWQgbW9kdWxvYFxuICBCTi5wcm90b3R5cGUucmVkTmVnID0gZnVuY3Rpb24gcmVkTmVnICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWROZWcgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLm5lZyh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkUG93ID0gZnVuY3Rpb24gcmVkUG93IChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQgJiYgIW51bS5yZWQsICdyZWRQb3cobm9ybWFsTnVtKScpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5wb3codGhpcywgbnVtKTtcbiAgfTtcblxuICAvLyBQcmltZSBudW1iZXJzIHdpdGggZWZmaWNpZW50IHJlZHVjdGlvblxuICB2YXIgcHJpbWVzID0ge1xuICAgIGsyNTY6IG51bGwsXG4gICAgcDIyNDogbnVsbCxcbiAgICBwMTkyOiBudWxsLFxuICAgIHAyNTUxOTogbnVsbFxuICB9O1xuXG4gIC8vIFBzZXVkby1NZXJzZW5uZSBwcmltZVxuICBmdW5jdGlvbiBNUHJpbWUgKG5hbWUsIHApIHtcbiAgICAvLyBQID0gMiBeIE4gLSBLXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnAgPSBuZXcgQk4ocCwgMTYpO1xuICAgIHRoaXMubiA9IHRoaXMucC5iaXRMZW5ndGgoKTtcbiAgICB0aGlzLmsgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMubikuaXN1Yih0aGlzLnApO1xuXG4gICAgdGhpcy50bXAgPSB0aGlzLl90bXAoKTtcbiAgfVxuXG4gIE1QcmltZS5wcm90b3R5cGUuX3RtcCA9IGZ1bmN0aW9uIF90bXAgKCkge1xuICAgIHZhciB0bXAgPSBuZXcgQk4obnVsbCk7XG4gICAgdG1wLndvcmRzID0gbmV3IEFycmF5KE1hdGguY2VpbCh0aGlzLm4gLyAxMykpO1xuICAgIHJldHVybiB0bXA7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pcmVkdWNlID0gZnVuY3Rpb24gaXJlZHVjZSAobnVtKSB7XG4gICAgLy8gQXNzdW1lcyB0aGF0IGBudW1gIGlzIGxlc3MgdGhhbiBgUF4yYFxuICAgIC8vIG51bSA9IEhJICogKDIgXiBOIC0gSykgKyBISSAqIEsgKyBMTyA9IEhJICogSyArIExPIChtb2QgUClcbiAgICB2YXIgciA9IG51bTtcbiAgICB2YXIgcmxlbjtcblxuICAgIGRvIHtcbiAgICAgIHRoaXMuc3BsaXQociwgdGhpcy50bXApO1xuICAgICAgciA9IHRoaXMuaW11bEsocik7XG4gICAgICByID0gci5pYWRkKHRoaXMudG1wKTtcbiAgICAgIHJsZW4gPSByLmJpdExlbmd0aCgpO1xuICAgIH0gd2hpbGUgKHJsZW4gPiB0aGlzLm4pO1xuXG4gICAgdmFyIGNtcCA9IHJsZW4gPCB0aGlzLm4gPyAtMSA6IHIudWNtcCh0aGlzLnApO1xuICAgIGlmIChjbXAgPT09IDApIHtcbiAgICAgIHIud29yZHNbMF0gPSAwO1xuICAgICAgci5sZW5ndGggPSAxO1xuICAgIH0gZWxzZSBpZiAoY21wID4gMCkge1xuICAgICAgci5pc3ViKHRoaXMucCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIuc3RyaXAoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXQpIHtcbiAgICBpbnB1dC5pdXNocm4odGhpcy5uLCAwLCBvdXQpO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgcmV0dXJuIG51bS5pbXVsKHRoaXMuayk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSzI1NiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ2syNTYnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmYzJmJyk7XG4gIH1cbiAgaW5oZXJpdHMoSzI1NiwgTVByaW1lKTtcblxuICBLMjU2LnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0cHV0KSB7XG4gICAgLy8gMjU2ID0gOSAqIDI2ICsgMjJcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmO1xuXG4gICAgdmFyIG91dExlbiA9IE1hdGgubWluKGlucHV0Lmxlbmd0aCwgOSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRMZW47IGkrKykge1xuICAgICAgb3V0cHV0LndvcmRzW2ldID0gaW5wdXQud29yZHNbaV07XG4gICAgfVxuICAgIG91dHB1dC5sZW5ndGggPSBvdXRMZW47XG5cbiAgICBpZiAoaW5wdXQubGVuZ3RoIDw9IDkpIHtcbiAgICAgIGlucHV0LndvcmRzWzBdID0gMDtcbiAgICAgIGlucHV0Lmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2hpZnQgYnkgOSBsaW1ic1xuICAgIHZhciBwcmV2ID0gaW5wdXQud29yZHNbOV07XG4gICAgb3V0cHV0LndvcmRzW291dHB1dC5sZW5ndGgrK10gPSBwcmV2ICYgbWFzaztcblxuICAgIGZvciAoaSA9IDEwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gaW5wdXQud29yZHNbaV0gfCAwO1xuICAgICAgaW5wdXQud29yZHNbaSAtIDEwXSA9ICgobmV4dCAmIG1hc2spIDw8IDQpIHwgKHByZXYgPj4+IDIyKTtcbiAgICAgIHByZXYgPSBuZXh0O1xuICAgIH1cbiAgICBwcmV2ID4+Pj0gMjI7XG4gICAgaW5wdXQud29yZHNbaSAtIDEwXSA9IHByZXY7XG4gICAgaWYgKHByZXYgPT09IDAgJiYgaW5wdXQubGVuZ3RoID4gMTApIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDk7XG4gICAgfVxuICB9O1xuXG4gIEsyNTYucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEwMDAwMDNkMSA9IFsgMHg0MCwgMHgzZDEgXVxuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoXSA9IDA7XG4gICAgbnVtLndvcmRzW251bS5sZW5ndGggKyAxXSA9IDA7XG4gICAgbnVtLmxlbmd0aCArPSAyO1xuXG4gICAgLy8gYm91bmRlZCBhdDogMHg0MCAqIDB4M2ZmZmZmZiArIDB4M2QwID0gMHgxMDAwMDAzOTBcbiAgICB2YXIgbG8gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IG51bS53b3Jkc1tpXSB8IDA7XG4gICAgICBsbyArPSB3ICogMHgzZDE7XG4gICAgICBudW0ud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgIGxvID0gdyAqIDB4NDAgKyAoKGxvIC8gMHg0MDAwMDAwKSB8IDApO1xuICAgIH1cblxuICAgIC8vIEZhc3QgbGVuZ3RoIHJlZHVjdGlvblxuICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICBudW0ubGVuZ3RoLS07XG4gICAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgICBudW0ubGVuZ3RoLS07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgZnVuY3Rpb24gUDIyNCAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AyMjQnLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDIyNCwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMTkyICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDE5MicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZmZmYgZmZmZmZmZmYnKTtcbiAgfVxuICBpbmhlcml0cyhQMTkyLCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAyNTUxOSAoKSB7XG4gICAgLy8gMiBeIDI1NSAtIDE5XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJzI1NTE5JyxcbiAgICAgICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDI1NTE5LCBNUHJpbWUpO1xuXG4gIFAyNTUxOS5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTNcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaGkgPSAobnVtLndvcmRzW2ldIHwgMCkgKiAweDEzICsgY2Fycnk7XG4gICAgICB2YXIgbG8gPSBoaSAmIDB4M2ZmZmZmZjtcbiAgICAgIGhpID4+Pj0gMjY7XG5cbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvO1xuICAgICAgY2FycnkgPSBoaTtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBudW0ud29yZHNbbnVtLmxlbmd0aCsrXSA9IGNhcnJ5O1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIC8vIEV4cG9ydGVkIG1vc3RseSBmb3IgdGVzdGluZyBwdXJwb3NlcywgdXNlIHBsYWluIG5hbWUgaW5zdGVhZFxuICBCTi5fcHJpbWUgPSBmdW5jdGlvbiBwcmltZSAobmFtZSkge1xuICAgIC8vIENhY2hlZCB2ZXJzaW9uIG9mIHByaW1lXG4gICAgaWYgKHByaW1lc1tuYW1lXSkgcmV0dXJuIHByaW1lc1tuYW1lXTtcblxuICAgIHZhciBwcmltZTtcbiAgICBpZiAobmFtZSA9PT0gJ2syNTYnKSB7XG4gICAgICBwcmltZSA9IG5ldyBLMjU2KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDIyNCcpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyMjQoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMTkyJykge1xuICAgICAgcHJpbWUgPSBuZXcgUDE5MigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyNTUxOScpIHtcbiAgICAgIHByaW1lID0gbmV3IFAyNTUxOSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gcHJpbWUgJyArIG5hbWUpO1xuICAgIH1cbiAgICBwcmltZXNbbmFtZV0gPSBwcmltZTtcblxuICAgIHJldHVybiBwcmltZTtcbiAgfTtcblxuICAvL1xuICAvLyBCYXNlIHJlZHVjdGlvbiBlbmdpbmVcbiAgLy9cbiAgZnVuY3Rpb24gUmVkIChtKSB7XG4gICAgaWYgKHR5cGVvZiBtID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHByaW1lID0gQk4uX3ByaW1lKG0pO1xuICAgICAgdGhpcy5tID0gcHJpbWUucDtcbiAgICAgIHRoaXMucHJpbWUgPSBwcmltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzZXJ0KG0uZ3RuKDEpLCAnbW9kdWx1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxJyk7XG4gICAgICB0aGlzLm0gPSBtO1xuICAgICAgdGhpcy5wcmltZSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MSA9IGZ1bmN0aW9uIF92ZXJpZnkxIChhKSB7XG4gICAgYXNzZXJ0KGEubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkyID0gZnVuY3Rpb24gX3ZlcmlmeTIgKGEsIGIpIHtcbiAgICBhc3NlcnQoKGEubmVnYXRpdmUgfCBiLm5lZ2F0aXZlKSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkICYmIGEucmVkID09PSBiLnJlZCxcbiAgICAgICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbW9kID0gZnVuY3Rpb24gaW1vZCAoYSkge1xuICAgIGlmICh0aGlzLnByaW1lKSByZXR1cm4gdGhpcy5wcmltZS5pcmVkdWNlKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgICByZXR1cm4gYS51bW9kKHRoaXMubSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnIChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubS5zdWIoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaWFkZCA9IGZ1bmN0aW9uIGlhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaWFkZChiKTtcbiAgICBpZiAocmVzLmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcy5pc3ViKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXN1YiA9IGZ1bmN0aW9uIGlzdWIgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuaXN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc2hsID0gZnVuY3Rpb24gc2hsIChhLCBudW0pIHtcbiAgICB0aGlzLl92ZXJpZnkxKGEpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS51c2hsbihudW0pKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEuaW11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5tdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKGEsIGEuY2xvbmUoKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKGEpIHtcbiAgICByZXR1cm4gdGhpcy5tdWwoYSwgYSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zcXJ0ID0gZnVuY3Rpb24gc3FydCAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIG1vZDMgPSB0aGlzLm0uYW5kbG4oMyk7XG4gICAgYXNzZXJ0KG1vZDMgJSAyID09PSAxKTtcblxuICAgIC8vIEZhc3QgY2FzZVxuICAgIGlmIChtb2QzID09PSAzKSB7XG4gICAgICB2YXIgcG93ID0gdGhpcy5tLmFkZChuZXcgQk4oMSkpLml1c2hybigyKTtcbiAgICAgIHJldHVybiB0aGlzLnBvdyhhLCBwb3cpO1xuICAgIH1cblxuICAgIC8vIFRvbmVsbGktU2hhbmtzIGFsZ29yaXRobSAoVG90YWxseSB1bm9wdGltaXplZCBhbmQgc2xvdylcbiAgICAvL1xuICAgIC8vIEZpbmQgUSBhbmQgUywgdGhhdCBRICogMiBeIFMgPSAoUCAtIDEpXG4gICAgdmFyIHEgPSB0aGlzLm0uc3VibigxKTtcbiAgICB2YXIgcyA9IDA7XG4gICAgd2hpbGUgKCFxLmlzWmVybygpICYmIHEuYW5kbG4oMSkgPT09IDApIHtcbiAgICAgIHMrKztcbiAgICAgIHEuaXVzaHJuKDEpO1xuICAgIH1cbiAgICBhc3NlcnQoIXEuaXNaZXJvKCkpO1xuXG4gICAgdmFyIG9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB2YXIgbk9uZSA9IG9uZS5yZWROZWcoKTtcblxuICAgIC8vIEZpbmQgcXVhZHJhdGljIG5vbi1yZXNpZHVlXG4gICAgLy8gTk9URTogTWF4IGlzIHN1Y2ggYmVjYXVzZSBvZiBnZW5lcmFsaXplZCBSaWVtYW5uIGh5cG90aGVzaXMuXG4gICAgdmFyIGxwb3cgPSB0aGlzLm0uc3VibigxKS5pdXNocm4oMSk7XG4gICAgdmFyIHogPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgeiA9IG5ldyBCTigyICogeiAqIHopLnRvUmVkKHRoaXMpO1xuXG4gICAgd2hpbGUgKHRoaXMucG93KHosIGxwb3cpLmNtcChuT25lKSAhPT0gMCkge1xuICAgICAgei5yZWRJQWRkKG5PbmUpO1xuICAgIH1cblxuICAgIHZhciBjID0gdGhpcy5wb3coeiwgcSk7XG4gICAgdmFyIHIgPSB0aGlzLnBvdyhhLCBxLmFkZG4oMSkuaXVzaHJuKDEpKTtcbiAgICB2YXIgdCA9IHRoaXMucG93KGEsIHEpO1xuICAgIHZhciBtID0gcztcbiAgICB3aGlsZSAodC5jbXAob25lKSAhPT0gMCkge1xuICAgICAgdmFyIHRtcCA9IHQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgdG1wLmNtcChvbmUpICE9PSAwOyBpKyspIHtcbiAgICAgICAgdG1wID0gdG1wLnJlZFNxcigpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KGkgPCBtKTtcbiAgICAgIHZhciBiID0gdGhpcy5wb3coYywgbmV3IEJOKDEpLml1c2hsbihtIC0gaSAtIDEpKTtcblxuICAgICAgciA9IHIucmVkTXVsKGIpO1xuICAgICAgYyA9IGIucmVkU3FyKCk7XG4gICAgICB0ID0gdC5yZWRNdWwoYyk7XG4gICAgICBtID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgdmFyIGludiA9IGEuX2ludm1wKHRoaXMubSk7XG4gICAgaWYgKGludi5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaW52Lm5lZ2F0aXZlID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KS5yZWROZWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpO1xuICAgIH1cbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAoYSwgbnVtKSB7XG4gICAgaWYgKG51bS5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICBpZiAobnVtLmNtcG4oMSkgPT09IDApIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgd2luZG93U2l6ZSA9IDQ7XG4gICAgdmFyIHduZCA9IG5ldyBBcnJheSgxIDw8IHdpbmRvd1NpemUpO1xuICAgIHduZFswXSA9IG5ldyBCTigxKS50b1JlZCh0aGlzKTtcbiAgICB3bmRbMV0gPSBhO1xuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgd25kLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3bmRbaV0gPSB0aGlzLm11bCh3bmRbaSAtIDFdLCBhKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzID0gd25kWzBdO1xuICAgIHZhciBjdXJyZW50ID0gMDtcbiAgICB2YXIgY3VycmVudExlbiA9IDA7XG4gICAgdmFyIHN0YXJ0ID0gbnVtLmJpdExlbmd0aCgpICUgMjY7XG4gICAgaWYgKHN0YXJ0ID09PSAwKSB7XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIGZvciAoaSA9IG51bS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHdvcmQgPSBudW0ud29yZHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gc3RhcnQgLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICB2YXIgYml0ID0gKHdvcmQgPj4gaikgJiAxO1xuICAgICAgICBpZiAocmVzICE9PSB3bmRbMF0pIHtcbiAgICAgICAgICByZXMgPSB0aGlzLnNxcihyZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJpdCA9PT0gMCAmJiBjdXJyZW50ID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50IDw8PSAxO1xuICAgICAgICBjdXJyZW50IHw9IGJpdDtcbiAgICAgICAgY3VycmVudExlbisrO1xuICAgICAgICBpZiAoY3VycmVudExlbiAhPT0gd2luZG93U2l6ZSAmJiAoaSAhPT0gMCB8fCBqICE9PSAwKSkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gdGhpcy5tdWwocmVzLCB3bmRbY3VycmVudF0pO1xuICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICB9XG4gICAgICBzdGFydCA9IDI2O1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHZhciByID0gbnVtLnVtb2QodGhpcy5tKTtcblxuICAgIHJldHVybiByID09PSBudW0gPyByLmNsb25lKCkgOiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHJlcyA9IG51bS5jbG9uZSgpO1xuICAgIHJlcy5yZWQgPSBudWxsO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy9cbiAgLy8gTW9udGdvbWVyeSBtZXRob2QgZW5naW5lXG4gIC8vXG5cbiAgQk4ubW9udCA9IGZ1bmN0aW9uIG1vbnQgKG51bSkge1xuICAgIHJldHVybiBuZXcgTW9udChudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIE1vbnQgKG0pIHtcbiAgICBSZWQuY2FsbCh0aGlzLCBtKTtcblxuICAgIHRoaXMuc2hpZnQgPSB0aGlzLm0uYml0TGVuZ3RoKCk7XG4gICAgaWYgKHRoaXMuc2hpZnQgJSAyNiAhPT0gMCkge1xuICAgICAgdGhpcy5zaGlmdCArPSAyNiAtICh0aGlzLnNoaWZ0ICUgMjYpO1xuICAgIH1cblxuICAgIHRoaXMuciA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5zaGlmdCk7XG4gICAgdGhpcy5yMiA9IHRoaXMuaW1vZCh0aGlzLnIuc3FyKCkpO1xuICAgIHRoaXMucmludiA9IHRoaXMuci5faW52bXAodGhpcy5tKTtcblxuICAgIHRoaXMubWludiA9IHRoaXMucmludi5tdWwodGhpcy5yKS5pc3VibigxKS5kaXYodGhpcy5tKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLm1pbnYudW1vZCh0aGlzLnIpO1xuICAgIHRoaXMubWludiA9IHRoaXMuci5zdWIodGhpcy5taW52KTtcbiAgfVxuICBpbmhlcml0cyhNb250LCBSZWQpO1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChudW0udXNobG4odGhpcy5zaGlmdCkpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByID0gdGhpcy5pbW9kKG51bS5tdWwodGhpcy5yaW52KSk7XG4gICAgci5yZWQgPSBudWxsO1xuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkge1xuICAgICAgYS53b3Jkc1swXSA9IDA7XG4gICAgICBhLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG5cbiAgICB2YXIgdCA9IGEuaW11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcblxuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkgfHwgYi5pc1plcm8oKSkgcmV0dXJuIG5ldyBCTigwKS5fZm9yY2VSZWQodGhpcyk7XG5cbiAgICB2YXIgdCA9IGEubXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuICAgIGlmICh1LmNtcCh0aGlzLm0pID49IDApIHtcbiAgICAgIHJlcyA9IHUuaXN1Yih0aGlzLm0pO1xuICAgIH0gZWxzZSBpZiAodS5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzID0gdS5pYWRkKHRoaXMubSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICAvLyAoQVIpXi0xICogUl4yID0gKEFeLTEgKiBSXi0xKSAqIFJeMiA9IEFeLTEgKiBSXG4gICAgdmFyIHJlcyA9IHRoaXMuaW1vZChhLl9pbnZtcCh0aGlzLm0pLm11bCh0aGlzLnIyKSk7XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG59KSh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJyB8fCBtb2R1bGUsIHRoaXMpO1xuIiwidmFyIHI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmFuZChsZW4pIHtcbiAgaWYgKCFyKVxuICAgIHIgPSBuZXcgUmFuZChudWxsKTtcblxuICByZXR1cm4gci5nZW5lcmF0ZShsZW4pO1xufTtcblxuZnVuY3Rpb24gUmFuZChyYW5kKSB7XG4gIHRoaXMucmFuZCA9IHJhbmQ7XG59XG5tb2R1bGUuZXhwb3J0cy5SYW5kID0gUmFuZDtcblxuUmFuZC5wcm90b3R5cGUuZ2VuZXJhdGUgPSBmdW5jdGlvbiBnZW5lcmF0ZShsZW4pIHtcbiAgcmV0dXJuIHRoaXMuX3JhbmQobGVuKTtcbn07XG5cbi8vIEVtdWxhdGUgY3J5cHRvIEFQSSB1c2luZyByYW5keVxuUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gIGlmICh0aGlzLnJhbmQuZ2V0Qnl0ZXMpXG4gICAgcmV0dXJuIHRoaXMucmFuZC5nZXRCeXRlcyhuKTtcblxuICB2YXIgcmVzID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKVxuICAgIHJlc1tpXSA9IHRoaXMucmFuZC5nZXRCeXRlKCk7XG4gIHJldHVybiByZXM7XG59O1xuXG5pZiAodHlwZW9mIHNlbGYgPT09ICdvYmplY3QnKSB7XG4gIGlmIChzZWxmLmNyeXB0byAmJiBzZWxmLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBNb2Rlcm4gYnJvd3NlcnNcbiAgICBSYW5kLnByb3RvdHlwZS5fcmFuZCA9IGZ1bmN0aW9uIF9yYW5kKG4pIHtcbiAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgICAgIHNlbGYuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuICB9IGVsc2UgaWYgKHNlbGYubXNDcnlwdG8gJiYgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBJRVxuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24gX3JhbmQobikge1xuICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgc2VsZi5tc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyKTtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfTtcblxuICAvLyBTYWZhcmkncyBXZWJXb3JrZXJzIGRvIG5vdCBoYXZlIGBjcnlwdG9gXG4gIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBPbGQganVua1xuICAgIFJhbmQucHJvdG90eXBlLl9yYW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAgICB9O1xuICB9XG59IGVsc2Uge1xuICAvLyBOb2RlLmpzIG9yIFdlYiB3b3JrZXIgd2l0aCBubyBjcnlwdG8gc3VwcG9ydFxuICB0cnkge1xuICAgIHZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgICBpZiAodHlwZW9mIGNyeXB0by5yYW5kb21CeXRlcyAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCcpO1xuXG4gICAgUmFuZC5wcm90b3R5cGUuX3JhbmQgPSBmdW5jdGlvbiBfcmFuZChuKSB7XG4gICAgICByZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKG4pO1xuICAgIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklpSXNJbVpwYkdVaU9pSmxiWEIwZVM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJYWDA9IiwiLy8gYmFzZWQgb24gdGhlIGFlcyBpbXBsaW1lbnRhdGlvbiBpbiB0cmlwbGUgc2VjXG4vLyBodHRwczovL2dpdGh1Yi5jb20va2V5YmFzZS90cmlwbGVzZWNcbi8vIHdoaWNoIGlzIGluIHR1cm4gYmFzZWQgb24gdGhlIG9uZSBmcm9tIGNyeXB0by1qc1xuLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanMvXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG5mdW5jdGlvbiBhc1VJbnQzMkFycmF5IChidWYpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgYnVmID0gQnVmZmVyLmZyb20oYnVmKVxuXG4gIHZhciBsZW4gPSAoYnVmLmxlbmd0aCAvIDQpIHwgMFxuICB2YXIgb3V0ID0gbmV3IEFycmF5KGxlbilcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0W2ldID0gYnVmLnJlYWRVSW50MzJCRShpICogNClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gc2NydWJWZWMgKHYpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgdisrKSB7XG4gICAgdltpXSA9IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBjcnlwdEJsb2NrIChNLCBrZXlTY2hlZHVsZSwgU1VCX01JWCwgU0JPWCwgblJvdW5kcykge1xuICB2YXIgU1VCX01JWDAgPSBTVUJfTUlYWzBdXG4gIHZhciBTVUJfTUlYMSA9IFNVQl9NSVhbMV1cbiAgdmFyIFNVQl9NSVgyID0gU1VCX01JWFsyXVxuICB2YXIgU1VCX01JWDMgPSBTVUJfTUlYWzNdXG5cbiAgdmFyIHMwID0gTVswXSBeIGtleVNjaGVkdWxlWzBdXG4gIHZhciBzMSA9IE1bMV0gXiBrZXlTY2hlZHVsZVsxXVxuICB2YXIgczIgPSBNWzJdIF4ga2V5U2NoZWR1bGVbMl1cbiAgdmFyIHMzID0gTVszXSBeIGtleVNjaGVkdWxlWzNdXG4gIHZhciB0MCwgdDEsIHQyLCB0M1xuICB2YXIga3NSb3cgPSA0XG5cbiAgZm9yICh2YXIgcm91bmQgPSAxOyByb3VuZCA8IG5Sb3VuZHM7IHJvdW5kKyspIHtcbiAgICB0MCA9IFNVQl9NSVgwW3MwID4+PiAyNF0gXiBTVUJfTUlYMVsoczEgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMyID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgdDEgPSBTVUJfTUlYMFtzMSA+Pj4gMjRdIF4gU1VCX01JWDFbKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVgyWyhzMyA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVgzW3MwICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICAgIHQyID0gU1VCX01JWDBbczIgPj4+IDI0XSBeIFNVQl9NSVgxWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYMlsoczAgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYM1tzMSAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgICB0MyA9IFNVQl9NSVgwW3MzID4+PiAyNF0gXiBTVUJfTUlYMVsoczAgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWDJbKHMxID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWDNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gICAgczAgPSB0MFxuICAgIHMxID0gdDFcbiAgICBzMiA9IHQyXG4gICAgczMgPSB0M1xuICB9XG5cbiAgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXG4gIHQyID0gKChTQk9YW3MyID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMzID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczAgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MxICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cbiAgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxuICB0MCA9IHQwID4+PiAwXG4gIHQxID0gdDEgPj4+IDBcbiAgdDIgPSB0MiA+Pj4gMFxuICB0MyA9IHQzID4+PiAwXG5cbiAgcmV0dXJuIFt0MCwgdDEsIHQyLCB0M11cbn1cblxuLy8gQUVTIGNvbnN0YW50c1xudmFyIFJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl1cbnZhciBHID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ29tcHV0ZSBkb3VibGUgdGFibGVcbiAgdmFyIGQgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKHZhciBqID0gMDsgaiA8IDI1NjsgaisrKSB7XG4gICAgaWYgKGogPCAxMjgpIHtcbiAgICAgIGRbal0gPSBqIDw8IDFcbiAgICB9IGVsc2Uge1xuICAgICAgZFtqXSA9IChqIDw8IDEpIF4gMHgxMWJcbiAgICB9XG4gIH1cblxuICB2YXIgU0JPWCA9IFtdXG4gIHZhciBJTlZfU0JPWCA9IFtdXG4gIHZhciBTVUJfTUlYID0gW1tdLCBbXSwgW10sIFtdXVxuICB2YXIgSU5WX1NVQl9NSVggPSBbW10sIFtdLCBbXSwgW11dXG5cbiAgLy8gV2FsayBHRigyXjgpXG4gIHZhciB4ID0gMFxuICB2YXIgeGkgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgICAvLyBDb21wdXRlIHNib3hcbiAgICB2YXIgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KVxuICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2M1xuICAgIFNCT1hbeF0gPSBzeFxuICAgIElOVl9TQk9YW3N4XSA9IHhcblxuICAgIC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb25cbiAgICB2YXIgeDIgPSBkW3hdXG4gICAgdmFyIHg0ID0gZFt4Ml1cbiAgICB2YXIgeDggPSBkW3g0XVxuXG4gICAgLy8gQ29tcHV0ZSBzdWIgYnl0ZXMsIG1peCBjb2x1bW5zIHRhYmxlc1xuICAgIHZhciB0ID0gKGRbc3hdICogMHgxMDEpIF4gKHN4ICogMHgxMDEwMTAwKVxuICAgIFNVQl9NSVhbMF1beF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOClcbiAgICBTVUJfTUlYWzFdW3hdID0gKHQgPDwgMTYpIHwgKHQgPj4+IDE2KVxuICAgIFNVQl9NSVhbMl1beF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBTVUJfTUlYWzNdW3hdID0gdFxuXG4gICAgLy8gQ29tcHV0ZSBpbnYgc3ViIGJ5dGVzLCBpbnYgbWl4IGNvbHVtbnMgdGFibGVzXG4gICAgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKVxuICAgIElOVl9TVUJfTUlYWzBdW3N4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KVxuICAgIElOVl9TVUJfTUlYWzFdW3N4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNilcbiAgICBJTlZfU1VCX01JWFsyXVtzeF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcbiAgICBJTlZfU1VCX01JWFszXVtzeF0gPSB0XG5cbiAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgeCA9IHhpID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dXG4gICAgICB4aSBePSBkW2RbeGldXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgU0JPWDogU0JPWCxcbiAgICBJTlZfU0JPWDogSU5WX1NCT1gsXG4gICAgU1VCX01JWDogU1VCX01JWCxcbiAgICBJTlZfU1VCX01JWDogSU5WX1NVQl9NSVhcbiAgfVxufSkoKVxuXG5mdW5jdGlvbiBBRVMgKGtleSkge1xuICB0aGlzLl9rZXkgPSBhc1VJbnQzMkFycmF5KGtleSlcbiAgdGhpcy5fcmVzZXQoKVxufVxuXG5BRVMuYmxvY2tTaXplID0gNCAqIDRcbkFFUy5rZXlTaXplID0gMjU2IC8gOFxuQUVTLnByb3RvdHlwZS5ibG9ja1NpemUgPSBBRVMuYmxvY2tTaXplXG5BRVMucHJvdG90eXBlLmtleVNpemUgPSBBRVMua2V5U2l6ZVxuQUVTLnByb3RvdHlwZS5fcmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBrZXlXb3JkcyA9IHRoaXMuX2tleVxuICB2YXIga2V5U2l6ZSA9IGtleVdvcmRzLmxlbmd0aFxuICB2YXIgblJvdW5kcyA9IGtleVNpemUgKyA2XG4gIHZhciBrc1Jvd3MgPSAoblJvdW5kcyArIDEpICogNFxuXG4gIHZhciBrZXlTY2hlZHVsZSA9IFtdXG4gIGZvciAodmFyIGsgPSAwOyBrIDwga2V5U2l6ZTsgaysrKSB7XG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlXb3Jkc1trXVxuICB9XG5cbiAgZm9yIChrID0ga2V5U2l6ZTsgayA8IGtzUm93czsgaysrKSB7XG4gICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrIC0gMV1cblxuICAgIGlmIChrICUga2V5U2l6ZSA9PT0gMCkge1xuICAgICAgdCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KVxuICAgICAgdCA9XG4gICAgICAgIChHLlNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8XG4gICAgICAgIChHLlNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfFxuICAgICAgICAoRy5TQk9YW3QgJiAweGZmXSlcblxuICAgICAgdCBePSBSQ09OWyhrIC8ga2V5U2l6ZSkgfCAwXSA8PCAyNFxuICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYgayAlIGtleVNpemUgPT09IDQpIHtcbiAgICAgIHQgPVxuICAgICAgICAoRy5TQk9YW3QgPj4+IDI0XSA8PCAyNCkgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfFxuICAgICAgICAoRy5TQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHxcbiAgICAgICAgKEcuU0JPWFt0ICYgMHhmZl0pXG4gICAgfVxuXG4gICAga2V5U2NoZWR1bGVba10gPSBrZXlTY2hlZHVsZVtrIC0ga2V5U2l6ZV0gXiB0XG4gIH1cblxuICB2YXIgaW52S2V5U2NoZWR1bGUgPSBbXVxuICBmb3IgKHZhciBpayA9IDA7IGlrIDwga3NSb3dzOyBpaysrKSB7XG4gICAgdmFyIGtzUiA9IGtzUm93cyAtIGlrXG4gICAgdmFyIHR0ID0ga2V5U2NoZWR1bGVba3NSIC0gKGlrICUgNCA/IDAgOiA0KV1cblxuICAgIGlmIChpayA8IDQgfHwga3NSIDw9IDQpIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9IHR0XG4gICAgfSBlbHNlIHtcbiAgICAgIGludktleVNjaGVkdWxlW2lrXSA9XG4gICAgICAgIEcuSU5WX1NVQl9NSVhbMF1bRy5TQk9YW3R0ID4+PiAyNF1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFsxXVtHLlNCT1hbKHR0ID4+PiAxNikgJiAweGZmXV0gXlxuICAgICAgICBHLklOVl9TVUJfTUlYWzJdW0cuU0JPWFsodHQgPj4+IDgpICYgMHhmZl1dIF5cbiAgICAgICAgRy5JTlZfU1VCX01JWFszXVtHLlNCT1hbdHQgJiAweGZmXV1cbiAgICB9XG4gIH1cblxuICB0aGlzLl9uUm91bmRzID0gblJvdW5kc1xuICB0aGlzLl9rZXlTY2hlZHVsZSA9IGtleVNjaGVkdWxlXG4gIHRoaXMuX2ludktleVNjaGVkdWxlID0gaW52S2V5U2NoZWR1bGVcbn1cblxuQUVTLnByb3RvdHlwZS5lbmNyeXB0QmxvY2tSYXcgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuICByZXR1cm4gY3J5cHRCbG9jayhNLCB0aGlzLl9rZXlTY2hlZHVsZSwgRy5TVUJfTUlYLCBHLlNCT1gsIHRoaXMuX25Sb3VuZHMpXG59XG5cbkFFUy5wcm90b3R5cGUuZW5jcnlwdEJsb2NrID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIG91dCA9IHRoaXMuZW5jcnlwdEJsb2NrUmF3KE0pXG4gIHZhciBidWYgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMTYpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFswXSwgMClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCA0KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMl0sIDgpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFszXSwgMTIpXG4gIHJldHVybiBidWZcbn1cblxuQUVTLnByb3RvdHlwZS5kZWNyeXB0QmxvY2sgPSBmdW5jdGlvbiAoTSkge1xuICBNID0gYXNVSW50MzJBcnJheShNKVxuXG4gIC8vIHN3YXBcbiAgdmFyIG0xID0gTVsxXVxuICBNWzFdID0gTVszXVxuICBNWzNdID0gbTFcblxuICB2YXIgb3V0ID0gY3J5cHRCbG9jayhNLCB0aGlzLl9pbnZLZXlTY2hlZHVsZSwgRy5JTlZfU1VCX01JWCwgRy5JTlZfU0JPWCwgdGhpcy5fblJvdW5kcylcbiAgdmFyIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxNilcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzBdLCAwKVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10sIDQpXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsyXSwgOClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzFdLCAxMilcbiAgcmV0dXJuIGJ1ZlxufVxuXG5BRVMucHJvdG90eXBlLnNjcnViID0gZnVuY3Rpb24gKCkge1xuICBzY3J1YlZlYyh0aGlzLl9rZXlTY2hlZHVsZSlcbiAgc2NydWJWZWModGhpcy5faW52S2V5U2NoZWR1bGUpXG4gIHNjcnViVmVjKHRoaXMuX2tleSlcbn1cblxubW9kdWxlLmV4cG9ydHMuQUVTID0gQUVTXG4iLCJ2YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEdIQVNIID0gcmVxdWlyZSgnLi9naGFzaCcpXG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG52YXIgaW5jcjMyID0gcmVxdWlyZSgnLi9pbmNyMzInKVxuXG5mdW5jdGlvbiB4b3JUZXN0IChhLCBiKSB7XG4gIHZhciBvdXQgPSAwXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIG91dCsrXG5cbiAgdmFyIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIG91dCArPSAoYVtpXSBeIGJbaV0pXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIGNhbGNJdiAoc2VsZiwgaXYsIGNrKSB7XG4gIGlmIChpdi5sZW5ndGggPT09IDEyKSB7XG4gICAgc2VsZi5fZmluSUQgPSBCdWZmZXIuY29uY2F0KFtpdiwgQnVmZmVyLmZyb20oWzAsIDAsIDAsIDFdKV0pXG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW2l2LCBCdWZmZXIuZnJvbShbMCwgMCwgMCwgMl0pXSlcbiAgfVxuICB2YXIgZ2hhc2ggPSBuZXcgR0hBU0goY2spXG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIHRvUGFkID0gbGVuICUgMTZcbiAgZ2hhc2gudXBkYXRlKGl2KVxuICBpZiAodG9QYWQpIHtcbiAgICB0b1BhZCA9IDE2IC0gdG9QYWRcbiAgICBnaGFzaC51cGRhdGUoQnVmZmVyLmFsbG9jKHRvUGFkLCAwKSlcbiAgfVxuICBnaGFzaC51cGRhdGUoQnVmZmVyLmFsbG9jKDgsIDApKVxuICB2YXIgaXZCaXRzID0gbGVuICogOFxuICB2YXIgdGFpbCA9IEJ1ZmZlci5hbGxvYyg4KVxuICB0YWlsLndyaXRlVUludEJFKGl2Qml0cywgMCwgOClcbiAgZ2hhc2gudXBkYXRlKHRhaWwpXG4gIHNlbGYuX2ZpbklEID0gZ2hhc2guc3RhdGVcbiAgdmFyIG91dCA9IEJ1ZmZlci5mcm9tKHNlbGYuX2ZpbklEKVxuICBpbmNyMzIob3V0KVxuICByZXR1cm4gb3V0XG59XG5mdW5jdGlvbiBTdHJlYW1DaXBoZXIgKG1vZGUsIGtleSwgaXYsIGRlY3J5cHQpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcblxuICB2YXIgaCA9IEJ1ZmZlci5hbGxvYyg0LCAwKVxuXG4gIHRoaXMuX2NpcGhlciA9IG5ldyBhZXMuQUVTKGtleSlcbiAgdmFyIGNrID0gdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayhoKVxuICB0aGlzLl9naGFzaCA9IG5ldyBHSEFTSChjaylcbiAgaXYgPSBjYWxjSXYodGhpcywgaXYsIGNrKVxuXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fc2VjQ2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbiAgdGhpcy5fZGVjcnlwdCA9IGRlY3J5cHRcbiAgdGhpcy5fYWxlbiA9IDBcbiAgdGhpcy5fbGVuID0gMFxuICB0aGlzLl9tb2RlID0gbW9kZVxuXG4gIHRoaXMuX2F1dGhUYWcgPSBudWxsXG4gIHRoaXMuX2NhbGxlZCA9IGZhbHNlXG59XG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgaWYgKCF0aGlzLl9jYWxsZWQgJiYgdGhpcy5fYWxlbikge1xuICAgIHZhciBydW1wID0gMTYgLSAodGhpcy5fYWxlbiAlIDE2KVxuICAgIGlmIChydW1wIDwgMTYpIHtcbiAgICAgIHJ1bXAgPSBCdWZmZXIuYWxsb2MocnVtcCwgMClcbiAgICAgIHRoaXMuX2doYXNoLnVwZGF0ZShydW1wKVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuX2NhbGxlZCA9IHRydWVcbiAgdmFyIG91dCA9IHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaylcbiAgaWYgKHRoaXMuX2RlY3J5cHQpIHtcbiAgICB0aGlzLl9naGFzaC51cGRhdGUoY2h1bmspXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fZ2hhc2gudXBkYXRlKG91dClcbiAgfVxuICB0aGlzLl9sZW4gKz0gY2h1bmsubGVuZ3RoXG4gIHJldHVybiBvdXRcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9kZWNyeXB0ICYmICF0aGlzLl9hdXRoVGFnKSB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHN0YXRlIG9yIHVuYWJsZSB0byBhdXRoZW50aWNhdGUgZGF0YScpXG5cbiAgdmFyIHRhZyA9IHhvcih0aGlzLl9naGFzaC5maW5hbCh0aGlzLl9hbGVuICogOCwgdGhpcy5fbGVuICogOCksIHRoaXMuX2NpcGhlci5lbmNyeXB0QmxvY2sodGhpcy5fZmluSUQpKVxuICBpZiAodGhpcy5fZGVjcnlwdCAmJiB4b3JUZXN0KHRhZywgdGhpcy5fYXV0aFRhZykpIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc3RhdGUgb3IgdW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSBkYXRhJylcblxuICB0aGlzLl9hdXRoVGFnID0gdGFnXG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuZ2V0QXV0aFRhZyA9IGZ1bmN0aW9uIGdldEF1dGhUYWcgKCkge1xuICBpZiAodGhpcy5fZGVjcnlwdCB8fCAhQnVmZmVyLmlzQnVmZmVyKHRoaXMuX2F1dGhUYWcpKSB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gZ2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcblxuICByZXR1cm4gdGhpcy5fYXV0aFRhZ1xufVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiBzZXRBdXRoVGFnICh0YWcpIHtcbiAgaWYgKCF0aGlzLl9kZWNyeXB0KSB0aHJvdyBuZXcgRXJyb3IoJ0F0dGVtcHRpbmcgdG8gc2V0IGF1dGggdGFnIGluIHVuc3VwcG9ydGVkIHN0YXRlJylcblxuICB0aGlzLl9hdXRoVGFnID0gdGFnXG59XG5cblN0cmVhbUNpcGhlci5wcm90b3R5cGUuc2V0QUFEID0gZnVuY3Rpb24gc2V0QUFEIChidWYpIHtcbiAgaWYgKHRoaXMuX2NhbGxlZCkgdGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0aW5nIHRvIHNldCBBQUQgaW4gdW5zdXBwb3J0ZWQgc3RhdGUnKVxuXG4gIHRoaXMuX2doYXNoLnVwZGF0ZShidWYpXG4gIHRoaXMuX2FsZW4gKz0gYnVmLmxlbmd0aFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmVhbUNpcGhlclxuIiwidmFyIGNpcGhlcnMgPSByZXF1aXJlKCcuL2VuY3J5cHRlcicpXG52YXIgZGVjaXBoZXJzID0gcmVxdWlyZSgnLi9kZWNyeXB0ZXInKVxudmFyIG1vZGVzID0gcmVxdWlyZSgnLi9tb2Rlcy9saXN0Lmpzb24nKVxuXG5mdW5jdGlvbiBnZXRDaXBoZXJzICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1vZGVzKVxufVxuXG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGV4cG9ydHMuQ2lwaGVyID0gY2lwaGVycy5jcmVhdGVDaXBoZXJcbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBleHBvcnRzLkNpcGhlcml2ID0gY2lwaGVycy5jcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGV4cG9ydHMuRGVjaXBoZXIgPSBkZWNpcGhlcnMuY3JlYXRlRGVjaXBoZXJcbmV4cG9ydHMuY3JlYXRlRGVjaXBoZXJpdiA9IGV4cG9ydHMuRGVjaXBoZXJpdiA9IGRlY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2XG5leHBvcnRzLmxpc3RDaXBoZXJzID0gZXhwb3J0cy5nZXRDaXBoZXJzID0gZ2V0Q2lwaGVyc1xuIiwidmFyIEF1dGhDaXBoZXIgPSByZXF1aXJlKCcuL2F1dGhDaXBoZXInKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBTdHJlYW1DaXBoZXIgPSByZXF1aXJlKCcuL3N0cmVhbUNpcGhlcicpXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBlYnRrID0gcmVxdWlyZSgnZXZwX2J5dGVzdG9rZXknKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG5mdW5jdGlvbiBEZWNpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fbGFzdCA9IHZvaWQgMFxuICB0aGlzLl9jaXBoZXIgPSBuZXcgYWVzLkFFUyhrZXkpXG4gIHRoaXMuX3ByZXYgPSBCdWZmZXIuZnJvbShpdilcbiAgdGhpcy5fbW9kZSA9IG1vZGVcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSB0cnVlXG59XG5cbmluaGVyaXRzKERlY2lwaGVyLCBUcmFuc2Zvcm0pXG5cbkRlY2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG4gIHdoaWxlICgoY2h1bmsgPSB0aGlzLl9jYWNoZS5nZXQodGhpcy5fYXV0b3BhZGRpbmcpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dClcbn1cblxuRGVjaXBoZXIucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNodW5rID0gdGhpcy5fY2FjaGUuZmx1c2goKVxuICBpZiAodGhpcy5fYXV0b3BhZGRpbmcpIHtcbiAgICByZXR1cm4gdW5wYWQodGhpcy5fbW9kZS5kZWNyeXB0KHRoaXMsIGNodW5rKSlcbiAgfSBlbHNlIGlmIChjaHVuaykge1xuICAgIHRocm93IG5ldyBFcnJvcignZGF0YSBub3QgbXVsdGlwbGUgb2YgYmxvY2sgbGVuZ3RoJylcbiAgfVxufVxuXG5EZWNpcGhlci5wcm90b3R5cGUuc2V0QXV0b1BhZGRpbmcgPSBmdW5jdGlvbiAoc2V0VG8pIHtcbiAgdGhpcy5fYXV0b3BhZGRpbmcgPSAhIXNldFRvXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIFNwbGl0dGVyICgpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuY2FjaGUsIGRhdGFdKVxufVxuXG5TcGxpdHRlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGF1dG9QYWRkaW5nKSB7XG4gIHZhciBvdXRcbiAgaWYgKGF1dG9QYWRkaW5nKSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID4gMTYpIHtcbiAgICAgIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgICB0aGlzLmNhY2hlID0gdGhpcy5jYWNoZS5zbGljZSgxNilcbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgICBvdXQgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cblxuU3BsaXR0ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jYWNoZS5sZW5ndGgpIHJldHVybiB0aGlzLmNhY2hlXG59XG5cbmZ1bmN0aW9uIHVucGFkIChsYXN0KSB7XG4gIHZhciBwYWRkZWQgPSBsYXN0WzE1XVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBwYWRkZWQpIHtcbiAgICBpZiAobGFzdFsoaSArICgxNiAtIHBhZGRlZCkpXSAhPT0gcGFkZGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VuYWJsZSB0byBkZWNyeXB0IGRhdGEnKVxuICAgIH1cbiAgfVxuICBpZiAocGFkZGVkID09PSAxNikgcmV0dXJuXG5cbiAgcmV0dXJuIGxhc3Quc2xpY2UoMCwgMTYgLSBwYWRkZWQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyaXYgKHN1aXRlLCBwYXNzd29yZCwgaXYpIHtcbiAgdmFyIGNvbmZpZyA9IE1PREVTW3N1aXRlLnRvTG93ZXJDYXNlKCldXG4gIGlmICghY29uZmlnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuXG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICBpZiAoY29uZmlnLm1vZGUgIT09ICdHQ00nICYmIGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuXG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09ICdzdHJpbmcnKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkKVxuICBpZiAocGFzc3dvcmQubGVuZ3RoICE9PSBjb25maWcua2V5IC8gOCkgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBrZXkgbGVuZ3RoICcgKyBwYXNzd29yZC5sZW5ndGgpXG5cbiAgaWYgKGNvbmZpZy50eXBlID09PSAnc3RyZWFtJykge1xuICAgIHJldHVybiBuZXcgU3RyZWFtQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gJ2F1dGgnKSB7XG4gICAgcmV0dXJuIG5ldyBBdXRoQ2lwaGVyKGNvbmZpZy5tb2R1bGUsIHBhc3N3b3JkLCBpdiwgdHJ1ZSlcbiAgfVxuXG4gIHJldHVybiBuZXcgRGVjaXBoZXIoY29uZmlnLm1vZHVsZSwgcGFzc3dvcmQsIGl2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXlzLmtleSwga2V5cy5pdilcbn1cblxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlciA9IGNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBjcmVhdGVEZWNpcGhlcml2XG4iLCJ2YXIgTU9ERVMgPSByZXF1aXJlKCcuL21vZGVzJylcbnZhciBBdXRoQ2lwaGVyID0gcmVxdWlyZSgnLi9hdXRoQ2lwaGVyJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFN0cmVhbUNpcGhlciA9IHJlcXVpcmUoJy4vc3RyZWFtQ2lwaGVyJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG52YXIgYWVzID0gcmVxdWlyZSgnLi9hZXMnKVxudmFyIGVidGsgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIENpcGhlciAobW9kZSwga2V5LCBpdikge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2NhY2hlID0gbmV3IFNwbGl0dGVyKClcbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX21vZGUgPSBtb2RlXG4gIHRoaXMuX2F1dG9wYWRkaW5nID0gdHJ1ZVxufVxuXG5pbmhlcml0cyhDaXBoZXIsIFRyYW5zZm9ybSlcblxuQ2lwaGVyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5fY2FjaGUuYWRkKGRhdGEpXG4gIHZhciBjaHVua1xuICB2YXIgdGhpbmdcbiAgdmFyIG91dCA9IFtdXG5cbiAgd2hpbGUgKChjaHVuayA9IHRoaXMuX2NhY2hlLmdldCgpKSkge1xuICAgIHRoaW5nID0gdGhpcy5fbW9kZS5lbmNyeXB0KHRoaXMsIGNodW5rKVxuICAgIG91dC5wdXNoKHRoaW5nKVxuICB9XG5cbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuXG52YXIgUEFERElORyA9IEJ1ZmZlci5hbGxvYygxNiwgMHgxMClcblxuQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaHVuayA9IHRoaXMuX2NhY2hlLmZsdXNoKClcbiAgaWYgKHRoaXMuX2F1dG9wYWRkaW5nKSB7XG4gICAgY2h1bmsgPSB0aGlzLl9tb2RlLmVuY3J5cHQodGhpcywgY2h1bmspXG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICByZXR1cm4gY2h1bmtcbiAgfVxuXG4gIGlmICghY2h1bmsuZXF1YWxzKFBBRERJTkcpKSB7XG4gICAgdGhpcy5fY2lwaGVyLnNjcnViKClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgbm90IG11bHRpcGxlIG9mIGJsb2NrIGxlbmd0aCcpXG4gIH1cbn1cblxuQ2lwaGVyLnByb3RvdHlwZS5zZXRBdXRvUGFkZGluZyA9IGZ1bmN0aW9uIChzZXRUbykge1xuICB0aGlzLl9hdXRvcGFkZGluZyA9ICEhc2V0VG9cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gU3BsaXR0ZXIgKCkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmNhY2hlID0gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgZGF0YV0pXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA+IDE1KSB7XG4gICAgdmFyIG91dCA9IHRoaXMuY2FjaGUuc2xpY2UoMCwgMTYpXG4gICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUuc2xpY2UoMTYpXG4gICAgcmV0dXJuIG91dFxuICB9XG4gIHJldHVybiBudWxsXG59XG5cblNwbGl0dGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGxlbiA9IDE2IC0gdGhpcy5jYWNoZS5sZW5ndGhcbiAgdmFyIHBhZEJ1ZmYgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZEJ1ZmYud3JpdGVVSW50OChsZW4sIGkpXG4gIH1cblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChbdGhpcy5jYWNoZSwgcGFkQnVmZl0pXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlcml2IChzdWl0ZSwgcGFzc3dvcmQsIGl2KSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSAnc3RyaW5nJykgcGFzc3dvcmQgPSBCdWZmZXIuZnJvbShwYXNzd29yZClcbiAgaWYgKHBhc3N3b3JkLmxlbmd0aCAhPT0gY29uZmlnLmtleSAvIDgpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQga2V5IGxlbmd0aCAnICsgcGFzc3dvcmQubGVuZ3RoKVxuXG4gIGlmICh0eXBlb2YgaXYgPT09ICdzdHJpbmcnKSBpdiA9IEJ1ZmZlci5mcm9tKGl2KVxuICBpZiAoY29uZmlnLm1vZGUgIT09ICdHQ00nICYmIGl2Lmxlbmd0aCAhPT0gY29uZmlnLml2KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGl2IGxlbmd0aCAnICsgaXYubGVuZ3RoKVxuXG4gIGlmIChjb25maWcudHlwZSA9PT0gJ3N0cmVhbScpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbUNpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH0gZWxzZSBpZiAoY29uZmlnLnR5cGUgPT09ICdhdXRoJykge1xuICAgIHJldHVybiBuZXcgQXV0aENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG4gIH1cblxuICByZXR1cm4gbmV3IENpcGhlcihjb25maWcubW9kdWxlLCBwYXNzd29yZCwgaXYpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb25maWcgPSBNT0RFU1tzdWl0ZS50b0xvd2VyQ2FzZSgpXVxuICBpZiAoIWNvbmZpZykgdGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBzdWl0ZSB0eXBlJylcblxuICB2YXIga2V5cyA9IGVidGsocGFzc3dvcmQsIGZhbHNlLCBjb25maWcua2V5LCBjb25maWcuaXYpXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5cbmV4cG9ydHMuY3JlYXRlQ2lwaGVyaXYgPSBjcmVhdGVDaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBjcmVhdGVDaXBoZXJcbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFpFUk9FUyA9IEJ1ZmZlci5hbGxvYygxNiwgMClcblxuZnVuY3Rpb24gdG9BcnJheSAoYnVmKSB7XG4gIHJldHVybiBbXG4gICAgYnVmLnJlYWRVSW50MzJCRSgwKSxcbiAgICBidWYucmVhZFVJbnQzMkJFKDQpLFxuICAgIGJ1Zi5yZWFkVUludDMyQkUoOCksXG4gICAgYnVmLnJlYWRVSW50MzJCRSgxMilcbiAgXVxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkgKG91dCkge1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbMF0gPj4+IDAsIDApXG4gIGJ1Zi53cml0ZVVJbnQzMkJFKG91dFsxXSA+Pj4gMCwgNClcbiAgYnVmLndyaXRlVUludDMyQkUob3V0WzJdID4+PiAwLCA4KVxuICBidWYud3JpdGVVSW50MzJCRShvdXRbM10gPj4+IDAsIDEyKVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIEdIQVNIIChrZXkpIHtcbiAgdGhpcy5oID0ga2V5XG4gIHRoaXMuc3RhdGUgPSBCdWZmZXIuYWxsb2MoMTYsIDApXG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMClcbn1cblxuLy8gZnJvbSBodHRwOi8vYml0d2lzZXNoaWZ0bGVmdC5naXRodWIuaW8vc2pjbC9kb2Mvc3ltYm9scy9zcmMvY29yZV9nY20uanMuaHRtbFxuLy8gYnkgSnVobyBWw6Row6QtSGVydHR1YVxuR0hBU0gucHJvdG90eXBlLmdoYXNoID0gZnVuY3Rpb24gKGJsb2NrKSB7XG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGJsb2NrLmxlbmd0aCkge1xuICAgIHRoaXMuc3RhdGVbaV0gXj0gYmxvY2tbaV1cbiAgfVxuICB0aGlzLl9tdWx0aXBseSgpXG59XG5cbkdIQVNILnByb3RvdHlwZS5fbXVsdGlwbHkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBWaSA9IHRvQXJyYXkodGhpcy5oKVxuICB2YXIgWmkgPSBbMCwgMCwgMCwgMF1cbiAgdmFyIGosIHhpLCBsc2JWaVxuICB2YXIgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCAxMjgpIHtcbiAgICB4aSA9ICh0aGlzLnN0YXRlW35+KGkgLyA4KV0gJiAoMSA8PCAoNyAtIChpICUgOCkpKSkgIT09IDBcbiAgICBpZiAoeGkpIHtcbiAgICAgIC8vIFpfaSsxID0gWl9pIF4gVl9pXG4gICAgICBaaVswXSBePSBWaVswXVxuICAgICAgWmlbMV0gXj0gVmlbMV1cbiAgICAgIFppWzJdIF49IFZpWzJdXG4gICAgICBaaVszXSBePSBWaVszXVxuICAgIH1cblxuICAgIC8vIFN0b3JlIHRoZSB2YWx1ZSBvZiBMU0IoVl9pKVxuICAgIGxzYlZpID0gKFZpWzNdICYgMSkgIT09IDBcblxuICAgIC8vIFZfaSsxID0gVl9pID4+IDFcbiAgICBmb3IgKGogPSAzOyBqID4gMDsgai0tKSB7XG4gICAgICBWaVtqXSA9IChWaVtqXSA+Pj4gMSkgfCAoKFZpW2ogLSAxXSAmIDEpIDw8IDMxKVxuICAgIH1cbiAgICBWaVswXSA9IFZpWzBdID4+PiAxXG5cbiAgICAvLyBJZiBMU0IoVl9pKSBpcyAxLCBWX2krMSA9IChWX2kgPj4gMSkgXiBSXG4gICAgaWYgKGxzYlZpKSB7XG4gICAgICBWaVswXSA9IFZpWzBdIF4gKDB4ZTEgPDwgMjQpXG4gICAgfVxuICB9XG4gIHRoaXMuc3RhdGUgPSBmcm9tQXJyYXkoWmkpXG59XG5cbkdIQVNILnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIHRoaXMuY2FjaGUgPSBCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBidWZdKVxuICB2YXIgY2h1bmtcbiAgd2hpbGUgKHRoaXMuY2FjaGUubGVuZ3RoID49IDE2KSB7XG4gICAgY2h1bmsgPSB0aGlzLmNhY2hlLnNsaWNlKDAsIDE2KVxuICAgIHRoaXMuY2FjaGUgPSB0aGlzLmNhY2hlLnNsaWNlKDE2KVxuICAgIHRoaXMuZ2hhc2goY2h1bmspXG4gIH1cbn1cblxuR0hBU0gucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gKGFibCwgYmwpIHtcbiAgaWYgKHRoaXMuY2FjaGUubGVuZ3RoKSB7XG4gICAgdGhpcy5naGFzaChCdWZmZXIuY29uY2F0KFt0aGlzLmNhY2hlLCBaRVJPRVNdLCAxNikpXG4gIH1cblxuICB0aGlzLmdoYXNoKGZyb21BcnJheShbMCwgYWJsLCAwLCBibF0pKVxuICByZXR1cm4gdGhpcy5zdGF0ZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdIQVNIXG4iLCJmdW5jdGlvbiBpbmNyMzIgKGl2KSB7XG4gIHZhciBsZW4gPSBpdi5sZW5ndGhcbiAgdmFyIGl0ZW1cbiAgd2hpbGUgKGxlbi0tKSB7XG4gICAgaXRlbSA9IGl2LnJlYWRVSW50OChsZW4pXG4gICAgaWYgKGl0ZW0gPT09IDI1NSkge1xuICAgICAgaXYud3JpdGVVSW50OCgwLCBsZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZW0rK1xuICAgICAgaXYud3JpdGVVSW50OChpdGVtLCBsZW4pXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBpbmNyMzJcbiIsInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGJsb2NrKSB7XG4gIHZhciBkYXRhID0geG9yKGJsb2NrLCBzZWxmLl9wcmV2KVxuXG4gIHNlbGYuX3ByZXYgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKGRhdGEpXG4gIHJldHVybiBzZWxmLl9wcmV2XG59XG5cbmV4cG9ydHMuZGVjcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICB2YXIgcGFkID0gc2VsZi5fcHJldlxuXG4gIHNlbGYuX3ByZXYgPSBibG9ja1xuICB2YXIgb3V0ID0gc2VsZi5fY2lwaGVyLmRlY3J5cHRCbG9jayhibG9jaylcblxuICByZXR1cm4geG9yKG91dCwgcGFkKVxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgeG9yID0gcmVxdWlyZSgnYnVmZmVyLXhvcicpXG5cbmZ1bmN0aW9uIGVuY3J5cHRTdGFydCAoc2VsZiwgZGF0YSwgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gZGF0YS5sZW5ndGhcbiAgdmFyIG91dCA9IHhvcihkYXRhLCBzZWxmLl9jYWNoZSlcbiAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jYWNoZS5zbGljZShsZW4pXG4gIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtzZWxmLl9wcmV2LCBkZWNyeXB0ID8gZGF0YSA6IG91dF0pXG4gIHJldHVybiBvdXRcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGRhdGEsIGRlY3J5cHQpIHtcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKVxuICB2YXIgbGVuXG5cbiAgd2hpbGUgKGRhdGEubGVuZ3RoKSB7XG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgc2VsZi5fY2FjaGUgPSBzZWxmLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHNlbGYuX3ByZXYpXG4gICAgICBzZWxmLl9wcmV2ID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gICAgfVxuXG4gICAgaWYgKHNlbGYuX2NhY2hlLmxlbmd0aCA8PSBkYXRhLmxlbmd0aCkge1xuICAgICAgbGVuID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gICAgICBvdXQgPSBCdWZmZXIuY29uY2F0KFtvdXQsIGVuY3J5cHRTdGFydChzZWxmLCBkYXRhLnNsaWNlKDAsIGxlbiksIGRlY3J5cHQpXSlcbiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKGxlbilcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbb3V0LCBlbmNyeXB0U3RhcnQoc2VsZiwgZGF0YSwgZGVjcnlwdCldKVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0XG59XG4iLCJ2YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gZW5jcnlwdEJ5dGUgKHNlbGYsIGJ5dGVQYXJhbSwgZGVjcnlwdCkge1xuICB2YXIgcGFkXG4gIHZhciBpID0gLTFcbiAgdmFyIGxlbiA9IDhcbiAgdmFyIG91dCA9IDBcbiAgdmFyIGJpdCwgdmFsdWVcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgICBiaXQgPSAoYnl0ZVBhcmFtICYgKDEgPDwgKDcgLSBpKSkpID8gMHg4MCA6IDBcbiAgICB2YWx1ZSA9IHBhZFswXSBeIGJpdFxuICAgIG91dCArPSAoKHZhbHVlICYgMHg4MCkgPj4gKGkgJSA4KSlcbiAgICBzZWxmLl9wcmV2ID0gc2hpZnRJbihzZWxmLl9wcmV2LCBkZWNyeXB0ID8gYml0IDogdmFsdWUpXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBzaGlmdEluIChidWZmZXIsIHZhbHVlKSB7XG4gIHZhciBsZW4gPSBidWZmZXIubGVuZ3RoXG4gIHZhciBpID0gLTFcbiAgdmFyIG91dCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShidWZmZXIubGVuZ3RoKVxuICBidWZmZXIgPSBCdWZmZXIuY29uY2F0KFtidWZmZXIsIEJ1ZmZlci5mcm9tKFt2YWx1ZV0pXSlcblxuICB3aGlsZSAoKytpIDwgbGVuKSB7XG4gICAgb3V0W2ldID0gYnVmZmVyW2ldIDw8IDEgfCBidWZmZXJbaSArIDFdID4+ICg3KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuXG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmssIGRlY3J5cHQpIHtcbiAgdmFyIGxlbiA9IGNodW5rLmxlbmd0aFxuICB2YXIgb3V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbilcbiAgdmFyIGkgPSAtMVxuXG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBvdXRbaV0gPSBlbmNyeXB0Qnl0ZShzZWxmLCBjaHVua1tpXSwgZGVjcnlwdClcbiAgfVxuXG4gIHJldHVybiBvdXRcbn1cbiIsImZ1bmN0aW9uIGVuY3J5cHRCeXRlIChzZWxmLCBieXRlUGFyYW0sIGRlY3J5cHQpIHtcbiAgdmFyIHBhZCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgdmFyIG91dCA9IHBhZFswXSBeIGJ5dGVQYXJhbVxuXG4gIHNlbGYuX3ByZXYgPSBCdWZmZXIuY29uY2F0KFtcbiAgICBzZWxmLl9wcmV2LnNsaWNlKDEpLFxuICAgIEJ1ZmZlci5mcm9tKFtkZWNyeXB0ID8gYnl0ZVBhcmFtIDogb3V0XSlcbiAgXSlcblxuICByZXR1cm4gb3V0XG59XG5cbmV4cG9ydHMuZW5jcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBjaHVuaywgZGVjcnlwdCkge1xuICB2YXIgbGVuID0gY2h1bmsubGVuZ3RoXG4gIHZhciBvdXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuKVxuICB2YXIgaSA9IC0xXG5cbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIG91dFtpXSA9IGVuY3J5cHRCeXRlKHNlbGYsIGNodW5rW2ldLCBkZWNyeXB0KVxuICB9XG5cbiAgcmV0dXJuIG91dFxufVxuIiwidmFyIHhvciA9IHJlcXVpcmUoJ2J1ZmZlci14b3InKVxuXG52YXIgaW5jcjMyID0gcmVxdWlyZSgnLi4vaW5jcjMyJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgdmFyIG91dCA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2tSYXcoc2VsZi5fcHJldilcbiAgaW5jcjMyKHNlbGYuX3ByZXYpXG4gIHJldHVybiBvdXRcbn1cblxudmFyIGJsb2NrU2l6ZSA9IDE2XG5leHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgY2h1bmspIHtcbiAgdmFyIGNodW5rTnVtID0gTWF0aC5jZWlsKGNodW5rLmxlbmd0aCAvIGJsb2NrU2l6ZSlcbiAgdmFyIHN0YXJ0ID0gc2VsZi5fY2FjaGUubGVuZ3RoXG4gIHNlbGYuX2NhY2hlID0gQnVmZmVyLmNvbmNhdChbXG4gICAgc2VsZi5fY2FjaGUsXG4gICAgQnVmZmVyLmFsbG9jVW5zYWZlKGNodW5rTnVtICogYmxvY2tTaXplKVxuICBdKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNodW5rTnVtOyBpKyspIHtcbiAgICB2YXIgb3V0ID0gZ2V0QmxvY2soc2VsZilcbiAgICB2YXIgb2Zmc2V0ID0gc3RhcnQgKyBpICogYmxvY2tTaXplXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbMF0sIG9mZnNldCArIDApXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbMV0sIG9mZnNldCArIDQpXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbMl0sIG9mZnNldCArIDgpXG4gICAgc2VsZi5fY2FjaGUud3JpdGVVSW50MzJCRShvdXRbM10sIG9mZnNldCArIDEyKVxuICB9XG4gIHZhciBwYWQgPSBzZWxmLl9jYWNoZS5zbGljZSgwLCBjaHVuay5sZW5ndGgpXG4gIHNlbGYuX2NhY2hlID0gc2VsZi5fY2FjaGUuc2xpY2UoY2h1bmsubGVuZ3RoKVxuICByZXR1cm4geG9yKGNodW5rLCBwYWQpXG59XG4iLCJleHBvcnRzLmVuY3J5cHQgPSBmdW5jdGlvbiAoc2VsZiwgYmxvY2spIHtcbiAgcmV0dXJuIHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soYmxvY2spXG59XG5cbmV4cG9ydHMuZGVjcnlwdCA9IGZ1bmN0aW9uIChzZWxmLCBibG9jaykge1xuICByZXR1cm4gc2VsZi5fY2lwaGVyLmRlY3J5cHRCbG9jayhibG9jaylcbn1cbiIsInZhciBtb2RlTW9kdWxlcyA9IHtcbiAgRUNCOiByZXF1aXJlKCcuL2VjYicpLFxuICBDQkM6IHJlcXVpcmUoJy4vY2JjJyksXG4gIENGQjogcmVxdWlyZSgnLi9jZmInKSxcbiAgQ0ZCODogcmVxdWlyZSgnLi9jZmI4JyksXG4gIENGQjE6IHJlcXVpcmUoJy4vY2ZiMScpLFxuICBPRkI6IHJlcXVpcmUoJy4vb2ZiJyksXG4gIENUUjogcmVxdWlyZSgnLi9jdHInKSxcbiAgR0NNOiByZXF1aXJlKCcuL2N0cicpXG59XG5cbnZhciBtb2RlcyA9IHJlcXVpcmUoJy4vbGlzdC5qc29uJylcblxuZm9yICh2YXIga2V5IGluIG1vZGVzKSB7XG4gIG1vZGVzW2tleV0ubW9kdWxlID0gbW9kZU1vZHVsZXNbbW9kZXNba2V5XS5tb2RlXVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1vZGVzXG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiYWVzLTEyOC1lY2JcIjoge1xuICAgIFwiY2lwaGVyXCI6IFwiQUVTXCIsXG4gICAgXCJrZXlcIjogMTI4LFxuICAgIFwiaXZcIjogMCxcbiAgICBcIm1vZGVcIjogXCJFQ0JcIixcbiAgICBcInR5cGVcIjogXCJibG9ja1wiXG4gIH0sXG4gIFwiYWVzLTE5Mi1lY2JcIjoge1xuICAgIFwiY2lwaGVyXCI6IFwiQUVTXCIsXG4gICAgXCJrZXlcIjogMTkyLFxuICAgIFwiaXZcIjogMCxcbiAgICBcIm1vZGVcIjogXCJFQ0JcIixcbiAgICBcInR5cGVcIjogXCJibG9ja1wiXG4gIH0sXG4gIFwiYWVzLTI1Ni1lY2JcIjoge1xuICAgIFwiY2lwaGVyXCI6IFwiQUVTXCIsXG4gICAgXCJrZXlcIjogMjU2LFxuICAgIFwiaXZcIjogMCxcbiAgICBcIm1vZGVcIjogXCJFQ0JcIixcbiAgICBcInR5cGVcIjogXCJibG9ja1wiXG4gIH0sXG4gIFwiYWVzLTEyOC1jYmNcIjoge1xuICAgIFwiY2lwaGVyXCI6IFwiQUVTXCIsXG4gICAgXCJrZXlcIjogMTI4LFxuICAgIFwiaXZcIjogMTYsXG4gICAgXCJtb2RlXCI6IFwiQ0JDXCIsXG4gICAgXCJ0eXBlXCI6IFwiYmxvY2tcIlxuICB9LFxuICBcImFlcy0xOTItY2JjXCI6IHtcbiAgICBcImNpcGhlclwiOiBcIkFFU1wiLFxuICAgIFwia2V5XCI6IDE5MixcbiAgICBcIml2XCI6IDE2LFxuICAgIFwibW9kZVwiOiBcIkNCQ1wiLFxuICAgIFwidHlwZVwiOiBcImJsb2NrXCJcbiAgfSxcbiAgXCJhZXMtMjU2LWNiY1wiOiB7XG4gICAgXCJjaXBoZXJcIjogXCJBRVNcIixcbiAgICBcImtleVwiOiAyNTYsXG4gICAgXCJpdlwiOiAxNixcbiAgICBcIm1vZGVcIjogXCJDQkNcIixcbiAgICBcInR5cGVcIjogXCJibG9ja1wiXG4gIH0sXG4gIFwiYWVzMTI4XCI6IHtcbiAgICBcImNpcGhlclwiOiBcIkFFU1wiLFxuICAgIFwia2V5XCI6IDEyOCxcbiAgICBcIml2XCI6IDE2LFxuICAgIFwibW9kZVwiOiBcIkNCQ1wiLFxuICAgIFwidHlwZVwiOiBcImJsb2NrXCJcbiAgfSxcbiAgXCJhZXMxOTJcIjoge1xuICAgIFwiY2lwaGVyXCI6IFwiQUVTXCIsXG4gICAgXCJrZXlcIjogMTkyLFxuICAgIFwiaXZcIjogMTYsXG4gICAgXCJtb2RlXCI6IFwiQ0JDXCIsXG4gICAgXCJ0eXBlXCI6IFwiYmxvY2tcIlxuICB9LFxuICBcImFlczI1NlwiOiB7XG4gICAgXCJjaXBoZXJcIjogXCJBRVNcIixcbiAgICBcImtleVwiOiAyNTYsXG4gICAgXCJpdlwiOiAxNixcbiAgICBcIm1vZGVcIjogXCJDQkNcIixcbiAgICBcInR5cGVcIjogXCJibG9ja1wiXG4gIH0sXG4gIFwiYWVzLTEyOC1jZmJcIjoge1xuICAgIFwiY2lwaGVyXCI6IFwiQUVTXCIsXG4gICAgXCJrZXlcIjogMTI4LFxuICAgIFwiaXZcIjogMTYsXG4gICAgXCJtb2RlXCI6IFwiQ0ZCXCIsXG4gICAgXCJ0eXBlXCI6IFwic3RyZWFtXCJcbiAgfSxcbiAgXCJhZXMtMTkyLWNmYlwiOiB7XG4gICAgXCJjaXBoZXJcIjogXCJBRVNcIixcbiAgICBcImtleVwiOiAxOTIsXG4gICAgXCJpdlwiOiAxNixcbiAgICBcIm1vZGVcIjogXCJDRkJcIixcbiAgICBcInR5cGVcIjogXCJzdHJlYW1cIlxuICB9LFxuICBcImFlcy0yNTYtY2ZiXCI6IHtcbiAgICBcImNpcGhlclwiOiBcIkFFU1wiLFxuICAgIFwia2V5XCI6IDI1NixcbiAgICBcIml2XCI6IDE2LFxuICAgIFwibW9kZVwiOiBcIkNGQlwiLFxuICAgIFwidHlwZVwiOiBcInN0cmVhbVwiXG4gIH0sXG4gIFwiYWVzLTEyOC1jZmI4XCI6IHtcbiAgICBcImNpcGhlclwiOiBcIkFFU1wiLFxuICAgIFwia2V5XCI6IDEyOCxcbiAgICBcIml2XCI6IDE2LFxuICAgIFwibW9kZVwiOiBcIkNGQjhcIixcbiAgICBcInR5cGVcIjogXCJzdHJlYW1cIlxuICB9LFxuICBcImFlcy0xOTItY2ZiOFwiOiB7XG4gICAgXCJjaXBoZXJcIjogXCJBRVNcIixcbiAgICBcImtleVwiOiAxOTIsXG4gICAgXCJpdlwiOiAxNixcbiAgICBcIm1vZGVcIjogXCJDRkI4XCIsXG4gICAgXCJ0eXBlXCI6IFwic3RyZWFtXCJcbiAgfSxcbiAgXCJhZXMtMjU2LWNmYjhcIjoge1xuICAgIFwiY2lwaGVyXCI6IFwiQUVTXCIsXG4gICAgXCJrZXlcIjogMjU2LFxuICAgIFwiaXZcIjogMTYsXG4gICAgXCJtb2RlXCI6IFwiQ0ZCOFwiLFxuICAgIFwidHlwZVwiOiBcInN0cmVhbVwiXG4gIH0sXG4gIFwiYWVzLTEyOC1jZmIxXCI6IHtcbiAgICBcImNpcGhlclwiOiBcIkFFU1wiLFxuICAgIFwia2V5XCI6IDEyOCxcbiAgICBcIml2XCI6IDE2LFxuICAgIFwibW9kZVwiOiBcIkNGQjFcIixcbiAgICBcInR5cGVcIjogXCJzdHJlYW1cIlxuICB9LFxuICBcImFlcy0xOTItY2ZiMVwiOiB7XG4gICAgXCJjaXBoZXJcIjogXCJBRVNcIixcbiAgICBcImtleVwiOiAxOTIsXG4gICAgXCJpdlwiOiAxNixcbiAgICBcIm1vZGVcIjogXCJDRkIxXCIsXG4gICAgXCJ0eXBlXCI6IFwic3RyZWFtXCJcbiAgfSxcbiAgXCJhZXMtMjU2LWNmYjFcIjoge1xuICAgIFwiY2lwaGVyXCI6IFwiQUVTXCIsXG4gICAgXCJrZXlcIjogMjU2LFxuICAgIFwiaXZcIjogMTYsXG4gICAgXCJtb2RlXCI6IFwiQ0ZCMVwiLFxuICAgIFwidHlwZVwiOiBcInN0cmVhbVwiXG4gIH0sXG4gIFwiYWVzLTEyOC1vZmJcIjoge1xuICAgIFwiY2lwaGVyXCI6IFwiQUVTXCIsXG4gICAgXCJrZXlcIjogMTI4LFxuICAgIFwiaXZcIjogMTYsXG4gICAgXCJtb2RlXCI6IFwiT0ZCXCIsXG4gICAgXCJ0eXBlXCI6IFwic3RyZWFtXCJcbiAgfSxcbiAgXCJhZXMtMTkyLW9mYlwiOiB7XG4gICAgXCJjaXBoZXJcIjogXCJBRVNcIixcbiAgICBcImtleVwiOiAxOTIsXG4gICAgXCJpdlwiOiAxNixcbiAgICBcIm1vZGVcIjogXCJPRkJcIixcbiAgICBcInR5cGVcIjogXCJzdHJlYW1cIlxuICB9LFxuICBcImFlcy0yNTYtb2ZiXCI6IHtcbiAgICBcImNpcGhlclwiOiBcIkFFU1wiLFxuICAgIFwia2V5XCI6IDI1NixcbiAgICBcIml2XCI6IDE2LFxuICAgIFwibW9kZVwiOiBcIk9GQlwiLFxuICAgIFwidHlwZVwiOiBcInN0cmVhbVwiXG4gIH0sXG4gIFwiYWVzLTEyOC1jdHJcIjoge1xuICAgIFwiY2lwaGVyXCI6IFwiQUVTXCIsXG4gICAgXCJrZXlcIjogMTI4LFxuICAgIFwiaXZcIjogMTYsXG4gICAgXCJtb2RlXCI6IFwiQ1RSXCIsXG4gICAgXCJ0eXBlXCI6IFwic3RyZWFtXCJcbiAgfSxcbiAgXCJhZXMtMTkyLWN0clwiOiB7XG4gICAgXCJjaXBoZXJcIjogXCJBRVNcIixcbiAgICBcImtleVwiOiAxOTIsXG4gICAgXCJpdlwiOiAxNixcbiAgICBcIm1vZGVcIjogXCJDVFJcIixcbiAgICBcInR5cGVcIjogXCJzdHJlYW1cIlxuICB9LFxuICBcImFlcy0yNTYtY3RyXCI6IHtcbiAgICBcImNpcGhlclwiOiBcIkFFU1wiLFxuICAgIFwia2V5XCI6IDI1NixcbiAgICBcIml2XCI6IDE2LFxuICAgIFwibW9kZVwiOiBcIkNUUlwiLFxuICAgIFwidHlwZVwiOiBcInN0cmVhbVwiXG4gIH0sXG4gIFwiYWVzLTEyOC1nY21cIjoge1xuICAgIFwiY2lwaGVyXCI6IFwiQUVTXCIsXG4gICAgXCJrZXlcIjogMTI4LFxuICAgIFwiaXZcIjogMTIsXG4gICAgXCJtb2RlXCI6IFwiR0NNXCIsXG4gICAgXCJ0eXBlXCI6IFwiYXV0aFwiXG4gIH0sXG4gIFwiYWVzLTE5Mi1nY21cIjoge1xuICAgIFwiY2lwaGVyXCI6IFwiQUVTXCIsXG4gICAgXCJrZXlcIjogMTkyLFxuICAgIFwiaXZcIjogMTIsXG4gICAgXCJtb2RlXCI6IFwiR0NNXCIsXG4gICAgXCJ0eXBlXCI6IFwiYXV0aFwiXG4gIH0sXG4gIFwiYWVzLTI1Ni1nY21cIjoge1xuICAgIFwiY2lwaGVyXCI6IFwiQUVTXCIsXG4gICAgXCJrZXlcIjogMjU2LFxuICAgIFwiaXZcIjogMTIsXG4gICAgXCJtb2RlXCI6IFwiR0NNXCIsXG4gICAgXCJ0eXBlXCI6IFwiYXV0aFwiXG4gIH1cbn1cbiIsInZhciB4b3IgPSByZXF1aXJlKCdidWZmZXIteG9yJylcblxuZnVuY3Rpb24gZ2V0QmxvY2sgKHNlbGYpIHtcbiAgc2VsZi5fcHJldiA9IHNlbGYuX2NpcGhlci5lbmNyeXB0QmxvY2soc2VsZi5fcHJldilcbiAgcmV0dXJuIHNlbGYuX3ByZXZcbn1cblxuZXhwb3J0cy5lbmNyeXB0ID0gZnVuY3Rpb24gKHNlbGYsIGNodW5rKSB7XG4gIHdoaWxlIChzZWxmLl9jYWNoZS5sZW5ndGggPCBjaHVuay5sZW5ndGgpIHtcbiAgICBzZWxmLl9jYWNoZSA9IEJ1ZmZlci5jb25jYXQoW3NlbGYuX2NhY2hlLCBnZXRCbG9jayhzZWxmKV0pXG4gIH1cblxuICB2YXIgcGFkID0gc2VsZi5fY2FjaGUuc2xpY2UoMCwgY2h1bmsubGVuZ3RoKVxuICBzZWxmLl9jYWNoZSA9IHNlbGYuX2NhY2hlLnNsaWNlKGNodW5rLmxlbmd0aClcbiAgcmV0dXJuIHhvcihjaHVuaywgcGFkKVxufVxuIiwidmFyIGFlcyA9IHJlcXVpcmUoJy4vYWVzJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gU3RyZWFtQ2lwaGVyIChtb2RlLCBrZXksIGl2LCBkZWNyeXB0KSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fY2lwaGVyID0gbmV3IGFlcy5BRVMoa2V5KVxuICB0aGlzLl9wcmV2ID0gQnVmZmVyLmZyb20oaXYpXG4gIHRoaXMuX2NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX3NlY0NhY2hlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDApXG4gIHRoaXMuX2RlY3J5cHQgPSBkZWNyeXB0XG4gIHRoaXMuX21vZGUgPSBtb2RlXG59XG5cbmluaGVyaXRzKFN0cmVhbUNpcGhlciwgVHJhbnNmb3JtKVxuXG5TdHJlYW1DaXBoZXIucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHRoaXMuX21vZGUuZW5jcnlwdCh0aGlzLCBjaHVuaywgdGhpcy5fZGVjcnlwdClcbn1cblxuU3RyZWFtQ2lwaGVyLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NpcGhlci5zY3J1YigpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyZWFtQ2lwaGVyXG4iLCJ2YXIgZWJ0ayA9IHJlcXVpcmUoJ2V2cF9ieXRlc3Rva2V5JylcbnZhciBhZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcy9icm93c2VyJylcbnZhciBERVMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWRlcycpXG52YXIgZGVzTW9kZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWRlcy9tb2RlcycpXG52YXIgYWVzTW9kZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWFlcy9tb2RlcycpXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXIgKHN1aXRlLCBwYXNzd29yZCkge1xuICB2YXIga2V5TGVuLCBpdkxlblxuICBzdWl0ZSA9IHN1aXRlLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGFlc01vZGVzW3N1aXRlXS5rZXlcbiAgICBpdkxlbiA9IGFlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2UgaWYgKGRlc01vZGVzW3N1aXRlXSkge1xuICAgIGtleUxlbiA9IGRlc01vZGVzW3N1aXRlXS5rZXkgKiA4XG4gICAgaXZMZW4gPSBkZXNNb2Rlc1tzdWl0ZV0uaXZcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG4gIHZhciBrZXlzID0gZWJ0ayhwYXNzd29yZCwgZmFsc2UsIGtleUxlbiwgaXZMZW4pXG4gIHJldHVybiBjcmVhdGVDaXBoZXJpdihzdWl0ZSwga2V5cy5rZXksIGtleXMuaXYpXG59XG5mdW5jdGlvbiBjcmVhdGVEZWNpcGhlciAoc3VpdGUsIHBhc3N3b3JkKSB7XG4gIHZhciBrZXlMZW4sIGl2TGVuXG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gYWVzTW9kZXNbc3VpdGVdLmtleVxuICAgIGl2TGVuID0gYWVzTW9kZXNbc3VpdGVdLml2XG4gIH0gZWxzZSBpZiAoZGVzTW9kZXNbc3VpdGVdKSB7XG4gICAga2V5TGVuID0gZGVzTW9kZXNbc3VpdGVdLmtleSAqIDhcbiAgICBpdkxlbiA9IGRlc01vZGVzW3N1aXRlXS5pdlxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbiAgdmFyIGtleXMgPSBlYnRrKHBhc3N3b3JkLCBmYWxzZSwga2V5TGVuLCBpdkxlbilcbiAgcmV0dXJuIGNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGtleXMua2V5LCBrZXlzLml2KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDaXBoZXJpdiAoc3VpdGUsIGtleSwgaXYpIHtcbiAgc3VpdGUgPSBzdWl0ZS50b0xvd2VyQ2FzZSgpXG4gIGlmIChhZXNNb2Rlc1tzdWl0ZV0pIHtcbiAgICByZXR1cm4gYWVzLmNyZWF0ZUNpcGhlcml2KHN1aXRlLCBrZXksIGl2KVxuICB9IGVsc2UgaWYgKGRlc01vZGVzW3N1aXRlXSkge1xuICAgIHJldHVybiBuZXcgREVTKHtcbiAgICAgIGtleToga2V5LFxuICAgICAgaXY6IGl2LFxuICAgICAgbW9kZTogc3VpdGVcbiAgICB9KVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgc3VpdGUgdHlwZScpXG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZURlY2lwaGVyaXYgKHN1aXRlLCBrZXksIGl2KSB7XG4gIHN1aXRlID0gc3VpdGUudG9Mb3dlckNhc2UoKVxuICBpZiAoYWVzTW9kZXNbc3VpdGVdKSB7XG4gICAgcmV0dXJuIGFlcy5jcmVhdGVEZWNpcGhlcml2KHN1aXRlLCBrZXksIGl2KVxuICB9IGVsc2UgaWYgKGRlc01vZGVzW3N1aXRlXSkge1xuICAgIHJldHVybiBuZXcgREVTKHtcbiAgICAgIGtleToga2V5LFxuICAgICAgaXY6IGl2LFxuICAgICAgbW9kZTogc3VpdGUsXG4gICAgICBkZWNyeXB0OiB0cnVlXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIHN1aXRlIHR5cGUnKVxuICB9XG59XG5leHBvcnRzLmNyZWF0ZUNpcGhlciA9IGV4cG9ydHMuQ2lwaGVyID0gY3JlYXRlQ2lwaGVyXG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gZXhwb3J0cy5DaXBoZXJpdiA9IGNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gZXhwb3J0cy5EZWNpcGhlciA9IGNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyaXYgPSBleHBvcnRzLkRlY2lwaGVyaXYgPSBjcmVhdGVEZWNpcGhlcml2XG5mdW5jdGlvbiBnZXRDaXBoZXJzICgpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGRlc01vZGVzKS5jb25jYXQoYWVzLmdldENpcGhlcnMoKSlcbn1cbmV4cG9ydHMubGlzdENpcGhlcnMgPSBleHBvcnRzLmdldENpcGhlcnMgPSBnZXRDaXBoZXJzXG4iLCJ2YXIgQ2lwaGVyQmFzZSA9IHJlcXVpcmUoJ2NpcGhlci1iYXNlJylcbnZhciBkZXMgPSByZXF1aXJlKCdkZXMuanMnKVxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuXG52YXIgbW9kZXMgPSB7XG4gICdkZXMtZWRlMy1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZTMnOiBkZXMuRURFLFxuICAnZGVzLWVkZS1jYmMnOiBkZXMuQ0JDLmluc3RhbnRpYXRlKGRlcy5FREUpLFxuICAnZGVzLWVkZSc6IGRlcy5FREUsXG4gICdkZXMtY2JjJzogZGVzLkNCQy5pbnN0YW50aWF0ZShkZXMuREVTKSxcbiAgJ2Rlcy1lY2InOiBkZXMuREVTXG59XG5tb2Rlcy5kZXMgPSBtb2Rlc1snZGVzLWNiYyddXG5tb2Rlcy5kZXMzID0gbW9kZXNbJ2Rlcy1lZGUzLWNiYyddXG5tb2R1bGUuZXhwb3J0cyA9IERFU1xuaW5oZXJpdHMoREVTLCBDaXBoZXJCYXNlKVxuZnVuY3Rpb24gREVTIChvcHRzKSB7XG4gIENpcGhlckJhc2UuY2FsbCh0aGlzKVxuICB2YXIgbW9kZU5hbWUgPSBvcHRzLm1vZGUudG9Mb3dlckNhc2UoKVxuICB2YXIgbW9kZSA9IG1vZGVzW21vZGVOYW1lXVxuICB2YXIgdHlwZVxuICBpZiAob3B0cy5kZWNyeXB0KSB7XG4gICAgdHlwZSA9ICdkZWNyeXB0J1xuICB9IGVsc2Uge1xuICAgIHR5cGUgPSAnZW5jcnlwdCdcbiAgfVxuICB2YXIga2V5ID0gb3B0cy5rZXlcbiAgaWYgKG1vZGVOYW1lID09PSAnZGVzLWVkZScgfHwgbW9kZU5hbWUgPT09ICdkZXMtZWRlLWNiYycpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIGtleS5zbGljZSgwLCA4KV0pXG4gIH1cbiAgdmFyIGl2ID0gb3B0cy5pdlxuICB0aGlzLl9kZXMgPSBtb2RlLmNyZWF0ZSh7XG4gICAga2V5OiBrZXksXG4gICAgaXY6IGl2LFxuICAgIHR5cGU6IHR5cGVcbiAgfSlcbn1cbkRFUy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHJldHVybiBuZXcgQnVmZmVyKHRoaXMuX2Rlcy51cGRhdGUoZGF0YSkpXG59XG5ERVMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIodGhpcy5fZGVzLmZpbmFsKCkpXG59XG4iLCJleHBvcnRzWydkZXMtZWNiJ10gPSB7XG4gIGtleTogOCxcbiAgaXY6IDBcbn1cbmV4cG9ydHNbJ2Rlcy1jYmMnXSA9IGV4cG9ydHMuZGVzID0ge1xuICBrZXk6IDgsXG4gIGl2OiA4XG59XG5leHBvcnRzWydkZXMtZWRlMy1jYmMnXSA9IGV4cG9ydHMuZGVzMyA9IHtcbiAga2V5OiAyNCxcbiAgaXY6IDhcbn1cbmV4cG9ydHNbJ2Rlcy1lZGUzJ10gPSB7XG4gIGtleTogMjQsXG4gIGl2OiAwXG59XG5leHBvcnRzWydkZXMtZWRlLWNiYyddID0ge1xuICBrZXk6IDE2LFxuICBpdjogOFxufVxuZXhwb3J0c1snZGVzLWVkZSddID0ge1xuICBrZXk6IDE2LFxuICBpdjogMFxufVxuIiwidmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGNydDtcbmZ1bmN0aW9uIGJsaW5kKHByaXYpIHtcbiAgdmFyIHIgPSBnZXRyKHByaXYpO1xuICB2YXIgYmxpbmRlciA9IHIudG9SZWQoYm4ubW9udChwcml2Lm1vZHVsdXMpKVxuICAucmVkUG93KG5ldyBibihwcml2LnB1YmxpY0V4cG9uZW50KSkuZnJvbVJlZCgpO1xuICByZXR1cm4ge1xuICAgIGJsaW5kZXI6IGJsaW5kZXIsXG4gICAgdW5ibGluZGVyOnIuaW52bShwcml2Lm1vZHVsdXMpXG4gIH07XG59XG5mdW5jdGlvbiBjcnQobXNnLCBwcml2KSB7XG4gIHZhciBibGluZHMgPSBibGluZChwcml2KTtcbiAgdmFyIGxlbiA9IHByaXYubW9kdWx1cy5ieXRlTGVuZ3RoKCk7XG4gIHZhciBtb2QgPSBibi5tb250KHByaXYubW9kdWx1cyk7XG4gIHZhciBibGluZGVkID0gbmV3IGJuKG1zZykubXVsKGJsaW5kcy5ibGluZGVyKS51bW9kKHByaXYubW9kdWx1cyk7XG4gIHZhciBjMSA9IGJsaW5kZWQudG9SZWQoYm4ubW9udChwcml2LnByaW1lMSkpO1xuICB2YXIgYzIgPSBibGluZGVkLnRvUmVkKGJuLm1vbnQocHJpdi5wcmltZTIpKTtcbiAgdmFyIHFpbnYgPSBwcml2LmNvZWZmaWNpZW50O1xuICB2YXIgcCA9IHByaXYucHJpbWUxO1xuICB2YXIgcSA9IHByaXYucHJpbWUyO1xuICB2YXIgbTEgPSBjMS5yZWRQb3cocHJpdi5leHBvbmVudDEpO1xuICB2YXIgbTIgPSBjMi5yZWRQb3cocHJpdi5leHBvbmVudDIpO1xuICBtMSA9IG0xLmZyb21SZWQoKTtcbiAgbTIgPSBtMi5mcm9tUmVkKCk7XG4gIHZhciBoID0gbTEuaXN1YihtMikuaW11bChxaW52KS51bW9kKHApO1xuICBoLmltdWwocSk7XG4gIG0yLmlhZGQoaCk7XG4gIHJldHVybiBuZXcgQnVmZmVyKG0yLmltdWwoYmxpbmRzLnVuYmxpbmRlcikudW1vZChwcml2Lm1vZHVsdXMpLnRvQXJyYXkoZmFsc2UsIGxlbikpO1xufVxuY3J0LmdldHIgPSBnZXRyO1xuZnVuY3Rpb24gZ2V0cihwcml2KSB7XG4gIHZhciBsZW4gPSBwcml2Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgciA9IG5ldyBibihyYW5kb21CeXRlcyhsZW4pKTtcbiAgd2hpbGUgKHIuY21wKHByaXYubW9kdWx1cykgPj0gIDAgfHwgIXIudW1vZChwcml2LnByaW1lMSkgfHwgIXIudW1vZChwcml2LnByaW1lMikpIHtcbiAgICByID0gbmV3IGJuKHJhbmRvbUJ5dGVzKGxlbikpO1xuICB9XG4gIHJldHVybiByO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Jyb3dzZXIvYWxnb3JpdGhtcy5qc29uJylcbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJzaGEyMjRXaXRoUlNBRW5jcnlwdGlvblwiOiB7XG4gICAgXCJzaWduXCI6IFwicnNhXCIsXG4gICAgXCJoYXNoXCI6IFwic2hhMjI0XCIsXG4gICAgXCJpZFwiOiBcIjMwMmQzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwNDA1MDAwNDFjXCJcbiAgfSxcbiAgXCJSU0EtU0hBMjI0XCI6IHtcbiAgICBcInNpZ25cIjogXCJlY2RzYS9yc2FcIixcbiAgICBcImhhc2hcIjogXCJzaGEyMjRcIixcbiAgICBcImlkXCI6IFwiMzAyZDMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjA0MDUwMDA0MWNcIlxuICB9LFxuICBcInNoYTI1NldpdGhSU0FFbmNyeXB0aW9uXCI6IHtcbiAgICBcInNpZ25cIjogXCJyc2FcIixcbiAgICBcImhhc2hcIjogXCJzaGEyNTZcIixcbiAgICBcImlkXCI6IFwiMzAzMTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAxMDUwMDA0MjBcIlxuICB9LFxuICBcIlJTQS1TSEEyNTZcIjoge1xuICAgIFwic2lnblwiOiBcImVjZHNhL3JzYVwiLFxuICAgIFwiaGFzaFwiOiBcInNoYTI1NlwiLFxuICAgIFwiaWRcIjogXCIzMDMxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDEwNTAwMDQyMFwiXG4gIH0sXG4gIFwic2hhMzg0V2l0aFJTQUVuY3J5cHRpb25cIjoge1xuICAgIFwic2lnblwiOiBcInJzYVwiLFxuICAgIFwiaGFzaFwiOiBcInNoYTM4NFwiLFxuICAgIFwiaWRcIjogXCIzMDQxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDIwNTAwMDQzMFwiXG4gIH0sXG4gIFwiUlNBLVNIQTM4NFwiOiB7XG4gICAgXCJzaWduXCI6IFwiZWNkc2EvcnNhXCIsXG4gICAgXCJoYXNoXCI6IFwic2hhMzg0XCIsXG4gICAgXCJpZFwiOiBcIjMwNDEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMjA1MDAwNDMwXCJcbiAgfSxcbiAgXCJzaGE1MTJXaXRoUlNBRW5jcnlwdGlvblwiOiB7XG4gICAgXCJzaWduXCI6IFwicnNhXCIsXG4gICAgXCJoYXNoXCI6IFwic2hhNTEyXCIsXG4gICAgXCJpZFwiOiBcIjMwNTEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMzA1MDAwNDQwXCJcbiAgfSxcbiAgXCJSU0EtU0hBNTEyXCI6IHtcbiAgICBcInNpZ25cIjogXCJlY2RzYS9yc2FcIixcbiAgICBcImhhc2hcIjogXCJzaGE1MTJcIixcbiAgICBcImlkXCI6IFwiMzA1MTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAzMDUwMDA0NDBcIlxuICB9LFxuICBcIlJTQS1TSEExXCI6IHtcbiAgICBcInNpZ25cIjogXCJyc2FcIixcbiAgICBcImhhc2hcIjogXCJzaGExXCIsXG4gICAgXCJpZFwiOiBcIjMwMjEzMDA5MDYwNTJiMGUwMzAyMWEwNTAwMDQxNFwiXG4gIH0sXG4gIFwiZWNkc2Etd2l0aC1TSEExXCI6IHtcbiAgICBcInNpZ25cIjogXCJlY2RzYVwiLFxuICAgIFwiaGFzaFwiOiBcInNoYTFcIixcbiAgICBcImlkXCI6IFwiXCJcbiAgfSxcbiAgXCJzaGEyNTZcIjoge1xuICAgIFwic2lnblwiOiBcImVjZHNhXCIsXG4gICAgXCJoYXNoXCI6IFwic2hhMjU2XCIsXG4gICAgXCJpZFwiOiBcIlwiXG4gIH0sXG4gIFwic2hhMjI0XCI6IHtcbiAgICBcInNpZ25cIjogXCJlY2RzYVwiLFxuICAgIFwiaGFzaFwiOiBcInNoYTIyNFwiLFxuICAgIFwiaWRcIjogXCJcIlxuICB9LFxuICBcInNoYTM4NFwiOiB7XG4gICAgXCJzaWduXCI6IFwiZWNkc2FcIixcbiAgICBcImhhc2hcIjogXCJzaGEzODRcIixcbiAgICBcImlkXCI6IFwiXCJcbiAgfSxcbiAgXCJzaGE1MTJcIjoge1xuICAgIFwic2lnblwiOiBcImVjZHNhXCIsXG4gICAgXCJoYXNoXCI6IFwic2hhNTEyXCIsXG4gICAgXCJpZFwiOiBcIlwiXG4gIH0sXG4gIFwiRFNBLVNIQVwiOiB7XG4gICAgXCJzaWduXCI6IFwiZHNhXCIsXG4gICAgXCJoYXNoXCI6IFwic2hhMVwiLFxuICAgIFwiaWRcIjogXCJcIlxuICB9LFxuICBcIkRTQS1TSEExXCI6IHtcbiAgICBcInNpZ25cIjogXCJkc2FcIixcbiAgICBcImhhc2hcIjogXCJzaGExXCIsXG4gICAgXCJpZFwiOiBcIlwiXG4gIH0sXG4gIFwiRFNBXCI6IHtcbiAgICBcInNpZ25cIjogXCJkc2FcIixcbiAgICBcImhhc2hcIjogXCJzaGExXCIsXG4gICAgXCJpZFwiOiBcIlwiXG4gIH0sXG4gIFwiRFNBLVdJVEgtU0hBMjI0XCI6IHtcbiAgICBcInNpZ25cIjogXCJkc2FcIixcbiAgICBcImhhc2hcIjogXCJzaGEyMjRcIixcbiAgICBcImlkXCI6IFwiXCJcbiAgfSxcbiAgXCJEU0EtU0hBMjI0XCI6IHtcbiAgICBcInNpZ25cIjogXCJkc2FcIixcbiAgICBcImhhc2hcIjogXCJzaGEyMjRcIixcbiAgICBcImlkXCI6IFwiXCJcbiAgfSxcbiAgXCJEU0EtV0lUSC1TSEEyNTZcIjoge1xuICAgIFwic2lnblwiOiBcImRzYVwiLFxuICAgIFwiaGFzaFwiOiBcInNoYTI1NlwiLFxuICAgIFwiaWRcIjogXCJcIlxuICB9LFxuICBcIkRTQS1TSEEyNTZcIjoge1xuICAgIFwic2lnblwiOiBcImRzYVwiLFxuICAgIFwiaGFzaFwiOiBcInNoYTI1NlwiLFxuICAgIFwiaWRcIjogXCJcIlxuICB9LFxuICBcIkRTQS1XSVRILVNIQTM4NFwiOiB7XG4gICAgXCJzaWduXCI6IFwiZHNhXCIsXG4gICAgXCJoYXNoXCI6IFwic2hhMzg0XCIsXG4gICAgXCJpZFwiOiBcIlwiXG4gIH0sXG4gIFwiRFNBLVNIQTM4NFwiOiB7XG4gICAgXCJzaWduXCI6IFwiZHNhXCIsXG4gICAgXCJoYXNoXCI6IFwic2hhMzg0XCIsXG4gICAgXCJpZFwiOiBcIlwiXG4gIH0sXG4gIFwiRFNBLVdJVEgtU0hBNTEyXCI6IHtcbiAgICBcInNpZ25cIjogXCJkc2FcIixcbiAgICBcImhhc2hcIjogXCJzaGE1MTJcIixcbiAgICBcImlkXCI6IFwiXCJcbiAgfSxcbiAgXCJEU0EtU0hBNTEyXCI6IHtcbiAgICBcInNpZ25cIjogXCJkc2FcIixcbiAgICBcImhhc2hcIjogXCJzaGE1MTJcIixcbiAgICBcImlkXCI6IFwiXCJcbiAgfSxcbiAgXCJEU0EtUklQRU1EMTYwXCI6IHtcbiAgICBcInNpZ25cIjogXCJkc2FcIixcbiAgICBcImhhc2hcIjogXCJybWQxNjBcIixcbiAgICBcImlkXCI6IFwiXCJcbiAgfSxcbiAgXCJyaXBlbWQxNjBXaXRoUlNBXCI6IHtcbiAgICBcInNpZ25cIjogXCJyc2FcIixcbiAgICBcImhhc2hcIjogXCJybWQxNjBcIixcbiAgICBcImlkXCI6IFwiMzAyMTMwMDkwNjA1MmIyNDAzMDIwMTA1MDAwNDE0XCJcbiAgfSxcbiAgXCJSU0EtUklQRU1EMTYwXCI6IHtcbiAgICBcInNpZ25cIjogXCJyc2FcIixcbiAgICBcImhhc2hcIjogXCJybWQxNjBcIixcbiAgICBcImlkXCI6IFwiMzAyMTMwMDkwNjA1MmIyNDAzMDIwMTA1MDAwNDE0XCJcbiAgfSxcbiAgXCJtZDVXaXRoUlNBRW5jcnlwdGlvblwiOiB7XG4gICAgXCJzaWduXCI6IFwicnNhXCIsXG4gICAgXCJoYXNoXCI6IFwibWQ1XCIsXG4gICAgXCJpZFwiOiBcIjMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDUwNTAwMDQxMFwiXG4gIH0sXG4gIFwiUlNBLU1ENVwiOiB7XG4gICAgXCJzaWduXCI6IFwicnNhXCIsXG4gICAgXCJoYXNoXCI6IFwibWQ1XCIsXG4gICAgXCJpZFwiOiBcIjMwMjAzMDBjMDYwODJhODY0ODg2ZjcwZDAyMDUwNTAwMDQxMFwiXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCIxLjMuMTMyLjAuMTBcIjogXCJzZWNwMjU2azFcIixcbiAgXCIxLjMuMTMyLjAuMzNcIjogXCJwMjI0XCIsXG4gIFwiMS4yLjg0MC4xMDA0NS4zLjEuMVwiOiBcInAxOTJcIixcbiAgXCIxLjIuODQwLjEwMDQ1LjMuMS43XCI6IFwicDI1NlwiLFxuICBcIjEuMy4xMzIuMC4zNFwiOiBcInAzODRcIixcbiAgXCIxLjMuMTMyLjAuMzVcIjogXCJwNTIxXCJcbn1cbiIsInZhciBjcmVhdGVIYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxudmFyIHN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vc2lnbicpXG52YXIgdmVyaWZ5ID0gcmVxdWlyZSgnLi92ZXJpZnknKVxuXG52YXIgYWxnb3JpdGhtcyA9IHJlcXVpcmUoJy4vYWxnb3JpdGhtcy5qc29uJylcbk9iamVjdC5rZXlzKGFsZ29yaXRobXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBhbGdvcml0aG1zW2tleV0uaWQgPSBuZXcgQnVmZmVyKGFsZ29yaXRobXNba2V5XS5pZCwgJ2hleCcpXG4gIGFsZ29yaXRobXNba2V5LnRvTG93ZXJDYXNlKCldID0gYWxnb3JpdGhtc1trZXldXG59KVxuXG5mdW5jdGlvbiBTaWduIChhbGdvcml0aG0pIHtcbiAgc3RyZWFtLldyaXRhYmxlLmNhbGwodGhpcylcblxuICB2YXIgZGF0YSA9IGFsZ29yaXRobXNbYWxnb3JpdGhtXVxuICBpZiAoIWRhdGEpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtZXNzYWdlIGRpZ2VzdCcpXG5cbiAgdGhpcy5faGFzaFR5cGUgPSBkYXRhLmhhc2hcbiAgdGhpcy5faGFzaCA9IGNyZWF0ZUhhc2goZGF0YS5oYXNoKVxuICB0aGlzLl90YWcgPSBkYXRhLmlkXG4gIHRoaXMuX3NpZ25UeXBlID0gZGF0YS5zaWduXG59XG5pbmhlcml0cyhTaWduLCBzdHJlYW0uV3JpdGFibGUpXG5cblNpZ24ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZSAoZGF0YSwgXywgZG9uZSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICBkb25lKClcbn1cblxuU2lnbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgZGF0YSA9IG5ldyBCdWZmZXIoZGF0YSwgZW5jKVxuXG4gIHRoaXMuX2hhc2gudXBkYXRlKGRhdGEpXG4gIHJldHVybiB0aGlzXG59XG5cblNpZ24ucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduTWV0aG9kIChrZXksIGVuYykge1xuICB0aGlzLmVuZCgpXG4gIHZhciBoYXNoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuICB2YXIgc2lnID0gc2lnbihoYXNoLCBrZXksIHRoaXMuX2hhc2hUeXBlLCB0aGlzLl9zaWduVHlwZSwgdGhpcy5fdGFnKVxuXG4gIHJldHVybiBlbmMgPyBzaWcudG9TdHJpbmcoZW5jKSA6IHNpZ1xufVxuXG5mdW5jdGlvbiBWZXJpZnkgKGFsZ29yaXRobSkge1xuICBzdHJlYW0uV3JpdGFibGUuY2FsbCh0aGlzKVxuXG4gIHZhciBkYXRhID0gYWxnb3JpdGhtc1thbGdvcml0aG1dXG4gIGlmICghZGF0YSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1lc3NhZ2UgZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gY3JlYXRlSGFzaChkYXRhLmhhc2gpXG4gIHRoaXMuX3RhZyA9IGRhdGEuaWRcbiAgdGhpcy5fc2lnblR5cGUgPSBkYXRhLnNpZ25cbn1cbmluaGVyaXRzKFZlcmlmeSwgc3RyZWFtLldyaXRhYmxlKVxuXG5WZXJpZnkucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIF93cml0ZSAoZGF0YSwgXywgZG9uZSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxuICBkb25lKClcbn1cblxuVmVyaWZ5LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKGRhdGEsIGVuYykge1xuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSBkYXRhID0gbmV3IEJ1ZmZlcihkYXRhLCBlbmMpXG5cbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbiAgcmV0dXJuIHRoaXNcbn1cblxuVmVyaWZ5LnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnlNZXRob2QgKGtleSwgc2lnLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBzaWcgPT09ICdzdHJpbmcnKSBzaWcgPSBuZXcgQnVmZmVyKHNpZywgZW5jKVxuXG4gIHRoaXMuZW5kKClcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoLmRpZ2VzdCgpXG4gIHJldHVybiB2ZXJpZnkoc2lnLCBoYXNoLCBrZXksIHRoaXMuX3NpZ25UeXBlLCB0aGlzLl90YWcpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNpZ24gKGFsZ29yaXRobSkge1xuICByZXR1cm4gbmV3IFNpZ24oYWxnb3JpdGhtKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVWZXJpZnkgKGFsZ29yaXRobSkge1xuICByZXR1cm4gbmV3IFZlcmlmeShhbGdvcml0aG0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBTaWduOiBjcmVhdGVTaWduLFxuICBWZXJpZnk6IGNyZWF0ZVZlcmlmeSxcbiAgY3JlYXRlU2lnbjogY3JlYXRlU2lnbixcbiAgY3JlYXRlVmVyaWZ5OiBjcmVhdGVWZXJpZnlcbn1cbiIsIi8vIG11Y2ggb2YgdGhpcyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9zZWxmLXNpZ25lZC9ibG9iL2doLXBhZ2VzL2xpYi9yc2EuanNcbnZhciBjcmVhdGVIbWFjID0gcmVxdWlyZSgnY3JlYXRlLWhtYWMnKVxudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJylcbnZhciBFQyA9IHJlcXVpcmUoJ2VsbGlwdGljJykuZWNcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcbnZhciBwYXJzZUtleXMgPSByZXF1aXJlKCdwYXJzZS1hc24xJylcbnZhciBjdXJ2ZXMgPSByZXF1aXJlKCcuL2N1cnZlcy5qc29uJylcblxuZnVuY3Rpb24gc2lnbiAoaGFzaCwga2V5LCBoYXNoVHlwZSwgc2lnblR5cGUsIHRhZykge1xuICB2YXIgcHJpdiA9IHBhcnNlS2V5cyhrZXkpXG4gIGlmIChwcml2LmN1cnZlKSB7XG4gICAgLy8gcnNhIGtleXMgY2FuIGJlIGludGVycHJldGVkIGFzIGVjZHNhIG9uZXMgaW4gb3BlbnNzbFxuICAgIGlmIChzaWduVHlwZSAhPT0gJ2VjZHNhJyAmJiBzaWduVHlwZSAhPT0gJ2VjZHNhL3JzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHJpdmF0ZSBrZXkgdHlwZScpXG4gICAgcmV0dXJuIGVjU2lnbihoYXNoLCBwcml2KVxuICB9IGVsc2UgaWYgKHByaXYudHlwZSA9PT0gJ2RzYScpIHtcbiAgICBpZiAoc2lnblR5cGUgIT09ICdkc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICAgIHJldHVybiBkc2FTaWduKGhhc2gsIHByaXYsIGhhc2hUeXBlKVxuICB9IGVsc2Uge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ3JzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHByaXZhdGUga2V5IHR5cGUnKVxuICB9XG4gIGhhc2ggPSBCdWZmZXIuY29uY2F0KFt0YWcsIGhhc2hdKVxuICB2YXIgbGVuID0gcHJpdi5tb2R1bHVzLmJ5dGVMZW5ndGgoKVxuICB2YXIgcGFkID0gWyAwLCAxIF1cbiAgd2hpbGUgKGhhc2gubGVuZ3RoICsgcGFkLmxlbmd0aCArIDEgPCBsZW4pIHBhZC5wdXNoKDB4ZmYpXG4gIHBhZC5wdXNoKDB4MDApXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGhhc2gubGVuZ3RoKSBwYWQucHVzaChoYXNoW2ldKVxuXG4gIHZhciBvdXQgPSBjcnQocGFkLCBwcml2KVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIGVjU2lnbiAoaGFzaCwgcHJpdikge1xuICB2YXIgY3VydmVJZCA9IGN1cnZlc1twcml2LmN1cnZlLmpvaW4oJy4nKV1cbiAgaWYgKCFjdXJ2ZUlkKSB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY3VydmUgJyArIHByaXYuY3VydmUuam9pbignLicpKVxuXG4gIHZhciBjdXJ2ZSA9IG5ldyBFQyhjdXJ2ZUlkKVxuICB2YXIga2V5ID0gY3VydmUua2V5RnJvbVByaXZhdGUocHJpdi5wcml2YXRlS2V5KVxuICB2YXIgb3V0ID0ga2V5LnNpZ24oaGFzaClcblxuICByZXR1cm4gbmV3IEJ1ZmZlcihvdXQudG9ERVIoKSlcbn1cblxuZnVuY3Rpb24gZHNhU2lnbiAoaGFzaCwgcHJpdiwgYWxnbykge1xuICB2YXIgeCA9IHByaXYucGFyYW1zLnByaXZfa2V5XG4gIHZhciBwID0gcHJpdi5wYXJhbXMucFxuICB2YXIgcSA9IHByaXYucGFyYW1zLnFcbiAgdmFyIGcgPSBwcml2LnBhcmFtcy5nXG4gIHZhciByID0gbmV3IEJOKDApXG4gIHZhciBrXG4gIHZhciBIID0gYml0czJpbnQoaGFzaCwgcSkubW9kKHEpXG4gIHZhciBzID0gZmFsc2VcbiAgdmFyIGt2ID0gZ2V0S2V5KHgsIHEsIGhhc2gsIGFsZ28pXG4gIHdoaWxlIChzID09PSBmYWxzZSkge1xuICAgIGsgPSBtYWtlS2V5KHEsIGt2LCBhbGdvKVxuICAgIHIgPSBtYWtlUihnLCBrLCBwLCBxKVxuICAgIHMgPSBrLmludm0ocSkuaW11bChILmFkZCh4Lm11bChyKSkpLm1vZChxKVxuICAgIGlmIChzLmNtcG4oMCkgPT09IDApIHtcbiAgICAgIHMgPSBmYWxzZVxuICAgICAgciA9IG5ldyBCTigwKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG9ERVIociwgcylcbn1cblxuZnVuY3Rpb24gdG9ERVIgKHIsIHMpIHtcbiAgciA9IHIudG9BcnJheSgpXG4gIHMgPSBzLnRvQXJyYXkoKVxuXG4gIC8vIFBhZCB2YWx1ZXNcbiAgaWYgKHJbMF0gJiAweDgwKSByID0gWyAwIF0uY29uY2F0KHIpXG4gIGlmIChzWzBdICYgMHg4MCkgcyA9IFsgMCBdLmNvbmNhdChzKVxuXG4gIHZhciB0b3RhbCA9IHIubGVuZ3RoICsgcy5sZW5ndGggKyA0XG4gIHZhciByZXMgPSBbIDB4MzAsIHRvdGFsLCAweDAyLCByLmxlbmd0aCBdXG4gIHJlcyA9IHJlcy5jb25jYXQociwgWyAweDAyLCBzLmxlbmd0aCBdLCBzKVxuICByZXR1cm4gbmV3IEJ1ZmZlcihyZXMpXG59XG5cbmZ1bmN0aW9uIGdldEtleSAoeCwgcSwgaGFzaCwgYWxnbykge1xuICB4ID0gbmV3IEJ1ZmZlcih4LnRvQXJyYXkoKSlcbiAgaWYgKHgubGVuZ3RoIDwgcS5ieXRlTGVuZ3RoKCkpIHtcbiAgICB2YXIgemVyb3MgPSBuZXcgQnVmZmVyKHEuYnl0ZUxlbmd0aCgpIC0geC5sZW5ndGgpXG4gICAgemVyb3MuZmlsbCgwKVxuICAgIHggPSBCdWZmZXIuY29uY2F0KFsgemVyb3MsIHggXSlcbiAgfVxuICB2YXIgaGxlbiA9IGhhc2gubGVuZ3RoXG4gIHZhciBoYml0cyA9IGJpdHMyb2N0ZXRzKGhhc2gsIHEpXG4gIHZhciB2ID0gbmV3IEJ1ZmZlcihobGVuKVxuICB2LmZpbGwoMSlcbiAgdmFyIGsgPSBuZXcgQnVmZmVyKGhsZW4pXG4gIGsuZmlsbCgwKVxuICBrID0gY3JlYXRlSG1hYyhhbGdvLCBrKS51cGRhdGUodikudXBkYXRlKG5ldyBCdWZmZXIoWyAwIF0pKS51cGRhdGUoeCkudXBkYXRlKGhiaXRzKS5kaWdlc3QoKVxuICB2ID0gY3JlYXRlSG1hYyhhbGdvLCBrKS51cGRhdGUodikuZGlnZXN0KClcbiAgayA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLnVwZGF0ZShuZXcgQnVmZmVyKFsgMSBdKSkudXBkYXRlKHgpLnVwZGF0ZShoYml0cykuZGlnZXN0KClcbiAgdiA9IGNyZWF0ZUhtYWMoYWxnbywgaykudXBkYXRlKHYpLmRpZ2VzdCgpXG4gIHJldHVybiB7IGs6IGssIHY6IHYgfVxufVxuXG5mdW5jdGlvbiBiaXRzMmludCAob2JpdHMsIHEpIHtcbiAgdmFyIGJpdHMgPSBuZXcgQk4ob2JpdHMpXG4gIHZhciBzaGlmdCA9IChvYml0cy5sZW5ndGggPDwgMykgLSBxLmJpdExlbmd0aCgpXG4gIGlmIChzaGlmdCA+IDApIGJpdHMuaXNocm4oc2hpZnQpXG4gIHJldHVybiBiaXRzXG59XG5cbmZ1bmN0aW9uIGJpdHMyb2N0ZXRzIChiaXRzLCBxKSB7XG4gIGJpdHMgPSBiaXRzMmludChiaXRzLCBxKVxuICBiaXRzID0gYml0cy5tb2QocSlcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIoYml0cy50b0FycmF5KCkpXG4gIGlmIChvdXQubGVuZ3RoIDwgcS5ieXRlTGVuZ3RoKCkpIHtcbiAgICB2YXIgemVyb3MgPSBuZXcgQnVmZmVyKHEuYnl0ZUxlbmd0aCgpIC0gb3V0Lmxlbmd0aClcbiAgICB6ZXJvcy5maWxsKDApXG4gICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbIHplcm9zLCBvdXQgXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIG1ha2VLZXkgKHEsIGt2LCBhbGdvKSB7XG4gIHZhciB0XG4gIHZhciBrXG5cbiAgZG8ge1xuICAgIHQgPSBuZXcgQnVmZmVyKDApXG5cbiAgICB3aGlsZSAodC5sZW5ndGggKiA4IDwgcS5iaXRMZW5ndGgoKSkge1xuICAgICAga3YudiA9IGNyZWF0ZUhtYWMoYWxnbywga3YuaykudXBkYXRlKGt2LnYpLmRpZ2VzdCgpXG4gICAgICB0ID0gQnVmZmVyLmNvbmNhdChbIHQsIGt2LnYgXSlcbiAgICB9XG5cbiAgICBrID0gYml0czJpbnQodCwgcSlcbiAgICBrdi5rID0gY3JlYXRlSG1hYyhhbGdvLCBrdi5rKS51cGRhdGUoa3YudikudXBkYXRlKG5ldyBCdWZmZXIoWyAwIF0pKS5kaWdlc3QoKVxuICAgIGt2LnYgPSBjcmVhdGVIbWFjKGFsZ28sIGt2LmspLnVwZGF0ZShrdi52KS5kaWdlc3QoKVxuICB9IHdoaWxlIChrLmNtcChxKSAhPT0gLTEpXG5cbiAgcmV0dXJuIGtcbn1cblxuZnVuY3Rpb24gbWFrZVIgKGcsIGssIHAsIHEpIHtcbiAgcmV0dXJuIGcudG9SZWQoQk4ubW9udChwKSkucmVkUG93KGspLmZyb21SZWQoKS5tb2QocSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaWduXG5tb2R1bGUuZXhwb3J0cy5nZXRLZXkgPSBnZXRLZXlcbm1vZHVsZS5leHBvcnRzLm1ha2VLZXkgPSBtYWtlS2V5XG4iLCIvLyBtdWNoIG9mIHRoaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvc2VsZi1zaWduZWQvYmxvYi9naC1wYWdlcy9saWIvcnNhLmpzXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpXG52YXIgRUMgPSByZXF1aXJlKCdlbGxpcHRpYycpLmVjXG52YXIgcGFyc2VLZXlzID0gcmVxdWlyZSgncGFyc2UtYXNuMScpXG52YXIgY3VydmVzID0gcmVxdWlyZSgnLi9jdXJ2ZXMuanNvbicpXG5cbmZ1bmN0aW9uIHZlcmlmeSAoc2lnLCBoYXNoLCBrZXksIHNpZ25UeXBlLCB0YWcpIHtcbiAgdmFyIHB1YiA9IHBhcnNlS2V5cyhrZXkpXG4gIGlmIChwdWIudHlwZSA9PT0gJ2VjJykge1xuICAgIC8vIHJzYSBrZXlzIGNhbiBiZSBpbnRlcnByZXRlZCBhcyBlY2RzYSBvbmVzIGluIG9wZW5zc2xcbiAgICBpZiAoc2lnblR5cGUgIT09ICdlY2RzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gICAgcmV0dXJuIGVjVmVyaWZ5KHNpZywgaGFzaCwgcHViKVxuICB9IGVsc2UgaWYgKHB1Yi50eXBlID09PSAnZHNhJykge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ2RzYScpIHRocm93IG5ldyBFcnJvcignd3JvbmcgcHVibGljIGtleSB0eXBlJylcbiAgICByZXR1cm4gZHNhVmVyaWZ5KHNpZywgaGFzaCwgcHViKVxuICB9IGVsc2Uge1xuICAgIGlmIChzaWduVHlwZSAhPT0gJ3JzYScgJiYgc2lnblR5cGUgIT09ICdlY2RzYS9yc2EnKSB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIHB1YmxpYyBrZXkgdHlwZScpXG4gIH1cbiAgaGFzaCA9IEJ1ZmZlci5jb25jYXQoW3RhZywgaGFzaF0pXG4gIHZhciBsZW4gPSBwdWIubW9kdWx1cy5ieXRlTGVuZ3RoKClcbiAgdmFyIHBhZCA9IFsgMSBdXG4gIHZhciBwYWROdW0gPSAwXG4gIHdoaWxlIChoYXNoLmxlbmd0aCArIHBhZC5sZW5ndGggKyAyIDwgbGVuKSB7XG4gICAgcGFkLnB1c2goMHhmZilcbiAgICBwYWROdW0rK1xuICB9XG4gIHBhZC5wdXNoKDB4MDApXG4gIHZhciBpID0gLTFcbiAgd2hpbGUgKCsraSA8IGhhc2gubGVuZ3RoKSB7XG4gICAgcGFkLnB1c2goaGFzaFtpXSlcbiAgfVxuICBwYWQgPSBuZXcgQnVmZmVyKHBhZClcbiAgdmFyIHJlZCA9IEJOLm1vbnQocHViLm1vZHVsdXMpXG4gIHNpZyA9IG5ldyBCTihzaWcpLnRvUmVkKHJlZClcblxuICBzaWcgPSBzaWcucmVkUG93KG5ldyBCTihwdWIucHVibGljRXhwb25lbnQpKVxuICBzaWcgPSBuZXcgQnVmZmVyKHNpZy5mcm9tUmVkKCkudG9BcnJheSgpKVxuICB2YXIgb3V0ID0gcGFkTnVtIDwgOCA/IDEgOiAwXG4gIGxlbiA9IE1hdGgubWluKHNpZy5sZW5ndGgsIHBhZC5sZW5ndGgpXG4gIGlmIChzaWcubGVuZ3RoICE9PSBwYWQubGVuZ3RoKSBvdXQgPSAxXG5cbiAgaSA9IC0xXG4gIHdoaWxlICgrK2kgPCBsZW4pIG91dCB8PSBzaWdbaV0gXiBwYWRbaV1cbiAgcmV0dXJuIG91dCA9PT0gMFxufVxuXG5mdW5jdGlvbiBlY1ZlcmlmeSAoc2lnLCBoYXNoLCBwdWIpIHtcbiAgdmFyIGN1cnZlSWQgPSBjdXJ2ZXNbcHViLmRhdGEuYWxnb3JpdGhtLmN1cnZlLmpvaW4oJy4nKV1cbiAgaWYgKCFjdXJ2ZUlkKSB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY3VydmUgJyArIHB1Yi5kYXRhLmFsZ29yaXRobS5jdXJ2ZS5qb2luKCcuJykpXG5cbiAgdmFyIGN1cnZlID0gbmV3IEVDKGN1cnZlSWQpXG4gIHZhciBwdWJrZXkgPSBwdWIuZGF0YS5zdWJqZWN0UHJpdmF0ZUtleS5kYXRhXG5cbiAgcmV0dXJuIGN1cnZlLnZlcmlmeShoYXNoLCBzaWcsIHB1YmtleSlcbn1cblxuZnVuY3Rpb24gZHNhVmVyaWZ5IChzaWcsIGhhc2gsIHB1Yikge1xuICB2YXIgcCA9IHB1Yi5kYXRhLnBcbiAgdmFyIHEgPSBwdWIuZGF0YS5xXG4gIHZhciBnID0gcHViLmRhdGEuZ1xuICB2YXIgeSA9IHB1Yi5kYXRhLnB1Yl9rZXlcbiAgdmFyIHVucGFja2VkID0gcGFyc2VLZXlzLnNpZ25hdHVyZS5kZWNvZGUoc2lnLCAnZGVyJylcbiAgdmFyIHMgPSB1bnBhY2tlZC5zXG4gIHZhciByID0gdW5wYWNrZWQuclxuICBjaGVja1ZhbHVlKHMsIHEpXG4gIGNoZWNrVmFsdWUociwgcSlcbiAgdmFyIG1vbnRwID0gQk4ubW9udChwKVxuICB2YXIgdyA9IHMuaW52bShxKVxuICB2YXIgdiA9IGcudG9SZWQobW9udHApXG4gICAgLnJlZFBvdyhuZXcgQk4oaGFzaCkubXVsKHcpLm1vZChxKSlcbiAgICAuZnJvbVJlZCgpXG4gICAgLm11bCh5LnRvUmVkKG1vbnRwKS5yZWRQb3coci5tdWwodykubW9kKHEpKS5mcm9tUmVkKCkpXG4gICAgLm1vZChwKVxuICAgIC5tb2QocSlcbiAgcmV0dXJuIHYuY21wKHIpID09PSAwXG59XG5cbmZ1bmN0aW9uIGNoZWNrVmFsdWUgKGIsIHEpIHtcbiAgaWYgKGIuY21wbigwKSA8PSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc2lnJylcbiAgaWYgKGIuY21wKHEpID49IHEpIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzaWcnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcmlmeVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4b3IgKGEsIGIpIHtcbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aClcbiAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBidWZmZXJbaV0gPSBhW2ldIF4gYltpXVxuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlclxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJ2Jhc2U2NC1qcycpXG52YXIgaWVlZTc1NCA9IHJlcXVpcmUoJ2llZWU3NTQnKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbnZhciBLX01BWF9MRU5HVEggPSAweDdmZmZmZmZmXG5leHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEhcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgUHJpbnQgd2FybmluZyBhbmQgcmVjb21tZW5kIHVzaW5nIGBidWZmZXJgIHY0Lnggd2hpY2ggaGFzIGFuIE9iamVjdFxuICogICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogV2UgcmVwb3J0IHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0eXBlZCBhcnJheXMgaWYgdGhlIGFyZSBub3Qgc3ViY2xhc3NhYmxlXG4gKiB1c2luZyBfX3Byb3RvX18uIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgXG4gKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0XG4gKiBmb3IgX19wcm90b19fIGFuZCBoYXMgYSBidWdneSB0eXBlZCBhcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgK1xuICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LidcbiAgKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgICBhcnIuX19wcm90b19fID0ge19fcHJvdG9fXzogVWludDhBcnJheS5wcm90b3R5cGUsIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfX1cbiAgICByZXR1cm4gYXJyLmZvbygpID09PSA0MlxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUoYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgdmFsdWU6IG51bGwsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuZnVuY3Rpb24gZnJvbSAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoaXNBcnJheUJ1ZmZlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20odmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gTm90ZTogQ2hhbmdlIHByb3RvdHlwZSAqYWZ0ZXIqIEJ1ZmZlci5mcm9tIGlzIGRlZmluZWQgdG8gd29ya2Fyb3VuZCBDaHJvbWUgYnVnOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC8xNDhcbkJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbkJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlIChzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcihzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gYnVmLndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIGJ1ZlxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlIChhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICB2YXIgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBidWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iaikge1xuICAgIGlmIChpc0FycmF5QnVmZmVyVmlldyhvYmopIHx8ICdsZW5ndGgnIGluIG9iaikge1xuICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBudW1iZXJJc05hTihvYmoubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKDApXG4gICAgICB9XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmopXG4gICAgfVxuXG4gICAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqLmRhdGEpXG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpXG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAoaXNBcnJheUJ1ZmZlclZpZXcoc3RyaW5nKSB8fCBpc0FycmF5QnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgKGFuZCB0aGUgYGlzLWJ1ZmZlcmAgbnBtIHBhY2thZ2UpXG4vLyB0byBkZXRlY3QgYSBCdWZmZXIgaW5zdGFuY2UuIEl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBgaW5zdGFuY2VvZiBCdWZmZXJgXG4vLyByZWxpYWJseSBpbiBhIGJyb3dzZXJpZnkgY29udGV4dCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIGRpZmZlcmVudFxuLy8gY29waWVzIG9mIHRoZSAnYnVmZmVyJyBwYWNrYWdlIGluIHVzZS4gVGhpcyBtZXRob2Qgd29ya3MgZXZlbiBmb3IgQnVmZmVyXG4vLyBpbnN0YW5jZXMgdGhhdCB3ZXJlIGNyZWF0ZWQgZnJvbSBhbm90aGVyIGNvcHkgb2YgdGhlIGBidWZmZXJgIHBhY2thZ2UuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNTRcbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKVxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICdcbiAgfVxuICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+J1xufVxuXG5CdWZmZXIucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlICh0YXJnZXQsIHN0YXJ0LCBlbmQsIHRoaXNTdGFydCwgdGhpc0VuZCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAobnVtYmVySXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmICh0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID4+PiAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgKGJ5dGVzW2kgKyAxXSAqIDI1NikpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2VcbiAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgdmFyIGkgPSAwXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgKDggKiBieXRlTGVuZ3RoKSAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4N2YsIC0weDgwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDApIHtcbiAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgIHRhcmdldCxcbiAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMClcbiAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfVxuXG4gIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LlxuICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgc3RhcnQgPSBzdGFydCA+Pj4gMFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwXG5cbiAgaWYgKCF2YWwpIHZhbCA9IDBcblxuICB2YXIgaVxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICB0aGlzW2ldID0gdmFsXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBieXRlcyA9IEJ1ZmZlci5pc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiBuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teKy8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuLy8gQXJyYXlCdWZmZXJzIGZyb20gYW5vdGhlciBjb250ZXh0IChpLmUuIGFuIGlmcmFtZSkgZG8gbm90IHBhc3MgdGhlIGBpbnN0YW5jZW9mYCBjaGVja1xuLy8gYnV0IHRoZXkgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgdmFsaWQuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE2NlxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlciAob2JqKSB7XG4gIHJldHVybiBvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fFxuICAgIChvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gJ0FycmF5QnVmZmVyJyAmJlxuICAgICAgdHlwZW9mIG9iai5ieXRlTGVuZ3RoID09PSAnbnVtYmVyJylcbn1cblxuLy8gTm9kZSAwLjEwIHN1cHBvcnRzIGBBcnJheUJ1ZmZlcmAgYnV0IGxhY2tzIGBBcnJheUJ1ZmZlci5pc1ZpZXdgXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyAob2JqKSB7XG4gIHJldHVybiAodHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJykgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KG9iailcbn1cblxuZnVuY3Rpb24gbnVtYmVySXNOYU4gKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBvYmogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3N0cmVhbScpLlRyYW5zZm9ybVxudmFyIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2RlcicpLlN0cmluZ0RlY29kZXJcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gQ2lwaGVyQmFzZSAoaGFzaE1vZGUpIHtcbiAgVHJhbnNmb3JtLmNhbGwodGhpcylcbiAgdGhpcy5oYXNoTW9kZSA9IHR5cGVvZiBoYXNoTW9kZSA9PT0gJ3N0cmluZydcbiAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICB0aGlzW2hhc2hNb2RlXSA9IHRoaXMuX2ZpbmFsT3JEaWdlc3RcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmFsID0gdGhpcy5fZmluYWxPckRpZ2VzdFxuICB9XG4gIGlmICh0aGlzLl9maW5hbCkge1xuICAgIHRoaXMuX19maW5hbCA9IHRoaXMuX2ZpbmFsXG4gICAgdGhpcy5fZmluYWwgPSBudWxsXG4gIH1cbiAgdGhpcy5fZGVjb2RlciA9IG51bGxcbiAgdGhpcy5fZW5jb2RpbmcgPSBudWxsXG59XG5pbmhlcml0cyhDaXBoZXJCYXNlLCBUcmFuc2Zvcm0pXG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBpbnB1dEVuYywgb3V0cHV0RW5jKSB7XG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgaW5wdXRFbmMpXG4gIH1cblxuICB2YXIgb3V0RGF0YSA9IHRoaXMuX3VwZGF0ZShkYXRhKVxuICBpZiAodGhpcy5oYXNoTW9kZSkgcmV0dXJuIHRoaXNcblxuICBpZiAob3V0cHV0RW5jKSB7XG4gICAgb3V0RGF0YSA9IHRoaXMuX3RvU3RyaW5nKG91dERhdGEsIG91dHB1dEVuYylcbiAgfVxuXG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dG9QYWRkaW5nID0gZnVuY3Rpb24gKCkge31cbkNpcGhlckJhc2UucHJvdG90eXBlLmdldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIGdldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEF1dGhUYWcgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcigndHJ5aW5nIHRvIHNldCBhdXRoIHRhZyBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLnNldEFBRCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCd0cnlpbmcgdG8gc2V0IGFhZCBpbiB1bnN1cHBvcnRlZCBzdGF0ZScpXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoZGF0YSwgXywgbmV4dCkge1xuICB2YXIgZXJyXG4gIHRyeSB7XG4gICAgaWYgKHRoaXMuaGFzaE1vZGUpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZShkYXRhKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2godGhpcy5fdXBkYXRlKGRhdGEpKVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfSBmaW5hbGx5IHtcbiAgICBuZXh0KGVycilcbiAgfVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGRvbmUpIHtcbiAgdmFyIGVyclxuICB0cnkge1xuICAgIHRoaXMucHVzaCh0aGlzLl9fZmluYWwoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGVcbiAgfVxuXG4gIGRvbmUoZXJyKVxufVxuQ2lwaGVyQmFzZS5wcm90b3R5cGUuX2ZpbmFsT3JEaWdlc3QgPSBmdW5jdGlvbiAob3V0cHV0RW5jKSB7XG4gIHZhciBvdXREYXRhID0gdGhpcy5fX2ZpbmFsKCkgfHwgQnVmZmVyLmFsbG9jKDApXG4gIGlmIChvdXRwdXRFbmMpIHtcbiAgICBvdXREYXRhID0gdGhpcy5fdG9TdHJpbmcob3V0RGF0YSwgb3V0cHV0RW5jLCB0cnVlKVxuICB9XG4gIHJldHVybiBvdXREYXRhXG59XG5cbkNpcGhlckJhc2UucHJvdG90eXBlLl90b1N0cmluZyA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jLCBmaW4pIHtcbiAgaWYgKCF0aGlzLl9kZWNvZGVyKSB7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYylcbiAgICB0aGlzLl9lbmNvZGluZyA9IGVuY1xuICB9XG5cbiAgaWYgKHRoaXMuX2VuY29kaW5nICE9PSBlbmMpIHRocm93IG5ldyBFcnJvcignY2FuXFwndCBzd2l0Y2ggZW5jb2RpbmdzJylcblxuICB2YXIgb3V0ID0gdGhpcy5fZGVjb2Rlci53cml0ZSh2YWx1ZSlcbiAgaWYgKGZpbikge1xuICAgIG91dCArPSB0aGlzLl9kZWNvZGVyLmVuZCgpXG4gIH1cblxuICByZXR1cm4gb3V0XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2lwaGVyQmFzZVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcjtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuIiwidmFyIGVsbGlwdGljID0gcmVxdWlyZSgnZWxsaXB0aWMnKTtcbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRUNESChjdXJ2ZSkge1xuXHRyZXR1cm4gbmV3IEVDREgoY3VydmUpO1xufTtcblxudmFyIGFsaWFzZXMgPSB7XG5cdHNlY3AyNTZrMToge1xuXHRcdG5hbWU6ICdzZWNwMjU2azEnLFxuXHRcdGJ5dGVMZW5ndGg6IDMyXG5cdH0sXG5cdHNlY3AyMjRyMToge1xuXHRcdG5hbWU6ICdwMjI0Jyxcblx0XHRieXRlTGVuZ3RoOiAyOFxuXHR9LFxuXHRwcmltZTI1NnYxOiB7XG5cdFx0bmFtZTogJ3AyNTYnLFxuXHRcdGJ5dGVMZW5ndGg6IDMyXG5cdH0sXG5cdHByaW1lMTkydjE6IHtcblx0XHRuYW1lOiAncDE5MicsXG5cdFx0Ynl0ZUxlbmd0aDogMjRcblx0fSxcblx0ZWQyNTUxOToge1xuXHRcdG5hbWU6ICdlZDI1NTE5Jyxcblx0XHRieXRlTGVuZ3RoOiAzMlxuXHR9LFxuXHRzZWNwMzg0cjE6IHtcblx0XHRuYW1lOiAncDM4NCcsXG5cdFx0Ynl0ZUxlbmd0aDogNDhcblx0fSxcblx0c2VjcDUyMXIxOiB7XG5cdFx0bmFtZTogJ3A1MjEnLFxuXHRcdGJ5dGVMZW5ndGg6IDY2XG5cdH1cbn07XG5cbmFsaWFzZXMucDIyNCA9IGFsaWFzZXMuc2VjcDIyNHIxO1xuYWxpYXNlcy5wMjU2ID0gYWxpYXNlcy5zZWNwMjU2cjEgPSBhbGlhc2VzLnByaW1lMjU2djE7XG5hbGlhc2VzLnAxOTIgPSBhbGlhc2VzLnNlY3AxOTJyMSA9IGFsaWFzZXMucHJpbWUxOTJ2MTtcbmFsaWFzZXMucDM4NCA9IGFsaWFzZXMuc2VjcDM4NHIxO1xuYWxpYXNlcy5wNTIxID0gYWxpYXNlcy5zZWNwNTIxcjE7XG5cbmZ1bmN0aW9uIEVDREgoY3VydmUpIHtcblx0dGhpcy5jdXJ2ZVR5cGUgPSBhbGlhc2VzW2N1cnZlXTtcblx0aWYgKCF0aGlzLmN1cnZlVHlwZSApIHtcblx0XHR0aGlzLmN1cnZlVHlwZSA9IHtcblx0XHRcdG5hbWU6IGN1cnZlXG5cdFx0fTtcblx0fVxuXHR0aGlzLmN1cnZlID0gbmV3IGVsbGlwdGljLmVjKHRoaXMuY3VydmVUeXBlLm5hbWUpO1xuXHR0aGlzLmtleXMgPSB2b2lkIDA7XG59XG5cbkVDREgucHJvdG90eXBlLmdlbmVyYXRlS2V5cyA9IGZ1bmN0aW9uIChlbmMsIGZvcm1hdCkge1xuXHR0aGlzLmtleXMgPSB0aGlzLmN1cnZlLmdlbktleVBhaXIoKTtcblx0cmV0dXJuIHRoaXMuZ2V0UHVibGljS2V5KGVuYywgZm9ybWF0KTtcbn07XG5cbkVDREgucHJvdG90eXBlLmNvbXB1dGVTZWNyZXQgPSBmdW5jdGlvbiAob3RoZXIsIGluZW5jLCBlbmMpIHtcblx0aW5lbmMgPSBpbmVuYyB8fCAndXRmOCc7XG5cdGlmICghQnVmZmVyLmlzQnVmZmVyKG90aGVyKSkge1xuXHRcdG90aGVyID0gbmV3IEJ1ZmZlcihvdGhlciwgaW5lbmMpO1xuXHR9XG5cdHZhciBvdGhlclB1YiA9IHRoaXMuY3VydmUua2V5RnJvbVB1YmxpYyhvdGhlcikuZ2V0UHVibGljKCk7XG5cdHZhciBvdXQgPSBvdGhlclB1Yi5tdWwodGhpcy5rZXlzLmdldFByaXZhdGUoKSkuZ2V0WCgpO1xuXHRyZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUob3V0LCBlbmMsIHRoaXMuY3VydmVUeXBlLmJ5dGVMZW5ndGgpO1xufTtcblxuRUNESC5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKGVuYywgZm9ybWF0KSB7XG5cdHZhciBrZXkgPSB0aGlzLmtleXMuZ2V0UHVibGljKGZvcm1hdCA9PT0gJ2NvbXByZXNzZWQnLCB0cnVlKTtcblx0aWYgKGZvcm1hdCA9PT0gJ2h5YnJpZCcpIHtcblx0XHRpZiAoa2V5W2tleS5sZW5ndGggLSAxXSAlIDIpIHtcblx0XHRcdGtleVswXSA9IDc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGtleSBbMF0gPSA2O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUoa2V5LCBlbmMpO1xufTtcblxuRUNESC5wcm90b3R5cGUuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIChlbmMpIHtcblx0cmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMua2V5cy5nZXRQcml2YXRlKCksIGVuYyk7XG59O1xuXG5FQ0RILnByb3RvdHlwZS5zZXRQdWJsaWNLZXkgPSBmdW5jdGlvbiAocHViLCBlbmMpIHtcblx0ZW5jID0gZW5jIHx8ICd1dGY4Jztcblx0aWYgKCFCdWZmZXIuaXNCdWZmZXIocHViKSkge1xuXHRcdHB1YiA9IG5ldyBCdWZmZXIocHViLCBlbmMpO1xuXHR9XG5cdHRoaXMua2V5cy5faW1wb3J0UHVibGljKHB1Yik7XG5cdHJldHVybiB0aGlzO1xufTtcblxuRUNESC5wcm90b3R5cGUuc2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uIChwcml2LCBlbmMpIHtcblx0ZW5jID0gZW5jIHx8ICd1dGY4Jztcblx0aWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpdikpIHtcblx0XHRwcml2ID0gbmV3IEJ1ZmZlcihwcml2LCBlbmMpO1xuXHR9XG5cdHZhciBfcHJpdiA9IG5ldyBCTihwcml2KTtcblx0X3ByaXYgPSBfcHJpdi50b1N0cmluZygxNik7XG5cdHRoaXMua2V5cy5faW1wb3J0UHJpdmF0ZShfcHJpdik7XG5cdHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZm9ybWF0UmV0dXJuVmFsdWUoYm4sIGVuYywgbGVuKSB7XG5cdGlmICghQXJyYXkuaXNBcnJheShibikpIHtcblx0XHRibiA9IGJuLnRvQXJyYXkoKTtcblx0fVxuXHR2YXIgYnVmID0gbmV3IEJ1ZmZlcihibik7XG5cdGlmIChsZW4gJiYgYnVmLmxlbmd0aCA8IGxlbikge1xuXHRcdHZhciB6ZXJvcyA9IG5ldyBCdWZmZXIobGVuIC0gYnVmLmxlbmd0aCk7XG5cdFx0emVyb3MuZmlsbCgwKTtcblx0XHRidWYgPSBCdWZmZXIuY29uY2F0KFt6ZXJvcywgYnVmXSk7XG5cdH1cblx0aWYgKCFlbmMpIHtcblx0XHRyZXR1cm4gYnVmO1xuXHR9IGVsc2Uge1xuXHRcdHJldHVybiBidWYudG9TdHJpbmcoZW5jKTtcblx0fVxufVxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgbWQ1ID0gcmVxdWlyZSgnLi9tZDUnKVxudmFyIFJJUEVNRDE2MCA9IHJlcXVpcmUoJ3JpcGVtZDE2MCcpXG52YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJylcblxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG5cbmZ1bmN0aW9uIEhhc2hOb0NvbnN0cnVjdG9yIChoYXNoKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gaGFzaFxuICB0aGlzLmJ1ZmZlcnMgPSBbXVxufVxuXG5pbmhlcml0cyhIYXNoTm9Db25zdHJ1Y3RvciwgQmFzZSlcblxuSGFzaE5vQ29uc3RydWN0b3IucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLmJ1ZmZlcnMucHVzaChkYXRhKVxufVxuXG5IYXNoTm9Db25zdHJ1Y3Rvci5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYnVmID0gQnVmZmVyLmNvbmNhdCh0aGlzLmJ1ZmZlcnMpXG4gIHZhciByID0gdGhpcy5faGFzaChidWYpXG4gIHRoaXMuYnVmZmVycyA9IG51bGxcblxuICByZXR1cm4gclxufVxuXG5mdW5jdGlvbiBIYXNoIChoYXNoKSB7XG4gIEJhc2UuY2FsbCh0aGlzLCAnZGlnZXN0JylcblxuICB0aGlzLl9oYXNoID0gaGFzaFxufVxuXG5pbmhlcml0cyhIYXNoLCBCYXNlKVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC51cGRhdGUoZGF0YSlcbn1cblxuSGFzaC5wcm90b3R5cGUuX2ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5faGFzaC5kaWdlc3QoKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2ggKGFsZykge1xuICBhbGcgPSBhbGcudG9Mb3dlckNhc2UoKVxuICBpZiAoYWxnID09PSAnbWQ1JykgcmV0dXJuIG5ldyBIYXNoTm9Db25zdHJ1Y3RvcihtZDUpXG4gIGlmIChhbGcgPT09ICdybWQxNjAnIHx8IGFsZyA9PT0gJ3JpcGVtZDE2MCcpIHJldHVybiBuZXcgSGFzaChuZXcgUklQRU1EMTYwKCkpXG5cbiAgcmV0dXJuIG5ldyBIYXNoKHNoYShhbGcpKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW50U2l6ZSA9IDRcbnZhciB6ZXJvQnVmZmVyID0gbmV3IEJ1ZmZlcihpbnRTaXplKVxuemVyb0J1ZmZlci5maWxsKDApXG5cbnZhciBjaGFyU2l6ZSA9IDhcbnZhciBoYXNoU2l6ZSA9IDE2XG5cbmZ1bmN0aW9uIHRvQXJyYXkgKGJ1Zikge1xuICBpZiAoKGJ1Zi5sZW5ndGggJSBpbnRTaXplKSAhPT0gMCkge1xuICAgIHZhciBsZW4gPSBidWYubGVuZ3RoICsgKGludFNpemUgLSAoYnVmLmxlbmd0aCAlIGludFNpemUpKVxuICAgIGJ1ZiA9IEJ1ZmZlci5jb25jYXQoW2J1ZiwgemVyb0J1ZmZlcl0sIGxlbilcbiAgfVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyYXkoYnVmLmxlbmd0aCA+Pj4gMilcbiAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSArPSBpbnRTaXplLCBqKyspIHtcbiAgICBhcnJbal0gPSBidWYucmVhZEludDMyTEUoaSlcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNoIChidWYsIGZuKSB7XG4gIHZhciBhcnIgPSBmbih0b0FycmF5KGJ1ZiksIGJ1Zi5sZW5ndGggKiBjaGFyU2l6ZSlcbiAgYnVmID0gbmV3IEJ1ZmZlcihoYXNoU2l6ZSlcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBidWYud3JpdGVJbnQzMkxFKGFycltpXSwgaSA8PCAyLCB0cnVlKVxuICB9XG4gIHJldHVybiBidWZcbn1cbiIsIid1c2Ugc3RyaWN0J1xuLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgUlNBIERhdGEgU2VjdXJpdHksIEluYy4gTUQ1IE1lc3NhZ2VcbiAqIERpZ2VzdCBBbGdvcml0aG0sIGFzIGRlZmluZWQgaW4gUkZDIDEzMjEuXG4gKiBWZXJzaW9uIDIuMSBDb3B5cmlnaHQgKEMpIFBhdWwgSm9obnN0b24gMTk5OSAtIDIwMDIuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiAqIFNlZSBodHRwOi8vcGFqaG9tZS5vcmcudWsvY3J5cHQvbWQ1IGZvciBtb3JlIGluZm8uXG4gKi9cblxudmFyIG1ha2VIYXNoID0gcmVxdWlyZSgnLi9tYWtlLWhhc2gnKVxuXG4vKlxuICogQ2FsY3VsYXRlIHRoZSBNRDUgb2YgYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcywgYW5kIGEgYml0IGxlbmd0aFxuICovXG5mdW5jdGlvbiBjb3JlX21kNSAoeCwgbGVuKSB7XG4gIC8qIGFwcGVuZCBwYWRkaW5nICovXG4gIHhbbGVuID4+IDVdIHw9IDB4ODAgPDwgKChsZW4pICUgMzIpXG4gIHhbKCgobGVuICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IGxlblxuXG4gIHZhciBhID0gMTczMjU4NDE5M1xuICB2YXIgYiA9IC0yNzE3MzM4NzlcbiAgdmFyIGMgPSAtMTczMjU4NDE5NFxuICB2YXIgZCA9IDI3MTczMzg3OFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICB2YXIgb2xkYSA9IGFcbiAgICB2YXIgb2xkYiA9IGJcbiAgICB2YXIgb2xkYyA9IGNcbiAgICB2YXIgb2xkZCA9IGRcblxuICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpICsgMF0sIDcsIC02ODA4NzY5MzYpXG4gICAgZCA9IG1kNV9mZihkLCBhLCBiLCBjLCB4W2kgKyAxXSwgMTIsIC0zODk1NjQ1ODYpXG4gICAgYyA9IG1kNV9mZihjLCBkLCBhLCBiLCB4W2kgKyAyXSwgMTcsIDYwNjEwNTgxOSlcbiAgICBiID0gbWQ1X2ZmKGIsIGMsIGQsIGEsIHhbaSArIDNdLCAyMiwgLTEwNDQ1MjUzMzApXG4gICAgYSA9IG1kNV9mZihhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNywgLTE3NjQxODg5NylcbiAgICBkID0gbWQ1X2ZmKGQsIGEsIGIsIGMsIHhbaSArIDVdLCAxMiwgMTIwMDA4MDQyNilcbiAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSArIDZdLCAxNywgLTE0NzMyMzEzNDEpXG4gICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2kgKyA3XSwgMjIsIC00NTcwNTk4MylcbiAgICBhID0gbWQ1X2ZmKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA3LCAxNzcwMDM1NDE2KVxuICAgIGQgPSBtZDVfZmYoZCwgYSwgYiwgYywgeFtpICsgOV0sIDEyLCAtMTk1ODQxNDQxNylcbiAgICBjID0gbWQ1X2ZmKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTcsIC00MjA2MylcbiAgICBiID0gbWQ1X2ZmKGIsIGMsIGQsIGEsIHhbaSArIDExXSwgMjIsIC0xOTkwNDA0MTYyKVxuICAgIGEgPSBtZDVfZmYoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA3LCAxODA0NjAzNjgyKVxuICAgIGQgPSBtZDVfZmYoZCwgYSwgYiwgYywgeFtpICsgMTNdLCAxMiwgLTQwMzQxMTAxKVxuICAgIGMgPSBtZDVfZmYoYywgZCwgYSwgYiwgeFtpICsgMTRdLCAxNywgLTE1MDIwMDIyOTApXG4gICAgYiA9IG1kNV9mZihiLCBjLCBkLCBhLCB4W2kgKyAxNV0sIDIyLCAxMjM2NTM1MzI5KVxuXG4gICAgYSA9IG1kNV9nZyhhLCBiLCBjLCBkLCB4W2kgKyAxXSwgNSwgLTE2NTc5NjUxMClcbiAgICBkID0gbWQ1X2dnKGQsIGEsIGIsIGMsIHhbaSArIDZdLCA5LCAtMTA2OTUwMTYzMilcbiAgICBjID0gbWQ1X2dnKGMsIGQsIGEsIGIsIHhbaSArIDExXSwgMTQsIDY0MzcxNzcxMylcbiAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSArIDBdLCAyMCwgLTM3Mzg5NzMwMilcbiAgICBhID0gbWQ1X2dnKGEsIGIsIGMsIGQsIHhbaSArIDVdLCA1LCAtNzAxNTU4NjkxKVxuICAgIGQgPSBtZDVfZ2coZCwgYSwgYiwgYywgeFtpICsgMTBdLCA5LCAzODAxNjA4MylcbiAgICBjID0gbWQ1X2dnKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTQsIC02NjA0NzgzMzUpXG4gICAgYiA9IG1kNV9nZyhiLCBjLCBkLCBhLCB4W2kgKyA0XSwgMjAsIC00MDU1Mzc4NDgpXG4gICAgYSA9IG1kNV9nZyhhLCBiLCBjLCBkLCB4W2kgKyA5XSwgNSwgNTY4NDQ2NDM4KVxuICAgIGQgPSBtZDVfZ2coZCwgYSwgYiwgYywgeFtpICsgMTRdLCA5LCAtMTAxOTgwMzY5MClcbiAgICBjID0gbWQ1X2dnKGMsIGQsIGEsIGIsIHhbaSArIDNdLCAxNCwgLTE4NzM2Mzk2MSlcbiAgICBiID0gbWQ1X2dnKGIsIGMsIGQsIGEsIHhbaSArIDhdLCAyMCwgMTE2MzUzMTUwMSlcbiAgICBhID0gbWQ1X2dnKGEsIGIsIGMsIGQsIHhbaSArIDEzXSwgNSwgLTE0NDQ2ODE0NjcpXG4gICAgZCA9IG1kNV9nZyhkLCBhLCBiLCBjLCB4W2kgKyAyXSwgOSwgLTUxNDAzNzg0KVxuICAgIGMgPSBtZDVfZ2coYywgZCwgYSwgYiwgeFtpICsgN10sIDE0LCAxNzM1MzI4NDczKVxuICAgIGIgPSBtZDVfZ2coYiwgYywgZCwgYSwgeFtpICsgMTJdLCAyMCwgLTE5MjY2MDc3MzQpXG5cbiAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQsIHhbaSArIDVdLCA0LCAtMzc4NTU4KVxuICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpICsgOF0sIDExLCAtMjAyMjU3NDQ2MylcbiAgICBjID0gbWQ1X2hoKGMsIGQsIGEsIGIsIHhbaSArIDExXSwgMTYsIDE4MzkwMzA1NjIpXG4gICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2kgKyAxNF0sIDIzLCAtMzUzMDk1NTYpXG4gICAgYSA9IG1kNV9oaChhLCBiLCBjLCBkLCB4W2kgKyAxXSwgNCwgLTE1MzA5OTIwNjApXG4gICAgZCA9IG1kNV9oaChkLCBhLCBiLCBjLCB4W2kgKyA0XSwgMTEsIDEyNzI4OTMzNTMpXG4gICAgYyA9IG1kNV9oaChjLCBkLCBhLCBiLCB4W2kgKyA3XSwgMTYsIC0xNTU0OTc2MzIpXG4gICAgYiA9IG1kNV9oaChiLCBjLCBkLCBhLCB4W2kgKyAxMF0sIDIzLCAtMTA5NDczMDY0MClcbiAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQsIHhbaSArIDEzXSwgNCwgNjgxMjc5MTc0KVxuICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpICsgMF0sIDExLCAtMzU4NTM3MjIyKVxuICAgIGMgPSBtZDVfaGgoYywgZCwgYSwgYiwgeFtpICsgM10sIDE2LCAtNzIyNTIxOTc5KVxuICAgIGIgPSBtZDVfaGgoYiwgYywgZCwgYSwgeFtpICsgNl0sIDIzLCA3NjAyOTE4OSlcbiAgICBhID0gbWQ1X2hoKGEsIGIsIGMsIGQsIHhbaSArIDldLCA0LCAtNjQwMzY0NDg3KVxuICAgIGQgPSBtZDVfaGgoZCwgYSwgYiwgYywgeFtpICsgMTJdLCAxMSwgLTQyMTgxNTgzNSlcbiAgICBjID0gbWQ1X2hoKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTYsIDUzMDc0MjUyMClcbiAgICBiID0gbWQ1X2hoKGIsIGMsIGQsIGEsIHhbaSArIDJdLCAyMywgLTk5NTMzODY1MSlcblxuICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpICsgMF0sIDYsIC0xOTg2MzA4NDQpXG4gICAgZCA9IG1kNV9paShkLCBhLCBiLCBjLCB4W2kgKyA3XSwgMTAsIDExMjY4OTE0MTUpXG4gICAgYyA9IG1kNV9paShjLCBkLCBhLCBiLCB4W2kgKyAxNF0sIDE1LCAtMTQxNjM1NDkwNSlcbiAgICBiID0gbWQ1X2lpKGIsIGMsIGQsIGEsIHhbaSArIDVdLCAyMSwgLTU3NDM0MDU1KVxuICAgIGEgPSBtZDVfaWkoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA2LCAxNzAwNDg1NTcxKVxuICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpICsgM10sIDEwLCAtMTg5NDk4NjYwNilcbiAgICBjID0gbWQ1X2lpKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTUsIC0xMDUxNTIzKVxuICAgIGIgPSBtZDVfaWkoYiwgYywgZCwgYSwgeFtpICsgMV0sIDIxLCAtMjA1NDkyMjc5OSlcbiAgICBhID0gbWQ1X2lpKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA2LCAxODczMzEzMzU5KVxuICAgIGQgPSBtZDVfaWkoZCwgYSwgYiwgYywgeFtpICsgMTVdLCAxMCwgLTMwNjExNzQ0KVxuICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE1LCAtMTU2MDE5ODM4MClcbiAgICBiID0gbWQ1X2lpKGIsIGMsIGQsIGEsIHhbaSArIDEzXSwgMjEsIDEzMDkxNTE2NDkpXG4gICAgYSA9IG1kNV9paShhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNiwgLTE0NTUyMzA3MClcbiAgICBkID0gbWQ1X2lpKGQsIGEsIGIsIGMsIHhbaSArIDExXSwgMTAsIC0xMTIwMjEwMzc5KVxuICAgIGMgPSBtZDVfaWkoYywgZCwgYSwgYiwgeFtpICsgMl0sIDE1LCA3MTg3ODcyNTkpXG4gICAgYiA9IG1kNV9paShiLCBjLCBkLCBhLCB4W2kgKyA5XSwgMjEsIC0zNDM0ODU1NTEpXG5cbiAgICBhID0gc2FmZV9hZGQoYSwgb2xkYSlcbiAgICBiID0gc2FmZV9hZGQoYiwgb2xkYilcbiAgICBjID0gc2FmZV9hZGQoYywgb2xkYylcbiAgICBkID0gc2FmZV9hZGQoZCwgb2xkZClcbiAgfVxuXG4gIHJldHVybiBbYSwgYiwgYywgZF1cbn1cblxuLypcbiAqIFRoZXNlIGZ1bmN0aW9ucyBpbXBsZW1lbnQgdGhlIGZvdXIgYmFzaWMgb3BlcmF0aW9ucyB0aGUgYWxnb3JpdGhtIHVzZXMuXG4gKi9cbmZ1bmN0aW9uIG1kNV9jbW4gKHEsIGEsIGIsIHgsIHMsIHQpIHtcbiAgcmV0dXJuIHNhZmVfYWRkKGJpdF9yb2woc2FmZV9hZGQoc2FmZV9hZGQoYSwgcSksIHNhZmVfYWRkKHgsIHQpKSwgcyksIGIpXG59XG5cbmZ1bmN0aW9uIG1kNV9mZiAoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1X2NtbigoYiAmIGMpIHwgKCh+YikgJiBkKSwgYSwgYiwgeCwgcywgdClcbn1cblxuZnVuY3Rpb24gbWQ1X2dnIChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gIHJldHVybiBtZDVfY21uKChiICYgZCkgfCAoYyAmICh+ZCkpLCBhLCBiLCB4LCBzLCB0KVxufVxuXG5mdW5jdGlvbiBtZDVfaGggKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgcmV0dXJuIG1kNV9jbW4oYiBeIGMgXiBkLCBhLCBiLCB4LCBzLCB0KVxufVxuXG5mdW5jdGlvbiBtZDVfaWkgKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgcmV0dXJuIG1kNV9jbW4oYyBeIChiIHwgKH5kKSksIGEsIGIsIHgsIHMsIHQpXG59XG5cbi8qXG4gKiBBZGQgaW50ZWdlcnMsIHdyYXBwaW5nIGF0IDJeMzIuIFRoaXMgdXNlcyAxNi1iaXQgb3BlcmF0aW9ucyBpbnRlcm5hbGx5XG4gKiB0byB3b3JrIGFyb3VuZCBidWdzIGluIHNvbWUgSlMgaW50ZXJwcmV0ZXJzLlxuICovXG5mdW5jdGlvbiBzYWZlX2FkZCAoeCwgeSkge1xuICB2YXIgbHN3ID0gKHggJiAweEZGRkYpICsgKHkgJiAweEZGRkYpXG4gIHZhciBtc3cgPSAoeCA+PiAxNikgKyAoeSA+PiAxNikgKyAobHN3ID4+IDE2KVxuICByZXR1cm4gKG1zdyA8PCAxNikgfCAobHN3ICYgMHhGRkZGKVxufVxuXG4vKlxuICogQml0d2lzZSByb3RhdGUgYSAzMi1iaXQgbnVtYmVyIHRvIHRoZSBsZWZ0LlxuICovXG5mdW5jdGlvbiBiaXRfcm9sIChudW0sIGNudCkge1xuICByZXR1cm4gKG51bSA8PCBjbnQpIHwgKG51bSA+Pj4gKDMyIC0gY250KSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZDUgKGJ1Zikge1xuICByZXR1cm4gbWFrZUhhc2goYnVmLCBjb3JlX21kNSlcbn1cbiIsIid1c2Ugc3RyaWN0J1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIExlZ2FjeSA9IHJlcXVpcmUoJy4vbGVnYWN5JylcbnZhciBCYXNlID0gcmVxdWlyZSgnY2lwaGVyLWJhc2UnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1JylcbnZhciBSSVBFTUQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxuXG52YXIgc2hhID0gcmVxdWlyZSgnc2hhLmpzJylcblxudmFyIFpFUk9TID0gQnVmZmVyLmFsbG9jKDEyOClcblxuZnVuY3Rpb24gSG1hYyAoYWxnLCBrZXkpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICBrZXkgPSBCdWZmZXIuZnJvbShrZXkpXG4gIH1cblxuICB2YXIgYmxvY2tzaXplID0gKGFsZyA9PT0gJ3NoYTUxMicgfHwgYWxnID09PSAnc2hhMzg0JykgPyAxMjggOiA2NFxuXG4gIHRoaXMuX2FsZyA9IGFsZ1xuICB0aGlzLl9rZXkgPSBrZXlcbiAgaWYgKGtleS5sZW5ndGggPiBibG9ja3NpemUpIHtcbiAgICB2YXIgaGFzaCA9IGFsZyA9PT0gJ3JtZDE2MCcgPyBuZXcgUklQRU1EMTYwKCkgOiBzaGEoYWxnKVxuICAgIGtleSA9IGhhc2gudXBkYXRlKGtleSkuZGlnZXN0KClcbiAgfSBlbHNlIGlmIChrZXkubGVuZ3RoIDwgYmxvY2tzaXplKSB7XG4gICAga2V5ID0gQnVmZmVyLmNvbmNhdChba2V5LCBaRVJPU10sIGJsb2Nrc2l6ZSlcbiAgfVxuXG4gIHZhciBpcGFkID0gdGhpcy5faXBhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG4gIHZhciBvcGFkID0gdGhpcy5fb3BhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NpemU7IGkrKykge1xuICAgIGlwYWRbaV0gPSBrZXlbaV0gXiAweDM2XG4gICAgb3BhZFtpXSA9IGtleVtpXSBeIDB4NUNcbiAgfVxuICB0aGlzLl9oYXNoID0gYWxnID09PSAncm1kMTYwJyA/IG5ldyBSSVBFTUQxNjAoKSA6IHNoYShhbGcpXG4gIHRoaXMuX2hhc2gudXBkYXRlKGlwYWQpXG59XG5cbmluaGVyaXRzKEhtYWMsIEJhc2UpXG5cbkhtYWMucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB0aGlzLl9oYXNoLnVwZGF0ZShkYXRhKVxufVxuXG5IbWFjLnByb3RvdHlwZS5fZmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoID0gdGhpcy5faGFzaC5kaWdlc3QoKVxuICB2YXIgaGFzaCA9IHRoaXMuX2FsZyA9PT0gJ3JtZDE2MCcgPyBuZXcgUklQRU1EMTYwKCkgOiBzaGEodGhpcy5fYWxnKVxuICByZXR1cm4gaGFzaC51cGRhdGUodGhpcy5fb3BhZCkudXBkYXRlKGgpLmRpZ2VzdCgpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlSG1hYyAoYWxnLCBrZXkpIHtcbiAgYWxnID0gYWxnLnRvTG93ZXJDYXNlKClcbiAgaWYgKGFsZyA9PT0gJ3JtZDE2MCcgfHwgYWxnID09PSAncmlwZW1kMTYwJykge1xuICAgIHJldHVybiBuZXcgSG1hYygncm1kMTYwJywga2V5KVxuICB9XG4gIGlmIChhbGcgPT09ICdtZDUnKSB7XG4gICAgcmV0dXJuIG5ldyBMZWdhY3kobWQ1LCBrZXkpXG4gIH1cbiAgcmV0dXJuIG5ldyBIbWFjKGFsZywga2V5KVxufVxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEJhc2UgPSByZXF1aXJlKCdjaXBoZXItYmFzZScpXG5cbnZhciBaRVJPUyA9IEJ1ZmZlci5hbGxvYygxMjgpXG52YXIgYmxvY2tzaXplID0gNjRcblxuZnVuY3Rpb24gSG1hYyAoYWxnLCBrZXkpIHtcbiAgQmFzZS5jYWxsKHRoaXMsICdkaWdlc3QnKVxuICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICBrZXkgPSBCdWZmZXIuZnJvbShrZXkpXG4gIH1cblxuICB0aGlzLl9hbGcgPSBhbGdcbiAgdGhpcy5fa2V5ID0ga2V5XG5cbiAgaWYgKGtleS5sZW5ndGggPiBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBhbGcoa2V5KVxuICB9IGVsc2UgaWYgKGtleS5sZW5ndGggPCBibG9ja3NpemUpIHtcbiAgICBrZXkgPSBCdWZmZXIuY29uY2F0KFtrZXksIFpFUk9TXSwgYmxvY2tzaXplKVxuICB9XG5cbiAgdmFyIGlwYWQgPSB0aGlzLl9pcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcbiAgdmFyIG9wYWQgPSB0aGlzLl9vcGFkID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSlcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG5cbiAgdGhpcy5faGFzaCA9IFtpcGFkXVxufVxuXG5pbmhlcml0cyhIbWFjLCBCYXNlKVxuXG5IbWFjLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5faGFzaC5wdXNoKGRhdGEpXG59XG5cbkhtYWMucHJvdG90eXBlLl9maW5hbCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGggPSB0aGlzLl9hbGcoQnVmZmVyLmNvbmNhdCh0aGlzLl9oYXNoKSlcbiAgcmV0dXJuIHRoaXMuX2FsZyhCdWZmZXIuY29uY2F0KFt0aGlzLl9vcGFkLCBoXSkpXG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWNcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLnJhbmRvbUJ5dGVzID0gZXhwb3J0cy5ybmcgPSBleHBvcnRzLnBzZXVkb1JhbmRvbUJ5dGVzID0gZXhwb3J0cy5wcm5nID0gcmVxdWlyZSgncmFuZG9tYnl0ZXMnKVxuZXhwb3J0cy5jcmVhdGVIYXNoID0gZXhwb3J0cy5IYXNoID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gnKVxuZXhwb3J0cy5jcmVhdGVIbWFjID0gZXhwb3J0cy5IbWFjID0gcmVxdWlyZSgnY3JlYXRlLWhtYWMnKVxuXG52YXIgYWxnb3MgPSByZXF1aXJlKCdicm93c2VyaWZ5LXNpZ24vYWxnb3MnKVxudmFyIGFsZ29LZXlzID0gT2JqZWN0LmtleXMoYWxnb3MpXG52YXIgaGFzaGVzID0gWydzaGExJywgJ3NoYTIyNCcsICdzaGEyNTYnLCAnc2hhMzg0JywgJ3NoYTUxMicsICdtZDUnLCAncm1kMTYwJ10uY29uY2F0KGFsZ29LZXlzKVxuZXhwb3J0cy5nZXRIYXNoZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBoYXNoZXNcbn1cblxudmFyIHAgPSByZXF1aXJlKCdwYmtkZjInKVxuZXhwb3J0cy5wYmtkZjIgPSBwLnBia2RmMlxuZXhwb3J0cy5wYmtkZjJTeW5jID0gcC5wYmtkZjJTeW5jXG5cbnZhciBhZXMgPSByZXF1aXJlKCdicm93c2VyaWZ5LWNpcGhlcicpXG5cbmV4cG9ydHMuQ2lwaGVyID0gYWVzLkNpcGhlclxuZXhwb3J0cy5jcmVhdGVDaXBoZXIgPSBhZXMuY3JlYXRlQ2lwaGVyXG5leHBvcnRzLkNpcGhlcml2ID0gYWVzLkNpcGhlcml2XG5leHBvcnRzLmNyZWF0ZUNpcGhlcml2ID0gYWVzLmNyZWF0ZUNpcGhlcml2XG5leHBvcnRzLkRlY2lwaGVyID0gYWVzLkRlY2lwaGVyXG5leHBvcnRzLmNyZWF0ZURlY2lwaGVyID0gYWVzLmNyZWF0ZURlY2lwaGVyXG5leHBvcnRzLkRlY2lwaGVyaXYgPSBhZXMuRGVjaXBoZXJpdlxuZXhwb3J0cy5jcmVhdGVEZWNpcGhlcml2ID0gYWVzLmNyZWF0ZURlY2lwaGVyaXZcbmV4cG9ydHMuZ2V0Q2lwaGVycyA9IGFlcy5nZXRDaXBoZXJzXG5leHBvcnRzLmxpc3RDaXBoZXJzID0gYWVzLmxpc3RDaXBoZXJzXG5cbnZhciBkaCA9IHJlcXVpcmUoJ2RpZmZpZS1oZWxsbWFuJylcblxuZXhwb3J0cy5EaWZmaWVIZWxsbWFuR3JvdXAgPSBkaC5EaWZmaWVIZWxsbWFuR3JvdXBcbmV4cG9ydHMuY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwID0gZGguY3JlYXRlRGlmZmllSGVsbG1hbkdyb3VwXG5leHBvcnRzLmdldERpZmZpZUhlbGxtYW4gPSBkaC5nZXREaWZmaWVIZWxsbWFuXG5leHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW4gPSBkaC5jcmVhdGVEaWZmaWVIZWxsbWFuXG5leHBvcnRzLkRpZmZpZUhlbGxtYW4gPSBkaC5EaWZmaWVIZWxsbWFuXG5cbnZhciBzaWduID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1zaWduJylcblxuZXhwb3J0cy5jcmVhdGVTaWduID0gc2lnbi5jcmVhdGVTaWduXG5leHBvcnRzLlNpZ24gPSBzaWduLlNpZ25cbmV4cG9ydHMuY3JlYXRlVmVyaWZ5ID0gc2lnbi5jcmVhdGVWZXJpZnlcbmV4cG9ydHMuVmVyaWZ5ID0gc2lnbi5WZXJpZnlcblxuZXhwb3J0cy5jcmVhdGVFQ0RIID0gcmVxdWlyZSgnY3JlYXRlLWVjZGgnKVxuXG52YXIgcHVibGljRW5jcnlwdCA9IHJlcXVpcmUoJ3B1YmxpYy1lbmNyeXB0JylcblxuZXhwb3J0cy5wdWJsaWNFbmNyeXB0ID0gcHVibGljRW5jcnlwdC5wdWJsaWNFbmNyeXB0XG5leHBvcnRzLnByaXZhdGVFbmNyeXB0ID0gcHVibGljRW5jcnlwdC5wcml2YXRlRW5jcnlwdFxuZXhwb3J0cy5wdWJsaWNEZWNyeXB0ID0gcHVibGljRW5jcnlwdC5wdWJsaWNEZWNyeXB0XG5leHBvcnRzLnByaXZhdGVEZWNyeXB0ID0gcHVibGljRW5jcnlwdC5wcml2YXRlRGVjcnlwdFxuXG4vLyB0aGUgbGVhc3QgSSBjYW4gZG8gaXMgbWFrZSBlcnJvciBtZXNzYWdlcyBmb3IgdGhlIHJlc3Qgb2YgdGhlIG5vZGUuanMvY3J5cHRvIGFwaS5cbi8vIDtbXG4vLyAgICdjcmVhdGVDcmVkZW50aWFscydcbi8vIF0uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuLy8gICBleHBvcnRzW25hbWVdID0gZnVuY3Rpb24gKCkge1xuLy8gICAgIHRocm93IG5ldyBFcnJvcihbXG4vLyAgICAgICAnc29ycnksICcgKyBuYW1lICsgJyBpcyBub3QgaW1wbGVtZW50ZWQgeWV0Jyxcbi8vICAgICAgICd3ZSBhY2NlcHQgcHVsbCByZXF1ZXN0cycsXG4vLyAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL2NyeXB0by1icm93c2VyaWZ5L2NyeXB0by1icm93c2VyaWZ5J1xuLy8gICAgIF0uam9pbignXFxuJykpXG4vLyAgIH1cbi8vIH0pXG5cbmV4cG9ydHMuY3JlYXRlQ3JlZGVudGlhbHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcihbXG4gICAgJ3NvcnJ5LCBjcmVhdGVDcmVkZW50aWFscyBpcyBub3QgaW1wbGVtZW50ZWQgeWV0JyxcbiAgICAnd2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMnLFxuICAgICdodHRwczovL2dpdGh1Yi5jb20vY3J5cHRvLWJyb3dzZXJpZnkvY3J5cHRvLWJyb3dzZXJpZnknXG4gIF0uam9pbignXFxuJykpXG59XG5cbmV4cG9ydHMuY29uc3RhbnRzID0ge1xuICAnREhfQ0hFQ0tfUF9OT1RfU0FGRV9QUklNRSc6IDIsXG4gICdESF9DSEVDS19QX05PVF9QUklNRSc6IDEsXG4gICdESF9VTkFCTEVfVE9fQ0hFQ0tfR0VORVJBVE9SJzogNCxcbiAgJ0RIX05PVF9TVUlUQUJMRV9HRU5FUkFUT1InOiA4LFxuICAnTlBOX0VOQUJMRUQnOiAxLFxuICAnQUxQTl9FTkFCTEVEJzogMSxcbiAgJ1JTQV9QS0NTMV9QQURESU5HJzogMSxcbiAgJ1JTQV9TU0xWMjNfUEFERElORyc6IDIsXG4gICdSU0FfTk9fUEFERElORyc6IDMsXG4gICdSU0FfUEtDUzFfT0FFUF9QQURESU5HJzogNCxcbiAgJ1JTQV9YOTMxX1BBRERJTkcnOiA1LFxuICAnUlNBX1BLQ1MxX1BTU19QQURESU5HJzogNixcbiAgJ1BPSU5UX0NPTlZFUlNJT05fQ09NUFJFU1NFRCc6IDIsXG4gICdQT0lOVF9DT05WRVJTSU9OX1VOQ09NUFJFU1NFRCc6IDQsXG4gICdQT0lOVF9DT05WRVJTSU9OX0hZQlJJRCc6IDZcbn1cbiIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9lbmMtYmFzZTY0XCIpLCByZXF1aXJlKFwiLi9tZDVcIiksIHJlcXVpcmUoXCIuL2V2cGtkZlwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vZW5jLWJhc2U2NFwiLCBcIi4vbWQ1XCIsIFwiLi9ldnBrZGZcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIExvb2t1cCB0YWJsZXNcblx0ICAgIHZhciBTQk9YID0gW107XG5cdCAgICB2YXIgSU5WX1NCT1ggPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzAgPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzEgPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzIgPSBbXTtcblx0ICAgIHZhciBTVUJfTUlYXzMgPSBbXTtcblx0ICAgIHZhciBJTlZfU1VCX01JWF8wID0gW107XG5cdCAgICB2YXIgSU5WX1NVQl9NSVhfMSA9IFtdO1xuXHQgICAgdmFyIElOVl9TVUJfTUlYXzIgPSBbXTtcblx0ICAgIHZhciBJTlZfU1VCX01JWF8zID0gW107XG5cblx0ICAgIC8vIENvbXB1dGUgbG9va3VwIHRhYmxlc1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvLyBDb21wdXRlIGRvdWJsZSB0YWJsZVxuXHQgICAgICAgIHZhciBkID0gW107XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICBpZiAoaSA8IDEyOCkge1xuXHQgICAgICAgICAgICAgICAgZFtpXSA9IGkgPDwgMTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIGRbaV0gPSAoaSA8PCAxKSBeIDB4MTFiO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gV2FsayBHRigyXjgpXG5cdCAgICAgICAgdmFyIHggPSAwO1xuXHQgICAgICAgIHZhciB4aSA9IDA7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICAvLyBDb21wdXRlIHNib3hcblx0ICAgICAgICAgICAgdmFyIHN4ID0geGkgXiAoeGkgPDwgMSkgXiAoeGkgPDwgMikgXiAoeGkgPDwgMykgXiAoeGkgPDwgNCk7XG5cdCAgICAgICAgICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2Mztcblx0ICAgICAgICAgICAgU0JPWFt4XSA9IHN4O1xuXHQgICAgICAgICAgICBJTlZfU0JPWFtzeF0gPSB4O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgbXVsdGlwbGljYXRpb25cblx0ICAgICAgICAgICAgdmFyIHgyID0gZFt4XTtcblx0ICAgICAgICAgICAgdmFyIHg0ID0gZFt4Ml07XG5cdCAgICAgICAgICAgIHZhciB4OCA9IGRbeDRdO1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgc3ViIGJ5dGVzLCBtaXggY29sdW1ucyB0YWJsZXNcblx0ICAgICAgICAgICAgdmFyIHQgPSAoZFtzeF0gKiAweDEwMSkgXiAoc3ggKiAweDEwMTAxMDApO1xuXHQgICAgICAgICAgICBTVUJfTUlYXzBbeF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOCk7XG5cdCAgICAgICAgICAgIFNVQl9NSVhfMVt4XSA9ICh0IDw8IDE2KSB8ICh0ID4+PiAxNik7XG5cdCAgICAgICAgICAgIFNVQl9NSVhfMlt4XSA9ICh0IDw8IDgpICB8ICh0ID4+PiAyNCk7XG5cdCAgICAgICAgICAgIFNVQl9NSVhfM1t4XSA9IHQ7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBpbnYgc3ViIGJ5dGVzLCBpbnYgbWl4IGNvbHVtbnMgdGFibGVzXG5cdCAgICAgICAgICAgIHZhciB0ID0gKHg4ICogMHgxMDEwMTAxKSBeICh4NCAqIDB4MTAwMDEpIF4gKHgyICogMHgxMDEpIF4gKHggKiAweDEwMTAxMDApO1xuXHQgICAgICAgICAgICBJTlZfU1VCX01JWF8wW3N4XSA9ICh0IDw8IDI0KSB8ICh0ID4+PiA4KTtcblx0ICAgICAgICAgICAgSU5WX1NVQl9NSVhfMVtzeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpO1xuXHQgICAgICAgICAgICBJTlZfU1VCX01JWF8yW3N4XSA9ICh0IDw8IDgpICB8ICh0ID4+PiAyNCk7XG5cdCAgICAgICAgICAgIElOVl9TVUJfTUlYXzNbc3hdID0gdDtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIG5leHQgY291bnRlclxuXHQgICAgICAgICAgICBpZiAoIXgpIHtcblx0ICAgICAgICAgICAgICAgIHggPSB4aSA9IDE7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB4ID0geDIgXiBkW2RbZFt4OCBeIHgyXV1dO1xuXHQgICAgICAgICAgICAgICAgeGkgXj0gZFtkW3hpXV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvLyBQcmVjb21wdXRlZCBSY29uIGxvb2t1cFxuXHQgICAgdmFyIFJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQUVTIGJsb2NrIGNpcGhlciBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBBRVMgPSBDX2FsZ28uQUVTID0gQmxvY2tDaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTa2lwIHJlc2V0IG9mIG5Sb3VuZHMgaGFzIGJlZW4gc2V0IGJlZm9yZSBhbmQga2V5IGRpZCBub3QgY2hhbmdlXG5cdCAgICAgICAgICAgIGlmICh0aGlzLl9uUm91bmRzICYmIHRoaXMuX2tleVByaW9yUmVzZXQgPT09IHRoaXMuX2tleSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXlQcmlvclJlc2V0ID0gdGhpcy5fa2V5O1xuXHQgICAgICAgICAgICB2YXIga2V5V29yZHMgPSBrZXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBrZXlTaXplID0ga2V5LnNpZ0J5dGVzIC8gNDtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIG51bWJlciBvZiByb3VuZHNcblx0ICAgICAgICAgICAgdmFyIG5Sb3VuZHMgPSB0aGlzLl9uUm91bmRzID0ga2V5U2l6ZSArIDY7XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0ZSBudW1iZXIgb2Yga2V5IHNjaGVkdWxlIHJvd3Ncblx0ICAgICAgICAgICAgdmFyIGtzUm93cyA9IChuUm91bmRzICsgMSkgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUga2V5IHNjaGVkdWxlXG5cdCAgICAgICAgICAgIHZhciBrZXlTY2hlZHVsZSA9IHRoaXMuX2tleVNjaGVkdWxlID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGtzUm93ID0gMDsga3NSb3cgPCBrc1Jvd3M7IGtzUm93KyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChrc1JvdyA8IGtleVNpemUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBrZXlTY2hlZHVsZVtrc1Jvd10gPSBrZXlXb3Jkc1trc1Jvd107XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ga2V5U2NoZWR1bGVba3NSb3cgLSAxXTtcblxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghKGtzUm93ICUga2V5U2l6ZSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gUm90IHdvcmRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdCA9ICh0IDw8IDgpIHwgKHQgPj4+IDI0KTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWIgd29yZFxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0ID0gKFNCT1hbdCA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyh0ID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsodCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbdCAmIDB4ZmZdO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1peCBSY29uXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHQgXj0gUkNPTlsoa3NSb3cgLyBrZXlTaXplKSB8IDBdIDw8IDI0O1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYga3NSb3cgJSBrZXlTaXplID09IDQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3ViIHdvcmRcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdCA9IChTQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3QgJiAweGZmXTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgICAgICBrZXlTY2hlZHVsZVtrc1Jvd10gPSBrZXlTY2hlZHVsZVtrc1JvdyAtIGtleVNpemVdIF4gdDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgaW52IGtleSBzY2hlZHVsZVxuXHQgICAgICAgICAgICB2YXIgaW52S2V5U2NoZWR1bGUgPSB0aGlzLl9pbnZLZXlTY2hlZHVsZSA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpbnZLc1JvdyA9IDA7IGludktzUm93IDwga3NSb3dzOyBpbnZLc1JvdysrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIga3NSb3cgPSBrc1Jvd3MgLSBpbnZLc1JvdztcblxuXHQgICAgICAgICAgICAgICAgaWYgKGludktzUm93ICUgNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ga2V5U2NoZWR1bGVba3NSb3ddO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGtleVNjaGVkdWxlW2tzUm93IC0gNF07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGlmIChpbnZLc1JvdyA8IDQgfHwga3NSb3cgPD0gNCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IHQ7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGludktleVNjaGVkdWxlW2ludktzUm93XSA9IElOVl9TVUJfTUlYXzBbU0JPWFt0ID4+PiAyNF1dIF4gSU5WX1NVQl9NSVhfMVtTQk9YWyh0ID4+PiAxNikgJiAweGZmXV0gXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOVl9TVUJfTUlYXzJbU0JPWFsodCA+Pj4gOCkgJiAweGZmXV0gXiBJTlZfU1VCX01JWF8zW1NCT1hbdCAmIDB4ZmZdXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBlbmNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5fa2V5U2NoZWR1bGUsIFNVQl9NSVhfMCwgU1VCX01JWF8xLCBTVUJfTUlYXzIsIFNVQl9NSVhfMywgU0JPWCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGRlY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTd2FwIDJuZCBhbmQgNHRoIHJvd3Ncblx0ICAgICAgICAgICAgdmFyIHQgPSBNW29mZnNldCArIDFdO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDFdID0gTVtvZmZzZXQgKyAzXTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAzXSA9IHQ7XG5cblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5faW52S2V5U2NoZWR1bGUsIElOVl9TVUJfTUlYXzAsIElOVl9TVUJfTUlYXzEsIElOVl9TVUJfTUlYXzIsIElOVl9TVUJfTUlYXzMsIElOVl9TQk9YKTtcblxuXHQgICAgICAgICAgICAvLyBJbnYgc3dhcCAybmQgYW5kIDR0aCByb3dzXG5cdCAgICAgICAgICAgIHZhciB0ID0gTVtvZmZzZXQgKyAxXTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAxXSA9IE1bb2Zmc2V0ICsgM107XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgM10gPSB0O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9DcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0LCBrZXlTY2hlZHVsZSwgU1VCX01JWF8wLCBTVUJfTUlYXzEsIFNVQl9NSVhfMiwgU1VCX01JWF8zLCBTQk9YKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBuUm91bmRzID0gdGhpcy5fblJvdW5kcztcblxuXHQgICAgICAgICAgICAvLyBHZXQgaW5wdXQsIGFkZCByb3VuZCBrZXlcblx0ICAgICAgICAgICAgdmFyIHMwID0gTVtvZmZzZXRdICAgICBeIGtleVNjaGVkdWxlWzBdO1xuXHQgICAgICAgICAgICB2YXIgczEgPSBNW29mZnNldCArIDFdIF4ga2V5U2NoZWR1bGVbMV07XG5cdCAgICAgICAgICAgIHZhciBzMiA9IE1bb2Zmc2V0ICsgMl0gXiBrZXlTY2hlZHVsZVsyXTtcblx0ICAgICAgICAgICAgdmFyIHMzID0gTVtvZmZzZXQgKyAzXSBeIGtleVNjaGVkdWxlWzNdO1xuXG5cdCAgICAgICAgICAgIC8vIEtleSBzY2hlZHVsZSByb3cgY291bnRlclxuXHQgICAgICAgICAgICB2YXIga3NSb3cgPSA0O1xuXG5cdCAgICAgICAgICAgIC8vIFJvdW5kc1xuXHQgICAgICAgICAgICBmb3IgKHZhciByb3VuZCA9IDE7IHJvdW5kIDwgblJvdW5kczsgcm91bmQrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hpZnQgcm93cywgc3ViIGJ5dGVzLCBtaXggY29sdW1ucywgYWRkIHJvdW5kIGtleVxuXHQgICAgICAgICAgICAgICAgdmFyIHQwID0gU1VCX01JWF8wW3MwID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczIgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxID0gU1VCX01JWF8wW3MxID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMyID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczMgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczAgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQyID0gU1VCX01JWF8wW3MyID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMzID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczAgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczEgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQzID0gU1VCX01JWF8wW3MzID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczEgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBVcGRhdGUgc3RhdGVcblx0ICAgICAgICAgICAgICAgIHMwID0gdDA7XG5cdCAgICAgICAgICAgICAgICBzMSA9IHQxO1xuXHQgICAgICAgICAgICAgICAgczIgPSB0Mjtcblx0ICAgICAgICAgICAgICAgIHMzID0gdDM7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBTaGlmdCByb3dzLCBzdWIgYnl0ZXMsIGFkZCByb3VuZCBrZXlcblx0ICAgICAgICAgICAgdmFyIHQwID0gKChTQk9YW3MwID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMxID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczIgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MzICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cdCAgICAgICAgICAgIHZhciB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdO1xuXHQgICAgICAgICAgICB2YXIgdDIgPSAoKFNCT1hbczIgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczMgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMCA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczEgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXTtcblx0ICAgICAgICAgICAgdmFyIHQzID0gKChTQk9YW3MzID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMwID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczEgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MyICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK107XG5cblx0ICAgICAgICAgICAgLy8gU2V0IG91dHB1dFxuXHQgICAgICAgICAgICBNW29mZnNldF0gICAgID0gdDA7XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0ICsgMV0gPSB0MTtcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAyXSA9IHQyO1xuXHQgICAgICAgICAgICBNW29mZnNldCArIDNdID0gdDM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGtleVNpemU6IDI1Ni8zMlxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuQUVTLmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLkFFUyA9IEJsb2NrQ2lwaGVyLl9jcmVhdGVIZWxwZXIoQUVTKTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5BRVM7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBDaXBoZXIgY29yZSBjb21wb25lbnRzLlxuXHQgKi9cblx0Q3J5cHRvSlMubGliLkNpcGhlciB8fCAoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBDX2xpYi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtO1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cdCAgICB2YXIgVXRmOCA9IENfZW5jLlV0Zjg7XG5cdCAgICB2YXIgQmFzZTY0ID0gQ19lbmMuQmFzZTY0O1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblx0ICAgIHZhciBFdnBLREYgPSBDX2FsZ28uRXZwS0RGO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJhc2UgY2lwaGVyIHRlbXBsYXRlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBrZXlTaXplIFRoaXMgY2lwaGVyJ3Mga2V5IHNpemUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGl2U2l6ZSBUaGlzIGNpcGhlcidzIElWIHNpemUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9FTkNfWEZPUk1fTU9ERSBBIGNvbnN0YW50IHJlcHJlc2VudGluZyBlbmNyeXB0aW9uIG1vZGUuXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gX0RFQ19YRk9STV9NT0RFIEEgY29uc3RhbnQgcmVwcmVzZW50aW5nIGRlY3J5cHRpb24gbW9kZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENpcGhlciA9IENfbGliLkNpcGhlciA9IEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gaXYgVGhlIElWIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCgpLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyB0aGlzIGNpcGhlciBpbiBlbmNyeXB0aW9uIG1vZGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlcn0gQSBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXIgPSBDcnlwdG9KUy5hbGdvLkFFUy5jcmVhdGVFbmNyeXB0b3Ioa2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVFbmNyeXB0b3I6IGZ1bmN0aW9uIChrZXksIGNmZykge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUodGhpcy5fRU5DX1hGT1JNX01PREUsIGtleSwgY2ZnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyB0aGlzIGNpcGhlciBpbiBkZWNyeXB0aW9uIG1vZGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlcn0gQSBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXIgPSBDcnlwdG9KUy5hbGdvLkFFUy5jcmVhdGVEZWNyeXB0b3Ioa2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVEZWNyeXB0b3I6IGZ1bmN0aW9uIChrZXksIGNmZykge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUodGhpcy5fREVDX1hGT1JNX01PREUsIGtleSwgY2ZnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGNpcGhlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4Zm9ybU1vZGUgRWl0aGVyIHRoZSBlbmNyeXB0aW9uIG9yIGRlY3J5cHRpb24gdHJhbnNvcm1hdGlvbiBtb2RlIGNvbnN0YW50LlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyID0gQ3J5cHRvSlMuYWxnby5BRVMuY3JlYXRlKENyeXB0b0pTLmFsZ28uQUVTLl9FTkNfWEZPUk1fTU9ERSwga2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoeGZvcm1Nb2RlLCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgdGhpcy5jZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKTtcblxuXHQgICAgICAgICAgICAvLyBTdG9yZSB0cmFuc2Zvcm0gbW9kZSBhbmQga2V5XG5cdCAgICAgICAgICAgIHRoaXMuX3hmb3JtTW9kZSA9IHhmb3JtTW9kZTtcblx0ICAgICAgICAgICAgdGhpcy5fa2V5ID0ga2V5O1xuXG5cdCAgICAgICAgICAgIC8vIFNldCBpbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIGNpcGhlciB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgY2lwaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gUmVzZXQgZGF0YSBidWZmZXJcblx0ICAgICAgICAgICAgQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5yZXNldC5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtY2lwaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHRoaXMuX2RvUmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWRkcyBkYXRhIHRvIGJlIGVuY3J5cHRlZCBvciBkZWNyeXB0ZWQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGRhdGFVcGRhdGUgVGhlIGRhdGEgdG8gZW5jcnlwdCBvciBkZWNyeXB0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGF0YSBhZnRlciBwcm9jZXNzaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLnByb2Nlc3MoJ2RhdGEnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5wcm9jZXNzKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcHJvY2VzczogZnVuY3Rpb24gKGRhdGFVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gQXBwZW5kXG5cdCAgICAgICAgICAgIHRoaXMuX2FwcGVuZChkYXRhVXBkYXRlKTtcblxuXHQgICAgICAgICAgICAvLyBQcm9jZXNzIGF2YWlsYWJsZSBibG9ja3Ncblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3MoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluYWxpemVzIHRoZSBlbmNyeXB0aW9uIG9yIGRlY3J5cHRpb24gcHJvY2Vzcy5cblx0ICAgICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhVXBkYXRlIFRoZSBmaW5hbCBkYXRhIHRvIGVuY3J5cHQgb3IgZGVjcnlwdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRhdGEgYWZ0ZXIgZmluYWwgcHJvY2Vzc2luZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5maW5hbGl6ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLmZpbmFsaXplKCdkYXRhJyk7XG5cdCAgICAgICAgICogICAgIHZhciBlbmNyeXB0ZWQgPSBjaXBoZXIuZmluYWxpemUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKGRhdGFVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gRmluYWwgZGF0YSB1cGRhdGVcblx0ICAgICAgICAgICAgaWYgKGRhdGFVcGRhdGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2FwcGVuZChkYXRhVXBkYXRlKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtY2lwaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHZhciBmaW5hbFByb2Nlc3NlZERhdGEgPSB0aGlzLl9kb0ZpbmFsaXplKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGZpbmFsUHJvY2Vzc2VkRGF0YTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogMTI4LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiAxMjgvMzIsXG5cblx0ICAgICAgICBfRU5DX1hGT1JNX01PREU6IDEsXG5cblx0ICAgICAgICBfREVDX1hGT1JNX01PREU6IDIsXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIHNob3J0Y3V0IGZ1bmN0aW9ucyB0byBhIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgdG8gY3JlYXRlIGEgaGVscGVyIGZvci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gQW4gb2JqZWN0IHdpdGggZW5jcnlwdCBhbmQgZGVjcnlwdCBzaG9ydGN1dCBmdW5jdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBBRVMgPSBDcnlwdG9KUy5saWIuQ2lwaGVyLl9jcmVhdGVIZWxwZXIoQ3J5cHRvSlMuYWxnby5BRVMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9jcmVhdGVIZWxwZXI6IChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkge1xuXHQgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGFzc3dvcmRCYXNlZENpcGhlcjtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNlcmlhbGl6YWJsZUNpcGhlcjtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2lwaGVyKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4ge1xuXHQgICAgICAgICAgICAgICAgICAgIGVuY3J5cHQ6IGZ1bmN0aW9uIChtZXNzYWdlLCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0Q2lwaGVyU3RyYXRlZ3koa2V5KS5lbmNyeXB0KGNpcGhlciwgbWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgICAgICAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVydGV4dCwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkuZGVjcnlwdChjaXBoZXIsIGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH0oKSlcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJhc2Ugc3RyZWFtIGNpcGhlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgY2lwaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiAxICgzMiBiaXRzKVxuXHQgICAgICovXG5cdCAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyID0gQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gUHJvY2VzcyBwYXJ0aWFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB2YXIgZmluYWxQcm9jZXNzZWRCbG9ja3MgPSB0aGlzLl9wcm9jZXNzKCEhJ2ZsdXNoJyk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGZpbmFsUHJvY2Vzc2VkQmxvY2tzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDFcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIE1vZGUgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19tb2RlID0gQy5tb2RlID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWJzdHJhY3QgYmFzZSBibG9jayBjaXBoZXIgbW9kZSB0ZW1wbGF0ZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIEJsb2NrQ2lwaGVyTW9kZSA9IENfbGliLkJsb2NrQ2lwaGVyTW9kZSA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDcmVhdGVzIHRoaXMgbW9kZSBmb3IgZW5jcnlwdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgQSBibG9jayBjaXBoZXIgaW5zdGFuY2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gaXYgVGhlIElWIHdvcmRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgbW9kZSA9IENyeXB0b0pTLm1vZGUuQ0JDLmNyZWF0ZUVuY3J5cHRvcihjaXBoZXIsIGl2LndvcmRzKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjcmVhdGVFbmNyeXB0b3I6IGZ1bmN0aW9uIChjaXBoZXIsIGl2KSB7XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLkVuY3J5cHRvci5jcmVhdGUoY2lwaGVyLCBpdik7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgdGhpcyBtb2RlIGZvciBkZWNyeXB0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBBIGJsb2NrIGNpcGhlciBpbnN0YW5jZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSBpdiBUaGUgSVYgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBtb2RlID0gQ3J5cHRvSlMubW9kZS5DQkMuY3JlYXRlRGVjcnlwdG9yKGNpcGhlciwgaXYud29yZHMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNyZWF0ZURlY3J5cHRvcjogZnVuY3Rpb24gKGNpcGhlciwgaXYpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuRGVjcnlwdG9yLmNyZWF0ZShjaXBoZXIsIGl2KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIG1vZGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIEEgYmxvY2sgY2lwaGVyIGluc3RhbmNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGl2IFRoZSBJViB3b3Jkcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIG1vZGUgPSBDcnlwdG9KUy5tb2RlLkNCQy5FbmNyeXB0b3IuY3JlYXRlKGNpcGhlciwgaXYud29yZHMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjaXBoZXIsIGl2KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2NpcGhlciA9IGNpcGhlcjtcblx0ICAgICAgICAgICAgdGhpcy5faXYgPSBpdjtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBDaXBoZXIgQmxvY2sgQ2hhaW5pbmcgbW9kZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENCQyA9IENfbW9kZS5DQkMgPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEFic3RyYWN0IGJhc2UgQ0JDIG1vZGUuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdmFyIENCQyA9IEJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENCQyBlbmNyeXB0b3IuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgQ0JDLkVuY3J5cHRvciA9IENCQy5leHRlbmQoe1xuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogUHJvY2Vzc2VzIHRoZSBkYXRhIGJsb2NrIGF0IG9mZnNldC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgVGhlIGRhdGEgd29yZHMgdG8gb3BlcmF0ZSBvbi5cblx0ICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IHdoZXJlIHRoZSBibG9jayBzdGFydHMuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICBtb2RlLnByb2Nlc3NCbG9jayhkYXRhLndvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyO1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFhPUiBhbmQgZW5jcnlwdFxuXHQgICAgICAgICAgICAgICAgeG9yQmxvY2suY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUpO1xuXHQgICAgICAgICAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENCQyBkZWNyeXB0b3IuXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgQ0JDLkRlY3J5cHRvciA9IENCQy5leHRlbmQoe1xuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogUHJvY2Vzc2VzIHRoZSBkYXRhIGJsb2NrIGF0IG9mZnNldC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgVGhlIGRhdGEgd29yZHMgdG8gb3BlcmF0ZSBvbi5cblx0ICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IHdoZXJlIHRoZSBibG9jayBzdGFydHMuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICBtb2RlLnByb2Nlc3NCbG9jayhkYXRhLndvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyO1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoaXMgYmxvY2sgdG8gdXNlIHdpdGggbmV4dCBibG9ja1xuXHQgICAgICAgICAgICAgICAgdmFyIHRoaXNCbG9jayA9IHdvcmRzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgYmxvY2tTaXplKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRGVjcnlwdCBhbmQgWE9SXG5cdCAgICAgICAgICAgICAgICBjaXBoZXIuZGVjcnlwdEJsb2NrKHdvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICAgICAgeG9yQmxvY2suY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBUaGlzIGJsb2NrIGJlY29tZXMgdGhlIHByZXZpb3VzIGJsb2NrXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB0aGlzQmxvY2s7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblxuXHQgICAgICAgIGZ1bmN0aW9uIHhvckJsb2NrKHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgaXYgPSB0aGlzLl9pdjtcblxuXHQgICAgICAgICAgICAvLyBDaG9vc2UgbWl4aW5nIGJsb2NrXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gaXY7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gdGhpcy5fcHJldkJsb2NrO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gWE9SIGJsb2Nrc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBibG9ja1tpXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHJldHVybiBDQkM7XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFBhZGRpbmcgbmFtZXNwYWNlLlxuXHQgICAgICovXG5cdCAgICB2YXIgQ19wYWQgPSBDLnBhZCA9IHt9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIFBLQ1MgIzUvNyBwYWRkaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgUGtjczcgPSBDX3BhZC5Qa2NzNyA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBQYWRzIGRhdGEgdXNpbmcgdGhlIGFsZ29yaXRobSBkZWZpbmVkIGluIFBLQ1MgIzUvNy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBkYXRhIFRoZSBkYXRhIHRvIHBhZC5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gYmxvY2tTaXplIFRoZSBtdWx0aXBsZSB0aGF0IHRoZSBkYXRhIHNob3VsZCBiZSBwYWRkZWQgdG8uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIENyeXB0b0pTLnBhZC5Qa2NzNy5wYWQod29yZEFycmF5LCA0KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDtcblxuXHQgICAgICAgICAgICAvLyBDb3VudCBwYWRkaW5nIGJ5dGVzXG5cdCAgICAgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gYmxvY2tTaXplQnl0ZXMgLSBkYXRhLnNpZ0J5dGVzICUgYmxvY2tTaXplQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ3JlYXRlIHBhZGRpbmcgd29yZFxuXHQgICAgICAgICAgICB2YXIgcGFkZGluZ1dvcmQgPSAoblBhZGRpbmdCeXRlcyA8PCAyNCkgfCAoblBhZGRpbmdCeXRlcyA8PCAxNikgfCAoblBhZGRpbmdCeXRlcyA8PCA4KSB8IG5QYWRkaW5nQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ3JlYXRlIHBhZGRpbmdcblx0ICAgICAgICAgICAgdmFyIHBhZGRpbmdXb3JkcyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5QYWRkaW5nQnl0ZXM7IGkgKz0gNCkge1xuXHQgICAgICAgICAgICAgICAgcGFkZGluZ1dvcmRzLnB1c2gocGFkZGluZ1dvcmQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nID0gV29yZEFycmF5LmNyZWF0ZShwYWRkaW5nV29yZHMsIG5QYWRkaW5nQnl0ZXMpO1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGEuY29uY2F0KHBhZGRpbmcpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBVbnBhZHMgZGF0YSB0aGF0IGhhZCBiZWVuIHBhZGRlZCB1c2luZyB0aGUgYWxnb3JpdGhtIGRlZmluZWQgaW4gUEtDUyAjNS83LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGRhdGEgVGhlIGRhdGEgdG8gdW5wYWQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIENyeXB0b0pTLnBhZC5Qa2NzNy51bnBhZCh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGVcblx0ICAgICAgICAgICAgdmFyIG5QYWRkaW5nQnl0ZXMgPSBkYXRhLndvcmRzWyhkYXRhLnNpZ0J5dGVzIC0gMSkgPj4+IDJdICYgMHhmZjtcblxuXHQgICAgICAgICAgICAvLyBSZW1vdmUgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5QYWRkaW5nQnl0ZXM7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBYnN0cmFjdCBiYXNlIGJsb2NrIGNpcGhlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgY2lwaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiA0ICgxMjggYml0cylcblx0ICAgICAqL1xuXHQgICAgdmFyIEJsb2NrQ2lwaGVyID0gQ19saWIuQmxvY2tDaXBoZXIgPSBDaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge01vZGV9IG1vZGUgVGhlIGJsb2NrIG1vZGUgdG8gdXNlLiBEZWZhdWx0OiBDQkNcblx0ICAgICAgICAgKiBAcHJvcGVydHkge1BhZGRpbmd9IHBhZGRpbmcgVGhlIHBhZGRpbmcgc3RyYXRlZ3kgdG8gdXNlLiBEZWZhdWx0OiBQa2NzN1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQ2lwaGVyLmNmZy5leHRlbmQoe1xuXHQgICAgICAgICAgICBtb2RlOiBDQkMsXG5cdCAgICAgICAgICAgIHBhZGRpbmc6IFBrY3M3XG5cdCAgICAgICAgfSksXG5cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBSZXNldCBjaXBoZXJcblx0ICAgICAgICAgICAgQ2lwaGVyLnJlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZztcblx0ICAgICAgICAgICAgdmFyIGl2ID0gY2ZnLml2O1xuXHQgICAgICAgICAgICB2YXIgbW9kZSA9IGNmZy5tb2RlO1xuXG5cdCAgICAgICAgICAgIC8vIFJlc2V0IGJsb2NrIG1vZGVcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9FTkNfWEZPUk1fTU9ERSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIG1vZGVDcmVhdG9yID0gbW9kZS5jcmVhdGVFbmNyeXB0b3I7XG5cdCAgICAgICAgICAgIH0gZWxzZSAvKiBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0RFQ19YRk9STV9NT0RFKSAqLyB7XG5cdCAgICAgICAgICAgICAgICB2YXIgbW9kZUNyZWF0b3IgPSBtb2RlLmNyZWF0ZURlY3J5cHRvcjtcblxuXHQgICAgICAgICAgICAgICAgLy8gS2VlcCBhdCBsZWFzdCBvbmUgYmxvY2sgaW4gdGhlIGJ1ZmZlciBmb3IgdW5wYWRkaW5nXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9taW5CdWZmZXJTaXplID0gMTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLl9tb2RlID0gbW9kZUNyZWF0b3IuY2FsbChtb2RlLCB0aGlzLCBpdiAmJiBpdi53b3Jkcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fbW9kZS5wcm9jZXNzQmxvY2sod29yZHMsIG9mZnNldCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nID0gdGhpcy5jZmcucGFkZGluZztcblxuXHQgICAgICAgICAgICAvLyBGaW5hbGl6ZVxuXHQgICAgICAgICAgICBpZiAodGhpcy5feGZvcm1Nb2RlID09IHRoaXMuX0VOQ19YRk9STV9NT0RFKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBQYWQgZGF0YVxuXHQgICAgICAgICAgICAgICAgcGFkZGluZy5wYWQodGhpcy5fZGF0YSwgdGhpcy5ibG9ja1NpemUpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgdmFyIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpO1xuXHQgICAgICAgICAgICB9IGVsc2UgLyogaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9ERUNfWEZPUk1fTU9ERSkgKi8ge1xuXHQgICAgICAgICAgICAgICAgLy8gUHJvY2VzcyBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIHZhciBmaW5hbFByb2Nlc3NlZEJsb2NrcyA9IHRoaXMuX3Byb2Nlc3MoISEnZmx1c2gnKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gVW5wYWQgZGF0YVxuXHQgICAgICAgICAgICAgICAgcGFkZGluZy51bnBhZChmaW5hbFByb2Nlc3NlZEJsb2Nrcyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gZmluYWxQcm9jZXNzZWRCbG9ja3M7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogMTI4LzMyXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBIGNvbGxlY3Rpb24gb2YgY2lwaGVyIHBhcmFtZXRlcnMuXG5cdCAgICAgKlxuXHQgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGNpcGhlcnRleHQgVGhlIHJhdyBjaXBoZXJ0ZXh0LlxuXHQgICAgICogQHByb3BlcnR5IHtXb3JkQXJyYXl9IGtleSBUaGUga2V5IHRvIHRoaXMgY2lwaGVydGV4dC5cblx0ICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBpdiBUaGUgSVYgdXNlZCBpbiB0aGUgY2lwaGVyaW5nIG9wZXJhdGlvbi5cblx0ICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBzYWx0IFRoZSBzYWx0IHVzZWQgd2l0aCBhIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtDaXBoZXJ9IGFsZ29yaXRobSBUaGUgY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqIEBwcm9wZXJ0eSB7TW9kZX0gbW9kZSBUaGUgYmxvY2sgbW9kZSB1c2VkIGluIHRoZSBjaXBoZXJpbmcgb3BlcmF0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtQYWRkaW5nfSBwYWRkaW5nIFRoZSBwYWRkaW5nIHNjaGVtZSB1c2VkIGluIHRoZSBjaXBoZXJpbmcgb3BlcmF0aW9uLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgYmxvY2sgc2l6ZSBvZiB0aGUgY2lwaGVyLlxuXHQgICAgICogQHByb3BlcnR5IHtGb3JtYXR9IGZvcm1hdHRlciBUaGUgZGVmYXVsdCBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIGNvbnZlcnQgdGhpcyBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIHN0cmluZy5cblx0ICAgICAqL1xuXHQgICAgdmFyIENpcGhlclBhcmFtcyA9IENfbGliLkNpcGhlclBhcmFtcyA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2lwaGVyUGFyYW1zIEFuIG9iamVjdCB3aXRoIGFueSBvZiB0aGUgcG9zc2libGUgY2lwaGVyIHBhcmFtZXRlcnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJQYXJhbXMgPSBDcnlwdG9KUy5saWIuQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7XG5cdCAgICAgICAgICogICAgICAgICBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0V29yZEFycmF5LFxuXHQgICAgICAgICAqICAgICAgICAga2V5OiBrZXlXb3JkQXJyYXksXG5cdCAgICAgICAgICogICAgICAgICBpdjogaXZXb3JkQXJyYXksXG5cdCAgICAgICAgICogICAgICAgICBzYWx0OiBzYWx0V29yZEFycmF5LFxuXHQgICAgICAgICAqICAgICAgICAgYWxnb3JpdGhtOiBDcnlwdG9KUy5hbGdvLkFFUyxcblx0ICAgICAgICAgKiAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDLFxuXHQgICAgICAgICAqICAgICAgICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBLQ1M3LFxuXHQgICAgICAgICAqICAgICAgICAgYmxvY2tTaXplOiA0LFxuXHQgICAgICAgICAqICAgICAgICAgZm9ybWF0dGVyOiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTFxuXHQgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2lwaGVyUGFyYW1zKSB7XG5cdCAgICAgICAgICAgIHRoaXMubWl4SW4oY2lwaGVyUGFyYW1zKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgdGhpcyBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Rm9ybWF0fSBmb3JtYXR0ZXIgKE9wdGlvbmFsKSBUaGUgZm9ybWF0dGluZyBzdHJhdGVneSB0byB1c2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCBjaXBoZXIgcGFyYW1zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHRocm93cyBFcnJvciBJZiBuZWl0aGVyIHRoZSBmb3JtYXR0ZXIgbm9yIHRoZSBkZWZhdWx0IGZvcm1hdHRlciBpcyBzZXQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSBjaXBoZXJQYXJhbXMgKyAnJztcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IGNpcGhlclBhcmFtcy50b1N0cmluZygpO1xuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gY2lwaGVyUGFyYW1zLnRvU3RyaW5nKENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICB0b1N0cmluZzogZnVuY3Rpb24gKGZvcm1hdHRlcikge1xuXHQgICAgICAgICAgICByZXR1cm4gKGZvcm1hdHRlciB8fCB0aGlzLmZvcm1hdHRlcikuc3RyaW5naWZ5KHRoaXMpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEZvcm1hdCBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2Zvcm1hdCA9IEMuZm9ybWF0ID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogT3BlblNTTCBmb3JtYXR0aW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgT3BlblNTTEZvcm1hdHRlciA9IENfZm9ybWF0Lk9wZW5TU0wgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhbiBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN9IGNpcGhlclBhcmFtcyBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgb3BlblNTTFN0cmluZyA9IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMLnN0cmluZ2lmeShjaXBoZXJQYXJhbXMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKGNpcGhlclBhcmFtcykge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBjaXBoZXJQYXJhbXMuY2lwaGVydGV4dDtcblx0ICAgICAgICAgICAgdmFyIHNhbHQgPSBjaXBoZXJQYXJhbXMuc2FsdDtcblxuXHQgICAgICAgICAgICAvLyBGb3JtYXRcblx0ICAgICAgICAgICAgaWYgKHNhbHQpIHtcblx0ICAgICAgICAgICAgICAgIHZhciB3b3JkQXJyYXkgPSBXb3JkQXJyYXkuY3JlYXRlKFsweDUzNjE2Yzc0LCAweDY1NjQ1ZjVmXSkuY29uY2F0KHNhbHQpLmNvbmNhdChjaXBoZXJ0ZXh0KTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHZhciB3b3JkQXJyYXkgPSBjaXBoZXJ0ZXh0O1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHdvcmRBcnJheS50b1N0cmluZyhCYXNlNjQpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhbiBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nIHRvIGEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3BlblNTTFN0ciBUaGUgT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wucGFyc2Uob3BlblNTTFN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChvcGVuU1NMU3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFBhcnNlIGJhc2U2NFxuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dCA9IEJhc2U2NC5wYXJzZShvcGVuU1NMU3RyKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dFdvcmRzID0gY2lwaGVydGV4dC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBUZXN0IGZvciBzYWx0XG5cdCAgICAgICAgICAgIGlmIChjaXBoZXJ0ZXh0V29yZHNbMF0gPT0gMHg1MzYxNmM3NCAmJiBjaXBoZXJ0ZXh0V29yZHNbMV0gPT0gMHg2NTY0NWY1Zikge1xuXHQgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBzYWx0XG5cdCAgICAgICAgICAgICAgICB2YXIgc2FsdCA9IFdvcmRBcnJheS5jcmVhdGUoY2lwaGVydGV4dFdvcmRzLnNsaWNlKDIsIDQpKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHNhbHQgZnJvbSBjaXBoZXJ0ZXh0XG5cdCAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0V29yZHMuc3BsaWNlKDAsIDQpO1xuXHQgICAgICAgICAgICAgICAgY2lwaGVydGV4dC5zaWdCeXRlcyAtPSAxNjtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBDaXBoZXJQYXJhbXMuY3JlYXRlKHsgY2lwaGVydGV4dDogY2lwaGVydGV4dCwgc2FsdDogc2FsdCB9KTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEEgY2lwaGVyIHdyYXBwZXIgdGhhdCByZXR1cm5zIGNpcGhlcnRleHQgYXMgYSBzZXJpYWxpemFibGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgKi9cblx0ICAgIHZhciBTZXJpYWxpemFibGVDaXBoZXIgPSBDX2xpYi5TZXJpYWxpemFibGVDaXBoZXIgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtGb3JtYXR0ZXJ9IGZvcm1hdCBUaGUgZm9ybWF0dGluZyBzdHJhdGVneSB0byBjb252ZXJ0IGNpcGhlciBwYXJhbSBvYmplY3RzIHRvIGFuZCBmcm9tIGEgc3RyaW5nLiBEZWZhdWx0OiBPcGVuU1NMXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIGZvcm1hdDogT3BlblNTTEZvcm1hdHRlclxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRW5jcnlwdHMgYSBtZXNzYWdlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGVuY3J5cHQuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxuXHQgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IEEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCBrZXkpO1xuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5LCB7IGl2OiBpdiB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsIGtleSwgeyBpdjogaXYsIGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgbWVzc2FnZSwga2V5LCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgdmFyIGVuY3J5cHRvciA9IGNpcGhlci5jcmVhdGVFbmNyeXB0b3Ioa2V5LCBjZmcpO1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVydGV4dCA9IGVuY3J5cHRvci5maW5hbGl6ZShtZXNzYWdlKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgY2lwaGVyQ2ZnID0gZW5jcnlwdG9yLmNmZztcblxuXHQgICAgICAgICAgICAvLyBDcmVhdGUgYW5kIHJldHVybiBzZXJpYWxpemFibGUgY2lwaGVyIHBhcmFtc1xuXHQgICAgICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7XG5cdCAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0LFxuXHQgICAgICAgICAgICAgICAga2V5OiBrZXksXG5cdCAgICAgICAgICAgICAgICBpdjogY2lwaGVyQ2ZnLml2LFxuXHQgICAgICAgICAgICAgICAgYWxnb3JpdGhtOiBjaXBoZXIsXG5cdCAgICAgICAgICAgICAgICBtb2RlOiBjaXBoZXJDZmcubW9kZSxcblx0ICAgICAgICAgICAgICAgIHBhZGRpbmc6IGNpcGhlckNmZy5wYWRkaW5nLFxuXHQgICAgICAgICAgICAgICAgYmxvY2tTaXplOiBjaXBoZXIuYmxvY2tTaXplLFxuXHQgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBjZmcuZm9ybWF0XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBEZWNyeXB0cyBzZXJpYWxpemVkIGNpcGhlcnRleHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgYWxnb3JpdGhtIHRvIHVzZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc3xzdHJpbmd9IGNpcGhlcnRleHQgVGhlIGNpcGhlcnRleHQgdG8gZGVjcnlwdC5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHBsYWludGV4dC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgZm9ybWF0dGVkQ2lwaGVydGV4dCwga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgY2lwaGVydGV4dFBhcmFtcywga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBkZWNyeXB0OiBmdW5jdGlvbiAoY2lwaGVyLCBjaXBoZXJ0ZXh0LCBrZXksIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gQ2lwaGVyUGFyYW1zXG5cdCAgICAgICAgICAgIGNpcGhlcnRleHQgPSB0aGlzLl9wYXJzZShjaXBoZXJ0ZXh0LCBjZmcuZm9ybWF0KTtcblxuXHQgICAgICAgICAgICAvLyBEZWNyeXB0XG5cdCAgICAgICAgICAgIHZhciBwbGFpbnRleHQgPSBjaXBoZXIuY3JlYXRlRGVjcnlwdG9yKGtleSwgY2ZnKS5maW5hbGl6ZShjaXBoZXJ0ZXh0LmNpcGhlcnRleHQpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBwbGFpbnRleHQ7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHNlcmlhbGl6ZWQgY2lwaGVydGV4dCB0byBDaXBoZXJQYXJhbXMsXG5cdCAgICAgICAgICogZWxzZSBhc3N1bWVkIENpcGhlclBhcmFtcyBhbHJlYWR5IGFuZCByZXR1cm5zIGNpcGhlcnRleHQgdW5jaGFuZ2VkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN8c3RyaW5nfSBjaXBoZXJ0ZXh0IFRoZSBjaXBoZXJ0ZXh0LlxuXHQgICAgICAgICAqIEBwYXJhbSB7Rm9ybWF0dGVyfSBmb3JtYXQgVGhlIGZvcm1hdHRpbmcgc3RyYXRlZ3kgdG8gdXNlIHRvIHBhcnNlIHNlcmlhbGl6ZWQgY2lwaGVydGV4dC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIHVuc2VyaWFsaXplZCBjaXBoZXJ0ZXh0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuX3BhcnNlKGNpcGhlcnRleHRTdHJpbmdPclBhcmFtcywgZm9ybWF0KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfcGFyc2U6IGZ1bmN0aW9uIChjaXBoZXJ0ZXh0LCBmb3JtYXQpIHtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBjaXBoZXJ0ZXh0ID09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0LnBhcnNlKGNpcGhlcnRleHQsIHRoaXMpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGNpcGhlcnRleHQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBLZXkgZGVyaXZhdGlvbiBmdW5jdGlvbiBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2tkZiA9IEMua2RmID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogT3BlblNTTCBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi5cblx0ICAgICAqL1xuXHQgICAgdmFyIE9wZW5TU0xLZGYgPSBDX2tkZi5PcGVuU1NMID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIERlcml2ZXMgYSBrZXkgYW5kIElWIGZyb20gYSBwYXNzd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQgdG8gZGVyaXZlIGZyb20uXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGtleVNpemUgVGhlIHNpemUgaW4gd29yZHMgb2YgdGhlIGtleSB0byBnZW5lcmF0ZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gaXZTaXplIFRoZSBzaXplIGluIHdvcmRzIG9mIHRoZSBJViB0byBnZW5lcmF0ZS5cblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgKE9wdGlvbmFsKSBBIDY0LWJpdCBzYWx0IHRvIHVzZS4gSWYgb21pdHRlZCwgYSBzYWx0IHdpbGwgYmUgZ2VuZXJhdGVkIHJhbmRvbWx5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBBIGNpcGhlciBwYXJhbXMgb2JqZWN0IHdpdGggdGhlIGtleSwgSVYsIGFuZCBzYWx0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IENyeXB0b0pTLmtkZi5PcGVuU1NMLmV4ZWN1dGUoJ1Bhc3N3b3JkJywgMjU2LzMyLCAxMjgvMzIpO1xuXHQgICAgICAgICAqICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IENyeXB0b0pTLmtkZi5PcGVuU1NMLmV4ZWN1dGUoJ1Bhc3N3b3JkJywgMjU2LzMyLCAxMjgvMzIsICdzYWx0c2FsdCcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGV4ZWN1dGU6IGZ1bmN0aW9uIChwYXNzd29yZCwga2V5U2l6ZSwgaXZTaXplLCBzYWx0KSB7XG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIHJhbmRvbSBzYWx0XG5cdCAgICAgICAgICAgIGlmICghc2FsdCkge1xuXHQgICAgICAgICAgICAgICAgc2FsdCA9IFdvcmRBcnJheS5yYW5kb20oNjQvOCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBEZXJpdmUga2V5IGFuZCBJVlxuXHQgICAgICAgICAgICB2YXIga2V5ID0gRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IGtleVNpemUgKyBpdlNpemUgfSkuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XG5cblx0ICAgICAgICAgICAgLy8gU2VwYXJhdGUga2V5IGFuZCBJVlxuXHQgICAgICAgICAgICB2YXIgaXYgPSBXb3JkQXJyYXkuY3JlYXRlKGtleS53b3Jkcy5zbGljZShrZXlTaXplKSwgaXZTaXplICogNCk7XG5cdCAgICAgICAgICAgIGtleS5zaWdCeXRlcyA9IGtleVNpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBwYXJhbXNcblx0ICAgICAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoeyBrZXk6IGtleSwgaXY6IGl2LCBzYWx0OiBzYWx0IH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH07XG5cblx0ICAgIC8qKlxuXHQgICAgICogQSBzZXJpYWxpemFibGUgY2lwaGVyIHdyYXBwZXIgdGhhdCBkZXJpdmVzIHRoZSBrZXkgZnJvbSBhIHBhc3N3b3JkLFxuXHQgICAgICogYW5kIHJldHVybnMgY2lwaGVydGV4dCBhcyBhIHNlcmlhbGl6YWJsZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAqL1xuXHQgICAgdmFyIFBhc3N3b3JkQmFzZWRDaXBoZXIgPSBDX2xpYi5QYXNzd29yZEJhc2VkQ2lwaGVyID0gU2VyaWFsaXphYmxlQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtLREZ9IGtkZiBUaGUga2V5IGRlcml2YXRpb24gZnVuY3Rpb24gdG8gdXNlIHRvIGdlbmVyYXRlIGEga2V5IGFuZCBJViBmcm9tIGEgcGFzc3dvcmQuIERlZmF1bHQ6IE9wZW5TU0xcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IFNlcmlhbGl6YWJsZUNpcGhlci5jZmcuZXh0ZW5kKHtcblx0ICAgICAgICAgICAga2RmOiBPcGVuU1NMS2RmXG5cdCAgICAgICAgfSksXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBFbmNyeXB0cyBhIG1lc3NhZ2UgdXNpbmcgYSBwYXNzd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBlbmNyeXB0LlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gQSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuUGFzc3dvcmRCYXNlZENpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCAncGFzc3dvcmQnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuUGFzc3dvcmRCYXNlZENpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCAncGFzc3dvcmQnLCB7IGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgbWVzc2FnZSwgcGFzc3dvcmQsIGNmZykge1xuXHQgICAgICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcblx0ICAgICAgICAgICAgY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgb3RoZXIgcGFyYW1zXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkUGFyYW1zID0gY2ZnLmtkZi5leGVjdXRlKHBhc3N3b3JkLCBjaXBoZXIua2V5U2l6ZSwgY2lwaGVyLml2U2l6ZSk7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIElWIHRvIGNvbmZpZ1xuXHQgICAgICAgICAgICBjZmcuaXYgPSBkZXJpdmVkUGFyYW1zLml2O1xuXG5cdCAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBTZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdC5jYWxsKHRoaXMsIGNpcGhlciwgbWVzc2FnZSwgZGVyaXZlZFBhcmFtcy5rZXksIGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gTWl4IGluIGRlcml2ZWQgcGFyYW1zXG5cdCAgICAgICAgICAgIGNpcGhlcnRleHQubWl4SW4oZGVyaXZlZFBhcmFtcyk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNpcGhlcnRleHQ7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIERlY3J5cHRzIHNlcmlhbGl6ZWQgY2lwaGVydGV4dCB1c2luZyBhIHBhc3N3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN8c3RyaW5nfSBjaXBoZXJ0ZXh0IFRoZSBjaXBoZXJ0ZXh0IHRvIGRlY3J5cHQuXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcGxhaW50ZXh0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgZm9ybWF0dGVkQ2lwaGVydGV4dCwgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgY2lwaGVydGV4dFBhcmFtcywgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGRlY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIGNpcGhlcnRleHQsIHBhc3N3b3JkLCBjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIGNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIENpcGhlclBhcmFtc1xuXHQgICAgICAgICAgICBjaXBoZXJ0ZXh0ID0gdGhpcy5fcGFyc2UoY2lwaGVydGV4dCwgY2ZnLmZvcm1hdCk7XG5cblx0ICAgICAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgb3RoZXIgcGFyYW1zXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkUGFyYW1zID0gY2ZnLmtkZi5leGVjdXRlKHBhc3N3b3JkLCBjaXBoZXIua2V5U2l6ZSwgY2lwaGVyLml2U2l6ZSwgY2lwaGVydGV4dC5zYWx0KTtcblxuXHQgICAgICAgICAgICAvLyBBZGQgSVYgdG8gY29uZmlnXG5cdCAgICAgICAgICAgIGNmZy5pdiA9IGRlcml2ZWRQYXJhbXMuaXY7XG5cblx0ICAgICAgICAgICAgLy8gRGVjcnlwdFxuXHQgICAgICAgICAgICB2YXIgcGxhaW50ZXh0ID0gU2VyaWFsaXphYmxlQ2lwaGVyLmRlY3J5cHQuY2FsbCh0aGlzLCBjaXBoZXIsIGNpcGhlcnRleHQsIGRlcml2ZWRQYXJhbXMua2V5LCBjZmcpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBwbGFpbnRleHQ7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH0oKSk7XG5cblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRyb290LkNyeXB0b0pTID0gZmFjdG9yeSgpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcblxuXHQvKipcblx0ICogQ3J5cHRvSlMgY29yZSBjb21wb25lbnRzLlxuXHQgKi9cblx0dmFyIENyeXB0b0pTID0gQ3J5cHRvSlMgfHwgKGZ1bmN0aW9uIChNYXRoLCB1bmRlZmluZWQpIHtcblx0ICAgIC8qXG5cdCAgICAgKiBMb2NhbCBwb2x5ZmlsIG9mIE9iamVjdC5jcmVhdGVcblx0ICAgICAqL1xuXHQgICAgdmFyIGNyZWF0ZSA9IE9iamVjdC5jcmVhdGUgfHwgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBmdW5jdGlvbiBGKCkge307XG5cblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuXHQgICAgICAgICAgICB2YXIgc3VidHlwZTtcblxuXHQgICAgICAgICAgICBGLnByb3RvdHlwZSA9IG9iajtcblxuXHQgICAgICAgICAgICBzdWJ0eXBlID0gbmV3IEYoKTtcblxuXHQgICAgICAgICAgICBGLnByb3RvdHlwZSA9IG51bGw7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHN1YnR5cGU7XG5cdCAgICAgICAgfTtcblx0ICAgIH0oKSlcblxuXHQgICAgLyoqXG5cdCAgICAgKiBDcnlwdG9KUyBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogTGlicmFyeSBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2xpYiA9IEMubGliID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogQmFzZSBvYmplY3QgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZSA9IChmdW5jdGlvbiAoKSB7XG5cblxuXHQgICAgICAgIHJldHVybiB7XG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhpcyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdmVycmlkZXMgUHJvcGVydGllcyB0byBjb3B5IGludG8gdGhlIG5ldyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5ldyBvYmplY3QuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogICAgIHZhciBNeVR5cGUgPSBDcnlwdG9KUy5saWIuQmFzZS5leHRlbmQoe1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIGZpZWxkOiAndmFsdWUnLFxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgICAgIG1ldGhvZDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgKiAgICAgICAgIH1cblx0ICAgICAgICAgICAgICogICAgIH0pO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgZXh0ZW5kOiBmdW5jdGlvbiAob3ZlcnJpZGVzKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTcGF3blxuXHQgICAgICAgICAgICAgICAgdmFyIHN1YnR5cGUgPSBjcmVhdGUodGhpcyk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEF1Z21lbnRcblx0ICAgICAgICAgICAgICAgIGlmIChvdmVycmlkZXMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJ0eXBlLm1peEluKG92ZXJyaWRlcyk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBkZWZhdWx0IGluaXRpYWxpemVyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXN1YnR5cGUuaGFzT3duUHJvcGVydHkoJ2luaXQnKSB8fCB0aGlzLmluaXQgPT09IHN1YnR5cGUuaW5pdCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHN1YnR5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3VidHlwZS4kc3VwZXIuaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIEluaXRpYWxpemVyJ3MgcHJvdG90eXBlIGlzIHRoZSBzdWJ0eXBlIG9iamVjdFxuXHQgICAgICAgICAgICAgICAgc3VidHlwZS5pbml0LnByb3RvdHlwZSA9IHN1YnR5cGU7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlZmVyZW5jZSBzdXBlcnR5cGVcblx0ICAgICAgICAgICAgICAgIHN1YnR5cGUuJHN1cGVyID0gdGhpcztcblxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHN1YnR5cGU7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIEV4dGVuZHMgdGhpcyBvYmplY3QgYW5kIHJ1bnMgdGhlIGluaXQgbWV0aG9kLlxuXHQgICAgICAgICAgICAgKiBBcmd1bWVudHMgdG8gY3JlYXRlKCkgd2lsbCBiZSBwYXNzZWQgdG8gaW5pdCgpLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgb2JqZWN0LlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgaW5zdGFuY2UgPSBNeVR5cGUuY3JlYXRlKCk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZXh0ZW5kKCk7XG5cdCAgICAgICAgICAgICAgICBpbnN0YW5jZS5pbml0LmFwcGx5KGluc3RhbmNlLCBhcmd1bWVudHMpO1xuXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG5cdCAgICAgICAgICAgIH0sXG5cblx0ICAgICAgICAgICAgLyoqXG5cdCAgICAgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBvYmplY3QuXG5cdCAgICAgICAgICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGFkZCBzb21lIGxvZ2ljIHdoZW4geW91ciBvYmplY3RzIGFyZSBjcmVhdGVkLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgdmFyIE15VHlwZSA9IENyeXB0b0pTLmxpYi5CYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgICAqICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgKiAgICAgICAgICAgICAvLyAuLi5cblx0ICAgICAgICAgICAgICogICAgICAgICB9XG5cdCAgICAgICAgICAgICAqICAgICB9KTtcblx0ICAgICAgICAgICAgICovXG5cdCAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgfSxcblxuXHQgICAgICAgICAgICAvKipcblx0ICAgICAgICAgICAgICogQ29waWVzIHByb3BlcnRpZXMgaW50byB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BlcnRpZXMgVGhlIHByb3BlcnRpZXMgdG8gbWl4IGluLlxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAgICAgKlxuXHQgICAgICAgICAgICAgKiAgICAgTXlUeXBlLm1peEluKHtcblx0ICAgICAgICAgICAgICogICAgICAgICBmaWVsZDogJ3ZhbHVlJ1xuXHQgICAgICAgICAgICAgKiAgICAgfSk7XG5cdCAgICAgICAgICAgICAqL1xuXHQgICAgICAgICAgICBtaXhJbjogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiBwcm9wZXJ0aWVzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHlOYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBJRSB3b24ndCBjb3B5IHRvU3RyaW5nIHVzaW5nIHRoZSBsb29wIGFib3ZlXG5cdCAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eSgndG9TdHJpbmcnKSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMudG9TdHJpbmcgPSBwcm9wZXJ0aWVzLnRvU3RyaW5nO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9LFxuXG5cdCAgICAgICAgICAgIC8qKlxuXHQgICAgICAgICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIG9iamVjdC5cblx0ICAgICAgICAgICAgICpcblx0ICAgICAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICAgICAqXG5cdCAgICAgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSBpbnN0YW5jZS5jbG9uZSgpO1xuXHQgICAgICAgICAgICAgKi9cblx0ICAgICAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmluaXQucHJvdG90eXBlLmV4dGVuZCh0aGlzKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFuIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge0FycmF5fSB3b3JkcyBUaGUgYXJyYXkgb2YgMzItYml0IHdvcmRzLlxuXHQgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHNpZ0J5dGVzIFRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgYnl0ZXMgaW4gdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICovXG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5ID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgKE9wdGlvbmFsKSBBbiBhcnJheSBvZiAzMi1iaXQgd29yZHMuXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpZ0J5dGVzIChPcHRpb25hbCkgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGUgd29yZHMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoWzB4MDAwMTAyMDMsIDB4MDQwNTA2MDddKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDAwMDEwMjAzLCAweDA0MDUwNjA3XSwgNik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKHdvcmRzLCBzaWdCeXRlcykge1xuXHQgICAgICAgICAgICB3b3JkcyA9IHRoaXMud29yZHMgPSB3b3JkcyB8fCBbXTtcblxuXHQgICAgICAgICAgICBpZiAoc2lnQnl0ZXMgIT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gc2lnQnl0ZXM7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gd29yZHMubGVuZ3RoICogNDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIHdvcmQgYXJyYXkgdG8gYSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0VuY29kZXJ9IGVuY29kZXIgKE9wdGlvbmFsKSBUaGUgZW5jb2Rpbmcgc3RyYXRlZ3kgdG8gdXNlLiBEZWZhdWx0OiBDcnlwdG9KUy5lbmMuSGV4XG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgc3RyaW5nID0gd29yZEFycmF5ICsgJyc7XG5cdCAgICAgICAgICogICAgIHZhciBzdHJpbmcgPSB3b3JkQXJyYXkudG9TdHJpbmcoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIChlbmNvZGVyKSB7XG5cdCAgICAgICAgICAgIHJldHVybiAoZW5jb2RlciB8fCBIZXgpLnN0cmluZ2lmeSh0aGlzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uY2F0ZW5hdGVzIGEgd29yZCBhcnJheSB0byB0aGlzIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5IHRvIGFwcGVuZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB3b3JkQXJyYXkxLmNvbmNhdCh3b3JkQXJyYXkyKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjb25jYXQ6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB0aGlzV29yZHMgPSB0aGlzLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgdGhhdFdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgdGhpc1NpZ0J5dGVzID0gdGhpcy5zaWdCeXRlcztcblx0ICAgICAgICAgICAgdmFyIHRoYXRTaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDbGFtcCBleGNlc3MgYml0c1xuXHQgICAgICAgICAgICB0aGlzLmNsYW1wKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ29uY2F0XG5cdCAgICAgICAgICAgIGlmICh0aGlzU2lnQnl0ZXMgJSA0KSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDb3B5IG9uZSBieXRlIGF0IGEgdGltZVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGF0U2lnQnl0ZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0aGF0Qnl0ZSA9ICh0aGF0V29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmO1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaSkgPj4+IDJdIHw9IHRoYXRCeXRlIDw8ICgyNCAtICgodGhpc1NpZ0J5dGVzICsgaSkgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gQ29weSBvbmUgd29yZCBhdCBhIHRpbWVcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhhdFNpZ0J5dGVzOyBpICs9IDQpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzV29yZHNbKHRoaXNTaWdCeXRlcyArIGkpID4+PiAyXSA9IHRoYXRXb3Jkc1tpID4+PiAyXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLnNpZ0J5dGVzICs9IHRoYXRTaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDaGFpbmFibGVcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlbW92ZXMgaW5zaWduaWZpY2FudCBiaXRzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB3b3JkQXJyYXkuY2xhbXAoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbGFtcDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gdGhpcy53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gdGhpcy5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDbGFtcFxuXHQgICAgICAgICAgICB3b3Jkc1tzaWdCeXRlcyA+Pj4gMl0gJj0gMHhmZmZmZmZmZiA8PCAoMzIgLSAoc2lnQnl0ZXMgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICB3b3Jkcy5sZW5ndGggPSBNYXRoLmNlaWwoc2lnQnl0ZXMgLyA0KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjbG9uZSA9IHdvcmRBcnJheS5jbG9uZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEJhc2UuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUud29yZHMgPSB0aGlzLndvcmRzLnNsaWNlKDApO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHdvcmQgYXJyYXkgZmlsbGVkIHdpdGggcmFuZG9tIGJ5dGVzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG5CeXRlcyBUaGUgbnVtYmVyIG9mIHJhbmRvbSBieXRlcyB0byBnZW5lcmF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHJhbmRvbSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oMTYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHJhbmRvbTogZnVuY3Rpb24gKG5CeXRlcykge1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblxuXHQgICAgICAgICAgICB2YXIgciA9IChmdW5jdGlvbiAobV93KSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgbV93ID0gbV93O1xuXHQgICAgICAgICAgICAgICAgdmFyIG1feiA9IDB4M2FkZTY4YjE7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWFzayA9IDB4ZmZmZmZmZmY7XG5cblx0ICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbV96ID0gKDB4OTA2OSAqIChtX3ogJiAweEZGRkYpICsgKG1feiA+PiAweDEwKSkgJiBtYXNrO1xuXHQgICAgICAgICAgICAgICAgICAgIG1fdyA9ICgweDQ2NTAgKiAobV93ICYgMHhGRkZGKSArIChtX3cgPj4gMHgxMCkpICYgbWFzaztcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gKChtX3ogPDwgMHgxMCkgKyBtX3cpICYgbWFzaztcblx0ICAgICAgICAgICAgICAgICAgICByZXN1bHQgLz0gMHgxMDAwMDAwMDA7XG5cdCAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IDAuNTtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICogKE1hdGgucmFuZG9tKCkgPiAuNSA/IDEgOiAtMSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCByY2FjaGU7IGkgPCBuQnl0ZXM7IGkgKz0gNCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIF9yID0gcigocmNhY2hlIHx8IE1hdGgucmFuZG9tKCkpICogMHgxMDAwMDAwMDApO1xuXG5cdCAgICAgICAgICAgICAgICByY2FjaGUgPSBfcigpICogMHgzYWRlNjdiNztcblx0ICAgICAgICAgICAgICAgIHdvcmRzLnB1c2goKF9yKCkgKiAweDEwMDAwMDAwMCkgfCAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIG5CeXRlcyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogRW5jb2RlciBuYW1lc3BhY2UuXG5cdCAgICAgKi9cblx0ICAgIHZhciBDX2VuYyA9IEMuZW5jID0ge307XG5cblx0ICAgIC8qKlxuXHQgICAgICogSGV4IGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgSGV4ID0gQ19lbmMuSGV4ID0ge1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgaGV4IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhleFN0cmluZyA9IENyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlcztcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHZhciBoZXhDaGFycyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBiaXRlID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIGhleENoYXJzLnB1c2goKGJpdGUgPj4+IDQpLnRvU3RyaW5nKDE2KSk7XG5cdCAgICAgICAgICAgICAgICBoZXhDaGFycy5wdXNoKChiaXRlICYgMHgwZikudG9TdHJpbmcoMTYpKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBoZXhDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBoZXggc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBoZXhTdHIgVGhlIGhleCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMuZW5jLkhleC5wYXJzZShoZXhTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoaGV4U3RyKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBoZXhTdHJMZW5ndGggPSBoZXhTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGV4U3RyTGVuZ3RoOyBpICs9IDIpIHtcblx0ICAgICAgICAgICAgICAgIHdvcmRzW2kgPj4+IDNdIHw9IHBhcnNlSW50KGhleFN0ci5zdWJzdHIoaSwgMiksIDE2KSA8PCAoMjQgLSAoaSAlIDgpICogNCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBoZXhTdHJMZW5ndGggLyAyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIExhdGluMSBlbmNvZGluZyBzdHJhdGVneS5cblx0ICAgICAqL1xuXHQgICAgdmFyIExhdGluMSA9IENfZW5jLkxhdGluMSA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBMYXRpbjEgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIExhdGluMSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBsYXRpbjFTdHJpbmcgPSBDcnlwdG9KUy5lbmMuTGF0aW4xLnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgbGF0aW4xQ2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgYml0ZSA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICBsYXRpbjFDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYml0ZSkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGxhdGluMUNoYXJzLmpvaW4oJycpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIExhdGluMSBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGxhdGluMVN0ciBUaGUgTGF0aW4xIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuTGF0aW4xLnBhcnNlKGxhdGluMVN0cmluZyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIChsYXRpbjFTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGxhdGluMVN0ckxlbmd0aCA9IGxhdGluMVN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXRpbjFTdHJMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMl0gfD0gKGxhdGluMVN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZikgPDwgKDI0IC0gKGkgJSA0KSAqIDgpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgbGF0aW4xU3RyTGVuZ3RoKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIFVURi04IGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgVXRmOCA9IENfZW5jLlV0ZjggPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTggc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHV0ZjhTdHJpbmcgPSBDcnlwdG9KUy5lbmMuVXRmOC5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKExhdGluMS5zdHJpbmdpZnkod29yZEFycmF5KSkpO1xuXHQgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hbGZvcm1lZCBVVEYtOCBkYXRhJyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtOCBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHV0ZjhTdHIgVGhlIFVURi04IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZSh1dGY4U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjhTdHIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIExhdGluMS5wYXJzZSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQodXRmOFN0cikpKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGJ1ZmZlcmVkIGJsb2NrIGFsZ29yaXRobSB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBUaGUgcHJvcGVydHkgYmxvY2tTaXplIG11c3QgYmUgaW1wbGVtZW50ZWQgaW4gYSBjb25jcmV0ZSBzdWJ0eXBlLlxuXHQgICAgICpcblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfbWluQnVmZmVyU2l6ZSBUaGUgbnVtYmVyIG9mIGJsb2NrcyB0aGF0IHNob3VsZCBiZSBrZXB0IHVucHJvY2Vzc2VkIGluIHRoZSBidWZmZXIuIERlZmF1bHQ6IDBcblx0ICAgICAqL1xuXHQgICAgdmFyIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBDX2xpYi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIGJsb2NrIGFsZ29yaXRobSdzIGRhdGEgYnVmZmVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdGhpcy5fZGF0YSA9IG5ldyBXb3JkQXJyYXkuaW5pdCgpO1xuXHQgICAgICAgICAgICB0aGlzLl9uRGF0YUJ5dGVzID0gMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQWRkcyBuZXcgZGF0YSB0byB0aGlzIGJsb2NrIGFsZ29yaXRobSdzIGJ1ZmZlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBhcHBlbmQuIFN0cmluZ3MgYXJlIGNvbnZlcnRlZCB0byBhIFdvcmRBcnJheSB1c2luZyBVVEYtOC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fYXBwZW5kKCdkYXRhJyk7XG5cdCAgICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX2FwcGVuZCh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9hcHBlbmQ6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIFdvcmRBcnJheSwgZWxzZSBhc3N1bWUgV29yZEFycmF5IGFscmVhZHlcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICBkYXRhID0gVXRmOC5wYXJzZShkYXRhKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEFwcGVuZFxuXHQgICAgICAgICAgICB0aGlzLl9kYXRhLmNvbmNhdChkYXRhKTtcblx0ICAgICAgICAgICAgdGhpcy5fbkRhdGFCeXRlcyArPSBkYXRhLnNpZ0J5dGVzO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBQcm9jZXNzZXMgYXZhaWxhYmxlIGRhdGEgYmxvY2tzLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBfZG9Qcm9jZXNzQmxvY2sob2Zmc2V0KSwgd2hpY2ggbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBhIGNvbmNyZXRlIHN1YnR5cGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRvRmx1c2ggV2hldGhlciBhbGwgYmxvY2tzIGFuZCBwYXJ0aWFsIGJsb2NrcyBzaG91bGQgYmUgcHJvY2Vzc2VkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcHJvY2Vzc2VkIGRhdGEuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBwcm9jZXNzZWREYXRhID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fcHJvY2VzcygpO1xuXHQgICAgICAgICAqICAgICB2YXIgcHJvY2Vzc2VkRGF0YSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX3Byb2Nlc3MoISEnZmx1c2gnKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBfcHJvY2VzczogZnVuY3Rpb24gKGRvRmx1c2gpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBkYXRhU2lnQnl0ZXMgPSBkYXRhLnNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gdGhpcy5ibG9ja1NpemU7XG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgYmxvY2tzIHJlYWR5XG5cdCAgICAgICAgICAgIHZhciBuQmxvY2tzUmVhZHkgPSBkYXRhU2lnQnl0ZXMgLyBibG9ja1NpemVCeXRlcztcblx0ICAgICAgICAgICAgaWYgKGRvRmx1c2gpIHtcblx0ICAgICAgICAgICAgICAgIC8vIFJvdW5kIHVwIHRvIGluY2x1ZGUgcGFydGlhbCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIG5CbG9ja3NSZWFkeSA9IE1hdGguY2VpbChuQmxvY2tzUmVhZHkpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgLy8gUm91bmQgZG93biB0byBpbmNsdWRlIG9ubHkgZnVsbCBibG9ja3MsXG5cdCAgICAgICAgICAgICAgICAvLyBsZXNzIHRoZSBudW1iZXIgb2YgYmxvY2tzIHRoYXQgbXVzdCByZW1haW4gaW4gdGhlIGJ1ZmZlclxuXHQgICAgICAgICAgICAgICAgbkJsb2Nrc1JlYWR5ID0gTWF0aC5tYXgoKG5CbG9ja3NSZWFkeSB8IDApIC0gdGhpcy5fbWluQnVmZmVyU2l6ZSwgMCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb3VudCB3b3JkcyByZWFkeVxuXHQgICAgICAgICAgICB2YXIgbldvcmRzUmVhZHkgPSBuQmxvY2tzUmVhZHkgKiBibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgLy8gQ291bnQgYnl0ZXMgcmVhZHlcblx0ICAgICAgICAgICAgdmFyIG5CeXRlc1JlYWR5ID0gTWF0aC5taW4obldvcmRzUmVhZHkgKiA0LCBkYXRhU2lnQnl0ZXMpO1xuXG5cdCAgICAgICAgICAgIC8vIFByb2Nlc3MgYmxvY2tzXG5cdCAgICAgICAgICAgIGlmIChuV29yZHNSZWFkeSkge1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbldvcmRzUmVhZHk7IG9mZnNldCArPSBibG9ja1NpemUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWFsZ29yaXRobSBsb2dpY1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvUHJvY2Vzc0Jsb2NrKGRhdGFXb3Jkcywgb2Zmc2V0KTtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHByb2Nlc3NlZCB3b3Jkc1xuXHQgICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NlZFdvcmRzID0gZGF0YVdvcmRzLnNwbGljZSgwLCBuV29yZHNSZWFkeSk7XG5cdCAgICAgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzIC09IG5CeXRlc1JlYWR5O1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIHByb2Nlc3NlZCB3b3Jkc1xuXHQgICAgICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHByb2Nlc3NlZFdvcmRzLCBuQnl0ZXNSZWFkeSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBjbG9uZSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uY2xvbmUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9kYXRhID0gdGhpcy5fZGF0YS5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX21pbkJ1ZmZlclNpemU6IDBcblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFic3RyYWN0IGhhc2hlciB0ZW1wbGF0ZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYmxvY2tTaXplIFRoZSBudW1iZXIgb2YgMzItYml0IHdvcmRzIHRoaXMgaGFzaGVyIG9wZXJhdGVzIG9uLiBEZWZhdWx0OiAxNiAoNTEyIGJpdHMpXG5cdCAgICAgKi9cblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXIgPSBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoKSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBoYXNoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgaGFzaCBjb21wdXRhdGlvbi5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2hlciA9IENyeXB0b0pTLmFsZ28uU0hBMjU2LmNyZWF0ZSgpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHtcblx0ICAgICAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXG5cdCAgICAgICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cblx0ICAgICAgICAgICAgLy8gU2V0IGluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogUmVzZXRzIHRoaXMgaGFzaGVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICBoYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBSZXNldCBkYXRhIGJ1ZmZlclxuXHQgICAgICAgICAgICBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1oYXNoZXIgbG9naWNcblx0ICAgICAgICAgICAgdGhpcy5fZG9SZXNldCgpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBVcGRhdGVzIHRoaXMgaGFzaGVyIHdpdGggYSBtZXNzYWdlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIFRoZSBtZXNzYWdlIHRvIGFwcGVuZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0hhc2hlcn0gVGhpcyBoYXNoZXIuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhhc2hlci51cGRhdGUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgaGFzaGVyLnVwZGF0ZSh3b3JkQXJyYXkpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gQXBwZW5kXG5cdCAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTtcblxuXHQgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGhhc2hcblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIENoYWluYWJsZVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluYWxpemVzIHRoZSBoYXNoIGNvbXB1dGF0aW9uLlxuXHQgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgZmluYWxpemUgb3BlcmF0aW9uIGlzIGVmZmVjdGl2ZWx5IGEgZGVzdHJ1Y3RpdmUsIHJlYWQtb25jZSBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgKE9wdGlvbmFsKSBBIGZpbmFsIG1lc3NhZ2UgdXBkYXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoJ21lc3NhZ2UnKTtcblx0ICAgICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gRmluYWwgbWVzc2FnZSB1cGRhdGVcblx0ICAgICAgICAgICAgaWYgKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2FwcGVuZChtZXNzYWdlVXBkYXRlKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtaGFzaGVyIGxvZ2ljXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5fZG9GaW5hbGl6ZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBibG9ja1NpemU6IDUxMi8zMixcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBzaG9ydGN1dCBmdW5jdGlvbiB0byBhIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoZXIgdG8gY3JlYXRlIGEgaGVscGVyIGZvci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBTSEEyNTYgPSBDcnlwdG9KUy5saWIuSGFzaGVyLl9jcmVhdGVIZWxwZXIoQ3J5cHRvSlMuYWxnby5TSEEyNTYpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIF9jcmVhdGVIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBjZmcpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaGFzaGVyLmluaXQoY2ZnKS5maW5hbGl6ZShtZXNzYWdlKTtcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ3JlYXRlcyBhIHNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byB1c2UgaW4gdGhpcyBITUFDIGhlbHBlci5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgc2hvcnRjdXQgZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBIbWFjU0hBMjU2ID0gQ3J5cHRvSlMubGliLkhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihDcnlwdG9KUy5hbGdvLlNIQTI1Nik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgX2NyZWF0ZUhtYWNIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBrZXkpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ19hbGdvLkhNQUMuaW5pdChoYXNoZXIsIGtleSkuZmluYWxpemUobWVzc2FnZSk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQWxnb3JpdGhtIG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbyA9IHt9O1xuXG5cdCAgICByZXR1cm4gQztcblx0fShNYXRoKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlM7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19lbmMgPSBDLmVuYztcblxuXHQgICAgLyoqXG5cdCAgICAgKiBCYXNlNjQgZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIHZhciBCYXNlNjQgPSBDX2VuYy5CYXNlNjQgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgQmFzZTY0IHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBCYXNlNjQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgYmFzZTY0U3RyaW5nID0gQ3J5cHRvSlMuZW5jLkJhc2U2NC5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXHQgICAgICAgICAgICB2YXIgbWFwID0gdGhpcy5fbWFwO1xuXG5cdCAgICAgICAgICAgIC8vIENsYW1wIGV4Y2VzcyBiaXRzXG5cdCAgICAgICAgICAgIHdvcmRBcnJheS5jbGFtcCgpO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIGJhc2U2NENoYXJzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lnQnl0ZXM7IGkgKz0gMykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJ5dGUxID0gKHdvcmRzW2kgPj4+IDJdICAgICAgID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICAgICAgICYgMHhmZjtcblx0ICAgICAgICAgICAgICAgIHZhciBieXRlMiA9ICh3b3Jkc1soaSArIDEpID4+PiAyXSA+Pj4gKDI0IC0gKChpICsgMSkgJSA0KSAqIDgpKSAmIDB4ZmY7XG5cdCAgICAgICAgICAgICAgICB2YXIgYnl0ZTMgPSAod29yZHNbKGkgKyAyKSA+Pj4gMl0gPj4+ICgyNCAtICgoaSArIDIpICUgNCkgKiA4KSkgJiAweGZmO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgdHJpcGxldCA9IChieXRlMSA8PCAxNikgfCAoYnl0ZTIgPDwgOCkgfCBieXRlMztcblxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IChqIDwgNCkgJiYgKGkgKyBqICogMC43NSA8IHNpZ0J5dGVzKTsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChtYXAuY2hhckF0KCh0cmlwbGV0ID4+PiAoNiAqICgzIC0gaikpKSAmIDB4M2YpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpO1xuXHQgICAgICAgICAgICBpZiAocGFkZGluZ0NoYXIpIHtcblx0ICAgICAgICAgICAgICAgIHdoaWxlIChiYXNlNjRDaGFycy5sZW5ndGggJSA0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgYmFzZTY0Q2hhcnMucHVzaChwYWRkaW5nQ2hhcik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gYmFzZTY0Q2hhcnMuam9pbignJyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIGEgQmFzZTY0IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0U3RyIFRoZSBCYXNlNjQgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBzdGF0aWNcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5CYXNlNjQucGFyc2UoYmFzZTY0U3RyaW5nKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBwYXJzZTogZnVuY3Rpb24gKGJhc2U2NFN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGJhc2U2NFN0ckxlbmd0aCA9IGJhc2U2NFN0ci5sZW5ndGg7XG5cdCAgICAgICAgICAgIHZhciBtYXAgPSB0aGlzLl9tYXA7XG5cdCAgICAgICAgICAgIHZhciByZXZlcnNlTWFwID0gdGhpcy5fcmV2ZXJzZU1hcDtcblxuXHQgICAgICAgICAgICBpZiAoIXJldmVyc2VNYXApIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXZlcnNlTWFwID0gdGhpcy5fcmV2ZXJzZU1hcCA9IFtdO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWFwLmxlbmd0aDsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldmVyc2VNYXBbbWFwLmNoYXJDb2RlQXQoaildID0gajtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJZ25vcmUgcGFkZGluZ1xuXHQgICAgICAgICAgICB2YXIgcGFkZGluZ0NoYXIgPSBtYXAuY2hhckF0KDY0KTtcblx0ICAgICAgICAgICAgaWYgKHBhZGRpbmdDaGFyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgcGFkZGluZ0luZGV4ID0gYmFzZTY0U3RyLmluZGV4T2YocGFkZGluZ0NoYXIpO1xuXHQgICAgICAgICAgICAgICAgaWYgKHBhZGRpbmdJbmRleCAhPT0gLTEpIHtcblx0ICAgICAgICAgICAgICAgICAgICBiYXNlNjRTdHJMZW5ndGggPSBwYWRkaW5nSW5kZXg7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0XG5cdCAgICAgICAgICAgIHJldHVybiBwYXJzZUxvb3AoYmFzZTY0U3RyLCBiYXNlNjRTdHJMZW5ndGgsIHJldmVyc2VNYXApO1xuXG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9tYXA6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSdcblx0ICAgIH07XG5cblx0ICAgIGZ1bmN0aW9uIHBhcnNlTG9vcChiYXNlNjRTdHIsIGJhc2U2NFN0ckxlbmd0aCwgcmV2ZXJzZU1hcCkge1xuXHQgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgdmFyIG5CeXRlcyA9IDA7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmFzZTY0U3RyTGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgIGlmIChpICUgNCkge1xuXHQgICAgICAgICAgICAgIHZhciBiaXRzMSA9IHJldmVyc2VNYXBbYmFzZTY0U3RyLmNoYXJDb2RlQXQoaSAtIDEpXSA8PCAoKGkgJSA0KSAqIDIpO1xuXHQgICAgICAgICAgICAgIHZhciBiaXRzMiA9IHJldmVyc2VNYXBbYmFzZTY0U3RyLmNoYXJDb2RlQXQoaSldID4+PiAoNiAtIChpICUgNCkgKiAyKTtcblx0ICAgICAgICAgICAgICB3b3Jkc1tuQnl0ZXMgPj4+IDJdIHw9IChiaXRzMSB8IGJpdHMyKSA8PCAoMjQgLSAobkJ5dGVzICUgNCkgKiA4KTtcblx0ICAgICAgICAgICAgICBuQnl0ZXMrKztcblx0ICAgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gV29yZEFycmF5LmNyZWF0ZSh3b3JkcywgbkJ5dGVzKTtcblx0ICAgIH1cblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5lbmMuQmFzZTY0O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5O1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cblx0ICAgIC8qKlxuXHQgICAgICogVVRGLTE2IEJFIGVuY29kaW5nIHN0cmF0ZWd5LlxuXHQgICAgICovXG5cdCAgICB2YXIgVXRmMTZCRSA9IENfZW5jLlV0ZjE2ID0gQ19lbmMuVXRmMTZCRSA9IHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBVVEYtMTYgQkUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi0xNiBCRSBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB1dGYxNlN0cmluZyA9IENyeXB0b0pTLmVuYy5VdGYxNi5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2Q2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSArPSAyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMTYgLSAoaSAlIDQpICogOCkpICYgMHhmZmZmO1xuXHQgICAgICAgICAgICAgICAgdXRmMTZDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gdXRmMTZDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtMTYgQkUgc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGYxNlN0ciBUaGUgVVRGLTE2IEJFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmMTYucGFyc2UodXRmMTZTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAodXRmMTZTdHIpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2U3RyTGVuZ3RoID0gdXRmMTZTdHIubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdXRmMTZTdHJMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMV0gfD0gdXRmMTZTdHIuY2hhckNvZGVBdChpKSA8PCAoMTYgLSAoaSAlIDIpICogMTYpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIFdvcmRBcnJheS5jcmVhdGUod29yZHMsIHV0ZjE2U3RyTGVuZ3RoICogMik7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBVVEYtMTYgTEUgZW5jb2Rpbmcgc3RyYXRlZ3kuXG5cdCAgICAgKi9cblx0ICAgIENfZW5jLlV0ZjE2TEUgPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgVVRGLTE2IExFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVEYtMTYgTEUgc3RyaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgdXRmMTZTdHIgPSBDcnlwdG9KUy5lbmMuVXRmMTZMRS5zdHJpbmdpZnkod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIENvbnZlcnRcblx0ICAgICAgICAgICAgdmFyIHV0ZjE2Q2hhcnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSArPSAyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gc3dhcEVuZGlhbigod29yZHNbaSA+Pj4gMl0gPj4+ICgxNiAtIChpICUgNCkgKiA4KSkgJiAweGZmZmYpO1xuXHQgICAgICAgICAgICAgICAgdXRmMTZDaGFycy5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gdXRmMTZDaGFycy5qb2luKCcnKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBVVEYtMTYgTEUgc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGYxNlN0ciBUaGUgVVRGLTE2IExFIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmMTZMRS5wYXJzZSh1dGYxNlN0cik7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcGFyc2U6IGZ1bmN0aW9uICh1dGYxNlN0cikge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgdXRmMTZTdHJMZW5ndGggPSB1dGYxNlN0ci5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgd29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1dGYxNlN0ckxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpID4+PiAxXSB8PSBzd2FwRW5kaWFuKHV0ZjE2U3RyLmNoYXJDb2RlQXQoaSkgPDwgKDE2IC0gKGkgJSAyKSAqIDE2KSk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gV29yZEFycmF5LmNyZWF0ZSh3b3JkcywgdXRmMTZTdHJMZW5ndGggKiAyKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICBmdW5jdGlvbiBzd2FwRW5kaWFuKHdvcmQpIHtcblx0ICAgICAgICByZXR1cm4gKCh3b3JkIDw8IDgpICYgMHhmZjAwZmYwMCkgfCAoKHdvcmQgPj4+IDgpICYgMHgwMGZmMDBmZik7XG5cdCAgICB9XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuZW5jLlV0ZjE2O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL3NoYTFcIiksIHJlcXVpcmUoXCIuL2htYWNcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vc2hhMVwiLCBcIi4vaG1hY1wiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cdCAgICB2YXIgTUQ1ID0gQ19hbGdvLk1ENTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBUaGlzIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uIGlzIG1lYW50IHRvIGNvbmZvcm0gd2l0aCBFVlBfQnl0ZXNUb0tleS5cblx0ICAgICAqIHd3dy5vcGVuc3NsLm9yZy9kb2NzL2NyeXB0by9FVlBfQnl0ZXNUb0tleS5odG1sXG5cdCAgICAgKi9cblx0ICAgIHZhciBFdnBLREYgPSBDX2FsZ28uRXZwS0RGID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBrZXlTaXplIFRoZSBrZXkgc2l6ZSBpbiB3b3JkcyB0byBnZW5lcmF0ZS4gRGVmYXVsdDogNCAoMTI4IGJpdHMpXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaCBhbGdvcml0aG0gdG8gdXNlLiBEZWZhdWx0OiBNRDVcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gaXRlcmF0aW9ucyBUaGUgbnVtYmVyIG9mIGl0ZXJhdGlvbnMgdG8gcGVyZm9ybS4gRGVmYXVsdDogMVxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNmZzogQmFzZS5leHRlbmQoe1xuXHQgICAgICAgICAgICBrZXlTaXplOiAxMjgvMzIsXG5cdCAgICAgICAgICAgIGhhc2hlcjogTUQ1LFxuXHQgICAgICAgICAgICBpdGVyYXRpb25zOiAxXG5cdCAgICAgICAgfSksXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoZSBkZXJpdmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5FdnBLREYuY3JlYXRlKCk7XG5cdCAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLkV2cEtERi5jcmVhdGUoeyBrZXlTaXplOiA4IH0pO1xuXHQgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5FdnBLREYuY3JlYXRlKHsga2V5U2l6ZTogOCwgaXRlcmF0aW9uczogMTAwMCB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2ZnKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIERlcml2ZXMgYSBrZXkgZnJvbSBhIHBhc3N3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IEEgc2FsdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRlcml2ZWQga2V5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIga2V5ID0ga2RmLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNvbXB1dGU6IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgY2ZnID0gdGhpcy5jZmc7XG5cblx0ICAgICAgICAgICAgLy8gSW5pdCBoYXNoZXJcblx0ICAgICAgICAgICAgdmFyIGhhc2hlciA9IGNmZy5oYXNoZXIuY3JlYXRlKCk7XG5cblx0ICAgICAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIGRlcml2ZWRLZXkgPSBXb3JkQXJyYXkuY3JlYXRlKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkS2V5V29yZHMgPSBkZXJpdmVkS2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIga2V5U2l6ZSA9IGNmZy5rZXlTaXplO1xuXHQgICAgICAgICAgICB2YXIgaXRlcmF0aW9ucyA9IGNmZy5pdGVyYXRpb25zO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleVxuXHQgICAgICAgICAgICB3aGlsZSAoZGVyaXZlZEtleVdvcmRzLmxlbmd0aCA8IGtleVNpemUpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChibG9jaykge1xuXHQgICAgICAgICAgICAgICAgICAgIGhhc2hlci51cGRhdGUoYmxvY2spO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdmFyIGJsb2NrID0gaGFzaGVyLnVwZGF0ZShwYXNzd29yZCkuZmluYWxpemUoc2FsdCk7XG5cdCAgICAgICAgICAgICAgICBoYXNoZXIucmVzZXQoKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gSXRlcmF0aW9uc1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBpdGVyYXRpb25zOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBibG9jayA9IGhhc2hlci5maW5hbGl6ZShibG9jayk7XG5cdCAgICAgICAgICAgICAgICAgICAgaGFzaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGRlcml2ZWRLZXkuY29uY2F0KGJsb2NrKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBkZXJpdmVkS2V5LnNpZ0J5dGVzID0ga2V5U2l6ZSAqIDQ7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGRlcml2ZWRLZXk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogRGVyaXZlcyBhIGtleSBmcm9tIGEgcGFzc3dvcmQuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgQSBzYWx0LlxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIGNvbXB1dGF0aW9uLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRlcml2ZWQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuRXZwS0RGKHBhc3N3b3JkLCBzYWx0KTtcblx0ICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuRXZwS0RGKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDggfSk7XG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLkV2cEtERihwYXNzd29yZCwgc2FsdCwgeyBrZXlTaXplOiA4LCBpdGVyYXRpb25zOiAxMDAwIH0pO1xuXHQgICAgICovXG5cdCAgICBDLkV2cEtERiA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgY2ZnKSB7XG5cdCAgICAgICAgcmV0dXJuIEV2cEtERi5jcmVhdGUoY2ZnKS5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTtcblx0ICAgIH07XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuRXZwS0RGO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQ2lwaGVyUGFyYW1zID0gQ19saWIuQ2lwaGVyUGFyYW1zO1xuXHQgICAgdmFyIENfZW5jID0gQy5lbmM7XG5cdCAgICB2YXIgSGV4ID0gQ19lbmMuSGV4O1xuXHQgICAgdmFyIENfZm9ybWF0ID0gQy5mb3JtYXQ7XG5cblx0ICAgIHZhciBIZXhGb3JtYXR0ZXIgPSBDX2Zvcm1hdC5IZXggPSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgdGhlIGNpcGhlcnRleHQgb2YgYSBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc30gY2lwaGVyUGFyYW1zIFRoZSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBzdHJpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAc3RhdGljXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBoZXhTdHJpbmcgPSBDcnlwdG9KUy5mb3JtYXQuSGV4LnN0cmluZ2lmeShjaXBoZXJQYXJhbXMpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKGNpcGhlclBhcmFtcykge1xuXHQgICAgICAgICAgICByZXR1cm4gY2lwaGVyUGFyYW1zLmNpcGhlcnRleHQudG9TdHJpbmcoSGV4KTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQ29udmVydHMgYSBoZXhhZGVjaW1hbGx5IGVuY29kZWQgY2lwaGVydGV4dCBzdHJpbmcgdG8gYSBjaXBoZXIgcGFyYW1zIG9iamVjdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBUaGUgaGV4YWRlY2ltYWxseSBlbmNvZGVkIHN0cmluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHN0YXRpY1xuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMuZm9ybWF0LkhleC5wYXJzZShoZXhTdHJpbmcpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoaW5wdXQpIHtcblx0ICAgICAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBIZXgucGFyc2UoaW5wdXQpO1xuXHQgICAgICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7IGNpcGhlcnRleHQ6IGNpcGhlcnRleHQgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5mb3JtYXQuSGV4O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKCkge1xuXHQgICAgLy8gU2hvcnRjdXRzXG5cdCAgICB2YXIgQyA9IENyeXB0b0pTO1xuXHQgICAgdmFyIENfbGliID0gQy5saWI7XG5cdCAgICB2YXIgQmFzZSA9IENfbGliLkJhc2U7XG5cdCAgICB2YXIgQ19lbmMgPSBDLmVuYztcblx0ICAgIHZhciBVdGY4ID0gQ19lbmMuVXRmODtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8qKlxuXHQgICAgICogSE1BQyBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBITUFDID0gQ19hbGdvLkhNQUMgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIEhNQUMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoIGFsZ29yaXRobSB0byB1c2UuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBobWFjSGFzaGVyID0gQ3J5cHRvSlMuYWxnby5ITUFDLmNyZWF0ZShDcnlwdG9KUy5hbGdvLlNIQTI1Niwga2V5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoaGFzaGVyLCBrZXkpIHtcblx0ICAgICAgICAgICAgLy8gSW5pdCBoYXNoZXJcblx0ICAgICAgICAgICAgaGFzaGVyID0gdGhpcy5faGFzaGVyID0gbmV3IGhhc2hlci5pbml0KCk7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gV29yZEFycmF5LCBlbHNlIGFzc3VtZSBXb3JkQXJyYXkgYWxyZWFkeVxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJykge1xuXHQgICAgICAgICAgICAgICAga2V5ID0gVXRmOC5wYXJzZShrZXkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBoYXNoZXJCbG9ja1NpemUgPSBoYXNoZXIuYmxvY2tTaXplO1xuXHQgICAgICAgICAgICB2YXIgaGFzaGVyQmxvY2tTaXplQnl0ZXMgPSBoYXNoZXJCbG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEFsbG93IGFyYml0cmFyeSBsZW5ndGgga2V5c1xuXHQgICAgICAgICAgICBpZiAoa2V5LnNpZ0J5dGVzID4gaGFzaGVyQmxvY2tTaXplQnl0ZXMpIHtcblx0ICAgICAgICAgICAgICAgIGtleSA9IGhhc2hlci5maW5hbGl6ZShrZXkpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQ2xhbXAgZXhjZXNzIGJpdHNcblx0ICAgICAgICAgICAga2V5LmNsYW1wKCk7XG5cblx0ICAgICAgICAgICAgLy8gQ2xvbmUga2V5IGZvciBpbm5lciBhbmQgb3V0ZXIgcGFkc1xuXHQgICAgICAgICAgICB2YXIgb0tleSA9IHRoaXMuX29LZXkgPSBrZXkuY2xvbmUoKTtcblx0ICAgICAgICAgICAgdmFyIGlLZXkgPSB0aGlzLl9pS2V5ID0ga2V5LmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBvS2V5V29yZHMgPSBvS2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgaUtleVdvcmRzID0gaUtleS53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBYT1Iga2V5cyB3aXRoIHBhZCBjb25zdGFudHNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYXNoZXJCbG9ja1NpemU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgb0tleVdvcmRzW2ldIF49IDB4NWM1YzVjNWM7XG5cdCAgICAgICAgICAgICAgICBpS2V5V29yZHNbaV0gXj0gMHgzNjM2MzYzNjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBvS2V5LnNpZ0J5dGVzID0gaUtleS5zaWdCeXRlcyA9IGhhc2hlckJsb2NrU2l6ZUJ5dGVzO1xuXG5cdCAgICAgICAgICAgIC8vIFNldCBpbml0aWFsIHZhbHVlc1xuXHQgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIFJlc2V0cyB0aGlzIEhNQUMgdG8gaXRzIGluaXRpYWwgc3RhdGUuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhtYWNIYXNoZXIucmVzZXQoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICByZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgaGFzaGVyID0gdGhpcy5faGFzaGVyO1xuXG5cdCAgICAgICAgICAgIC8vIFJlc2V0XG5cdCAgICAgICAgICAgIGhhc2hlci5yZXNldCgpO1xuXHQgICAgICAgICAgICBoYXNoZXIudXBkYXRlKHRoaXMuX2lLZXkpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBVcGRhdGVzIHRoaXMgSE1BQyB3aXRoIGEgbWVzc2FnZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZVVwZGF0ZSBUaGUgbWVzc2FnZSB0byBhcHBlbmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtITUFDfSBUaGlzIEhNQUMgaW5zdGFuY2UuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIGhtYWNIYXNoZXIudXBkYXRlKCdtZXNzYWdlJyk7XG5cdCAgICAgICAgICogICAgIGhtYWNIYXNoZXIudXBkYXRlKHdvcmRBcnJheSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiAobWVzc2FnZVVwZGF0ZSkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoZXIudXBkYXRlKG1lc3NhZ2VVcGRhdGUpO1xuXG5cdCAgICAgICAgICAgIC8vIENoYWluYWJsZVxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogRmluYWxpemVzIHRoZSBITUFDIGNvbXB1dGF0aW9uLlxuXHQgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgZmluYWxpemUgb3BlcmF0aW9uIGlzIGVmZmVjdGl2ZWx5IGEgZGVzdHJ1Y3RpdmUsIHJlYWQtb25jZSBvcGVyYXRpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgKE9wdGlvbmFsKSBBIGZpbmFsIG1lc3NhZ2UgdXBkYXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGhtYWMgPSBobWFjSGFzaGVyLmZpbmFsaXplKCk7XG5cdCAgICAgICAgICogICAgIHZhciBobWFjID0gaG1hY0hhc2hlci5maW5hbGl6ZSgnbWVzc2FnZScpO1xuXHQgICAgICAgICAqICAgICB2YXIgaG1hYyA9IGhtYWNIYXNoZXIuZmluYWxpemUod29yZEFycmF5KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIGhhc2hlciA9IHRoaXMuX2hhc2hlcjtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRlIEhNQUNcblx0ICAgICAgICAgICAgdmFyIGlubmVySGFzaCA9IGhhc2hlci5maW5hbGl6ZShtZXNzYWdlVXBkYXRlKTtcblx0ICAgICAgICAgICAgaGFzaGVyLnJlc2V0KCk7XG5cdCAgICAgICAgICAgIHZhciBobWFjID0gaGFzaGVyLmZpbmFsaXplKHRoaXMuX29LZXkuY2xvbmUoKS5jb25jYXQoaW5uZXJIYXNoKSk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGhtYWM7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH0oKSk7XG5cblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi94NjQtY29yZVwiKSwgcmVxdWlyZShcIi4vbGliLXR5cGVkYXJyYXlzXCIpLCByZXF1aXJlKFwiLi9lbmMtdXRmMTZcIiksIHJlcXVpcmUoXCIuL2VuYy1iYXNlNjRcIiksIHJlcXVpcmUoXCIuL21kNVwiKSwgcmVxdWlyZShcIi4vc2hhMVwiKSwgcmVxdWlyZShcIi4vc2hhMjU2XCIpLCByZXF1aXJlKFwiLi9zaGEyMjRcIiksIHJlcXVpcmUoXCIuL3NoYTUxMlwiKSwgcmVxdWlyZShcIi4vc2hhMzg0XCIpLCByZXF1aXJlKFwiLi9zaGEzXCIpLCByZXF1aXJlKFwiLi9yaXBlbWQxNjBcIiksIHJlcXVpcmUoXCIuL2htYWNcIiksIHJlcXVpcmUoXCIuL3Bia2RmMlwiKSwgcmVxdWlyZShcIi4vZXZwa2RmXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSwgcmVxdWlyZShcIi4vbW9kZS1jZmJcIiksIHJlcXVpcmUoXCIuL21vZGUtY3RyXCIpLCByZXF1aXJlKFwiLi9tb2RlLWN0ci1nbGFkbWFuXCIpLCByZXF1aXJlKFwiLi9tb2RlLW9mYlwiKSwgcmVxdWlyZShcIi4vbW9kZS1lY2JcIiksIHJlcXVpcmUoXCIuL3BhZC1hbnNpeDkyM1wiKSwgcmVxdWlyZShcIi4vcGFkLWlzbzEwMTI2XCIpLCByZXF1aXJlKFwiLi9wYWQtaXNvOTc5NzFcIiksIHJlcXVpcmUoXCIuL3BhZC16ZXJvcGFkZGluZ1wiKSwgcmVxdWlyZShcIi4vcGFkLW5vcGFkZGluZ1wiKSwgcmVxdWlyZShcIi4vZm9ybWF0LWhleFwiKSwgcmVxdWlyZShcIi4vYWVzXCIpLCByZXF1aXJlKFwiLi90cmlwbGVkZXNcIiksIHJlcXVpcmUoXCIuL3JjNFwiKSwgcmVxdWlyZShcIi4vcmFiYml0XCIpLCByZXF1aXJlKFwiLi9yYWJiaXQtbGVnYWN5XCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL3g2NC1jb3JlXCIsIFwiLi9saWItdHlwZWRhcnJheXNcIiwgXCIuL2VuYy11dGYxNlwiLCBcIi4vZW5jLWJhc2U2NFwiLCBcIi4vbWQ1XCIsIFwiLi9zaGExXCIsIFwiLi9zaGEyNTZcIiwgXCIuL3NoYTIyNFwiLCBcIi4vc2hhNTEyXCIsIFwiLi9zaGEzODRcIiwgXCIuL3NoYTNcIiwgXCIuL3JpcGVtZDE2MFwiLCBcIi4vaG1hY1wiLCBcIi4vcGJrZGYyXCIsIFwiLi9ldnBrZGZcIiwgXCIuL2NpcGhlci1jb3JlXCIsIFwiLi9tb2RlLWNmYlwiLCBcIi4vbW9kZS1jdHJcIiwgXCIuL21vZGUtY3RyLWdsYWRtYW5cIiwgXCIuL21vZGUtb2ZiXCIsIFwiLi9tb2RlLWVjYlwiLCBcIi4vcGFkLWFuc2l4OTIzXCIsIFwiLi9wYWQtaXNvMTAxMjZcIiwgXCIuL3BhZC1pc285Nzk3MVwiLCBcIi4vcGFkLXplcm9wYWRkaW5nXCIsIFwiLi9wYWQtbm9wYWRkaW5nXCIsIFwiLi9mb3JtYXQtaGV4XCIsIFwiLi9hZXNcIiwgXCIuL3RyaXBsZWRlc1wiLCBcIi4vcmM0XCIsIFwiLi9yYWJiaXRcIiwgXCIuL3JhYmJpdC1sZWdhY3lcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRyb290LkNyeXB0b0pTID0gZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHRyZXR1cm4gQ3J5cHRvSlM7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBDaGVjayBpZiB0eXBlZCBhcnJheXMgYXJlIHN1cHBvcnRlZFxuXHQgICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgcmV0dXJuO1xuXHQgICAgfVxuXG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cblx0ICAgIC8vIFJlZmVyZW5jZSBvcmlnaW5hbCBpbml0XG5cdCAgICB2YXIgc3VwZXJJbml0ID0gV29yZEFycmF5LmluaXQ7XG5cblx0ICAgIC8vIEF1Z21lbnQgV29yZEFycmF5LmluaXQgdG8gaGFuZGxlIHR5cGVkIGFycmF5c1xuXHQgICAgdmFyIHN1YkluaXQgPSBXb3JkQXJyYXkuaW5pdCA9IGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdCAgICAgICAgLy8gQ29udmVydCBidWZmZXJzIHRvIHVpbnQ4XG5cdCAgICAgICAgaWYgKHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuXHQgICAgICAgICAgICB0eXBlZEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodHlwZWRBcnJheSk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ29udmVydCBvdGhlciBhcnJheSB2aWV3cyB0byB1aW50OFxuXHQgICAgICAgIGlmIChcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEludDhBcnJheSB8fFxuXHQgICAgICAgICAgICAodHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEludDE2QXJyYXkgfHxcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBVaW50MzJBcnJheSB8fFxuXHQgICAgICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XG5cdCAgICAgICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXlcblx0ICAgICAgICApIHtcblx0ICAgICAgICAgICAgdHlwZWRBcnJheSA9IG5ldyBVaW50OEFycmF5KHR5cGVkQXJyYXkuYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkuYnl0ZUxlbmd0aCk7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gSGFuZGxlIFVpbnQ4QXJyYXlcblx0ICAgICAgICBpZiAodHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgdmFyIHR5cGVkQXJyYXlCeXRlTGVuZ3RoID0gdHlwZWRBcnJheS5ieXRlTGVuZ3RoO1xuXG5cdCAgICAgICAgICAgIC8vIEV4dHJhY3QgYnl0ZXNcblx0ICAgICAgICAgICAgdmFyIHdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWRBcnJheUJ5dGVMZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbaSA+Pj4gMl0gfD0gdHlwZWRBcnJheVtpXSA8PCAoMjQgLSAoaSAlIDQpICogOCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoaXMgd29yZCBhcnJheVxuXHQgICAgICAgICAgICBzdXBlckluaXQuY2FsbCh0aGlzLCB3b3JkcywgdHlwZWRBcnJheUJ5dGVMZW5ndGgpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIC8vIEVsc2UgY2FsbCBub3JtYWwgaW5pdFxuXHQgICAgICAgICAgICBzdXBlckluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0ICAgICAgICB9XG5cdCAgICB9O1xuXG5cdCAgICBzdWJJbml0LnByb3RvdHlwZSA9IFdvcmRBcnJheTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5saWIuV29yZEFycmF5O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKE1hdGgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBDb25zdGFudHMgdGFibGVcblx0ICAgIHZhciBUID0gW107XG5cblx0ICAgIC8vIENvbXB1dGUgY29uc3RhbnRzXG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuXHQgICAgICAgICAgICBUW2ldID0gKE1hdGguYWJzKE1hdGguc2luKGkgKyAxKSkgKiAweDEwMDAwMDAwMCkgfCAwO1xuXHQgICAgICAgIH1cblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogTUQ1IGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgTUQ1ID0gQ19hbGdvLk1ENSA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSxcblx0ICAgICAgICAgICAgICAgIDB4OThiYWRjZmUsIDB4MTAzMjU0NzZcblx0ICAgICAgICAgICAgXSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgdmFyIG9mZnNldF9pID0gb2Zmc2V0ICsgaTtcblx0ICAgICAgICAgICAgICAgIHZhciBNX29mZnNldF9pID0gTVtvZmZzZXRfaV07XG5cblx0ICAgICAgICAgICAgICAgIE1bb2Zmc2V0X2ldID0gKFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgOCkgIHwgKE1fb2Zmc2V0X2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCAyNCkgfCAoTV9vZmZzZXRfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMCAgPSBNW29mZnNldCArIDBdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMSAgPSBNW29mZnNldCArIDFdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMiAgPSBNW29mZnNldCArIDJdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMyAgPSBNW29mZnNldCArIDNdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNCAgPSBNW29mZnNldCArIDRdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNSAgPSBNW29mZnNldCArIDVdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNiAgPSBNW29mZnNldCArIDZdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfNyAgPSBNW29mZnNldCArIDddO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfOCAgPSBNW29mZnNldCArIDhdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfOSAgPSBNW29mZnNldCArIDldO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTAgPSBNW29mZnNldCArIDEwXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzExID0gTVtvZmZzZXQgKyAxMV07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xMiA9IE1bb2Zmc2V0ICsgMTJdO1xuXHQgICAgICAgICAgICB2YXIgTV9vZmZzZXRfMTMgPSBNW29mZnNldCArIDEzXTtcblx0ICAgICAgICAgICAgdmFyIE1fb2Zmc2V0XzE0ID0gTVtvZmZzZXQgKyAxNF07XG5cdCAgICAgICAgICAgIHZhciBNX29mZnNldF8xNSA9IE1bb2Zmc2V0ICsgMTVdO1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFsYmVzXG5cdCAgICAgICAgICAgIHZhciBhID0gSFswXTtcblx0ICAgICAgICAgICAgdmFyIGIgPSBIWzFdO1xuXHQgICAgICAgICAgICB2YXIgYyA9IEhbMl07XG5cdCAgICAgICAgICAgIHZhciBkID0gSFszXTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfMCwgIDcsICBUWzBdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEsICAxMiwgVFsxXSk7XG5cdCAgICAgICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF8yLCAgMTcsIFRbMl0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMywgIDIyLCBUWzNdKTtcblx0ICAgICAgICAgICAgYSA9IEZGKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzQsICA3LCAgVFs0XSk7XG5cdCAgICAgICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF81LCAgMTIsIFRbNV0pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfNiwgIDE3LCBUWzZdKTtcblx0ICAgICAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzcsICAyMiwgVFs3XSk7XG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF84LCAgNywgIFRbOF0pO1xuXHQgICAgICAgICAgICBkID0gRkYoZCwgYSwgYiwgYywgTV9vZmZzZXRfOSwgIDEyLCBUWzldKTtcblx0ICAgICAgICAgICAgYyA9IEZGKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzEwLCAxNywgVFsxMF0pO1xuXHQgICAgICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTEsIDIyLCBUWzExXSk7XG5cdCAgICAgICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF8xMiwgNywgIFRbMTJdKTtcblx0ICAgICAgICAgICAgZCA9IEZGKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEzLCAxMiwgVFsxM10pO1xuXHQgICAgICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTQsIDE3LCBUWzE0XSk7XG5cdCAgICAgICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8xNSwgMjIsIFRbMTVdKTtcblxuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfMSwgIDUsICBUWzE2XSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF82LCAgOSwgIFRbMTddKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzExLCAxNCwgVFsxOF0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfMCwgIDIwLCBUWzE5XSk7XG5cdCAgICAgICAgICAgIGEgPSBHRyhhLCBiLCBjLCBkLCBNX29mZnNldF81LCAgNSwgIFRbMjBdKTtcblx0ICAgICAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzEwLCA5LCAgVFsyMV0pO1xuXHQgICAgICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMTUsIDE0LCBUWzIyXSk7XG5cdCAgICAgICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF80LCAgMjAsIFRbMjNdKTtcblx0ICAgICAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzksICA1LCAgVFsyNF0pO1xuXHQgICAgICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMTQsIDksICBUWzI1XSk7XG5cdCAgICAgICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8zLCAgMTQsIFRbMjZdKTtcblx0ICAgICAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzgsICAyMCwgVFsyN10pO1xuXHQgICAgICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfMTMsIDUsICBUWzI4XSk7XG5cdCAgICAgICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8yLCAgOSwgIFRbMjldKTtcblx0ICAgICAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsICAxNCwgVFszMF0pO1xuXHQgICAgICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfMTIsIDIwLCBUWzMxXSk7XG5cblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzUsICA0LCAgVFszMl0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfOCwgIDExLCBUWzMzXSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTYsIFRbMzRdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzE0LCAyMywgVFszNV0pO1xuXHQgICAgICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfMSwgIDQsICBUWzM2XSk7XG5cdCAgICAgICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF80LCAgMTEsIFRbMzddKTtcblx0ICAgICAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsICAxNiwgVFszOF0pO1xuXHQgICAgICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTAsIDIzLCBUWzM5XSk7XG5cdCAgICAgICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF8xMywgNCwgIFRbNDBdKTtcblx0ICAgICAgICAgICAgZCA9IEhIKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzAsICAxMSwgVFs0MV0pO1xuXHQgICAgICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMywgIDE2LCBUWzQyXSk7XG5cdCAgICAgICAgICAgIGIgPSBISChiLCBjLCBkLCBhLCBNX29mZnNldF82LCAgMjMsIFRbNDNdKTtcblx0ICAgICAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzksICA0LCAgVFs0NF0pO1xuXHQgICAgICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTIsIDExLCBUWzQ1XSk7XG5cdCAgICAgICAgICAgIGMgPSBISChjLCBkLCBhLCBiLCBNX29mZnNldF8xNSwgMTYsIFRbNDZdKTtcblx0ICAgICAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzIsICAyMywgVFs0N10pO1xuXG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF8wLCAgNiwgIFRbNDhdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzcsICAxMCwgVFs0OV0pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTQsIDE1LCBUWzUwXSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF81LCAgMjEsIFRbNTFdKTtcblx0ICAgICAgICAgICAgYSA9IElJKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEyLCA2LCAgVFs1Ml0pO1xuXHQgICAgICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMywgIDEwLCBUWzUzXSk7XG5cdCAgICAgICAgICAgIGMgPSBJSShjLCBkLCBhLCBiLCBNX29mZnNldF8xMCwgMTUsIFRbNTRdKTtcblx0ICAgICAgICAgICAgYiA9IElJKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzEsICAyMSwgVFs1NV0pO1xuXHQgICAgICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfOCwgIDYsICBUWzU2XSk7XG5cdCAgICAgICAgICAgIGQgPSBJSShkLCBhLCBiLCBjLCBNX29mZnNldF8xNSwgMTAsIFRbNTddKTtcblx0ICAgICAgICAgICAgYyA9IElJKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzYsICAxNSwgVFs1OF0pO1xuXHQgICAgICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTMsIDIxLCBUWzU5XSk7XG5cdCAgICAgICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF80LCAgNiwgIFRbNjBdKTtcblx0ICAgICAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzExLCAxMCwgVFs2MV0pO1xuXHQgICAgICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMiwgIDE1LCBUWzYyXSk7XG5cdCAgICAgICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF85LCAgMjEsIFRbNjNdKTtcblxuXHQgICAgICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxuXHQgICAgICAgICAgICBIWzBdID0gKEhbMF0gKyBhKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwO1xuXHQgICAgICAgICAgICBIWzNdID0gKEhbM10gKyBkKSB8IDA7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODtcblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTtcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbEggPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7XG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsTCA9IG5CaXRzVG90YWw7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTVdID0gKFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEggPDwgOCkgIHwgKG5CaXRzVG90YWxIID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbEggPDwgMjQpIHwgKG5CaXRzVG90YWxIID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSAoXG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCA4KSAgfCAobkJpdHNUb3RhbEwgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCAyNCkgfCAobkJpdHNUb3RhbEwgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICApO1xuXG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSAoZGF0YVdvcmRzLmxlbmd0aCArIDEpICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5faGFzaDtcblx0ICAgICAgICAgICAgdmFyIEggPSBoYXNoLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIEhfaSA9IEhbaV07XG5cblx0ICAgICAgICAgICAgICAgIEhbaV0gPSAoKChIX2kgPDwgOCkgIHwgKEhfaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAgICAoKChIX2kgPDwgMjQpIHwgKEhfaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIEZGKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoKGIgJiBjKSB8ICh+YiAmIGQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIEdHKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoKGIgJiBkKSB8IChjICYgfmQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIEhIKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoYiBeIGMgXiBkKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIElJKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcblx0ICAgICAgICB2YXIgbiA9IGEgKyAoYyBeIChiIHwgfmQpKSArIHggKyB0O1xuXHQgICAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGI7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5NRDUoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLk1ENSh3b3JkQXJyYXkpO1xuXHQgICAgICovXG5cdCAgICBDLk1ENSA9IEhhc2hlci5fY3JlYXRlSGVscGVyKE1ENSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjTUQ1KG1lc3NhZ2UsIGtleSk7XG5cdCAgICAgKi9cblx0ICAgIEMuSG1hY01ENSA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihNRDUpO1xuXHR9KE1hdGgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5NRDU7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBDaXBoZXIgRmVlZGJhY2sgYmxvY2sgbW9kZS5cblx0ICovXG5cdENyeXB0b0pTLm1vZGUuQ0ZCID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBDRkIgPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpO1xuXG5cdCAgICBDRkIuRW5jcnlwdG9yID0gQ0ZCLmV4dGVuZCh7XG5cdCAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlcjtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cblx0ICAgICAgICAgICAgZ2VuZXJhdGVLZXlzdHJlYW1BbmRFbmNyeXB0LmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplLCBjaXBoZXIpO1xuXG5cdCAgICAgICAgICAgIC8vIFJlbWVtYmVyIHRoaXMgYmxvY2sgdG8gdXNlIHdpdGggbmV4dCBibG9ja1xuXHQgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIENGQi5EZWNyeXB0b3IgPSBDRkIuZXh0ZW5kKHtcblx0ICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZTtcblxuXHQgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2tcblx0ICAgICAgICAgICAgdmFyIHRoaXNCbG9jayA9IHdvcmRzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgYmxvY2tTaXplKTtcblxuXHQgICAgICAgICAgICBnZW5lcmF0ZUtleXN0cmVhbUFuZEVuY3J5cHQuY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUsIGNpcGhlcik7XG5cblx0ICAgICAgICAgICAgLy8gVGhpcyBibG9jayBiZWNvbWVzIHRoZSBwcmV2aW91cyBibG9ja1xuXHQgICAgICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB0aGlzQmxvY2s7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIGdlbmVyYXRlS2V5c3RyZWFtQW5kRW5jcnlwdCh3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUsIGNpcGhlcikge1xuXHQgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgdmFyIGl2ID0gdGhpcy5faXY7XG5cblx0ICAgICAgICAvLyBHZW5lcmF0ZSBrZXlzdHJlYW1cblx0ICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgdmFyIGtleXN0cmVhbSA9IGl2LnNsaWNlKDApO1xuXG5cdCAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdmFyIGtleXN0cmVhbSA9IHRoaXMuX3ByZXZCbG9jaztcblx0ICAgICAgICB9XG5cdCAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayhrZXlzdHJlYW0sIDApO1xuXG5cdCAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcblx0ICAgICAgICAgICAgd29yZHNbb2Zmc2V0ICsgaV0gXj0ga2V5c3RyZWFtW2ldO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIENGQjtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5tb2RlLkNGQjtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9jaXBoZXItY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0LyoqIEBwcmVzZXJ2ZVxuXHQgKiBDb3VudGVyIGJsb2NrIG1vZGUgY29tcGF0aWJsZSB3aXRoICBEciBCcmlhbiBHbGFkbWFuIGZpbGVlbmMuY1xuXHQgKiBkZXJpdmVkIGZyb20gQ3J5cHRvSlMubW9kZS5DVFJcblx0ICogSmFuIEhydWJ5IGpocnVieS53ZWJAZ21haWwuY29tXG5cdCAqL1xuXHRDcnlwdG9KUy5tb2RlLkNUUkdsYWRtYW4gPSAoZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIENUUkdsYWRtYW4gPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpO1xuXG5cdFx0ZnVuY3Rpb24gaW5jV29yZCh3b3JkKVxuXHRcdHtcblx0XHRcdGlmICgoKHdvcmQgPj4gMjQpICYgMHhmZikgPT09IDB4ZmYpIHsgLy9vdmVyZmxvd1xuXHRcdFx0dmFyIGIxID0gKHdvcmQgPj4gMTYpJjB4ZmY7XG5cdFx0XHR2YXIgYjIgPSAod29yZCA+PiA4KSYweGZmO1xuXHRcdFx0dmFyIGIzID0gd29yZCAmIDB4ZmY7XG5cblx0XHRcdGlmIChiMSA9PT0gMHhmZikgLy8gb3ZlcmZsb3cgYjFcblx0XHRcdHtcblx0XHRcdGIxID0gMDtcblx0XHRcdGlmIChiMiA9PT0gMHhmZilcblx0XHRcdHtcblx0XHRcdFx0YjIgPSAwO1xuXHRcdFx0XHRpZiAoYjMgPT09IDB4ZmYpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRiMyA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0KytiMztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHQrK2IyO1xuXHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0KytiMTtcblx0XHRcdH1cblxuXHRcdFx0d29yZCA9IDA7XG5cdFx0XHR3b3JkICs9IChiMSA8PCAxNik7XG5cdFx0XHR3b3JkICs9IChiMiA8PCA4KTtcblx0XHRcdHdvcmQgKz0gYjM7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHR3b3JkICs9ICgweDAxIDw8IDI0KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB3b3JkO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGluY0NvdW50ZXIoY291bnRlcilcblx0XHR7XG5cdFx0XHRpZiAoKGNvdW50ZXJbMF0gPSBpbmNXb3JkKGNvdW50ZXJbMF0pKSA9PT0gMClcblx0XHRcdHtcblx0XHRcdFx0Ly8gZW5jcl9kYXRhIGluIGZpbGVlbmMuYyBmcm9tICBEciBCcmlhbiBHbGFkbWFuJ3MgY291bnRzIG9ubHkgd2l0aCBEV09SRCBqIDwgOFxuXHRcdFx0XHRjb3VudGVyWzFdID0gaW5jV29yZChjb3VudGVyWzFdKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjb3VudGVyO1xuXHRcdH1cblxuXHQgICAgdmFyIEVuY3J5cHRvciA9IENUUkdsYWRtYW4uRW5jcnlwdG9yID0gQ1RSR2xhZG1hbi5leHRlbmQoe1xuXHQgICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXJcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemU7XG5cdCAgICAgICAgICAgIHZhciBpdiA9IHRoaXMuX2l2O1xuXHQgICAgICAgICAgICB2YXIgY291bnRlciA9IHRoaXMuX2NvdW50ZXI7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgY291bnRlciA9IHRoaXMuX2NvdW50ZXIgPSBpdi5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIH1cblxuXHRcdFx0XHRpbmNDb3VudGVyKGNvdW50ZXIpO1xuXG5cdFx0XHRcdHZhciBrZXlzdHJlYW0gPSBjb3VudGVyLnNsaWNlKDApO1xuXHQgICAgICAgICAgICBjaXBoZXIuZW5jcnlwdEJsb2NrKGtleXN0cmVhbSwgMCk7XG5cblx0ICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgQ1RSR2xhZG1hbi5EZWNyeXB0b3IgPSBFbmNyeXB0b3I7XG5cblx0ICAgIHJldHVybiBDVFJHbGFkbWFuO1xuXHR9KCkpO1xuXG5cblxuXG5cdHJldHVybiBDcnlwdG9KUy5tb2RlLkNUUkdsYWRtYW47XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBDb3VudGVyIGJsb2NrIG1vZGUuXG5cdCAqL1xuXHRDcnlwdG9KUy5tb2RlLkNUUiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgQ1RSID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgdmFyIEVuY3J5cHRvciA9IENUUi5FbmNyeXB0b3IgPSBDVFIuZXh0ZW5kKHtcblx0ICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyXG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXHQgICAgICAgICAgICB2YXIgaXYgPSB0aGlzLl9pdjtcblx0ICAgICAgICAgICAgdmFyIGNvdW50ZXIgPSB0aGlzLl9jb3VudGVyO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbVxuXHQgICAgICAgICAgICBpZiAoaXYpIHtcblx0ICAgICAgICAgICAgICAgIGNvdW50ZXIgPSB0aGlzLl9jb3VudGVyID0gaXYuc2xpY2UoMCk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3Ncblx0ICAgICAgICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhciBrZXlzdHJlYW0gPSBjb3VudGVyLnNsaWNlKDApO1xuXHQgICAgICAgICAgICBjaXBoZXIuZW5jcnlwdEJsb2NrKGtleXN0cmVhbSwgMCk7XG5cblx0ICAgICAgICAgICAgLy8gSW5jcmVtZW50IGNvdW50ZXJcblx0ICAgICAgICAgICAgY291bnRlcltibG9ja1NpemUgLSAxXSA9IChjb3VudGVyW2Jsb2NrU2l6ZSAtIDFdICsgMSkgfCAwXG5cblx0ICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgQ1RSLkRlY3J5cHRvciA9IEVuY3J5cHRvcjtcblxuXHQgICAgcmV0dXJuIENUUjtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5tb2RlLkNUUjtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9jaXBoZXItY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0LyoqXG5cdCAqIEVsZWN0cm9uaWMgQ29kZWJvb2sgYmxvY2sgbW9kZS5cblx0ICovXG5cdENyeXB0b0pTLm1vZGUuRUNCID0gKGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBFQ0IgPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpO1xuXG5cdCAgICBFQ0IuRW5jcnlwdG9yID0gRUNCLmV4dGVuZCh7XG5cdCAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICB0aGlzLl9jaXBoZXIuZW5jcnlwdEJsb2NrKHdvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICBFQ0IuRGVjcnlwdG9yID0gRUNCLmV4dGVuZCh7XG5cdCAgICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xuXHQgICAgICAgICAgICB0aGlzLl9jaXBoZXIuZGVjcnlwdEJsb2NrKHdvcmRzLCBvZmZzZXQpO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICByZXR1cm4gRUNCO1xuXHR9KCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLm1vZGUuRUNCO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2NpcGhlci1jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL2NpcGhlci1jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKipcblx0ICogT3V0cHV0IEZlZWRiYWNrIGJsb2NrIG1vZGUuXG5cdCAqL1xuXHRDcnlwdG9KUy5tb2RlLk9GQiA9IChmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgT0ZCID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKTtcblxuXHQgICAgdmFyIEVuY3J5cHRvciA9IE9GQi5FbmNyeXB0b3IgPSBPRkIuZXh0ZW5kKHtcblx0ICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgY2lwaGVyID0gdGhpcy5fY2lwaGVyXG5cdCAgICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplO1xuXHQgICAgICAgICAgICB2YXIgaXYgPSB0aGlzLl9pdjtcblx0ICAgICAgICAgICAgdmFyIGtleXN0cmVhbSA9IHRoaXMuX2tleXN0cmVhbTtcblxuXHQgICAgICAgICAgICAvLyBHZW5lcmF0ZSBrZXlzdHJlYW1cblx0ICAgICAgICAgICAgaWYgKGl2KSB7XG5cdCAgICAgICAgICAgICAgICBrZXlzdHJlYW0gPSB0aGlzLl9rZXlzdHJlYW0gPSBpdi5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2Nrc1xuXHQgICAgICAgICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayhrZXlzdHJlYW0sIDApO1xuXG5cdCAgICAgICAgICAgIC8vIEVuY3J5cHRcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja1NpemU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgd29yZHNbb2Zmc2V0ICsgaV0gXj0ga2V5c3RyZWFtW2ldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIE9GQi5EZWNyeXB0b3IgPSBFbmNyeXB0b3I7XG5cblx0ICAgIHJldHVybiBPRkI7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMubW9kZS5PRkI7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBBTlNJIFguOTIzIHBhZGRpbmcgc3RyYXRlZ3kuXG5cdCAqL1xuXHRDcnlwdG9KUy5wYWQuQW5zaVg5MjMgPSB7XG5cdCAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICB2YXIgZGF0YVNpZ0J5dGVzID0gZGF0YS5zaWdCeXRlcztcblx0ICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0O1xuXG5cdCAgICAgICAgLy8gQ291bnQgcGFkZGluZyBieXRlc1xuXHQgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gYmxvY2tTaXplQnl0ZXMgLSBkYXRhU2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlcztcblxuXHQgICAgICAgIC8vIENvbXB1dGUgbGFzdCBieXRlIHBvc2l0aW9uXG5cdCAgICAgICAgdmFyIGxhc3RCeXRlUG9zID0gZGF0YVNpZ0J5dGVzICsgblBhZGRpbmdCeXRlcyAtIDE7XG5cblx0ICAgICAgICAvLyBQYWRcblx0ICAgICAgICBkYXRhLmNsYW1wKCk7XG5cdCAgICAgICAgZGF0YS53b3Jkc1tsYXN0Qnl0ZVBvcyA+Pj4gMl0gfD0gblBhZGRpbmdCeXRlcyA8PCAoMjQgLSAobGFzdEJ5dGVQb3MgJSA0KSAqIDgpO1xuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMgKz0gblBhZGRpbmdCeXRlcztcblx0ICAgIH0sXG5cblx0ICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgIC8vIEdldCBudW1iZXIgb2YgcGFkZGluZyBieXRlcyBmcm9tIGxhc3QgYnl0ZVxuXHQgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gZGF0YS53b3Jkc1soZGF0YS5zaWdCeXRlcyAtIDEpID4+PiAyXSAmIDB4ZmY7XG5cblx0ICAgICAgICAvLyBSZW1vdmUgcGFkZGluZ1xuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gblBhZGRpbmdCeXRlcztcblx0ICAgIH1cblx0fTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5wYWQuQW5zaXg5MjM7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBJU08gMTAxMjYgcGFkZGluZyBzdHJhdGVneS5cblx0ICovXG5cdENyeXB0b0pTLnBhZC5Jc28xMDEyNiA9IHtcblx0ICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkge1xuXHQgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDtcblxuXHQgICAgICAgIC8vIENvdW50IHBhZGRpbmcgYnl0ZXNcblx0ICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YS5zaWdCeXRlcyAlIGJsb2NrU2l6ZUJ5dGVzO1xuXG5cdCAgICAgICAgLy8gUGFkXG5cdCAgICAgICAgZGF0YS5jb25jYXQoQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oblBhZGRpbmdCeXRlcyAtIDEpKS5cblx0ICAgICAgICAgICAgIGNvbmNhdChDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbblBhZGRpbmdCeXRlcyA8PCAyNF0sIDEpKTtcblx0ICAgIH0sXG5cblx0ICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgIC8vIEdldCBudW1iZXIgb2YgcGFkZGluZyBieXRlcyBmcm9tIGxhc3QgYnl0ZVxuXHQgICAgICAgIHZhciBuUGFkZGluZ0J5dGVzID0gZGF0YS53b3Jkc1soZGF0YS5zaWdCeXRlcyAtIDEpID4+PiAyXSAmIDB4ZmY7XG5cblx0ICAgICAgICAvLyBSZW1vdmUgcGFkZGluZ1xuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gblBhZGRpbmdCeXRlcztcblx0ICAgIH1cblx0fTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5wYWQuSXNvMTAxMjY7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBJU08vSUVDIDk3OTctMSBQYWRkaW5nIE1ldGhvZCAyLlxuXHQgKi9cblx0Q3J5cHRvSlMucGFkLklzbzk3OTcxID0ge1xuXHQgICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7XG5cdCAgICAgICAgLy8gQWRkIDB4ODAgYnl0ZVxuXHQgICAgICAgIGRhdGEuY29uY2F0KENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDgwMDAwMDAwXSwgMSkpO1xuXG5cdCAgICAgICAgLy8gWmVybyBwYWQgdGhlIHJlc3Rcblx0ICAgICAgICBDcnlwdG9KUy5wYWQuWmVyb1BhZGRpbmcucGFkKGRhdGEsIGJsb2NrU2l6ZSk7XG5cdCAgICB9LFxuXG5cdCAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICAvLyBSZW1vdmUgemVybyBwYWRkaW5nXG5cdCAgICAgICAgQ3J5cHRvSlMucGFkLlplcm9QYWRkaW5nLnVucGFkKGRhdGEpO1xuXG5cdCAgICAgICAgLy8gUmVtb3ZlIG9uZSBtb3JlIGJ5dGUgLS0gdGhlIDB4ODAgYnl0ZVxuXHQgICAgICAgIGRhdGEuc2lnQnl0ZXMtLTtcblx0ICAgIH1cblx0fTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5wYWQuSXNvOTc5NzE7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4vY2lwaGVyLWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdC8qKlxuXHQgKiBBIG5vb3AgcGFkZGluZyBzdHJhdGVneS5cblx0ICovXG5cdENyeXB0b0pTLnBhZC5Ob1BhZGRpbmcgPSB7XG5cdCAgICBwYWQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgIH0sXG5cblx0ICAgIHVucGFkOiBmdW5jdGlvbiAoKSB7XG5cdCAgICB9XG5cdH07XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMucGFkLk5vUGFkZGluZztcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9jaXBoZXItY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0LyoqXG5cdCAqIFplcm8gcGFkZGluZyBzdHJhdGVneS5cblx0ICovXG5cdENyeXB0b0pTLnBhZC5aZXJvUGFkZGluZyA9IHtcblx0ICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkge1xuXHQgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNDtcblxuXHQgICAgICAgIC8vIFBhZFxuXHQgICAgICAgIGRhdGEuY2xhbXAoKTtcblx0ICAgICAgICBkYXRhLnNpZ0J5dGVzICs9IGJsb2NrU2l6ZUJ5dGVzIC0gKChkYXRhLnNpZ0J5dGVzICUgYmxvY2tTaXplQnl0ZXMpIHx8IGJsb2NrU2l6ZUJ5dGVzKTtcblx0ICAgIH0sXG5cblx0ICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAvLyBVbnBhZFxuXHQgICAgICAgIHZhciBpID0gZGF0YS5zaWdCeXRlcyAtIDE7XG5cdCAgICAgICAgd2hpbGUgKCEoKGRhdGFXb3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmYpKSB7XG5cdCAgICAgICAgICAgIGktLTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGkgKyAxO1xuXHQgICAgfVxuXHR9O1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLnBhZC5aZXJvUGFkZGluZztcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi9zaGExXCIpLCByZXF1aXJlKFwiLi9obWFjXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIiwgXCIuL3NoYTFcIiwgXCIuL2htYWNcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXHQgICAgdmFyIFNIQTEgPSBDX2FsZ28uU0hBMTtcblx0ICAgIHZhciBITUFDID0gQ19hbGdvLkhNQUM7XG5cblx0ICAgIC8qKlxuXHQgICAgICogUGFzc3dvcmQtQmFzZWQgS2V5IERlcml2YXRpb24gRnVuY3Rpb24gMiBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBQQktERjIgPSBDX2FsZ28uUEJLREYyID0gQmFzZS5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBrZXlTaXplIFRoZSBrZXkgc2l6ZSBpbiB3b3JkcyB0byBnZW5lcmF0ZS4gRGVmYXVsdDogNCAoMTI4IGJpdHMpXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaGVyIHRvIHVzZS4gRGVmYXVsdDogU0hBMVxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpdGVyYXRpb25zIFRoZSBudW1iZXIgb2YgaXRlcmF0aW9ucyB0byBwZXJmb3JtLiBEZWZhdWx0OiAxXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIGtleVNpemU6IDEyOC8zMixcblx0ICAgICAgICAgICAgaGFzaGVyOiBTSEExLFxuXHQgICAgICAgICAgICBpdGVyYXRpb25zOiAxXG5cdCAgICAgICAgfSksXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoZSBkZXJpdmF0aW9uLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5QQktERjIuY3JlYXRlKCk7XG5cdCAgICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLlBCS0RGMi5jcmVhdGUoeyBrZXlTaXplOiA4IH0pO1xuXHQgICAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5QQktERjIuY3JlYXRlKHsga2V5U2l6ZTogOCwgaXRlcmF0aW9uczogMTAwMCB9KTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAoY2ZnKSB7XG5cdCAgICAgICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbXB1dGVzIHRoZSBQYXNzd29yZC1CYXNlZCBLZXkgRGVyaXZhdGlvbiBGdW5jdGlvbiAyLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBzYWx0IEEgc2FsdC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRlcml2ZWQga2V5LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIga2V5ID0ga2RmLmNvbXB1dGUocGFzc3dvcmQsIHNhbHQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIGNvbXB1dGU6IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgY2ZnID0gdGhpcy5jZmc7XG5cblx0ICAgICAgICAgICAgLy8gSW5pdCBITUFDXG5cdCAgICAgICAgICAgIHZhciBobWFjID0gSE1BQy5jcmVhdGUoY2ZnLmhhc2hlciwgcGFzc3dvcmQpO1xuXG5cdCAgICAgICAgICAgIC8vIEluaXRpYWwgdmFsdWVzXG5cdCAgICAgICAgICAgIHZhciBkZXJpdmVkS2V5ID0gV29yZEFycmF5LmNyZWF0ZSgpO1xuXHQgICAgICAgICAgICB2YXIgYmxvY2tJbmRleCA9IFdvcmRBcnJheS5jcmVhdGUoWzB4MDAwMDAwMDFdKTtcblxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRlcml2ZWRLZXlXb3JkcyA9IGRlcml2ZWRLZXkud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBibG9ja0luZGV4V29yZHMgPSBibG9ja0luZGV4LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIga2V5U2l6ZSA9IGNmZy5rZXlTaXplO1xuXHQgICAgICAgICAgICB2YXIgaXRlcmF0aW9ucyA9IGNmZy5pdGVyYXRpb25zO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGtleVxuXHQgICAgICAgICAgICB3aGlsZSAoZGVyaXZlZEtleVdvcmRzLmxlbmd0aCA8IGtleVNpemUpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBibG9jayA9IGhtYWMudXBkYXRlKHNhbHQpLmZpbmFsaXplKGJsb2NrSW5kZXgpO1xuXHQgICAgICAgICAgICAgICAgaG1hYy5yZXNldCgpO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBibG9ja1dvcmRzID0gYmxvY2sud29yZHM7XG5cdCAgICAgICAgICAgICAgICB2YXIgYmxvY2tXb3Jkc0xlbmd0aCA9IGJsb2NrV29yZHMubGVuZ3RoO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBJdGVyYXRpb25zXG5cdCAgICAgICAgICAgICAgICB2YXIgaW50ZXJtZWRpYXRlID0gYmxvY2s7XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGl0ZXJhdGlvbnM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGludGVybWVkaWF0ZSA9IGhtYWMuZmluYWxpemUoaW50ZXJtZWRpYXRlKTtcblx0ICAgICAgICAgICAgICAgICAgICBobWFjLnJlc2V0KCk7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcm1lZGlhdGVXb3JkcyA9IGludGVybWVkaWF0ZS53b3JkcztcblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFhPUiBpbnRlcm1lZGlhdGUgd2l0aCBibG9ja1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYmxvY2tXb3Jkc0xlbmd0aDsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrV29yZHNbal0gXj0gaW50ZXJtZWRpYXRlV29yZHNbal07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICBkZXJpdmVkS2V5LmNvbmNhdChibG9jayk7XG5cdCAgICAgICAgICAgICAgICBibG9ja0luZGV4V29yZHNbMF0rKztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBkZXJpdmVkS2V5LnNpZ0J5dGVzID0ga2V5U2l6ZSAqIDQ7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGRlcml2ZWRLZXk7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogQ29tcHV0ZXMgdGhlIFBhc3N3b3JkLUJhc2VkIEtleSBEZXJpdmF0aW9uIEZ1bmN0aW9uIDIuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgQSBzYWx0LlxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIGNvbXB1dGF0aW9uLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRlcml2ZWQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuUEJLREYyKHBhc3N3b3JkLCBzYWx0KTtcblx0ICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuUEJLREYyKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDggfSk7XG5cdCAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLlBCS0RGMihwYXNzd29yZCwgc2FsdCwgeyBrZXlTaXplOiA4LCBpdGVyYXRpb25zOiAxMDAwIH0pO1xuXHQgICAgICovXG5cdCAgICBDLlBCS0RGMiA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgY2ZnKSB7XG5cdCAgICAgICAgcmV0dXJuIFBCS0RGMi5jcmVhdGUoY2ZnKS5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTtcblx0ICAgIH07XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuUEJLREYyO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2VuYy1iYXNlNjRcIiksIHJlcXVpcmUoXCIuL21kNVwiKSwgcmVxdWlyZShcIi4vZXZwa2RmXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9lbmMtYmFzZTY0XCIsIFwiLi9tZDVcIiwgXCIuL2V2cGtkZlwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBTdHJlYW1DaXBoZXIgPSBDX2xpYi5TdHJlYW1DaXBoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3RzXG5cdCAgICB2YXIgUyAgPSBbXTtcblx0ICAgIHZhciBDXyA9IFtdO1xuXHQgICAgdmFyIEcgID0gW107XG5cblx0ICAgIC8qKlxuXHQgICAgICogUmFiYml0IHN0cmVhbSBjaXBoZXIgYWxnb3JpdGhtLlxuXHQgICAgICpcblx0ICAgICAqIFRoaXMgaXMgYSBsZWdhY3kgdmVyc2lvbiB0aGF0IG5lZ2xlY3RlZCB0byBjb252ZXJ0IHRoZSBrZXkgdG8gbGl0dGxlLWVuZGlhbi5cblx0ICAgICAqIFRoaXMgZXJyb3IgZG9lc24ndCBhZmZlY3QgdGhlIGNpcGhlcidzIHNlY3VyaXR5LFxuXHQgICAgICogYnV0IGl0IGRvZXMgYWZmZWN0IGl0cyBjb21wYXRpYmlsaXR5IHdpdGggb3RoZXIgaW1wbGVtZW50YXRpb25zLlxuXHQgICAgICovXG5cdCAgICB2YXIgUmFiYml0TGVnYWN5ID0gQ19hbGdvLlJhYmJpdExlZ2FjeSA9IFN0cmVhbUNpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgSyA9IHRoaXMuX2tleS53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIGl2ID0gdGhpcy5jZmcuaXY7XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBzdGF0ZSB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIFggPSB0aGlzLl9YID0gW1xuXHQgICAgICAgICAgICAgICAgS1swXSwgKEtbM10gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSxcblx0ICAgICAgICAgICAgICAgIEtbMV0sIChLWzBdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksXG5cdCAgICAgICAgICAgICAgICBLWzJdLCAoS1sxXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLFxuXHQgICAgICAgICAgICAgICAgS1szXSwgKEtbMl0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KVxuXHQgICAgICAgICAgICBdO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGluaXRpYWwgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIEMgPSB0aGlzLl9DID0gW1xuXHQgICAgICAgICAgICAgICAgKEtbMl0gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSwgKEtbMF0gJiAweGZmZmYwMDAwKSB8IChLWzFdICYgMHgwMDAwZmZmZiksXG5cdCAgICAgICAgICAgICAgICAoS1szXSA8PCAxNikgfCAoS1szXSA+Pj4gMTYpLCAoS1sxXSAmIDB4ZmZmZjAwMDApIHwgKEtbMl0gJiAweDAwMDBmZmZmKSxcblx0ICAgICAgICAgICAgICAgIChLWzBdIDw8IDE2KSB8IChLWzBdID4+PiAxNiksIChLWzJdICYgMHhmZmZmMDAwMCkgfCAoS1szXSAmIDB4MDAwMGZmZmYpLFxuXHQgICAgICAgICAgICAgICAgKEtbMV0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KSwgKEtbM10gJiAweGZmZmYwMDAwKSB8IChLWzBdICYgMHgwMDAwZmZmZilcblx0ICAgICAgICAgICAgXTtcblxuXHQgICAgICAgICAgICAvLyBDYXJyeSBiaXRcblx0ICAgICAgICAgICAgdGhpcy5fYiA9IDA7XG5cblx0ICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gTW9kaWZ5IHRoZSBjb3VudGVyc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgQ1tpXSBePSBYWyhpICsgNCkgJiA3XTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIElWIHNldHVwXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgSVYgPSBpdi53b3Jkcztcblx0ICAgICAgICAgICAgICAgIHZhciBJVl8wID0gSVZbMF07XG5cdCAgICAgICAgICAgICAgICB2YXIgSVZfMSA9IElWWzFdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIHN1YnZlY3RvcnNcblx0ICAgICAgICAgICAgICAgIHZhciBpMCA9ICgoKElWXzAgPDwgOCkgfCAoSVZfMCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMCA8PCAyNCkgfCAoSVZfMCA+Pj4gOCkpICYgMHhmZjAwZmYwMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaTIgPSAoKChJVl8xIDw8IDgpIHwgKElWXzEgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8ICgoKElWXzEgPDwgMjQpIHwgKElWXzEgPj4+IDgpKSAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkxID0gKGkwID4+PiAxNikgfCAoaTIgJiAweGZmZmYwMDAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciBpMyA9IChpMiA8PCAxNikgIHwgKGkwICYgMHgwMDAwZmZmZik7XG5cblx0ICAgICAgICAgICAgICAgIC8vIE1vZGlmeSBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgICAgICAgICAgQ1swXSBePSBpMDtcblx0ICAgICAgICAgICAgICAgIENbMV0gXj0gaTE7XG5cdCAgICAgICAgICAgICAgICBDWzJdIF49IGkyO1xuXHQgICAgICAgICAgICAgICAgQ1szXSBePSBpMztcblx0ICAgICAgICAgICAgICAgIENbNF0gXj0gaTA7XG5cdCAgICAgICAgICAgICAgICBDWzVdIF49IGkxO1xuXHQgICAgICAgICAgICAgICAgQ1s2XSBePSBpMjtcblx0ICAgICAgICAgICAgICAgIENbN10gXj0gaTM7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbSBmb3VyIHRpbWVzXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgWCA9IHRoaXMuX1g7XG5cblx0ICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtXG5cdCAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGZvdXIga2V5c3RyZWFtIHdvcmRzXG5cdCAgICAgICAgICAgIFNbMF0gPSBYWzBdIF4gKFhbNV0gPj4+IDE2KSBeIChYWzNdIDw8IDE2KTtcblx0ICAgICAgICAgICAgU1sxXSA9IFhbMl0gXiAoWFs3XSA+Pj4gMTYpIF4gKFhbNV0gPDwgMTYpO1xuXHQgICAgICAgICAgICBTWzJdID0gWFs0XSBeIChYWzFdID4+PiAxNikgXiAoWFs3XSA8PCAxNik7XG5cdCAgICAgICAgICAgIFNbM10gPSBYWzZdIF4gKFhbM10gPj4+IDE2KSBeIChYWzFdIDw8IDE2KTtcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgICAgIFNbaV0gPSAoKChTW2ldIDw8IDgpICB8IChTW2ldID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICAgICgoKFNbaV0gPDwgMjQpIHwgKFNbaV0gPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICAgICAgTVtvZmZzZXQgKyBpXSBePSBTW2ldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogMTI4LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiA2NC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIG5leHRTdGF0ZSgpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICB2YXIgWCA9IHRoaXMuX1g7XG5cdCAgICAgICAgdmFyIEMgPSB0aGlzLl9DO1xuXG5cdCAgICAgICAgLy8gU2F2ZSBvbGQgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICBDX1tpXSA9IENbaV07XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgIENbMF0gPSAoQ1swXSArIDB4NGQzNGQzNGQgKyB0aGlzLl9iKSB8IDA7XG5cdCAgICAgICAgQ1sxXSA9IChDWzFdICsgMHhkMzRkMzRkMyArICgoQ1swXSA+Pj4gMCkgPCAoQ19bMF0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1syXSA9IChDWzJdICsgMHgzNGQzNGQzNCArICgoQ1sxXSA+Pj4gMCkgPCAoQ19bMV0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1szXSA9IChDWzNdICsgMHg0ZDM0ZDM0ZCArICgoQ1syXSA+Pj4gMCkgPCAoQ19bMl0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s0XSA9IChDWzRdICsgMHhkMzRkMzRkMyArICgoQ1szXSA+Pj4gMCkgPCAoQ19bM10gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s1XSA9IChDWzVdICsgMHgzNGQzNGQzNCArICgoQ1s0XSA+Pj4gMCkgPCAoQ19bNF0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s2XSA9IChDWzZdICsgMHg0ZDM0ZDM0ZCArICgoQ1s1XSA+Pj4gMCkgPCAoQ19bNV0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s3XSA9IChDWzddICsgMHhkMzRkMzRkMyArICgoQ1s2XSA+Pj4gMCkgPCAoQ19bNl0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgdGhpcy5fYiA9IChDWzddID4+PiAwKSA8IChDX1s3XSA+Pj4gMCkgPyAxIDogMDtcblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZy12YWx1ZXNcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgZ3ggPSBYW2ldICsgQ1tpXTtcblxuXHQgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgaGlnaCBhbmQgbG93IGFyZ3VtZW50IGZvciBzcXVhcmluZ1xuXHQgICAgICAgICAgICB2YXIgZ2EgPSBneCAmIDB4ZmZmZjtcblx0ICAgICAgICAgICAgdmFyIGdiID0gZ3ggPj4+IDE2O1xuXG5cdCAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBoaWdoIGFuZCBsb3cgcmVzdWx0IG9mIHNxdWFyaW5nXG5cdCAgICAgICAgICAgIHZhciBnaCA9ICgoKChnYSAqIGdhKSA+Pj4gMTcpICsgZ2EgKiBnYikgPj4+IDE1KSArIGdiICogZ2I7XG5cdCAgICAgICAgICAgIHZhciBnbCA9ICgoKGd4ICYgMHhmZmZmMDAwMCkgKiBneCkgfCAwKSArICgoKGd4ICYgMHgwMDAwZmZmZikgKiBneCkgfCAwKTtcblxuXHQgICAgICAgICAgICAvLyBIaWdoIFhPUiBsb3dcblx0ICAgICAgICAgICAgR1tpXSA9IGdoIF4gZ2w7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBzdGF0ZSB2YWx1ZXNcblx0ICAgICAgICBYWzBdID0gKEdbMF0gKyAoKEdbN10gPDwgMTYpIHwgKEdbN10gPj4+IDE2KSkgKyAoKEdbNl0gPDwgMTYpIHwgKEdbNl0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzFdID0gKEdbMV0gKyAoKEdbMF0gPDwgOCkgIHwgKEdbMF0gPj4+IDI0KSkgKyBHWzddKSB8IDA7XG5cdCAgICAgICAgWFsyXSA9IChHWzJdICsgKChHWzFdIDw8IDE2KSB8IChHWzFdID4+PiAxNikpICsgKChHWzBdIDw8IDE2KSB8IChHWzBdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFszXSA9IChHWzNdICsgKChHWzJdIDw8IDgpICB8IChHWzJdID4+PiAyNCkpICsgR1sxXSkgfCAwO1xuXHQgICAgICAgIFhbNF0gPSAoR1s0XSArICgoR1szXSA8PCAxNikgfCAoR1szXSA+Pj4gMTYpKSArICgoR1syXSA8PCAxNikgfCAoR1syXSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbNV0gPSAoR1s1XSArICgoR1s0XSA8PCA4KSAgfCAoR1s0XSA+Pj4gMjQpKSArIEdbM10pIHwgMDtcblx0ICAgICAgICBYWzZdID0gKEdbNl0gKyAoKEdbNV0gPDwgMTYpIHwgKEdbNV0gPj4+IDE2KSkgKyAoKEdbNF0gPDwgMTYpIHwgKEdbNF0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzddID0gKEdbN10gKyAoKEdbNl0gPDwgOCkgIHwgKEdbNl0gPj4+IDI0KSkgKyBHWzVdKSB8IDA7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUmFiYml0TGVnYWN5LmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUmFiYml0TGVnYWN5LmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLlJhYmJpdExlZ2FjeSA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJhYmJpdExlZ2FjeSk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuUmFiYml0TGVnYWN5O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2VuYy1iYXNlNjRcIiksIHJlcXVpcmUoXCIuL21kNVwiKSwgcmVxdWlyZShcIi4vZXZwa2RmXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9lbmMtYmFzZTY0XCIsIFwiLi9tZDVcIiwgXCIuL2V2cGtkZlwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBTdHJlYW1DaXBoZXIgPSBDX2xpYi5TdHJlYW1DaXBoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3RzXG5cdCAgICB2YXIgUyAgPSBbXTtcblx0ICAgIHZhciBDXyA9IFtdO1xuXHQgICAgdmFyIEcgID0gW107XG5cblx0ICAgIC8qKlxuXHQgICAgICogUmFiYml0IHN0cmVhbSBjaXBoZXIgYWxnb3JpdGhtXG5cdCAgICAgKi9cblx0ICAgIHZhciBSYWJiaXQgPSBDX2FsZ28uUmFiYml0ID0gU3RyZWFtQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBLID0gdGhpcy5fa2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgaXYgPSB0aGlzLmNmZy5pdjtcblxuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgS1tpXSA9ICgoKEtbaV0gPDwgOCkgIHwgKEtbaV0gPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgICAgKCgoS1tpXSA8PCAyNCkgfCAoS1tpXSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBzdGF0ZSB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIFggPSB0aGlzLl9YID0gW1xuXHQgICAgICAgICAgICAgICAgS1swXSwgKEtbM10gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSxcblx0ICAgICAgICAgICAgICAgIEtbMV0sIChLWzBdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksXG5cdCAgICAgICAgICAgICAgICBLWzJdLCAoS1sxXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLFxuXHQgICAgICAgICAgICAgICAgS1szXSwgKEtbMl0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KVxuXHQgICAgICAgICAgICBdO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGluaXRpYWwgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICAgICAgdmFyIEMgPSB0aGlzLl9DID0gW1xuXHQgICAgICAgICAgICAgICAgKEtbMl0gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSwgKEtbMF0gJiAweGZmZmYwMDAwKSB8IChLWzFdICYgMHgwMDAwZmZmZiksXG5cdCAgICAgICAgICAgICAgICAoS1szXSA8PCAxNikgfCAoS1szXSA+Pj4gMTYpLCAoS1sxXSAmIDB4ZmZmZjAwMDApIHwgKEtbMl0gJiAweDAwMDBmZmZmKSxcblx0ICAgICAgICAgICAgICAgIChLWzBdIDw8IDE2KSB8IChLWzBdID4+PiAxNiksIChLWzJdICYgMHhmZmZmMDAwMCkgfCAoS1szXSAmIDB4MDAwMGZmZmYpLFxuXHQgICAgICAgICAgICAgICAgKEtbMV0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KSwgKEtbM10gJiAweGZmZmYwMDAwKSB8IChLWzBdICYgMHgwMDAwZmZmZilcblx0ICAgICAgICAgICAgXTtcblxuXHQgICAgICAgICAgICAvLyBDYXJyeSBiaXRcblx0ICAgICAgICAgICAgdGhpcy5fYiA9IDA7XG5cblx0ICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXNcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gTW9kaWZ5IHRoZSBjb3VudGVyc1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgQ1tpXSBePSBYWyhpICsgNCkgJiA3XTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIElWIHNldHVwXG5cdCAgICAgICAgICAgIGlmIChpdikge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgSVYgPSBpdi53b3Jkcztcblx0ICAgICAgICAgICAgICAgIHZhciBJVl8wID0gSVZbMF07XG5cdCAgICAgICAgICAgICAgICB2YXIgSVZfMSA9IElWWzFdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIHN1YnZlY3RvcnNcblx0ICAgICAgICAgICAgICAgIHZhciBpMCA9ICgoKElWXzAgPDwgOCkgfCAoSVZfMCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMCA8PCAyNCkgfCAoSVZfMCA+Pj4gOCkpICYgMHhmZjAwZmYwMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgaTIgPSAoKChJVl8xIDw8IDgpIHwgKElWXzEgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8ICgoKElWXzEgPDwgMjQpIHwgKElWXzEgPj4+IDgpKSAmIDB4ZmYwMGZmMDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIGkxID0gKGkwID4+PiAxNikgfCAoaTIgJiAweGZmZmYwMDAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciBpMyA9IChpMiA8PCAxNikgIHwgKGkwICYgMHgwMDAwZmZmZik7XG5cblx0ICAgICAgICAgICAgICAgIC8vIE1vZGlmeSBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgICAgICAgICAgQ1swXSBePSBpMDtcblx0ICAgICAgICAgICAgICAgIENbMV0gXj0gaTE7XG5cdCAgICAgICAgICAgICAgICBDWzJdIF49IGkyO1xuXHQgICAgICAgICAgICAgICAgQ1szXSBePSBpMztcblx0ICAgICAgICAgICAgICAgIENbNF0gXj0gaTA7XG5cdCAgICAgICAgICAgICAgICBDWzVdIF49IGkxO1xuXHQgICAgICAgICAgICAgICAgQ1s2XSBePSBpMjtcblx0ICAgICAgICAgICAgICAgIENbN10gXj0gaTM7XG5cblx0ICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbSBmb3VyIHRpbWVzXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgWCA9IHRoaXMuX1g7XG5cblx0ICAgICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtXG5cdCAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIGZvdXIga2V5c3RyZWFtIHdvcmRzXG5cdCAgICAgICAgICAgIFNbMF0gPSBYWzBdIF4gKFhbNV0gPj4+IDE2KSBeIChYWzNdIDw8IDE2KTtcblx0ICAgICAgICAgICAgU1sxXSA9IFhbMl0gXiAoWFs3XSA+Pj4gMTYpIF4gKFhbNV0gPDwgMTYpO1xuXHQgICAgICAgICAgICBTWzJdID0gWFs0XSBeIChYWzFdID4+PiAxNikgXiAoWFs3XSA8PCAxNik7XG5cdCAgICAgICAgICAgIFNbM10gPSBYWzZdIF4gKFhbM10gPj4+IDE2KSBeIChYWzFdIDw8IDE2KTtcblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgICAgIFNbaV0gPSAoKChTW2ldIDw8IDgpICB8IChTW2ldID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICAgICgoKFNbaV0gPDwgMjQpIHwgKFNbaV0gPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gRW5jcnlwdFxuXHQgICAgICAgICAgICAgICAgTVtvZmZzZXQgKyBpXSBePSBTW2ldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGJsb2NrU2l6ZTogMTI4LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiA2NC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIGZ1bmN0aW9uIG5leHRTdGF0ZSgpIHtcblx0ICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICB2YXIgWCA9IHRoaXMuX1g7XG5cdCAgICAgICAgdmFyIEMgPSB0aGlzLl9DO1xuXG5cdCAgICAgICAgLy8gU2F2ZSBvbGQgY291bnRlciB2YWx1ZXNcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICBDX1tpXSA9IENbaV07XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBjb3VudGVyIHZhbHVlc1xuXHQgICAgICAgIENbMF0gPSAoQ1swXSArIDB4NGQzNGQzNGQgKyB0aGlzLl9iKSB8IDA7XG5cdCAgICAgICAgQ1sxXSA9IChDWzFdICsgMHhkMzRkMzRkMyArICgoQ1swXSA+Pj4gMCkgPCAoQ19bMF0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1syXSA9IChDWzJdICsgMHgzNGQzNGQzNCArICgoQ1sxXSA+Pj4gMCkgPCAoQ19bMV0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1szXSA9IChDWzNdICsgMHg0ZDM0ZDM0ZCArICgoQ1syXSA+Pj4gMCkgPCAoQ19bMl0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s0XSA9IChDWzRdICsgMHhkMzRkMzRkMyArICgoQ1szXSA+Pj4gMCkgPCAoQ19bM10gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s1XSA9IChDWzVdICsgMHgzNGQzNGQzNCArICgoQ1s0XSA+Pj4gMCkgPCAoQ19bNF0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s2XSA9IChDWzZdICsgMHg0ZDM0ZDM0ZCArICgoQ1s1XSA+Pj4gMCkgPCAoQ19bNV0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgQ1s3XSA9IChDWzddICsgMHhkMzRkMzRkMyArICgoQ1s2XSA+Pj4gMCkgPCAoQ19bNl0gPj4+IDApID8gMSA6IDApKSB8IDA7XG5cdCAgICAgICAgdGhpcy5fYiA9IChDWzddID4+PiAwKSA8IChDX1s3XSA+Pj4gMCkgPyAxIDogMDtcblxuXHQgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZy12YWx1ZXNcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xuXHQgICAgICAgICAgICB2YXIgZ3ggPSBYW2ldICsgQ1tpXTtcblxuXHQgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgaGlnaCBhbmQgbG93IGFyZ3VtZW50IGZvciBzcXVhcmluZ1xuXHQgICAgICAgICAgICB2YXIgZ2EgPSBneCAmIDB4ZmZmZjtcblx0ICAgICAgICAgICAgdmFyIGdiID0gZ3ggPj4+IDE2O1xuXG5cdCAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBoaWdoIGFuZCBsb3cgcmVzdWx0IG9mIHNxdWFyaW5nXG5cdCAgICAgICAgICAgIHZhciBnaCA9ICgoKChnYSAqIGdhKSA+Pj4gMTcpICsgZ2EgKiBnYikgPj4+IDE1KSArIGdiICogZ2I7XG5cdCAgICAgICAgICAgIHZhciBnbCA9ICgoKGd4ICYgMHhmZmZmMDAwMCkgKiBneCkgfCAwKSArICgoKGd4ICYgMHgwMDAwZmZmZikgKiBneCkgfCAwKTtcblxuXHQgICAgICAgICAgICAvLyBIaWdoIFhPUiBsb3dcblx0ICAgICAgICAgICAgR1tpXSA9IGdoIF4gZ2w7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBzdGF0ZSB2YWx1ZXNcblx0ICAgICAgICBYWzBdID0gKEdbMF0gKyAoKEdbN10gPDwgMTYpIHwgKEdbN10gPj4+IDE2KSkgKyAoKEdbNl0gPDwgMTYpIHwgKEdbNl0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzFdID0gKEdbMV0gKyAoKEdbMF0gPDwgOCkgIHwgKEdbMF0gPj4+IDI0KSkgKyBHWzddKSB8IDA7XG5cdCAgICAgICAgWFsyXSA9IChHWzJdICsgKChHWzFdIDw8IDE2KSB8IChHWzFdID4+PiAxNikpICsgKChHWzBdIDw8IDE2KSB8IChHWzBdID4+PiAxNikpKSB8IDA7XG5cdCAgICAgICAgWFszXSA9IChHWzNdICsgKChHWzJdIDw8IDgpICB8IChHWzJdID4+PiAyNCkpICsgR1sxXSkgfCAwO1xuXHQgICAgICAgIFhbNF0gPSAoR1s0XSArICgoR1szXSA8PCAxNikgfCAoR1szXSA+Pj4gMTYpKSArICgoR1syXSA8PCAxNikgfCAoR1syXSA+Pj4gMTYpKSkgfCAwO1xuXHQgICAgICAgIFhbNV0gPSAoR1s1XSArICgoR1s0XSA8PCA4KSAgfCAoR1s0XSA+Pj4gMjQpKSArIEdbM10pIHwgMDtcblx0ICAgICAgICBYWzZdID0gKEdbNl0gKyAoKEdbNV0gPDwgMTYpIHwgKEdbNV0gPj4+IDE2KSkgKyAoKEdbNF0gPDwgMTYpIHwgKEdbNF0gPj4+IDE2KSkpIHwgMDtcblx0ICAgICAgICBYWzddID0gKEdbN10gKyAoKEdbNl0gPDwgOCkgIHwgKEdbNl0gPj4+IDI0KSkgKyBHWzVdKSB8IDA7XG5cdCAgICB9XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUmFiYml0LmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUmFiYml0LmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLlJhYmJpdCA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJhYmJpdCk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuUmFiYml0O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2VuYy1iYXNlNjRcIiksIHJlcXVpcmUoXCIuL21kNVwiKSwgcmVxdWlyZShcIi4vZXZwa2RmXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9lbmMtYmFzZTY0XCIsIFwiLi9tZDVcIiwgXCIuL2V2cGtkZlwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBTdHJlYW1DaXBoZXIgPSBDX2xpYi5TdHJlYW1DaXBoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFJDNCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFJDNCA9IENfYWxnby5SQzQgPSBTdHJlYW1DaXBoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGtleSA9IHRoaXMuX2tleTtcblx0ICAgICAgICAgICAgdmFyIGtleVdvcmRzID0ga2V5LndvcmRzO1xuXHQgICAgICAgICAgICB2YXIga2V5U2lnQnl0ZXMgPSBrZXkuc2lnQnl0ZXM7XG5cblx0ICAgICAgICAgICAgLy8gSW5pdCBzYm94XG5cdCAgICAgICAgICAgIHZhciBTID0gdGhpcy5fUyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBTW2ldID0gaTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEtleSBzZXR1cFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCAyNTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGtleUJ5dGVJbmRleCA9IGkgJSBrZXlTaWdCeXRlcztcblx0ICAgICAgICAgICAgICAgIHZhciBrZXlCeXRlID0gKGtleVdvcmRzW2tleUJ5dGVJbmRleCA+Pj4gMl0gPj4+ICgyNCAtIChrZXlCeXRlSW5kZXggJSA0KSAqIDgpKSAmIDB4ZmY7XG5cblx0ICAgICAgICAgICAgICAgIGogPSAoaiArIFNbaV0gKyBrZXlCeXRlKSAlIDI1NjtcblxuXHQgICAgICAgICAgICAgICAgLy8gU3dhcFxuXHQgICAgICAgICAgICAgICAgdmFyIHQgPSBTW2ldO1xuXHQgICAgICAgICAgICAgICAgU1tpXSA9IFNbal07XG5cdCAgICAgICAgICAgICAgICBTW2pdID0gdDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvdW50ZXJzXG5cdCAgICAgICAgICAgIHRoaXMuX2kgPSB0aGlzLl9qID0gMDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0XSBePSBnZW5lcmF0ZUtleXN0cmVhbVdvcmQuY2FsbCh0aGlzKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogMjU2LzMyLFxuXG5cdCAgICAgICAgaXZTaXplOiAwXG5cdCAgICB9KTtcblxuXHQgICAgZnVuY3Rpb24gZ2VuZXJhdGVLZXlzdHJlYW1Xb3JkKCkge1xuXHQgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgIHZhciBTID0gdGhpcy5fUztcblx0ICAgICAgICB2YXIgaSA9IHRoaXMuX2k7XG5cdCAgICAgICAgdmFyIGogPSB0aGlzLl9qO1xuXG5cdCAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtIHdvcmRcblx0ICAgICAgICB2YXIga2V5c3RyZWFtV29yZCA9IDA7XG5cdCAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCA0OyBuKyspIHtcblx0ICAgICAgICAgICAgaSA9IChpICsgMSkgJSAyNTY7XG5cdCAgICAgICAgICAgIGogPSAoaiArIFNbaV0pICUgMjU2O1xuXG5cdCAgICAgICAgICAgIC8vIFN3YXBcblx0ICAgICAgICAgICAgdmFyIHQgPSBTW2ldO1xuXHQgICAgICAgICAgICBTW2ldID0gU1tqXTtcblx0ICAgICAgICAgICAgU1tqXSA9IHQ7XG5cblx0ICAgICAgICAgICAga2V5c3RyZWFtV29yZCB8PSBTWyhTW2ldICsgU1tqXSkgJSAyNTZdIDw8ICgyNCAtIG4gKiA4KTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBVcGRhdGUgY291bnRlcnNcblx0ICAgICAgICB0aGlzLl9pID0gaTtcblx0ICAgICAgICB0aGlzLl9qID0gajtcblxuXHQgICAgICAgIHJldHVybiBrZXlzdHJlYW1Xb3JkO1xuXHQgICAgfVxuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlJDNC5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcblx0ICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJDNC5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5SQzQgPSBTdHJlYW1DaXBoZXIuX2NyZWF0ZUhlbHBlcihSQzQpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIE1vZGlmaWVkIFJDNCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFJDNERyb3AgPSBDX2FsZ28uUkM0RHJvcCA9IFJDNC5leHRlbmQoe1xuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkcm9wIFRoZSBudW1iZXIgb2Yga2V5c3RyZWFtIHdvcmRzIHRvIGRyb3AuIERlZmF1bHQgMTkyXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgY2ZnOiBSQzQuY2ZnLmV4dGVuZCh7XG5cdCAgICAgICAgICAgIGRyb3A6IDE5MlxuXHQgICAgICAgIH0pLFxuXG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgUkM0Ll9kb1Jlc2V0LmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gRHJvcFxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5jZmcuZHJvcDsgaSA+IDA7IGktLSkge1xuXHQgICAgICAgICAgICAgICAgZ2VuZXJhdGVLZXlzdHJlYW1Xb3JkLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5SQzREcm9wLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUkM0RHJvcC5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcblx0ICAgICAqL1xuXHQgICAgQy5SQzREcm9wID0gU3RyZWFtQ2lwaGVyLl9jcmVhdGVIZWxwZXIoUkM0RHJvcCk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuUkM0O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQvKiogQHByZXNlcnZlXG5cdChjKSAyMDEyIGJ5IEPDqWRyaWMgTWVzbmlsLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5cdFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcblxuXHQgICAgLSBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG5cdCAgICAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cblxuXHRUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG5cdCovXG5cblx0KGZ1bmN0aW9uIChNYXRoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfYWxnbyA9IEMuYWxnbztcblxuXHQgICAgLy8gQ29uc3RhbnRzIHRhYmxlXG5cdCAgICB2YXIgX3psID0gV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgMCwgIDEsICAyLCAgMywgIDQsICA1LCAgNiwgIDcsICA4LCAgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSxcblx0ICAgICAgICA3LCAgNCwgMTMsICAxLCAxMCwgIDYsIDE1LCAgMywgMTIsICAwLCAgOSwgIDUsICAyLCAxNCwgMTEsICA4LFxuXHQgICAgICAgIDMsIDEwLCAxNCwgIDQsICA5LCAxNSwgIDgsICAxLCAgMiwgIDcsICAwLCAgNiwgMTMsIDExLCAgNSwgMTIsXG5cdCAgICAgICAgMSwgIDksIDExLCAxMCwgIDAsICA4LCAxMiwgIDQsIDEzLCAgMywgIDcsIDE1LCAxNCwgIDUsICA2LCAgMixcblx0ICAgICAgICA0LCAgMCwgIDUsICA5LCAgNywgMTIsICAyLCAxMCwgMTQsICAxLCAgMywgIDgsIDExLCAgNiwgMTUsIDEzXSk7XG5cdCAgICB2YXIgX3pyID0gV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgNSwgMTQsICA3LCAgMCwgIDksICAyLCAxMSwgIDQsIDEzLCAgNiwgMTUsICA4LCAgMSwgMTAsICAzLCAxMixcblx0ICAgICAgICA2LCAxMSwgIDMsICA3LCAgMCwgMTMsICA1LCAxMCwgMTQsIDE1LCAgOCwgMTIsICA0LCAgOSwgIDEsICAyLFxuXHQgICAgICAgIDE1LCAgNSwgIDEsICAzLCAgNywgMTQsICA2LCAgOSwgMTEsICA4LCAxMiwgIDIsIDEwLCAgMCwgIDQsIDEzLFxuXHQgICAgICAgIDgsICA2LCAgNCwgIDEsICAzLCAxMSwgMTUsICAwLCAgNSwgMTIsICAyLCAxMywgIDksICA3LCAxMCwgMTQsXG5cdCAgICAgICAgMTIsIDE1LCAxMCwgIDQsICAxLCAgNSwgIDgsICA3LCAgNiwgIDIsIDEzLCAxNCwgIDAsICAzLCAgOSwgMTFdKTtcblx0ICAgIHZhciBfc2wgPSBXb3JkQXJyYXkuY3JlYXRlKFtcblx0ICAgICAgICAgMTEsIDE0LCAxNSwgMTIsICA1LCAgOCwgIDcsICA5LCAxMSwgMTMsIDE0LCAxNSwgIDYsICA3LCAgOSwgIDgsXG5cdCAgICAgICAgNywgNiwgICA4LCAxMywgMTEsICA5LCAgNywgMTUsICA3LCAxMiwgMTUsICA5LCAxMSwgIDcsIDEzLCAxMixcblx0ICAgICAgICAxMSwgMTMsICA2LCAgNywgMTQsICA5LCAxMywgMTUsIDE0LCAgOCwgMTMsICA2LCAgNSwgMTIsICA3LCAgNSxcblx0ICAgICAgICAgIDExLCAxMiwgMTQsIDE1LCAxNCwgMTUsICA5LCAgOCwgIDksIDE0LCAgNSwgIDYsICA4LCAgNiwgIDUsIDEyLFxuXHQgICAgICAgIDksIDE1LCAgNSwgMTEsICA2LCAgOCwgMTMsIDEyLCAgNSwgMTIsIDEzLCAxNCwgMTEsICA4LCAgNSwgIDYgXSk7XG5cdCAgICB2YXIgX3NyID0gV29yZEFycmF5LmNyZWF0ZShbXG5cdCAgICAgICAgOCwgIDksICA5LCAxMSwgMTMsIDE1LCAxNSwgIDUsICA3LCAgNywgIDgsIDExLCAxNCwgMTQsIDEyLCAgNixcblx0ICAgICAgICA5LCAxMywgMTUsICA3LCAxMiwgIDgsICA5LCAxMSwgIDcsICA3LCAxMiwgIDcsICA2LCAxNSwgMTMsIDExLFxuXHQgICAgICAgIDksICA3LCAxNSwgMTEsICA4LCAgNiwgIDYsIDE0LCAxMiwgMTMsICA1LCAxNCwgMTMsIDEzLCAgNywgIDUsXG5cdCAgICAgICAgMTUsICA1LCAgOCwgMTEsIDE0LCAxNCwgIDYsIDE0LCAgNiwgIDksIDEyLCAgOSwgMTIsICA1LCAxNSwgIDgsXG5cdCAgICAgICAgOCwgIDUsIDEyLCAgOSwgMTIsICA1LCAxNCwgIDYsICA4LCAxMywgIDYsICA1LCAxNSwgMTMsIDExLCAxMSBdKTtcblxuXHQgICAgdmFyIF9obCA9ICBXb3JkQXJyYXkuY3JlYXRlKFsgMHgwMDAwMDAwMCwgMHg1QTgyNzk5OSwgMHg2RUQ5RUJBMSwgMHg4RjFCQkNEQywgMHhBOTUzRkQ0RV0pO1xuXHQgICAgdmFyIF9ociA9ICBXb3JkQXJyYXkuY3JlYXRlKFsgMHg1MEEyOEJFNiwgMHg1QzRERDEyNCwgMHg2RDcwM0VGMywgMHg3QTZENzZFOSwgMHgwMDAwMDAwMF0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFJJUEVNRDE2MCBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFJJUEVNRDE2MCA9IENfYWxnby5SSVBFTUQxNjAgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoICA9IFdvcmRBcnJheS5jcmVhdGUoWzB4Njc0NTIzMDEsIDB4RUZDREFCODksIDB4OThCQURDRkUsIDB4MTAzMjU0NzYsIDB4QzNEMkUxRjBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cblx0ICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBvZmZzZXRfaSA9IG9mZnNldCArIGk7XG5cdCAgICAgICAgICAgICAgICB2YXIgTV9vZmZzZXRfaSA9IE1bb2Zmc2V0X2ldO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwXG5cdCAgICAgICAgICAgICAgICBNW29mZnNldF9pXSA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChNX29mZnNldF9pIDw8IDgpICB8IChNX29mZnNldF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE1fb2Zmc2V0X2kgPDwgMjQpIHwgKE1fb2Zmc2V0X2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgSCAgPSB0aGlzLl9oYXNoLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgaGwgPSBfaGwud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBociA9IF9oci53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHpsID0gX3psLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgenIgPSBfenIud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBzbCA9IF9zbC53b3Jkcztcblx0ICAgICAgICAgICAgdmFyIHNyID0gX3NyLndvcmRzO1xuXG5cdCAgICAgICAgICAgIC8vIFdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgIHZhciBhbCwgYmwsIGNsLCBkbCwgZWw7XG5cdCAgICAgICAgICAgIHZhciBhciwgYnIsIGNyLCBkciwgZXI7XG5cblx0ICAgICAgICAgICAgYXIgPSBhbCA9IEhbMF07XG5cdCAgICAgICAgICAgIGJyID0gYmwgPSBIWzFdO1xuXHQgICAgICAgICAgICBjciA9IGNsID0gSFsyXTtcblx0ICAgICAgICAgICAgZHIgPSBkbCA9IEhbM107XG5cdCAgICAgICAgICAgIGVyID0gZWwgPSBIWzRdO1xuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICB2YXIgdDtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSArPSAxKSB7XG5cdCAgICAgICAgICAgICAgICB0ID0gKGFsICsgIE1bb2Zmc2V0K3psW2ldXSl8MDtcblx0ICAgICAgICAgICAgICAgIGlmIChpPDE2KXtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMShibCxjbCxkbCkgKyBobFswXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTwzMikge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGYyKGJsLGNsLGRsKSArIGhsWzFdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDQ4KSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjMoYmwsY2wsZGwpICsgaGxbMl07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8NjQpIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmNChibCxjbCxkbCkgKyBobFszXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly8gaWYgKGk8ODApIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmNShibCxjbCxkbCkgKyBobFs0XTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHQgPSB0fDA7XG5cdCAgICAgICAgICAgICAgICB0ID0gIHJvdGwodCxzbFtpXSk7XG5cdCAgICAgICAgICAgICAgICB0ID0gKHQrZWwpfDA7XG5cdCAgICAgICAgICAgICAgICBhbCA9IGVsO1xuXHQgICAgICAgICAgICAgICAgZWwgPSBkbDtcblx0ICAgICAgICAgICAgICAgIGRsID0gcm90bChjbCwgMTApO1xuXHQgICAgICAgICAgICAgICAgY2wgPSBibDtcblx0ICAgICAgICAgICAgICAgIGJsID0gdDtcblxuXHQgICAgICAgICAgICAgICAgdCA9IChhciArIE1bb2Zmc2V0K3pyW2ldXSl8MDtcblx0ICAgICAgICAgICAgICAgIGlmIChpPDE2KXtcblx0XHQgICAgICAgICAgICB0ICs9ICBmNShicixjcixkcikgKyBoclswXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaTwzMikge1xuXHRcdCAgICAgICAgICAgIHQgKz0gIGY0KGJyLGNyLGRyKSArIGhyWzFdO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpPDQ4KSB7XG5cdFx0ICAgICAgICAgICAgdCArPSAgZjMoYnIsY3IsZHIpICsgaHJbMl07XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGk8NjQpIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMihicixjcixkcikgKyBoclszXTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7Ly8gaWYgKGk8ODApIHtcblx0XHQgICAgICAgICAgICB0ICs9ICBmMShicixjcixkcikgKyBocls0XTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHQgPSB0fDA7XG5cdCAgICAgICAgICAgICAgICB0ID0gIHJvdGwodCxzcltpXSkgO1xuXHQgICAgICAgICAgICAgICAgdCA9ICh0K2VyKXwwO1xuXHQgICAgICAgICAgICAgICAgYXIgPSBlcjtcblx0ICAgICAgICAgICAgICAgIGVyID0gZHI7XG5cdCAgICAgICAgICAgICAgICBkciA9IHJvdGwoY3IsIDEwKTtcblx0ICAgICAgICAgICAgICAgIGNyID0gYnI7XG5cdCAgICAgICAgICAgICAgICBiciA9IHQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgdCAgICA9IChIWzFdICsgY2wgKyBkcil8MDtcblx0ICAgICAgICAgICAgSFsxXSA9IChIWzJdICsgZGwgKyBlcil8MDtcblx0ICAgICAgICAgICAgSFsyXSA9IChIWzNdICsgZWwgKyBhcil8MDtcblx0ICAgICAgICAgICAgSFszXSA9IChIWzRdICsgYWwgKyBicil8MDtcblx0ICAgICAgICAgICAgSFs0XSA9IChIWzBdICsgYmwgKyBjcil8MDtcblx0ICAgICAgICAgICAgSFswXSA9ICB0O1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gKFxuXHQgICAgICAgICAgICAgICAgKCgobkJpdHNUb3RhbCA8PCA4KSAgfCAobkJpdHNUb3RhbCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICgoKG5CaXRzVG90YWwgPDwgMjQpIHwgKG5CaXRzVG90YWwgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICBkYXRhLnNpZ0J5dGVzID0gKGRhdGFXb3Jkcy5sZW5ndGggKyAxKSAqIDQ7XG5cblx0ICAgICAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3Ncblx0ICAgICAgICAgICAgdGhpcy5fcHJvY2VzcygpO1xuXG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2g7XG5cdCAgICAgICAgICAgIHZhciBIID0gaGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgICAgIHZhciBIX2kgPSBIW2ldO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwXG5cdCAgICAgICAgICAgICAgICBIW2ldID0gKCgoSF9pIDw8IDgpICB8IChIX2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XG5cdCAgICAgICAgICAgICAgICAgICAgICAgKCgoSF9pIDw8IDI0KSB8IChIX2kgPj4+IDgpKSAgJiAweGZmMDBmZjAwKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKTtcblx0ICAgICAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKCk7XG5cblx0ICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cblx0ICAgIGZ1bmN0aW9uIGYxKHgsIHksIHopIHtcblx0ICAgICAgICByZXR1cm4gKCh4KSBeICh5KSBeICh6KSk7XG5cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZjIoeCwgeSwgeikge1xuXHQgICAgICAgIHJldHVybiAoKCh4KSYoeSkpIHwgKCh+eCkmKHopKSk7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGYzKHgsIHksIHopIHtcblx0ICAgICAgICByZXR1cm4gKCgoeCkgfCAofih5KSkpIF4gKHopKTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gZjQoeCwgeSwgeikge1xuXHQgICAgICAgIHJldHVybiAoKCh4KSAmICh6KSkgfCAoKHkpJih+KHopKSkpO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBmNSh4LCB5LCB6KSB7XG5cdCAgICAgICAgcmV0dXJuICgoeCkgXiAoKHkpIHwofih6KSkpKTtcblxuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiByb3RsKHgsbikge1xuXHQgICAgICAgIHJldHVybiAoeDw8bikgfCAoeD4+PigzMi1uKSk7XG5cdCAgICB9XG5cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlJJUEVNRDE2MCgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuUklQRU1EMTYwKHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuUklQRU1EMTYwID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoUklQRU1EMTYwKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNSSVBFTUQxNjAobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjUklQRU1EMTYwID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFJJUEVNRDE2MCk7XG5cdH0oTWF0aCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlJJUEVNRDE2MDtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBSZXVzYWJsZSBvYmplY3Rcblx0ICAgIHZhciBXID0gW107XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTEgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEExID0gQ19hbGdvLlNIQTEgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFtcblx0ICAgICAgICAgICAgICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksXG5cdCAgICAgICAgICAgICAgICAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LFxuXHQgICAgICAgICAgICAgICAgMHhjM2QyZTFmMFxuXHQgICAgICAgICAgICBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0XG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xuXHQgICAgICAgICAgICB2YXIgYSA9IEhbMF07XG5cdCAgICAgICAgICAgIHZhciBiID0gSFsxXTtcblx0ICAgICAgICAgICAgdmFyIGMgPSBIWzJdO1xuXHQgICAgICAgICAgICB2YXIgZCA9IEhbM107XG5cdCAgICAgICAgICAgIHZhciBlID0gSFs0XTtcblxuXHQgICAgICAgICAgICAvLyBDb21wdXRhdGlvblxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChpIDwgMTYpIHtcblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gTVtvZmZzZXQgKyBpXSB8IDA7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBuID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XTtcblx0ICAgICAgICAgICAgICAgICAgICBXW2ldID0gKG4gPDwgMSkgfCAobiA+Pj4gMzEpO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICB2YXIgdCA9ICgoYSA8PCA1KSB8IChhID4+PiAyNykpICsgZSArIFdbaV07XG5cdCAgICAgICAgICAgICAgICBpZiAoaSA8IDIwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdCArPSAoKGIgJiBjKSB8ICh+YiAmIGQpKSArIDB4NWE4Mjc5OTk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPCA0MCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHQgKz0gKGIgXiBjIF4gZCkgKyAweDZlZDllYmExO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpIDwgNjApIHtcblx0ICAgICAgICAgICAgICAgICAgICB0ICs9ICgoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZCkpIC0gMHg3MGU0NDMyNDtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSAvKiBpZiAoaSA8IDgwKSAqLyB7XG5cdCAgICAgICAgICAgICAgICAgICAgdCArPSAoYiBeIGMgXiBkKSAtIDB4MzU5ZDNlMmE7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIGUgPSBkO1xuXHQgICAgICAgICAgICAgICAgZCA9IGM7XG5cdCAgICAgICAgICAgICAgICBjID0gKGIgPDwgMzApIHwgKGIgPj4+IDIpO1xuXHQgICAgICAgICAgICAgICAgYiA9IGE7XG5cdCAgICAgICAgICAgICAgICBhID0gdDtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlXG5cdCAgICAgICAgICAgIEhbMF0gPSAoSFswXSArIGEpIHwgMDtcblx0ICAgICAgICAgICAgSFsxXSA9IChIWzFdICsgYikgfCAwO1xuXHQgICAgICAgICAgICBIWzJdID0gKEhbMl0gKyBjKSB8IDA7XG5cdCAgICAgICAgICAgIEhbM10gPSAoSFszXSArIGQpIHwgMDtcblx0ICAgICAgICAgICAgSFs0XSA9IChIWzRdICsgZSkgfCAwO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhO1xuXHQgICAgICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4O1xuXHQgICAgICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDg7XG5cblx0ICAgICAgICAgICAgLy8gQWRkIHBhZGRpbmdcblx0ICAgICAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE1XSA9IG5CaXRzVG90YWw7XG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc2g7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXHQgICAgICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKTtcblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEExKCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEExKHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBMSA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFNIQTEpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTEobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBMSA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihTSEExKTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5TSEExO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL3NoYTI1NlwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9zaGEyNTZcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXHQgICAgdmFyIFNIQTI1NiA9IENfYWxnby5TSEEyNTY7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTIyNCBoYXNoIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFNIQTIyNCA9IENfYWxnby5TSEEyMjQgPSBTSEEyNTYuZXh0ZW5kKHtcblx0ICAgICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFtcblx0ICAgICAgICAgICAgICAgIDB4YzEwNTllZDgsIDB4MzY3Y2Q1MDcsIDB4MzA3MGRkMTcsIDB4ZjcwZTU5MzksXG5cdCAgICAgICAgICAgICAgICAweGZmYzAwYjMxLCAweDY4NTgxNTExLCAweDY0Zjk4ZmE3LCAweGJlZmE0ZmE0XG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IFNIQTI1Ni5fZG9GaW5hbGl6ZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIGhhc2guc2lnQnl0ZXMgLT0gNDtcblxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTIyNCgnbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjI0KHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBMjI0ID0gU0hBMjU2Ll9jcmVhdGVIZWxwZXIoU0hBMjI0KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEEyMjQobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBMjI0ID0gU0hBMjU2Ll9jcmVhdGVIbWFjSGVscGVyKFNIQTIyNCk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBMjI0O1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCJdLCBmYWN0b3J5KTtcblx0fVxuXHRlbHNlIHtcblx0XHQvLyBHbG9iYWwgKGJyb3dzZXIpXG5cdFx0ZmFjdG9yeShyb290LkNyeXB0b0pTKTtcblx0fVxufSh0aGlzLCBmdW5jdGlvbiAoQ3J5cHRvSlMpIHtcblxuXHQoZnVuY3Rpb24gKE1hdGgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX2xpYiA9IEMubGliO1xuXHQgICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheTtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBJbml0aWFsaXphdGlvbiBhbmQgcm91bmQgY29uc3RhbnRzIHRhYmxlc1xuXHQgICAgdmFyIEggPSBbXTtcblx0ICAgIHZhciBLID0gW107XG5cblx0ICAgIC8vIENvbXB1dGUgY29uc3RhbnRzXG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGZ1bmN0aW9uIGlzUHJpbWUobikge1xuXHQgICAgICAgICAgICB2YXIgc3FydE4gPSBNYXRoLnNxcnQobik7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGZhY3RvciA9IDI7IGZhY3RvciA8PSBzcXJ0TjsgZmFjdG9yKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmICghKG4gJSBmYWN0b3IpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgZnVuY3Rpb24gZ2V0RnJhY3Rpb25hbEJpdHMobikge1xuXHQgICAgICAgICAgICByZXR1cm4gKChuIC0gKG4gfCAwKSkgKiAweDEwMDAwMDAwMCkgfCAwO1xuXHQgICAgICAgIH1cblxuXHQgICAgICAgIHZhciBuID0gMjtcblx0ICAgICAgICB2YXIgblByaW1lID0gMDtcblx0ICAgICAgICB3aGlsZSAoblByaW1lIDwgNjQpIHtcblx0ICAgICAgICAgICAgaWYgKGlzUHJpbWUobikpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChuUHJpbWUgPCA4KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgSFtuUHJpbWVdID0gZ2V0RnJhY3Rpb25hbEJpdHMoTWF0aC5wb3cobiwgMSAvIDIpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIEtbblByaW1lXSA9IGdldEZyYWN0aW9uYWxCaXRzKE1hdGgucG93KG4sIDEgLyAzKSk7XG5cblx0ICAgICAgICAgICAgICAgIG5QcmltZSsrO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgbisrO1xuXHQgICAgICAgIH1cblx0ICAgIH0oKSk7XG5cblx0ICAgIC8vIFJldXNhYmxlIG9iamVjdFxuXHQgICAgdmFyIFcgPSBbXTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTSEEtMjU2IGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgU0hBMjU2ID0gQ19hbGdvLlNIQTI1NiA9IEhhc2hlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoSC5zbGljZSgwKSk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICB2YXIgSCA9IHRoaXMuX2hhc2gud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gV29ya2luZyB2YXJpYWJsZXNcblx0ICAgICAgICAgICAgdmFyIGEgPSBIWzBdO1xuXHQgICAgICAgICAgICB2YXIgYiA9IEhbMV07XG5cdCAgICAgICAgICAgIHZhciBjID0gSFsyXTtcblx0ICAgICAgICAgICAgdmFyIGQgPSBIWzNdO1xuXHQgICAgICAgICAgICB2YXIgZSA9IEhbNF07XG5cdCAgICAgICAgICAgIHZhciBmID0gSFs1XTtcblx0ICAgICAgICAgICAgdmFyIGcgPSBIWzZdO1xuXHQgICAgICAgICAgICB2YXIgaCA9IEhbN107XG5cblx0ICAgICAgICAgICAgLy8gQ29tcHV0YXRpb25cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoaSA8IDE2KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgV1tpXSA9IE1bb2Zmc2V0ICsgaV0gfCAwO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEweCA9IFdbaSAtIDE1XTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEwICA9ICgoZ2FtbWEweCA8PCAyNSkgfCAoZ2FtbWEweCA+Pj4gNykpICBeXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGdhbW1hMHggPDwgMTQpIHwgKGdhbW1hMHggPj4+IDE4KSkgXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnYW1tYTB4ID4+PiAzKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTF4ID0gV1tpIC0gMl07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMSAgPSAoKGdhbW1hMXggPDwgMTUpIHwgKGdhbW1hMXggPj4+IDE3KSkgXlxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKChnYW1tYTF4IDw8IDEzKSB8IChnYW1tYTF4ID4+PiAxOSkpIF5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZ2FtbWExeCA+Pj4gMTApO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdO1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICB2YXIgY2ggID0gKGUgJiBmKSBeICh+ZSAmIGcpO1xuXHQgICAgICAgICAgICAgICAgdmFyIG1haiA9IChhICYgYikgXiAoYSAmIGMpIF4gKGIgJiBjKTtcblxuXHQgICAgICAgICAgICAgICAgdmFyIHNpZ21hMCA9ICgoYSA8PCAzMCkgfCAoYSA+Pj4gMikpIF4gKChhIDw8IDE5KSB8IChhID4+PiAxMykpIF4gKChhIDw8IDEwKSB8IChhID4+PiAyMikpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHNpZ21hMSA9ICgoZSA8PCAyNikgfCAoZSA+Pj4gNikpIF4gKChlIDw8IDIxKSB8IChlID4+PiAxMSkpIF4gKChlIDw8IDcpICB8IChlID4+PiAyNSkpO1xuXG5cdCAgICAgICAgICAgICAgICB2YXIgdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2ldICsgV1tpXTtcblx0ICAgICAgICAgICAgICAgIHZhciB0MiA9IHNpZ21hMCArIG1hajtcblxuXHQgICAgICAgICAgICAgICAgaCA9IGc7XG5cdCAgICAgICAgICAgICAgICBnID0gZjtcblx0ICAgICAgICAgICAgICAgIGYgPSBlO1xuXHQgICAgICAgICAgICAgICAgZSA9IChkICsgdDEpIHwgMDtcblx0ICAgICAgICAgICAgICAgIGQgPSBjO1xuXHQgICAgICAgICAgICAgICAgYyA9IGI7XG5cdCAgICAgICAgICAgICAgICBiID0gYTtcblx0ICAgICAgICAgICAgICAgIGEgPSAodDEgKyB0MikgfCAwO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgSFswXSA9IChIWzBdICsgYSkgfCAwO1xuXHQgICAgICAgICAgICBIWzFdID0gKEhbMV0gKyBiKSB8IDA7XG5cdCAgICAgICAgICAgIEhbMl0gPSAoSFsyXSArIGMpIHwgMDtcblx0ICAgICAgICAgICAgSFszXSA9IChIWzNdICsgZCkgfCAwO1xuXHQgICAgICAgICAgICBIWzRdID0gKEhbNF0gKyBlKSB8IDA7XG5cdCAgICAgICAgICAgIEhbNV0gPSAoSFs1XSArIGYpIHwgMDtcblx0ICAgICAgICAgICAgSFs2XSA9IChIWzZdICsgZykgfCAwO1xuXHQgICAgICAgICAgICBIWzddID0gKEhbN10gKyBoKSB8IDA7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XG5cdCAgICAgICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzO1xuXG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODtcblxuXHQgICAgICAgICAgICAvLyBBZGQgcGFkZGluZ1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKTtcblx0ICAgICAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMCk7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTVdID0gbkJpdHNUb3RhbDtcblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaFxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5faGFzaDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTI1NignbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjU2KHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBMjU2ID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBMjU2KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEEyNTYobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBMjU2ID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTI1Nik7XG5cdH0oTWF0aCkpO1xuXG5cblx0cmV0dXJuIENyeXB0b0pTLlNIQTI1NjtcblxufSkpOyIsIjsoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnksIHVuZGVmKSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpLCByZXF1aXJlKFwiLi94NjQtY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi94NjQtY29yZVwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uIChNYXRoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyO1xuXHQgICAgdmFyIENfeDY0ID0gQy54NjQ7XG5cdCAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQ7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICAvLyBDb25zdGFudHMgdGFibGVzXG5cdCAgICB2YXIgUkhPX09GRlNFVFMgPSBbXTtcblx0ICAgIHZhciBQSV9JTkRFWEVTICA9IFtdO1xuXHQgICAgdmFyIFJPVU5EX0NPTlNUQU5UUyA9IFtdO1xuXG5cdCAgICAvLyBDb21wdXRlIENvbnN0YW50c1xuXHQgICAgKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAvLyBDb21wdXRlIHJobyBvZmZzZXQgY29uc3RhbnRzXG5cdCAgICAgICAgdmFyIHggPSAxLCB5ID0gMDtcblx0ICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IDI0OyB0KyspIHtcblx0ICAgICAgICAgICAgUkhPX09GRlNFVFNbeCArIDUgKiB5XSA9ICgodCArIDEpICogKHQgKyAyKSAvIDIpICUgNjQ7XG5cblx0ICAgICAgICAgICAgdmFyIG5ld1ggPSB5ICUgNTtcblx0ICAgICAgICAgICAgdmFyIG5ld1kgPSAoMiAqIHggKyAzICogeSkgJSA1O1xuXHQgICAgICAgICAgICB4ID0gbmV3WDtcblx0ICAgICAgICAgICAgeSA9IG5ld1k7XG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgLy8gQ29tcHV0ZSBwaSBpbmRleCBjb25zdGFudHNcblx0ICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xuXHQgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IDU7IHkrKykge1xuXHQgICAgICAgICAgICAgICAgUElfSU5ERVhFU1t4ICsgNSAqIHldID0geSArICgoMiAqIHggKyAzICogeSkgJSA1KSAqIDU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvLyBDb21wdXRlIHJvdW5kIGNvbnN0YW50c1xuXHQgICAgICAgIHZhciBMRlNSID0gMHgwMTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI0OyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIHJvdW5kQ29uc3RhbnRNc3cgPSAwO1xuXHQgICAgICAgICAgICB2YXIgcm91bmRDb25zdGFudExzdyA9IDA7XG5cblx0ICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA3OyBqKyspIHtcblx0ICAgICAgICAgICAgICAgIGlmIChMRlNSICYgMHgwMSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBiaXRQb3NpdGlvbiA9ICgxIDw8IGopIC0gMTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoYml0UG9zaXRpb24gPCAzMikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByb3VuZENvbnN0YW50THN3IF49IDEgPDwgYml0UG9zaXRpb247XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIC8qIGlmIChiaXRQb3NpdGlvbiA+PSAzMikgKi8ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByb3VuZENvbnN0YW50TXN3IF49IDEgPDwgKGJpdFBvc2l0aW9uIC0gMzIpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgLy8gQ29tcHV0ZSBuZXh0IExGU1Jcblx0ICAgICAgICAgICAgICAgIGlmIChMRlNSICYgMHg4MCkge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFByaW1pdGl2ZSBwb2x5bm9taWFsIG92ZXIgR0YoMik6IHheOCArIHheNiArIHheNSArIHheNCArIDFcblx0ICAgICAgICAgICAgICAgICAgICBMRlNSID0gKExGU1IgPDwgMSkgXiAweDcxO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBMRlNSIDw8PSAxO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgUk9VTkRfQ09OU1RBTlRTW2ldID0gWDY0V29yZC5jcmVhdGUocm91bmRDb25zdGFudE1zdywgcm91bmRDb25zdGFudExzdyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSgpKTtcblxuXHQgICAgLy8gUmV1c2FibGUgb2JqZWN0cyBmb3IgdGVtcG9yYXJ5IHZhbHVlc1xuXHQgICAgdmFyIFQgPSBbXTtcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7XG5cdCAgICAgICAgICAgIFRbaV0gPSBYNjRXb3JkLmNyZWF0ZSgpO1xuXHQgICAgICAgIH1cblx0ICAgIH0oKSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU0hBLTMgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEEzID0gQ19hbGdvLlNIQTMgPSBIYXNoZXIuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gb3V0cHV0TGVuZ3RoXG5cdCAgICAgICAgICogICBUaGUgZGVzaXJlZCBudW1iZXIgb2YgYml0cyBpbiB0aGUgb3V0cHV0IGhhc2guXG5cdCAgICAgICAgICogICBPbmx5IHZhbHVlcyBwZXJtaXR0ZWQgYXJlOiAyMjQsIDI1NiwgMzg0LCA1MTIuXG5cdCAgICAgICAgICogICBEZWZhdWx0OiA1MTJcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjZmc6IEhhc2hlci5jZmcuZXh0ZW5kKHtcblx0ICAgICAgICAgICAgb3V0cHV0TGVuZ3RoOiA1MTJcblx0ICAgICAgICB9KSxcblxuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlID0gW11cblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBzdGF0ZVtpXSA9IG5ldyBYNjRXb3JkLmluaXQoKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHRoaXMuYmxvY2tTaXplID0gKDE2MDAgLSAyICogdGhpcy5jZmcub3V0cHV0TGVuZ3RoKSAvIDMyO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuXHQgICAgICAgICAgICB2YXIgbkJsb2NrU2l6ZUxhbmVzID0gdGhpcy5ibG9ja1NpemUgLyAyO1xuXG5cdCAgICAgICAgICAgIC8vIEFic29yYlxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5CbG9ja1NpemVMYW5lczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgIHZhciBNMmkgID0gTVtvZmZzZXQgKyAyICogaV07XG5cdCAgICAgICAgICAgICAgICB2YXIgTTJpMSA9IE1bb2Zmc2V0ICsgMiAqIGkgKyAxXTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU3dhcCBlbmRpYW5cblx0ICAgICAgICAgICAgICAgIE0yaSA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChNMmkgPDwgOCkgIHwgKE0yaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAoKChNMmkgPDwgMjQpIHwgKE0yaSA+Pj4gOCkpICAmIDB4ZmYwMGZmMDApXG5cdCAgICAgICAgICAgICAgICApO1xuXHQgICAgICAgICAgICAgICAgTTJpMSA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChNMmkxIDw8IDgpICB8IChNMmkxID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKE0yaTEgPDwgMjQpIHwgKE0yaTEgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gQWJzb3JiIG1lc3NhZ2UgaW50byBzdGF0ZVxuXHQgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtpXTtcblx0ICAgICAgICAgICAgICAgIGxhbmUuaGlnaCBePSBNMmkxO1xuXHQgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IE0yaTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJvdW5kc1xuXHQgICAgICAgICAgICBmb3IgKHZhciByb3VuZCA9IDA7IHJvdW5kIDwgMjQ7IHJvdW5kKyspIHtcblx0ICAgICAgICAgICAgICAgIC8vIFRoZXRhXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIE1peCBjb2x1bW4gbGFuZXNcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdE1zdyA9IDAsIHRMc3cgPSAwO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbeCArIDUgKiB5XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdE1zdyBePSBsYW5lLmhpZ2g7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRMc3cgXj0gbGFuZS5sb3c7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gVGVtcG9yYXJ5IHZhbHVlc1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUeCA9IFRbeF07XG5cdCAgICAgICAgICAgICAgICAgICAgVHguaGlnaCA9IHRNc3c7XG5cdCAgICAgICAgICAgICAgICAgICAgVHgubG93ICA9IHRMc3c7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUeDQgPSBUWyh4ICsgNCkgJSA1XTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgVHgxID0gVFsoeCArIDEpICUgNV07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFR4MU1zdyA9IFR4MS5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBUeDFMc3cgPSBUeDEubG93O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gTWl4IHN1cnJvdW5kaW5nIGNvbHVtbnNcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdE1zdyA9IFR4NC5oaWdoIF4gKChUeDFNc3cgPDwgMSkgfCAoVHgxTHN3ID4+PiAzMSkpO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0THN3ID0gVHg0LmxvdyAgXiAoKFR4MUxzdyA8PCAxKSB8IChUeDFNc3cgPj4+IDMxKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVt4ICsgNSAqIHldO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYW5lLmhpZ2ggXj0gdE1zdztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFuZS5sb3cgIF49IHRMc3c7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBSaG8gUGlcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGxhbmVJbmRleCA9IDE7IGxhbmVJbmRleCA8IDI1OyBsYW5lSW5kZXgrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsYW5lID0gc3RhdGVbbGFuZUluZGV4XTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZU1zdyA9IGxhbmUuaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbGFuZUxzdyA9IGxhbmUubG93O1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciByaG9PZmZzZXQgPSBSSE9fT0ZGU0VUU1tsYW5lSW5kZXhdO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gUm90YXRlIGxhbmVzXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHJob09mZnNldCA8IDMyKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0TXN3ID0gKGxhbmVNc3cgPDwgcmhvT2Zmc2V0KSB8IChsYW5lTHN3ID4+PiAoMzIgLSByaG9PZmZzZXQpKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRMc3cgPSAobGFuZUxzdyA8PCByaG9PZmZzZXQpIHwgKGxhbmVNc3cgPj4+ICgzMiAtIHJob09mZnNldCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAvKiBpZiAocmhvT2Zmc2V0ID49IDMyKSAqLyB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0TXN3ID0gKGxhbmVMc3cgPDwgKHJob09mZnNldCAtIDMyKSkgfCAobGFuZU1zdyA+Pj4gKDY0IC0gcmhvT2Zmc2V0KSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0THN3ID0gKGxhbmVNc3cgPDwgKHJob09mZnNldCAtIDMyKSkgfCAobGFuZUxzdyA+Pj4gKDY0IC0gcmhvT2Zmc2V0KSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gVHJhbnNwb3NlIGxhbmVzXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFRQaUxhbmUgPSBUW1BJX0lOREVYRVNbbGFuZUluZGV4XV07XG5cdCAgICAgICAgICAgICAgICAgICAgVFBpTGFuZS5oaWdoID0gdE1zdztcblx0ICAgICAgICAgICAgICAgICAgICBUUGlMYW5lLmxvdyAgPSB0THN3O1xuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBSaG8gcGkgYXQgeCA9IHkgPSAwXG5cdCAgICAgICAgICAgICAgICB2YXIgVDAgPSBUWzBdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHN0YXRlMCA9IHN0YXRlWzBdO1xuXHQgICAgICAgICAgICAgICAgVDAuaGlnaCA9IHN0YXRlMC5oaWdoO1xuXHQgICAgICAgICAgICAgICAgVDAubG93ICA9IHN0YXRlMC5sb3c7XG5cblx0ICAgICAgICAgICAgICAgIC8vIENoaVxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCA1OyB4KyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IDU7IHkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dHNcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmVJbmRleCA9IHggKyA1ICogeTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtsYW5lSW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgVExhbmUgPSBUW2xhbmVJbmRleF07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBUeDFMYW5lID0gVFsoKHggKyAxKSAlIDUpICsgNSAqIHldO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgVHgyTGFuZSA9IFRbKCh4ICsgMikgJSA1KSArIDUgKiB5XTtcblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyBNaXggcm93c1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYW5lLmhpZ2ggPSBUTGFuZS5oaWdoIF4gKH5UeDFMYW5lLmhpZ2ggJiBUeDJMYW5lLmhpZ2gpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYW5lLmxvdyAgPSBUTGFuZS5sb3cgIF4gKH5UeDFMYW5lLmxvdyAgJiBUeDJMYW5lLmxvdyk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgICAgICAvLyBJb3RhXG5cdCAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlWzBdO1xuXHQgICAgICAgICAgICAgICAgdmFyIHJvdW5kQ29uc3RhbnQgPSBST1VORF9DT05TVEFOVFNbcm91bmRdO1xuXHQgICAgICAgICAgICAgICAgbGFuZS5oaWdoIF49IHJvdW5kQ29uc3RhbnQuaGlnaDtcblx0ICAgICAgICAgICAgICAgIGxhbmUubG93ICBePSByb3VuZENvbnN0YW50Lmxvdzs7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cdCAgICAgICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDg7XG5cdCAgICAgICAgICAgIHZhciBuQml0c0xlZnQgPSBkYXRhLnNpZ0J5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIGJsb2NrU2l6ZUJpdHMgPSB0aGlzLmJsb2NrU2l6ZSAqIDMyO1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4MSA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMik7XG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1soKE1hdGguY2VpbCgobkJpdHNMZWZ0ICsgMSkgLyBibG9ja1NpemVCaXRzKSAqIGJsb2NrU2l6ZUJpdHMpID4+PiA1KSAtIDFdIHw9IDB4ODA7XG5cdCAgICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNDtcblxuXHQgICAgICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xuXHQgICAgICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG5cblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuXHQgICAgICAgICAgICB2YXIgb3V0cHV0TGVuZ3RoQnl0ZXMgPSB0aGlzLmNmZy5vdXRwdXRMZW5ndGggLyA4O1xuXHQgICAgICAgICAgICB2YXIgb3V0cHV0TGVuZ3RoTGFuZXMgPSBvdXRwdXRMZW5ndGhCeXRlcyAvIDg7XG5cblx0ICAgICAgICAgICAgLy8gU3F1ZWV6ZVxuXHQgICAgICAgICAgICB2YXIgaGFzaFdvcmRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0cHV0TGVuZ3RoTGFuZXM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW2ldO1xuXHQgICAgICAgICAgICAgICAgdmFyIGxhbmVNc3cgPSBsYW5lLmhpZ2g7XG5cdCAgICAgICAgICAgICAgICB2YXIgbGFuZUxzdyA9IGxhbmUubG93O1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTd2FwIGVuZGlhblxuXHQgICAgICAgICAgICAgICAgbGFuZU1zdyA9IChcblx0ICAgICAgICAgICAgICAgICAgICAoKChsYW5lTXN3IDw8IDgpICB8IChsYW5lTXN3ID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxuXHQgICAgICAgICAgICAgICAgICAgICgoKGxhbmVNc3cgPDwgMjQpIHwgKGxhbmVNc3cgPj4+IDgpKSAgJiAweGZmMDBmZjAwKVxuXHQgICAgICAgICAgICAgICAgKTtcblx0ICAgICAgICAgICAgICAgIGxhbmVMc3cgPSAoXG5cdCAgICAgICAgICAgICAgICAgICAgKCgobGFuZUxzdyA8PCA4KSAgfCAobGFuZUxzdyA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcblx0ICAgICAgICAgICAgICAgICAgICAoKChsYW5lTHN3IDw8IDI0KSB8IChsYW5lTHN3ID4+PiA4KSkgICYgMHhmZjAwZmYwMClcblx0ICAgICAgICAgICAgICAgICk7XG5cblx0ICAgICAgICAgICAgICAgIC8vIFNxdWVlemUgc3RhdGUgdG8gcmV0cmlldmUgaGFzaFxuXHQgICAgICAgICAgICAgICAgaGFzaFdvcmRzLnB1c2gobGFuZUxzdyk7XG5cdCAgICAgICAgICAgICAgICBoYXNoV29yZHMucHVzaChsYW5lTXN3KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQoaGFzaFdvcmRzLCBvdXRwdXRMZW5ndGhCeXRlcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpO1xuXG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IGNsb25lLl9zdGF0ZSA9IHRoaXMuX3N0YXRlLnNsaWNlKDApO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHN0YXRlW2ldID0gc3RhdGVbaV0uY2xvbmUoKTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9XG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTMoJ21lc3NhZ2UnKTtcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTMod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEEzID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBMyk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXG5cdCAgICAgKlxuXHQgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cblx0ICAgICAqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMyhtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEEzID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTMpO1xuXHR9KE1hdGgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5TSEEzO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL3g2NC1jb3JlXCIpLCByZXF1aXJlKFwiLi9zaGE1MTJcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4veDY0LWNvcmVcIiwgXCIuL3NoYTUxMlwiXSwgZmFjdG9yeSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gR2xvYmFsIChicm93c2VyKVxuXHRcdGZhY3Rvcnkocm9vdC5DcnlwdG9KUyk7XG5cdH1cbn0odGhpcywgZnVuY3Rpb24gKENyeXB0b0pTKSB7XG5cblx0KGZ1bmN0aW9uICgpIHtcblx0ICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgdmFyIEMgPSBDcnlwdG9KUztcblx0ICAgIHZhciBDX3g2NCA9IEMueDY0O1xuXHQgICAgdmFyIFg2NFdvcmQgPSBDX3g2NC5Xb3JkO1xuXHQgICAgdmFyIFg2NFdvcmRBcnJheSA9IENfeDY0LldvcmRBcnJheTtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cdCAgICB2YXIgU0hBNTEyID0gQ19hbGdvLlNIQTUxMjtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTSEEtMzg0IGhhc2ggYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgU0hBMzg0ID0gQ19hbGdvLlNIQTM4NCA9IFNIQTUxMi5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgWDY0V29yZEFycmF5LmluaXQoW1xuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweGNiYmI5ZDVkLCAweGMxMDU5ZWQ4KSwgbmV3IFg2NFdvcmQuaW5pdCgweDYyOWEyOTJhLCAweDM2N2NkNTA3KSxcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHg5MTU5MDE1YSwgMHgzMDcwZGQxNyksIG5ldyBYNjRXb3JkLmluaXQoMHgxNTJmZWNkOCwgMHhmNzBlNTkzOSksXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4NjczMzI2NjcsIDB4ZmZjMDBiMzEpLCBuZXcgWDY0V29yZC5pbml0KDB4OGViNDRhODcsIDB4Njg1ODE1MTEpLFxuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweGRiMGMyZTBkLCAweDY0Zjk4ZmE3KSwgbmV3IFg2NFdvcmQuaW5pdCgweDQ3YjU0ODFkLCAweGJlZmE0ZmE0KVxuXHQgICAgICAgICAgICBdKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGhhc2ggPSBTSEE1MTIuX2RvRmluYWxpemUuY2FsbCh0aGlzKTtcblxuXHQgICAgICAgICAgICBoYXNoLnNpZ0J5dGVzIC09IDE2O1xuXG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMzg0KCdtZXNzYWdlJyk7XG5cdCAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEzODQod29yZEFycmF5KTtcblx0ICAgICAqL1xuXHQgICAgQy5TSEEzODQgPSBTSEE1MTIuX2NyZWF0ZUhlbHBlcihTSEEzODQpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxuXHQgICAgICpcblx0ICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXG5cdCAgICAgKlxuXHQgICAgICogQHN0YXRpY1xuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTM4NChtZXNzYWdlLCBrZXkpO1xuXHQgICAgICovXG5cdCAgICBDLkhtYWNTSEEzODQgPSBTSEE1MTIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMzg0KTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5TSEEzODQ7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5LCB1bmRlZikge1xuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcIi4vY29yZVwiKSwgcmVxdWlyZShcIi4veDY0LWNvcmVcIikpO1xuXHR9XG5cdGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gQU1EXG5cdFx0ZGVmaW5lKFtcIi4vY29yZVwiLCBcIi4veDY0LWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXI7XG5cdCAgICB2YXIgQ194NjQgPSBDLng2NDtcblx0ICAgIHZhciBYNjRXb3JkID0gQ194NjQuV29yZDtcblx0ICAgIHZhciBYNjRXb3JkQXJyYXkgPSBDX3g2NC5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQ19hbGdvID0gQy5hbGdvO1xuXG5cdCAgICBmdW5jdGlvbiBYNjRXb3JkX2NyZWF0ZSgpIHtcblx0ICAgICAgICByZXR1cm4gWDY0V29yZC5jcmVhdGUuYXBwbHkoWDY0V29yZCwgYXJndW1lbnRzKTtcblx0ICAgIH1cblxuXHQgICAgLy8gQ29uc3RhbnRzXG5cdCAgICB2YXIgSyA9IFtcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDQyOGEyZjk4LCAweGQ3MjhhZTIyKSwgWDY0V29yZF9jcmVhdGUoMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiksIFg2NFdvcmRfY3JlYXRlKDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgpLCBYNjRXb3JkX2NyZWF0ZSgweDU5ZjExMWYxLCAweGI2MDVkMDE5KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDkyM2Y4MmE0LCAweGFmMTk0ZjliKSwgWDY0V29yZF9jcmVhdGUoMHhhYjFjNWVkNSwgMHhkYTZkODExOCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhkODA3YWE5OCwgMHhhMzAzMDI0MiksIFg2NFdvcmRfY3JlYXRlKDB4MTI4MzViMDEsIDB4NDU3MDZmYmUpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMpLCBYNjRXb3JkX2NyZWF0ZSgweDU1MGM3ZGMzLCAweGQ1ZmZiNGUyKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDcyYmU1ZDc0LCAweGYyN2I4OTZmKSwgWDY0V29yZF9jcmVhdGUoMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg5YmRjMDZhNywgMHgyNWM3MTIzNSksIFg2NFdvcmRfY3JlYXRlKDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIpLCBYNjRXb3JkX2NyZWF0ZSgweGVmYmU0Nzg2LCAweDM4NGYyNWUzKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDBmYzE5ZGM2LCAweDhiOGNkNWI1KSwgWDY0V29yZF9jcmVhdGUoMHgyNDBjYTFjYywgMHg3N2FjOWM2NSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSksIFg2NFdvcmRfY3JlYXRlKDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQpLCBYNjRXb3JkX2NyZWF0ZSgweDc2Zjk4OGRhLCAweDgzMTE1M2I1KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDk4M2U1MTUyLCAweGVlNjZkZmFiKSwgWDY0V29yZF9jcmVhdGUoMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiksIFg2NFdvcmRfY3JlYXRlKDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YzZlMDBiZjMsIDB4M2RhODhmYzIpLCBYNjRXb3JkX2NyZWF0ZSgweGQ1YTc5MTQ3LCAweDkzMGFhNzI1KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDA2Y2E2MzUxLCAweGUwMDM4MjZmKSwgWDY0V29yZF9jcmVhdGUoMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyN2I3MGE4NSwgMHg0NmQyMmZmYyksIFg2NFdvcmRfY3JlYXRlKDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQpLCBYNjRXb3JkX2NyZWF0ZSgweDUzMzgwZDEzLCAweDlkOTViM2RmKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDY1MGE3MzU0LCAweDhiYWY2M2RlKSwgWDY0V29yZF9jcmVhdGUoMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiksIFg2NFdvcmRfY3JlYXRlKDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQpLCBYNjRXb3JkX2NyZWF0ZSgweGE4MWE2NjRiLCAweGJjNDIzMDAxKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGMyNGI4YjcwLCAweGQwZjg5NzkxKSwgWDY0V29yZF9jcmVhdGUoMHhjNzZjNTFhMywgMHgwNjU0YmUzMCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCksIFg2NFdvcmRfY3JlYXRlKDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEpLCBYNjRXb3JkX2NyZWF0ZSgweDEwNmFhMDcwLCAweDMyYmJkMWI4KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDE5YTRjMTE2LCAweGI4ZDJkMGM4KSwgWDY0V29yZF9jcmVhdGUoMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSksIFg2NFdvcmRfY3JlYXRlKDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMpLCBYNjRXb3JkX2NyZWF0ZSgweDRlZDhhYTRhLCAweGUzNDE4YWNiKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDViOWNjYTRmLCAweDc3NjNlMzczKSwgWDY0V29yZF9jcmVhdGUoMHg2ODJlNmZmMywgMHhkNmIyYjhhMyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHg3NDhmODJlZSwgMHg1ZGVmYjJmYyksIFg2NFdvcmRfY3JlYXRlKDB4NzhhNTYzNmYsIDB4NDMxNzJmNjApLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ODRjODc4MTQsIDB4YTFmMGFiNzIpLCBYNjRXb3JkX2NyZWF0ZSgweDhjYzcwMjA4LCAweDFhNjQzOWVjKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDkwYmVmZmZhLCAweDIzNjMxZTI4KSwgWDY0V29yZF9jcmVhdGUoMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHhiZWY5YTNmNywgMHhiMmM2NzkxNSksIFg2NFdvcmRfY3JlYXRlKDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMpLCBYNjRXb3JkX2NyZWF0ZSgweGQxODZiOGM3LCAweDIxYzBjMjA3KSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweGVhZGE3ZGQ2LCAweGNkZTBlYjFlKSwgWDY0V29yZF9jcmVhdGUoMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSksIFg2NFdvcmRfY3JlYXRlKDB4MGE2MzdkYzUsIDB4YTJjODk4YTYpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUpLCBYNjRXb3JkX2NyZWF0ZSgweDFiNzEwYjM1LCAweDEzMWM0NzFiKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0KSwgWDY0V29yZF9jcmVhdGUoMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyksXG5cdCAgICAgICAgWDY0V29yZF9jcmVhdGUoMHgzYzllYmUwYSwgMHgxNWM5YmViYyksIFg2NFdvcmRfY3JlYXRlKDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMpLFxuXHQgICAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYpLCBYNjRXb3JkX2NyZWF0ZSgweDU5N2YyOTljLCAweGZjNjU3ZTJhKSxcblx0ICAgICAgICBYNjRXb3JkX2NyZWF0ZSgweDVmY2I2ZmFiLCAweDNhZDZmYWVjKSwgWDY0V29yZF9jcmVhdGUoMHg2YzQ0MTk4YywgMHg0YTQ3NTgxNylcblx0ICAgIF07XG5cblx0ICAgIC8vIFJldXNhYmxlIG9iamVjdHNcblx0ICAgIHZhciBXID0gW107XG5cdCAgICAoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkrKykge1xuXHQgICAgICAgICAgICBXW2ldID0gWDY0V29yZF9jcmVhdGUoKTtcblx0ICAgICAgICB9XG5cdCAgICB9KCkpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFNIQS01MTIgaGFzaCBhbGdvcml0aG0uXG5cdCAgICAgKi9cblx0ICAgIHZhciBTSEE1MTIgPSBDX2FsZ28uU0hBNTEyID0gSGFzaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdGhpcy5faGFzaCA9IG5ldyBYNjRXb3JkQXJyYXkuaW5pdChbXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4NmEwOWU2NjcsIDB4ZjNiY2M5MDgpLCBuZXcgWDY0V29yZC5pbml0KDB4YmI2N2FlODUsIDB4ODRjYWE3M2IpLFxuXHQgICAgICAgICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDNjNmVmMzcyLCAweGZlOTRmODJiKSwgbmV3IFg2NFdvcmQuaW5pdCgweGE1NGZmNTNhLCAweDVmMWQzNmYxKSxcblx0ICAgICAgICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHg1MTBlNTI3ZiwgMHhhZGU2ODJkMSksIG5ldyBYNjRXb3JkLmluaXQoMHg5YjA1Njg4YywgMHgyYjNlNmMxZiksXG5cdCAgICAgICAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4MWY4M2Q5YWIsIDB4ZmI0MWJkNmIpLCBuZXcgWDY0V29yZC5pbml0KDB4NWJlMGNkMTksIDB4MTM3ZTIxNzkpXG5cdCAgICAgICAgICAgIF0pO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3JkcztcblxuXHQgICAgICAgICAgICB2YXIgSDAgPSBIWzBdO1xuXHQgICAgICAgICAgICB2YXIgSDEgPSBIWzFdO1xuXHQgICAgICAgICAgICB2YXIgSDIgPSBIWzJdO1xuXHQgICAgICAgICAgICB2YXIgSDMgPSBIWzNdO1xuXHQgICAgICAgICAgICB2YXIgSDQgPSBIWzRdO1xuXHQgICAgICAgICAgICB2YXIgSDUgPSBIWzVdO1xuXHQgICAgICAgICAgICB2YXIgSDYgPSBIWzZdO1xuXHQgICAgICAgICAgICB2YXIgSDcgPSBIWzddO1xuXG5cdCAgICAgICAgICAgIHZhciBIMGggPSBIMC5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDBsID0gSDAubG93O1xuXHQgICAgICAgICAgICB2YXIgSDFoID0gSDEuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEgxbCA9IEgxLmxvdztcblx0ICAgICAgICAgICAgdmFyIEgyaCA9IEgyLmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBIMmwgPSBIMi5sb3c7XG5cdCAgICAgICAgICAgIHZhciBIM2ggPSBIMy5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDNsID0gSDMubG93O1xuXHQgICAgICAgICAgICB2YXIgSDRoID0gSDQuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEg0bCA9IEg0Lmxvdztcblx0ICAgICAgICAgICAgdmFyIEg1aCA9IEg1LmhpZ2g7XG5cdCAgICAgICAgICAgIHZhciBINWwgPSBINS5sb3c7XG5cdCAgICAgICAgICAgIHZhciBINmggPSBINi5oaWdoO1xuXHQgICAgICAgICAgICB2YXIgSDZsID0gSDYubG93O1xuXHQgICAgICAgICAgICB2YXIgSDdoID0gSDcuaGlnaDtcblx0ICAgICAgICAgICAgdmFyIEg3bCA9IEg3LmxvdztcblxuXHQgICAgICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xuXHQgICAgICAgICAgICB2YXIgYWggPSBIMGg7XG5cdCAgICAgICAgICAgIHZhciBhbCA9IEgwbDtcblx0ICAgICAgICAgICAgdmFyIGJoID0gSDFoO1xuXHQgICAgICAgICAgICB2YXIgYmwgPSBIMWw7XG5cdCAgICAgICAgICAgIHZhciBjaCA9IEgyaDtcblx0ICAgICAgICAgICAgdmFyIGNsID0gSDJsO1xuXHQgICAgICAgICAgICB2YXIgZGggPSBIM2g7XG5cdCAgICAgICAgICAgIHZhciBkbCA9IEgzbDtcblx0ICAgICAgICAgICAgdmFyIGVoID0gSDRoO1xuXHQgICAgICAgICAgICB2YXIgZWwgPSBINGw7XG5cdCAgICAgICAgICAgIHZhciBmaCA9IEg1aDtcblx0ICAgICAgICAgICAgdmFyIGZsID0gSDVsO1xuXHQgICAgICAgICAgICB2YXIgZ2ggPSBINmg7XG5cdCAgICAgICAgICAgIHZhciBnbCA9IEg2bDtcblx0ICAgICAgICAgICAgdmFyIGhoID0gSDdoO1xuXHQgICAgICAgICAgICB2YXIgaGwgPSBIN2w7XG5cblx0ICAgICAgICAgICAgLy8gUm91bmRzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRcblx0ICAgICAgICAgICAgICAgIHZhciBXaSA9IFdbaV07XG5cblx0ICAgICAgICAgICAgICAgIC8vIEV4dGVuZCBtZXNzYWdlXG5cdCAgICAgICAgICAgICAgICBpZiAoaSA8IDE2KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpaCA9IFdpLmhpZ2ggPSBNW29mZnNldCArIGkgKiAyXSAgICAgfCAwO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaWwgPSBXaS5sb3cgID0gTVtvZmZzZXQgKyBpICogMiArIDFdIHwgMDtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gR2FtbWEwXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMHggID0gV1tpIC0gMTVdO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTB4aCA9IGdhbW1hMHguaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEweGwgPSBnYW1tYTB4Lmxvdztcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZ2FtbWEwaCAgPSAoKGdhbW1hMHhoID4+PiAxKSB8IChnYW1tYTB4bCA8PCAzMSkpIF4gKChnYW1tYTB4aCA+Pj4gOCkgfCAoZ2FtbWEweGwgPDwgMjQpKSBeIChnYW1tYTB4aCA+Pj4gNyk7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMGwgID0gKChnYW1tYTB4bCA+Pj4gMSkgfCAoZ2FtbWEweGggPDwgMzEpKSBeICgoZ2FtbWEweGwgPj4+IDgpIHwgKGdhbW1hMHhoIDw8IDI0KSkgXiAoKGdhbW1hMHhsID4+PiA3KSB8IChnYW1tYTB4aCA8PCAyNSkpO1xuXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gR2FtbWExXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXggID0gV1tpIC0gMl07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMXhoID0gZ2FtbWExeC5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTF4bCA9IGdhbW1hMXgubG93O1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYTFoICA9ICgoZ2FtbWExeGggPj4+IDE5KSB8IChnYW1tYTF4bCA8PCAxMykpIF4gKChnYW1tYTF4aCA8PCAzKSB8IChnYW1tYTF4bCA+Pj4gMjkpKSBeIChnYW1tYTF4aCA+Pj4gNik7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGdhbW1hMWwgID0gKChnYW1tYTF4bCA+Pj4gMTkpIHwgKGdhbW1hMXhoIDw8IDEzKSkgXiAoKGdhbW1hMXhsIDw8IDMpIHwgKGdhbW1hMXhoID4+PiAyOSkpIF4gKChnYW1tYTF4bCA+Pj4gNikgfCAoZ2FtbWExeGggPDwgMjYpKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIC8vIFdbaV0gPSBnYW1tYTAgKyBXW2kgLSA3XSArIGdhbW1hMSArIFdbaSAtIDE2XVxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTcgID0gV1tpIC0gN107XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpN2ggPSBXaTcuaGlnaDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2k3bCA9IFdpNy5sb3c7XG5cblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2kxNiAgPSBXW2kgLSAxNl07XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpMTZoID0gV2kxNi5oaWdoO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaTE2bCA9IFdpMTYubG93O1xuXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpbCA9IGdhbW1hMGwgKyBXaTdsO1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBXaWggPSBnYW1tYTBoICsgV2k3aCArICgoV2lsID4+PiAwKSA8IChnYW1tYTBsID4+PiAwKSA/IDEgOiAwKTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2lsID0gV2lsICsgZ2FtbWExbDtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2loID0gV2loICsgZ2FtbWExaCArICgoV2lsID4+PiAwKSA8IChnYW1tYTFsID4+PiAwKSA/IDEgOiAwKTtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgV2lsID0gV2lsICsgV2kxNmw7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIFdpaCA9IFdpaCArIFdpMTZoICsgKChXaWwgPj4+IDApIDwgKFdpMTZsID4+PiAwKSA/IDEgOiAwKTtcblxuXHQgICAgICAgICAgICAgICAgICAgIFdpLmhpZ2ggPSBXaWg7XG5cdCAgICAgICAgICAgICAgICAgICAgV2kubG93ICA9IFdpbDtcblx0ICAgICAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAgICAgdmFyIGNoaCAgPSAoZWggJiBmaCkgXiAofmVoICYgZ2gpO1xuXHQgICAgICAgICAgICAgICAgdmFyIGNobCAgPSAoZWwgJiBmbCkgXiAofmVsICYgZ2wpO1xuXHQgICAgICAgICAgICAgICAgdmFyIG1hamggPSAoYWggJiBiaCkgXiAoYWggJiBjaCkgXiAoYmggJiBjaCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgbWFqbCA9IChhbCAmIGJsKSBeIChhbCAmIGNsKSBeIChibCAmIGNsKTtcblxuXHQgICAgICAgICAgICAgICAgdmFyIHNpZ21hMGggPSAoKGFoID4+PiAyOCkgfCAoYWwgPDwgNCkpICBeICgoYWggPDwgMzApICB8IChhbCA+Pj4gMikpIF4gKChhaCA8PCAyNSkgfCAoYWwgPj4+IDcpKTtcblx0ICAgICAgICAgICAgICAgIHZhciBzaWdtYTBsID0gKChhbCA+Pj4gMjgpIHwgKGFoIDw8IDQpKSAgXiAoKGFsIDw8IDMwKSAgfCAoYWggPj4+IDIpKSBeICgoYWwgPDwgMjUpIHwgKGFoID4+PiA3KSk7XG5cdCAgICAgICAgICAgICAgICB2YXIgc2lnbWExaCA9ICgoZWggPj4+IDE0KSB8IChlbCA8PCAxOCkpIF4gKChlaCA+Pj4gMTgpIHwgKGVsIDw8IDE0KSkgXiAoKGVoIDw8IDIzKSB8IChlbCA+Pj4gOSkpO1xuXHQgICAgICAgICAgICAgICAgdmFyIHNpZ21hMWwgPSAoKGVsID4+PiAxNCkgfCAoZWggPDwgMTgpKSBeICgoZWwgPj4+IDE4KSB8IChlaCA8PCAxNCkpIF4gKChlbCA8PCAyMykgfCAoZWggPj4+IDkpKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2ldICsgV1tpXVxuXHQgICAgICAgICAgICAgICAgdmFyIEtpICA9IEtbaV07XG5cdCAgICAgICAgICAgICAgICB2YXIgS2loID0gS2kuaGlnaDtcblx0ICAgICAgICAgICAgICAgIHZhciBLaWwgPSBLaS5sb3c7XG5cblx0ICAgICAgICAgICAgICAgIHZhciB0MWwgPSBobCArIHNpZ21hMWw7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFoID0gaGggKyBzaWdtYTFoICsgKCh0MWwgPj4+IDApIDwgKGhsID4+PiAwKSA/IDEgOiAwKTtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWwgPSB0MWwgKyBjaGw7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFoID0gdDFoICsgY2hoICsgKCh0MWwgPj4+IDApIDwgKGNobCA+Pj4gMCkgPyAxIDogMCk7XG5cdCAgICAgICAgICAgICAgICB2YXIgdDFsID0gdDFsICsgS2lsO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxaCA9IHQxaCArIEtpaCArICgodDFsID4+PiAwKSA8IChLaWwgPj4+IDApID8gMSA6IDApO1xuXHQgICAgICAgICAgICAgICAgdmFyIHQxbCA9IHQxbCArIFdpbDtcblx0ICAgICAgICAgICAgICAgIHZhciB0MWggPSB0MWggKyBXaWggKyAoKHQxbCA+Pj4gMCkgPCAoV2lsID4+PiAwKSA/IDEgOiAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gdDIgPSBzaWdtYTAgKyBtYWpcblx0ICAgICAgICAgICAgICAgIHZhciB0MmwgPSBzaWdtYTBsICsgbWFqbDtcblx0ICAgICAgICAgICAgICAgIHZhciB0MmggPSBzaWdtYTBoICsgbWFqaCArICgodDJsID4+PiAwKSA8IChzaWdtYTBsID4+PiAwKSA/IDEgOiAwKTtcblxuXHQgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHdvcmtpbmcgdmFyaWFibGVzXG5cdCAgICAgICAgICAgICAgICBoaCA9IGdoO1xuXHQgICAgICAgICAgICAgICAgaGwgPSBnbDtcblx0ICAgICAgICAgICAgICAgIGdoID0gZmg7XG5cdCAgICAgICAgICAgICAgICBnbCA9IGZsO1xuXHQgICAgICAgICAgICAgICAgZmggPSBlaDtcblx0ICAgICAgICAgICAgICAgIGZsID0gZWw7XG5cdCAgICAgICAgICAgICAgICBlbCA9IChkbCArIHQxbCkgfCAwO1xuXHQgICAgICAgICAgICAgICAgZWggPSAoZGggKyB0MWggKyAoKGVsID4+PiAwKSA8IChkbCA+Pj4gMCkgPyAxIDogMCkpIHwgMDtcblx0ICAgICAgICAgICAgICAgIGRoID0gY2g7XG5cdCAgICAgICAgICAgICAgICBkbCA9IGNsO1xuXHQgICAgICAgICAgICAgICAgY2ggPSBiaDtcblx0ICAgICAgICAgICAgICAgIGNsID0gYmw7XG5cdCAgICAgICAgICAgICAgICBiaCA9IGFoO1xuXHQgICAgICAgICAgICAgICAgYmwgPSBhbDtcblx0ICAgICAgICAgICAgICAgIGFsID0gKHQxbCArIHQybCkgfCAwO1xuXHQgICAgICAgICAgICAgICAgYWggPSAodDFoICsgdDJoICsgKChhbCA+Pj4gMCkgPCAodDFsID4+PiAwKSA/IDEgOiAwKSkgfCAwO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcblx0ICAgICAgICAgICAgSDBsID0gSDAubG93ICA9IChIMGwgKyBhbCk7XG5cdCAgICAgICAgICAgIEgwLmhpZ2ggPSAoSDBoICsgYWggKyAoKEgwbCA+Pj4gMCkgPCAoYWwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDFsID0gSDEubG93ICA9IChIMWwgKyBibCk7XG5cdCAgICAgICAgICAgIEgxLmhpZ2ggPSAoSDFoICsgYmggKyAoKEgxbCA+Pj4gMCkgPCAoYmwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDJsID0gSDIubG93ICA9IChIMmwgKyBjbCk7XG5cdCAgICAgICAgICAgIEgyLmhpZ2ggPSAoSDJoICsgY2ggKyAoKEgybCA+Pj4gMCkgPCAoY2wgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDNsID0gSDMubG93ICA9IChIM2wgKyBkbCk7XG5cdCAgICAgICAgICAgIEgzLmhpZ2ggPSAoSDNoICsgZGggKyAoKEgzbCA+Pj4gMCkgPCAoZGwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDRsID0gSDQubG93ICA9IChINGwgKyBlbCk7XG5cdCAgICAgICAgICAgIEg0LmhpZ2ggPSAoSDRoICsgZWggKyAoKEg0bCA+Pj4gMCkgPCAoZWwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDVsID0gSDUubG93ICA9IChINWwgKyBmbCk7XG5cdCAgICAgICAgICAgIEg1LmhpZ2ggPSAoSDVoICsgZmggKyAoKEg1bCA+Pj4gMCkgPCAoZmwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDZsID0gSDYubG93ICA9IChINmwgKyBnbCk7XG5cdCAgICAgICAgICAgIEg2LmhpZ2ggPSAoSDZoICsgZ2ggKyAoKEg2bCA+Pj4gMCkgPCAoZ2wgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICAgICAgSDdsID0gSDcubG93ICA9IChIN2wgKyBobCk7XG5cdCAgICAgICAgICAgIEg3LmhpZ2ggPSAoSDdoICsgaGggKyAoKEg3bCA+Pj4gMCkgPCAoaGwgPj4+IDApID8gMSA6IDApKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcblx0ICAgICAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIG5CaXRzVG90YWwgPSB0aGlzLl9uRGF0YUJ5dGVzICogODtcblx0ICAgICAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4O1xuXG5cdCAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nXG5cdCAgICAgICAgICAgIGRhdGFXb3Jkc1tuQml0c0xlZnQgPj4+IDVdIHw9IDB4ODAgPDwgKDI0IC0gbkJpdHNMZWZ0ICUgMzIpO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgMTI4KSA+Pj4gMTApIDw8IDUpICsgMzBdID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApO1xuXHQgICAgICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgMTI4KSA+Pj4gMTApIDw8IDUpICsgMzFdID0gbkJpdHNUb3RhbDtcblx0ICAgICAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0O1xuXG5cdCAgICAgICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzXG5cdCAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MoKTtcblxuXHQgICAgICAgICAgICAvLyBDb252ZXJ0IGhhc2ggdG8gMzItYml0IHdvcmQgYXJyYXkgYmVmb3JlIHJldHVybmluZ1xuXHQgICAgICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2gudG9YMzIoKTtcblxuXHQgICAgICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaFxuXHQgICAgICAgICAgICByZXR1cm4gaGFzaDtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcyk7XG5cdCAgICAgICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpO1xuXG5cdCAgICAgICAgICAgIHJldHVybiBjbG9uZTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiAxMDI0LzMyXG5cdCAgICB9KTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTUxMignbWVzc2FnZScpO1xuXHQgICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBNTEyKHdvcmRBcnJheSk7XG5cdCAgICAgKi9cblx0ICAgIEMuU0hBNTEyID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBNTEyKTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXG5cdCAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cblx0ICAgICAqXG5cdCAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxuXHQgICAgICpcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqXG5cdCAgICAgKiBAZXhhbXBsZVxuXHQgICAgICpcblx0ICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEE1MTIobWVzc2FnZSwga2V5KTtcblx0ICAgICAqL1xuXHQgICAgQy5IbWFjU0hBNTEyID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTUxMik7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlMuU0hBNTEyO1xuXG59KSk7IiwiOyhmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSwgdW5kZWYpIHtcblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG5cdFx0Ly8gQ29tbW9uSlNcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCIuL2NvcmVcIiksIHJlcXVpcmUoXCIuL2VuYy1iYXNlNjRcIiksIHJlcXVpcmUoXCIuL21kNVwiKSwgcmVxdWlyZShcIi4vZXZwa2RmXCIpLCByZXF1aXJlKFwiLi9jaXBoZXItY29yZVwiKSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyBBTURcblx0XHRkZWZpbmUoW1wiLi9jb3JlXCIsIFwiLi9lbmMtYmFzZTY0XCIsIFwiLi9tZDVcIiwgXCIuL2V2cGtkZlwiLCBcIi4vY2lwaGVyLWNvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAoKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cdCAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlcjtcblx0ICAgIHZhciBDX2FsZ28gPSBDLmFsZ287XG5cblx0ICAgIC8vIFBlcm11dGVkIENob2ljZSAxIGNvbnN0YW50c1xuXHQgICAgdmFyIFBDMSA9IFtcblx0ICAgICAgICA1NywgNDksIDQxLCAzMywgMjUsIDE3LCA5LCAgMSxcblx0ICAgICAgICA1OCwgNTAsIDQyLCAzNCwgMjYsIDE4LCAxMCwgMixcblx0ICAgICAgICA1OSwgNTEsIDQzLCAzNSwgMjcsIDE5LCAxMSwgMyxcblx0ICAgICAgICA2MCwgNTIsIDQ0LCAzNiwgNjMsIDU1LCA0NywgMzksXG5cdCAgICAgICAgMzEsIDIzLCAxNSwgNywgIDYyLCA1NCwgNDYsIDM4LFxuXHQgICAgICAgIDMwLCAyMiwgMTQsIDYsICA2MSwgNTMsIDQ1LCAzNyxcblx0ICAgICAgICAyOSwgMjEsIDEzLCA1LCAgMjgsIDIwLCAxMiwgNFxuXHQgICAgXTtcblxuXHQgICAgLy8gUGVybXV0ZWQgQ2hvaWNlIDIgY29uc3RhbnRzXG5cdCAgICB2YXIgUEMyID0gW1xuXHQgICAgICAgIDE0LCAxNywgMTEsIDI0LCAxLCAgNSxcblx0ICAgICAgICAzLCAgMjgsIDE1LCA2LCAgMjEsIDEwLFxuXHQgICAgICAgIDIzLCAxOSwgMTIsIDQsICAyNiwgOCxcblx0ICAgICAgICAxNiwgNywgIDI3LCAyMCwgMTMsIDIsXG5cdCAgICAgICAgNDEsIDUyLCAzMSwgMzcsIDQ3LCA1NSxcblx0ICAgICAgICAzMCwgNDAsIDUxLCA0NSwgMzMsIDQ4LFxuXHQgICAgICAgIDQ0LCA0OSwgMzksIDU2LCAzNCwgNTMsXG5cdCAgICAgICAgNDYsIDQyLCA1MCwgMzYsIDI5LCAzMlxuXHQgICAgXTtcblxuXHQgICAgLy8gQ3VtdWxhdGl2ZSBiaXQgc2hpZnQgY29uc3RhbnRzXG5cdCAgICB2YXIgQklUX1NISUZUUyA9IFsxLCAgMiwgIDQsICA2LCAgOCwgIDEwLCAxMiwgMTQsIDE1LCAxNywgMTksIDIxLCAyMywgMjUsIDI3LCAyOF07XG5cblx0ICAgIC8vIFNCT1hlcyBhbmQgcm91bmQgcGVybXV0YXRpb24gY29uc3RhbnRzXG5cdCAgICB2YXIgU0JPWF9QID0gW1xuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDgwODIwMCxcblx0ICAgICAgICAgICAgMHgxMDAwMDAwMDogMHg4MDAwLFxuXHQgICAgICAgICAgICAweDIwMDAwMDAwOiAweDgwODAwMixcblx0ICAgICAgICAgICAgMHgzMDAwMDAwMDogMHgyLFxuXHQgICAgICAgICAgICAweDQwMDAwMDAwOiAweDIwMCxcblx0ICAgICAgICAgICAgMHg1MDAwMDAwMDogMHg4MDgyMDIsXG5cdCAgICAgICAgICAgIDB4NjAwMDAwMDA6IDB4ODAwMjAyLFxuXHQgICAgICAgICAgICAweDcwMDAwMDAwOiAweDgwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwMDogMHgyMDIsXG5cdCAgICAgICAgICAgIDB4OTAwMDAwMDA6IDB4ODAwMjAwLFxuXHQgICAgICAgICAgICAweGEwMDAwMDAwOiAweDgyMDAsXG5cdCAgICAgICAgICAgIDB4YjAwMDAwMDA6IDB4ODA4MDAwLFxuXHQgICAgICAgICAgICAweGMwMDAwMDAwOiAweDgwMDIsXG5cdCAgICAgICAgICAgIDB4ZDAwMDAwMDA6IDB4ODAwMDAyLFxuXHQgICAgICAgICAgICAweGUwMDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZjAwMDAwMDA6IDB4ODIwMixcblx0ICAgICAgICAgICAgMHg4MDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDAwMDA6IDB4ODA4MjAyLFxuXHQgICAgICAgICAgICAweDI4MDAwMDAwOiAweDgyMDIsXG5cdCAgICAgICAgICAgIDB4MzgwMDAwMDA6IDB4ODAwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDAwMDogMHg4MDgyMDAsXG5cdCAgICAgICAgICAgIDB4NTgwMDAwMDA6IDB4MjAwLFxuXHQgICAgICAgICAgICAweDY4MDAwMDAwOiAweDgwODAwMixcblx0ICAgICAgICAgICAgMHg3ODAwMDAwMDogMHgyLFxuXHQgICAgICAgICAgICAweDg4MDAwMDAwOiAweDgwMDIwMCxcblx0ICAgICAgICAgICAgMHg5ODAwMDAwMDogMHg4MjAwLFxuXHQgICAgICAgICAgICAweGE4MDAwMDAwOiAweDgwODAwMCxcblx0ICAgICAgICAgICAgMHhiODAwMDAwMDogMHg4MDAyMDIsXG5cdCAgICAgICAgICAgIDB4YzgwMDAwMDA6IDB4ODAwMDAyLFxuXHQgICAgICAgICAgICAweGQ4MDAwMDAwOiAweDgwMDIsXG5cdCAgICAgICAgICAgIDB4ZTgwMDAwMDA6IDB4MjAyLFxuXHQgICAgICAgICAgICAweGY4MDAwMDAwOiAweDgwMDAwMCxcblx0ICAgICAgICAgICAgMHgxOiAweDgwMDAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwMDE6IDB4Mixcblx0ICAgICAgICAgICAgMHgyMDAwMDAwMTogMHg4MDgyMDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDAwMDE6IDB4ODAwMDAwLFxuXHQgICAgICAgICAgICAweDQwMDAwMDAxOiAweDgwODAwMixcblx0ICAgICAgICAgICAgMHg1MDAwMDAwMTogMHg4MjAwLFxuXHQgICAgICAgICAgICAweDYwMDAwMDAxOiAweDIwMCxcblx0ICAgICAgICAgICAgMHg3MDAwMDAwMTogMHg4MDAyMDIsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDE6IDB4ODA4MjAyLFxuXHQgICAgICAgICAgICAweDkwMDAwMDAxOiAweDgwODAwMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDAwMTogMHg4MDAwMDIsXG5cdCAgICAgICAgICAgIDB4YjAwMDAwMDE6IDB4ODIwMixcblx0ICAgICAgICAgICAgMHhjMDAwMDAwMTogMHgyMDIsXG5cdCAgICAgICAgICAgIDB4ZDAwMDAwMDE6IDB4ODAwMjAwLFxuXHQgICAgICAgICAgICAweGUwMDAwMDAxOiAweDgwMDIsXG5cdCAgICAgICAgICAgIDB4ZjAwMDAwMDE6IDB4MCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxOiAweDgwODIwMixcblx0ICAgICAgICAgICAgMHgxODAwMDAwMTogMHg4MDgwMDAsXG5cdCAgICAgICAgICAgIDB4MjgwMDAwMDE6IDB4ODAwMDAwLFxuXHQgICAgICAgICAgICAweDM4MDAwMDAxOiAweDIwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDAwMTogMHg4MDAwLFxuXHQgICAgICAgICAgICAweDU4MDAwMDAxOiAweDgwMDAwMixcblx0ICAgICAgICAgICAgMHg2ODAwMDAwMTogMHgyLFxuXHQgICAgICAgICAgICAweDc4MDAwMDAxOiAweDgyMDIsXG5cdCAgICAgICAgICAgIDB4ODgwMDAwMDE6IDB4ODAwMixcblx0ICAgICAgICAgICAgMHg5ODAwMDAwMTogMHg4MDAyMDIsXG5cdCAgICAgICAgICAgIDB4YTgwMDAwMDE6IDB4MjAyLFxuXHQgICAgICAgICAgICAweGI4MDAwMDAxOiAweDgwODIwMCxcblx0ICAgICAgICAgICAgMHhjODAwMDAwMTogMHg4MDAyMDAsXG5cdCAgICAgICAgICAgIDB4ZDgwMDAwMDE6IDB4MCxcblx0ICAgICAgICAgICAgMHhlODAwMDAwMTogMHg4MjAwLFxuXHQgICAgICAgICAgICAweGY4MDAwMDAxOiAweDgwODAwMlxuXHQgICAgICAgIH0sXG5cdCAgICAgICAge1xuXHQgICAgICAgICAgICAweDA6IDB4NDAwODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwMDogMHg0MDAwLFxuXHQgICAgICAgICAgICAweDIwMDAwMDA6IDB4ODAwMDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDAwMDogMHg0MDA4MDAxMCxcblx0ICAgICAgICAgICAgMHg0MDAwMDAwOiAweDQwMDAwMDEwLFxuXHQgICAgICAgICAgICAweDUwMDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4NjAwMDAwMDogMHg0MDAwNDAwMCxcblx0ICAgICAgICAgICAgMHg3MDAwMDAwOiAweDEwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA6IDB4ODQwMDAsXG5cdCAgICAgICAgICAgIDB4OTAwMDAwMDogMHg0MDAwNDAxMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDAwOiAweDQwMDAwMDAwLFxuXHQgICAgICAgICAgICAweGIwMDAwMDA6IDB4ODQwMTAsXG5cdCAgICAgICAgICAgIDB4YzAwMDAwMDogMHg4MDAxMCxcblx0ICAgICAgICAgICAgMHhkMDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZTAwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweGYwMDAwMDA6IDB4NDAwODAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwOiAweDQwMDA0MDAwLFxuXHQgICAgICAgICAgICAweDE4MDAwMDA6IDB4ODQwMTAsXG5cdCAgICAgICAgICAgIDB4MjgwMDAwMDogMHgxMCxcblx0ICAgICAgICAgICAgMHgzODAwMDAwOiAweDQwMDA0MDEwLFxuXHQgICAgICAgICAgICAweDQ4MDAwMDA6IDB4NDAwODQwMTAsXG5cdCAgICAgICAgICAgIDB4NTgwMDAwMDogMHg0MDAwMDAwMCxcblx0ICAgICAgICAgICAgMHg2ODAwMDAwOiAweDgwMDAwLFxuXHQgICAgICAgICAgICAweDc4MDAwMDA6IDB4NDAwODAwMTAsXG5cdCAgICAgICAgICAgIDB4ODgwMDAwMDogMHg4MDAxMCxcblx0ICAgICAgICAgICAgMHg5ODAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4YTgwMDAwMDogMHg0MDAwLFxuXHQgICAgICAgICAgICAweGI4MDAwMDA6IDB4NDAwODAwMDAsXG5cdCAgICAgICAgICAgIDB4YzgwMDAwMDogMHg0MDAwMDAxMCxcblx0ICAgICAgICAgICAgMHhkODAwMDAwOiAweDg0MDAwLFxuXHQgICAgICAgICAgICAweGU4MDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4ZjgwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweDEwMDAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MTEwMDAwMDA6IDB4NDAwODAwMTAsXG5cdCAgICAgICAgICAgIDB4MTIwMDAwMDA6IDB4NDAwMDQwMTAsXG5cdCAgICAgICAgICAgIDB4MTMwMDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4MTQwMDAwMDA6IDB4NDAwODAwMDAsXG5cdCAgICAgICAgICAgIDB4MTUwMDAwMDA6IDB4MTAsXG5cdCAgICAgICAgICAgIDB4MTYwMDAwMDA6IDB4ODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTcwMDAwMDA6IDB4NDAwMCxcblx0ICAgICAgICAgICAgMHgxODAwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweDE5MDAwMDAwOiAweDgwMDAwLFxuXHQgICAgICAgICAgICAweDFhMDAwMDAwOiAweDgwMDEwLFxuXHQgICAgICAgICAgICAweDFiMDAwMDAwOiAweDQwMDAwMDEwLFxuXHQgICAgICAgICAgICAweDFjMDAwMDAwOiAweDg0MDAwLFxuXHQgICAgICAgICAgICAweDFkMDAwMDAwOiAweDQwMDA0MDAwLFxuXHQgICAgICAgICAgICAweDFlMDAwMDAwOiAweDQwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFmMDAwMDAwOiAweDQwMDg0MDEwLFxuXHQgICAgICAgICAgICAweDEwODAwMDAwOiAweDg0MDEwLFxuXHQgICAgICAgICAgICAweDExODAwMDAwOiAweDgwMDAwLFxuXHQgICAgICAgICAgICAweDEyODAwMDAwOiAweDQwMDgwMDAwLFxuXHQgICAgICAgICAgICAweDEzODAwMDAwOiAweDQwMDAsXG5cdCAgICAgICAgICAgIDB4MTQ4MDAwMDA6IDB4NDAwMDQwMDAsXG5cdCAgICAgICAgICAgIDB4MTU4MDAwMDA6IDB4NDAwODQwMTAsXG5cdCAgICAgICAgICAgIDB4MTY4MDAwMDA6IDB4MTAsXG5cdCAgICAgICAgICAgIDB4MTc4MDAwMDA6IDB4NDAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTg4MDAwMDA6IDB4NDAwODQwMDAsXG5cdCAgICAgICAgICAgIDB4MTk4MDAwMDA6IDB4NDAwMDAwMTAsXG5cdCAgICAgICAgICAgIDB4MWE4MDAwMDA6IDB4NDAwMDQwMTAsXG5cdCAgICAgICAgICAgIDB4MWI4MDAwMDA6IDB4ODAwMTAsXG5cdCAgICAgICAgICAgIDB4MWM4MDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxZDgwMDAwMDogMHg0MDEwLFxuXHQgICAgICAgICAgICAweDFlODAwMDAwOiAweDQwMDgwMDEwLFxuXHQgICAgICAgICAgICAweDFmODAwMDAwOiAweDg0MDAwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHgxMDQsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4MjAwMDAwOiAweDQwMDAxMDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDAwOiAweDEwMTA0LFxuXHQgICAgICAgICAgICAweDQwMDAwMDogMHgxMDAwNCxcblx0ICAgICAgICAgICAgMHg1MDAwMDA6IDB4NDAwMDAwNCxcblx0ICAgICAgICAgICAgMHg2MDAwMDA6IDB4NDAxMDEwNCxcblx0ICAgICAgICAgICAgMHg3MDAwMDA6IDB4NDAxMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDA6IDB4NDAwMDAwMCxcblx0ICAgICAgICAgICAgMHg5MDAwMDA6IDB4NDAxMDEwMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDA6IDB4MTAxMDAsXG5cdCAgICAgICAgICAgIDB4YjAwMDAwOiAweDQwMTAwMDQsXG5cdCAgICAgICAgICAgIDB4YzAwMDAwOiAweDQwMDAxMDQsXG5cdCAgICAgICAgICAgIDB4ZDAwMDAwOiAweDEwMDAwLFxuXHQgICAgICAgICAgICAweGUwMDAwMDogMHg0LFxuXHQgICAgICAgICAgICAweGYwMDAwMDogMHgxMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDA6IDB4NDAxMDEwMCxcblx0ICAgICAgICAgICAgMHgxODAwMDA6IDB4NDAxMDAwNCxcblx0ICAgICAgICAgICAgMHgyODAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgzODAwMDA6IDB4NDAwMDEwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDA6IDB4NDAwMDAwNCxcblx0ICAgICAgICAgICAgMHg1ODAwMDA6IDB4MTAwMDAsXG5cdCAgICAgICAgICAgIDB4NjgwMDAwOiAweDEwMDA0LFxuXHQgICAgICAgICAgICAweDc4MDAwMDogMHgxMDQsXG5cdCAgICAgICAgICAgIDB4ODgwMDAwOiAweDQsXG5cdCAgICAgICAgICAgIDB4OTgwMDAwOiAweDEwMCxcblx0ICAgICAgICAgICAgMHhhODAwMDA6IDB4NDAxMDAwMCxcblx0ICAgICAgICAgICAgMHhiODAwMDA6IDB4MTAxMDQsXG5cdCAgICAgICAgICAgIDB4YzgwMDAwOiAweDEwMTAwLFxuXHQgICAgICAgICAgICAweGQ4MDAwMDogMHg0MDAwMTA0LFxuXHQgICAgICAgICAgICAweGU4MDAwMDogMHg0MDEwMTA0LFxuXHQgICAgICAgICAgICAweGY4MDAwMDogMHg0MDAwMDAwLFxuXHQgICAgICAgICAgICAweDEwMDAwMDA6IDB4NDAxMDEwMCxcblx0ICAgICAgICAgICAgMHgxMTAwMDAwOiAweDEwMDA0LFxuXHQgICAgICAgICAgICAweDEyMDAwMDA6IDB4MTAwMDAsXG5cdCAgICAgICAgICAgIDB4MTMwMDAwMDogMHg0MDAwMTAwLFxuXHQgICAgICAgICAgICAweDE0MDAwMDA6IDB4MTAwLFxuXHQgICAgICAgICAgICAweDE1MDAwMDA6IDB4NDAxMDEwNCxcblx0ICAgICAgICAgICAgMHgxNjAwMDAwOiAweDQwMDAwMDQsXG5cdCAgICAgICAgICAgIDB4MTcwMDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDE4MDAwMDA6IDB4NDAwMDEwNCxcblx0ICAgICAgICAgICAgMHgxOTAwMDAwOiAweDQwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWEwMDAwMDogMHg0LFxuXHQgICAgICAgICAgICAweDFiMDAwMDA6IDB4MTAxMDAsXG5cdCAgICAgICAgICAgIDB4MWMwMDAwMDogMHg0MDEwMDAwLFxuXHQgICAgICAgICAgICAweDFkMDAwMDA6IDB4MTA0LFxuXHQgICAgICAgICAgICAweDFlMDAwMDA6IDB4MTAxMDQsXG5cdCAgICAgICAgICAgIDB4MWYwMDAwMDogMHg0MDEwMDA0LFxuXHQgICAgICAgICAgICAweDEwODAwMDA6IDB4NDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMTgwMDAwOiAweDEwNCxcblx0ICAgICAgICAgICAgMHgxMjgwMDAwOiAweDQwMTAxMDAsXG5cdCAgICAgICAgICAgIDB4MTM4MDAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDE0ODAwMDA6IDB4MTAwMDQsXG5cdCAgICAgICAgICAgIDB4MTU4MDAwMDogMHg0MDAwMTAwLFxuXHQgICAgICAgICAgICAweDE2ODAwMDA6IDB4MTAwLFxuXHQgICAgICAgICAgICAweDE3ODAwMDA6IDB4NDAxMDAwNCxcblx0ICAgICAgICAgICAgMHgxODgwMDAwOiAweDEwMDAwLFxuXHQgICAgICAgICAgICAweDE5ODAwMDA6IDB4NDAxMDEwNCxcblx0ICAgICAgICAgICAgMHgxYTgwMDAwOiAweDEwMTA0LFxuXHQgICAgICAgICAgICAweDFiODAwMDA6IDB4NDAwMDAwNCxcblx0ICAgICAgICAgICAgMHgxYzgwMDAwOiAweDQwMDAxMDQsXG5cdCAgICAgICAgICAgIDB4MWQ4MDAwMDogMHg0MDEwMDAwLFxuXHQgICAgICAgICAgICAweDFlODAwMDA6IDB4NCxcblx0ICAgICAgICAgICAgMHgxZjgwMDAwOiAweDEwMTAwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg4MDQwMTAwMCxcblx0ICAgICAgICAgICAgMHgxMDAwMDogMHg4MDAwMTA0MCxcblx0ICAgICAgICAgICAgMHgyMDAwMDogMHg0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4MzAwMDA6IDB4ODA0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4NDAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHg1MDAwMDogMHg0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4NjAwMDA6IDB4ODAwMDAwNDAsXG5cdCAgICAgICAgICAgIDB4NzAwMDA6IDB4NDAwMDQwLFxuXHQgICAgICAgICAgICAweDgwMDAwOiAweDgwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDkwMDAwOiAweDQwMDAwMCxcblx0ICAgICAgICAgICAgMHhhMDAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHhiMDAwMDogMHg4MDAwMTAwMCxcblx0ICAgICAgICAgICAgMHhjMDAwMDogMHg4MDQwMDA0MCxcblx0ICAgICAgICAgICAgMHhkMDAwMDogMHgxMDQwLFxuXHQgICAgICAgICAgICAweGUwMDAwOiAweDEwMDAsXG5cdCAgICAgICAgICAgIDB4ZjAwMDA6IDB4ODA0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDogMHg4MDAwMTA0MCxcblx0ICAgICAgICAgICAgMHgxODAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHgyODAwMDogMHg4MDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgzODAwMDogMHg4MDAwMTAwMCxcblx0ICAgICAgICAgICAgMHg0ODAwMDogMHg0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4NTgwMDA6IDB4ODA0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4NjgwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHg3ODAwMDogMHg4MDQwMDAwMCxcblx0ICAgICAgICAgICAgMHg4ODAwMDogMHgxMDAwLFxuXHQgICAgICAgICAgICAweDk4MDAwOiAweDgwNDAxMDAwLFxuXHQgICAgICAgICAgICAweGE4MDAwOiAweDQwMDAwMCxcblx0ICAgICAgICAgICAgMHhiODAwMDogMHgxMDQwLFxuXHQgICAgICAgICAgICAweGM4MDAwOiAweDgwMDAwMDAwLFxuXHQgICAgICAgICAgICAweGQ4MDAwOiAweDQwMDA0MCxcblx0ICAgICAgICAgICAgMHhlODAwMDogMHg0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4ZjgwMDA6IDB4ODAwMDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTAwMDAwOiAweDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgxMTAwMDA6IDB4NDAxMDAwLFxuXHQgICAgICAgICAgICAweDEyMDAwMDogMHg4MDAwMDA0MCxcblx0ICAgICAgICAgICAgMHgxMzAwMDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxNDAwMDA6IDB4MTA0MCxcblx0ICAgICAgICAgICAgMHgxNTAwMDA6IDB4ODA0MDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTYwMDAwOiAweDgwNDAxMDAwLFxuXHQgICAgICAgICAgICAweDE3MDAwMDogMHg4MDAwMTA0MCxcblx0ICAgICAgICAgICAgMHgxODAwMDA6IDB4ODA0MDEwNDAsXG5cdCAgICAgICAgICAgIDB4MTkwMDAwOiAweDgwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFhMDAwMDogMHg4MDQwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYjAwMDA6IDB4NDAxMDQwLFxuXHQgICAgICAgICAgICAweDFjMDAwMDogMHg4MDAwMTAwMCxcblx0ICAgICAgICAgICAgMHgxZDAwMDA6IDB4NDAwMDAwLFxuXHQgICAgICAgICAgICAweDFlMDAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHgxZjAwMDA6IDB4MTAwMCxcblx0ICAgICAgICAgICAgMHgxMDgwMDA6IDB4ODA0MDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTE4MDAwOiAweDgwNDAxMDQwLFxuXHQgICAgICAgICAgICAweDEyODAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDEzODAwMDogMHg0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4MTQ4MDAwOiAweDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgxNTgwMDA6IDB4ODAwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTY4MDAwOiAweDgwMDAxMDQwLFxuXHQgICAgICAgICAgICAweDE3ODAwMDogMHg0MCxcblx0ICAgICAgICAgICAgMHgxODgwMDA6IDB4ODAwMDAwNDAsXG5cdCAgICAgICAgICAgIDB4MTk4MDAwOiAweDEwMDAsXG5cdCAgICAgICAgICAgIDB4MWE4MDAwOiAweDgwMDAxMDAwLFxuXHQgICAgICAgICAgICAweDFiODAwMDogMHg4MDQwMDA0MCxcblx0ICAgICAgICAgICAgMHgxYzgwMDA6IDB4MTA0MCxcblx0ICAgICAgICAgICAgMHgxZDgwMDA6IDB4ODA0MDEwMDAsXG5cdCAgICAgICAgICAgIDB4MWU4MDAwOiAweDQwMDAwMCxcblx0ICAgICAgICAgICAgMHgxZjgwMDA6IDB4NDAxMDQwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg4MCxcblx0ICAgICAgICAgICAgMHgxMDAwOiAweDEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4MjAwMDogMHg0MDAwMCxcblx0ICAgICAgICAgICAgMHgzMDAwOiAweDIwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDQwMDA6IDB4MjAwNDAwODAsXG5cdCAgICAgICAgICAgIDB4NTAwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDYwMDA6IDB4MjEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4NzAwMDogMHg0MDA4MCxcblx0ICAgICAgICAgICAgMHg4MDAwOiAweDEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4OTAwMDogMHgyMDA0MDAwMCxcblx0ICAgICAgICAgICAgMHhhMDAwOiAweDIwMDAwMDgwLFxuXHQgICAgICAgICAgICAweGIwMDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4YzAwMDogMHgyMTA0MDAwMCxcblx0ICAgICAgICAgICAgMHhkMDAwOiAweDAsXG5cdCAgICAgICAgICAgIDB4ZTAwMDogMHgxMDQwMDgwLFxuXHQgICAgICAgICAgICAweGYwMDA6IDB4MjEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwOiAweDEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTgwMDogMHgyMTAwMDA4MCxcblx0ICAgICAgICAgICAgMHgyODAwOiAweDgwLFxuXHQgICAgICAgICAgICAweDM4MDA6IDB4MTA0MDAwMCxcblx0ICAgICAgICAgICAgMHg0ODAwOiAweDQwMDAwLFxuXHQgICAgICAgICAgICAweDU4MDA6IDB4MjAwNDAwODAsXG5cdCAgICAgICAgICAgIDB4NjgwMDogMHgyMTA0MDAwMCxcblx0ICAgICAgICAgICAgMHg3ODAwOiAweDIwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDg4MDA6IDB4MjAwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4OTgwMDogMHgwLFxuXHQgICAgICAgICAgICAweGE4MDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4YjgwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweGM4MDA6IDB4MjAwMDAwODAsXG5cdCAgICAgICAgICAgIDB4ZDgwMDogMHgyMTAwMDAwMCxcblx0ICAgICAgICAgICAgMHhlODAwOiAweDEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ZjgwMDogMHg0MDA4MCxcblx0ICAgICAgICAgICAgMHgxMDAwMDogMHg0MDAwMCxcblx0ICAgICAgICAgICAgMHgxMTAwMDogMHg4MCxcblx0ICAgICAgICAgICAgMHgxMjAwMDogMHgyMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMzAwMDogMHgyMTAwMDA4MCxcblx0ICAgICAgICAgICAgMHgxNDAwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDE1MDAwOiAweDIxMDQwMDAwLFxuXHQgICAgICAgICAgICAweDE2MDAwOiAweDIwMDQwMDgwLFxuXHQgICAgICAgICAgICAweDE3MDAwOiAweDEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTgwMDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTkwMDA6IDB4MjEwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MWEwMDA6IDB4MTA0MDAwMCxcblx0ICAgICAgICAgICAgMHgxYjAwMDogMHgyMDA0MDAwMCxcblx0ICAgICAgICAgICAgMHgxYzAwMDogMHg0MDA4MCxcblx0ICAgICAgICAgICAgMHgxZDAwMDogMHgyMDAwMDA4MCxcblx0ICAgICAgICAgICAgMHgxZTAwMDogMHgwLFxuXHQgICAgICAgICAgICAweDFmMDAwOiAweDEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTA4MDA6IDB4MjEwMDAwODAsXG5cdCAgICAgICAgICAgIDB4MTE4MDA6IDB4MTAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMjgwMDogMHgxMDQwMDAwLFxuXHQgICAgICAgICAgICAweDEzODAwOiAweDIwMDQwMDgwLFxuXHQgICAgICAgICAgICAweDE0ODAwOiAweDIwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDE1ODAwOiAweDEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MTY4MDA6IDB4ODAsXG5cdCAgICAgICAgICAgIDB4MTc4MDA6IDB4MjEwNDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTg4MDA6IDB4NDAwODAsXG5cdCAgICAgICAgICAgIDB4MTk4MDA6IDB4MjEwNDAwODAsXG5cdCAgICAgICAgICAgIDB4MWE4MDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxYjgwMDogMHgyMTAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYzgwMDogMHgxMDAwMDgwLFxuXHQgICAgICAgICAgICAweDFkODAwOiAweDQwMDAwLFxuXHQgICAgICAgICAgICAweDFlODAwOiAweDIwMDQwMDAwLFxuXHQgICAgICAgICAgICAweDFmODAwOiAweDIwMDAwMDgwXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHgxMDAwMDAwOCxcblx0ICAgICAgICAgICAgMHgxMDA6IDB4MjAwMCxcblx0ICAgICAgICAgICAgMHgyMDA6IDB4MTAyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MzAwOiAweDEwMjAyMDA4LFxuXHQgICAgICAgICAgICAweDQwMDogMHgxMDAwMjAwMCxcblx0ICAgICAgICAgICAgMHg1MDA6IDB4MjAwMDAwLFxuXHQgICAgICAgICAgICAweDYwMDogMHgyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4NzAwOiAweDEwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDogMHgwLFxuXHQgICAgICAgICAgICAweDkwMDogMHgxMDAwMjAwOCxcblx0ICAgICAgICAgICAgMHhhMDA6IDB4MjAyMDAwLFxuXHQgICAgICAgICAgICAweGIwMDogMHg4LFxuXHQgICAgICAgICAgICAweGMwMDogMHgxMDIwMDAwOCxcblx0ICAgICAgICAgICAgMHhkMDA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweGUwMDogMHgyMDA4LFxuXHQgICAgICAgICAgICAweGYwMDogMHgxMDIwMjAwMCxcblx0ICAgICAgICAgICAgMHg4MDogMHgxMDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxODA6IDB4MTAyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4MjgwOiAweDgsXG5cdCAgICAgICAgICAgIDB4MzgwOiAweDIwMDAwMCxcblx0ICAgICAgICAgICAgMHg0ODA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweDU4MDogMHgxMDAwMDAwOCxcblx0ICAgICAgICAgICAgMHg2ODA6IDB4MTAwMDIwMDAsXG5cdCAgICAgICAgICAgIDB4NzgwOiAweDIwMDgsXG5cdCAgICAgICAgICAgIDB4ODgwOiAweDIwMDAwOCxcblx0ICAgICAgICAgICAgMHg5ODA6IDB4MjAwMCxcblx0ICAgICAgICAgICAgMHhhODA6IDB4MTAwMDIwMDgsXG5cdCAgICAgICAgICAgIDB4YjgwOiAweDEwMjAwMDA4LFxuXHQgICAgICAgICAgICAweGM4MDogMHgwLFxuXHQgICAgICAgICAgICAweGQ4MDogMHgxMDIwMjAwMCxcblx0ICAgICAgICAgICAgMHhlODA6IDB4MjAyMDAwLFxuXHQgICAgICAgICAgICAweGY4MDogMHgxMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMDAwOiAweDEwMDAyMDAwLFxuXHQgICAgICAgICAgICAweDExMDA6IDB4MTAyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4MTIwMDogMHgxMDIwMjAwOCxcblx0ICAgICAgICAgICAgMHgxMzAwOiAweDIwMDgsXG5cdCAgICAgICAgICAgIDB4MTQwMDogMHgyMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTUwMDogMHgxMDAwMDAwMCxcblx0ICAgICAgICAgICAgMHgxNjAwOiAweDEwMDAwMDA4LFxuXHQgICAgICAgICAgICAweDE3MDA6IDB4MjAyMDAwLFxuXHQgICAgICAgICAgICAweDE4MDA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweDE5MDA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxYTAwOiAweDgsXG5cdCAgICAgICAgICAgIDB4MWIwMDogMHgxMDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxYzAwOiAweDIwMDAsXG5cdCAgICAgICAgICAgIDB4MWQwMDogMHgxMDAwMjAwOCxcblx0ICAgICAgICAgICAgMHgxZTAwOiAweDEwMjAyMDAwLFxuXHQgICAgICAgICAgICAweDFmMDA6IDB4MjAwMDA4LFxuXHQgICAgICAgICAgICAweDEwODA6IDB4OCxcblx0ICAgICAgICAgICAgMHgxMTgwOiAweDIwMjAwMCxcblx0ICAgICAgICAgICAgMHgxMjgwOiAweDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMzgwOiAweDEwMDAwMDA4LFxuXHQgICAgICAgICAgICAweDE0ODA6IDB4MTAwMDIwMDAsXG5cdCAgICAgICAgICAgIDB4MTU4MDogMHgyMDA4LFxuXHQgICAgICAgICAgICAweDE2ODA6IDB4MTAyMDIwMDgsXG5cdCAgICAgICAgICAgIDB4MTc4MDogMHgxMDIwMDAwMCxcblx0ICAgICAgICAgICAgMHgxODgwOiAweDEwMjAyMDAwLFxuXHQgICAgICAgICAgICAweDE5ODA6IDB4MTAyMDAwMDgsXG5cdCAgICAgICAgICAgIDB4MWE4MDogMHgyMDAwLFxuXHQgICAgICAgICAgICAweDFiODA6IDB4MjAyMDA4LFxuXHQgICAgICAgICAgICAweDFjODA6IDB4MjAwMDA4LFxuXHQgICAgICAgICAgICAweDFkODA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxZTgwOiAweDEwMDAwMDAwLFxuXHQgICAgICAgICAgICAweDFmODA6IDB4MTAwMDIwMDhcblx0ICAgICAgICB9LFxuXHQgICAgICAgIHtcblx0ICAgICAgICAgICAgMHgwOiAweDEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxMDogMHgyMDAwNDAxLFxuXHQgICAgICAgICAgICAweDIwOiAweDQwMCxcblx0ICAgICAgICAgICAgMHgzMDogMHgxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4NDA6IDB4MjEwMDQwMSxcblx0ICAgICAgICAgICAgMHg1MDogMHgwLFxuXHQgICAgICAgICAgICAweDYwOiAweDEsXG5cdCAgICAgICAgICAgIDB4NzA6IDB4MjEwMDAwMSxcblx0ICAgICAgICAgICAgMHg4MDogMHgyMDAwNDAwLFxuXHQgICAgICAgICAgICAweDkwOiAweDEwMDAwMSxcblx0ICAgICAgICAgICAgMHhhMDogMHgyMDAwMDAxLFxuXHQgICAgICAgICAgICAweGIwOiAweDIxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4YzA6IDB4MjEwMDAwMCxcblx0ICAgICAgICAgICAgMHhkMDogMHg0MDEsXG5cdCAgICAgICAgICAgIDB4ZTA6IDB4MTAwNDAwLFxuXHQgICAgICAgICAgICAweGYwOiAweDIwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODogMHgyMTAwMDAxLFxuXHQgICAgICAgICAgICAweDE4OiAweDAsXG5cdCAgICAgICAgICAgIDB4Mjg6IDB4MjAwMDQwMSxcblx0ICAgICAgICAgICAgMHgzODogMHgyMTAwNDAwLFxuXHQgICAgICAgICAgICAweDQ4OiAweDEwMDAwMCxcblx0ICAgICAgICAgICAgMHg1ODogMHgyMDAwMDAxLFxuXHQgICAgICAgICAgICAweDY4OiAweDIwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4Nzg6IDB4NDAxLFxuXHQgICAgICAgICAgICAweDg4OiAweDEwMDQwMSxcblx0ICAgICAgICAgICAgMHg5ODogMHgyMDAwNDAwLFxuXHQgICAgICAgICAgICAweGE4OiAweDIxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4Yjg6IDB4MTAwMDAxLFxuXHQgICAgICAgICAgICAweGM4OiAweDQwMCxcblx0ICAgICAgICAgICAgMHhkODogMHgyMTAwNDAxLFxuXHQgICAgICAgICAgICAweGU4OiAweDEsXG5cdCAgICAgICAgICAgIDB4Zjg6IDB4MTAwNDAwLFxuXHQgICAgICAgICAgICAweDEwMDogMHgyMDAwMDAwLFxuXHQgICAgICAgICAgICAweDExMDogMHgxMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTIwOiAweDIwMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MTMwOiAweDIxMDAwMDEsXG5cdCAgICAgICAgICAgIDB4MTQwOiAweDEwMDAwMSxcblx0ICAgICAgICAgICAgMHgxNTA6IDB4MjAwMDQwMCxcblx0ICAgICAgICAgICAgMHgxNjA6IDB4MjEwMDQwMCxcblx0ICAgICAgICAgICAgMHgxNzA6IDB4MTAwNDAxLFxuXHQgICAgICAgICAgICAweDE4MDogMHg0MDEsXG5cdCAgICAgICAgICAgIDB4MTkwOiAweDIxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MWEwOiAweDEwMDQwMCxcblx0ICAgICAgICAgICAgMHgxYjA6IDB4MSxcblx0ICAgICAgICAgICAgMHgxYzA6IDB4MCxcblx0ICAgICAgICAgICAgMHgxZDA6IDB4MjEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxZTA6IDB4MjAwMDAwMSxcblx0ICAgICAgICAgICAgMHgxZjA6IDB4NDAwLFxuXHQgICAgICAgICAgICAweDEwODogMHgxMDA0MDAsXG5cdCAgICAgICAgICAgIDB4MTE4OiAweDIwMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MTI4OiAweDIxMDAwMDEsXG5cdCAgICAgICAgICAgIDB4MTM4OiAweDEsXG5cdCAgICAgICAgICAgIDB4MTQ4OiAweDIwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4MTU4OiAweDEwMDAwMCxcblx0ICAgICAgICAgICAgMHgxNjg6IDB4NDAxLFxuXHQgICAgICAgICAgICAweDE3ODogMHgyMTAwNDAwLFxuXHQgICAgICAgICAgICAweDE4ODogMHgyMDAwMDAxLFxuXHQgICAgICAgICAgICAweDE5ODogMHgyMTAwMDAwLFxuXHQgICAgICAgICAgICAweDFhODogMHgwLFxuXHQgICAgICAgICAgICAweDFiODogMHgyMTAwNDAxLFxuXHQgICAgICAgICAgICAweDFjODogMHgxMDA0MDEsXG5cdCAgICAgICAgICAgIDB4MWQ4OiAweDQwMCxcblx0ICAgICAgICAgICAgMHgxZTg6IDB4MjAwMDQwMCxcblx0ICAgICAgICAgICAgMHgxZjg6IDB4MTAwMDAxXG5cdCAgICAgICAgfSxcblx0ICAgICAgICB7XG5cdCAgICAgICAgICAgIDB4MDogMHg4MDAwODIwLFxuXHQgICAgICAgICAgICAweDE6IDB4MjAwMDAsXG5cdCAgICAgICAgICAgIDB4MjogMHg4MDAwMDAwLFxuXHQgICAgICAgICAgICAweDM6IDB4MjAsXG5cdCAgICAgICAgICAgIDB4NDogMHgyMDAyMCxcblx0ICAgICAgICAgICAgMHg1OiAweDgwMjA4MjAsXG5cdCAgICAgICAgICAgIDB4NjogMHg4MDIwODAwLFxuXHQgICAgICAgICAgICAweDc6IDB4ODAwLFxuXHQgICAgICAgICAgICAweDg6IDB4ODAyMDAwMCxcblx0ICAgICAgICAgICAgMHg5OiAweDgwMDA4MDAsXG5cdCAgICAgICAgICAgIDB4YTogMHgyMDgwMCxcblx0ICAgICAgICAgICAgMHhiOiAweDgwMjAwMjAsXG5cdCAgICAgICAgICAgIDB4YzogMHg4MjAsXG5cdCAgICAgICAgICAgIDB4ZDogMHgwLFxuXHQgICAgICAgICAgICAweGU6IDB4ODAwMDAyMCxcblx0ICAgICAgICAgICAgMHhmOiAweDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDAwOiAweDgwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwMTogMHg4MDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDAyOiAweDgwMDA4MjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDM6IDB4ODAwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwNDogMHg4MDIwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA1OiAweDIwODAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA2OiAweDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA3OiAweDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDA4OiAweDgwMDAwMjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMDk6IDB4ODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBhOiAweDIwMDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBiOiAweDgwMjA4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMGM6IDB4MCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAwZDogMHg4MDIwMDIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDBlOiAweDgwMDA4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMGY6IDB4MjAwMDAsXG5cdCAgICAgICAgICAgIDB4MTA6IDB4MjA4MjAsXG5cdCAgICAgICAgICAgIDB4MTE6IDB4ODAyMDgwMCxcblx0ICAgICAgICAgICAgMHgxMjogMHgyMCxcblx0ICAgICAgICAgICAgMHgxMzogMHg4MDAsXG5cdCAgICAgICAgICAgIDB4MTQ6IDB4ODAwMDgwMCxcblx0ICAgICAgICAgICAgMHgxNTogMHg4MDAwMDIwLFxuXHQgICAgICAgICAgICAweDE2OiAweDgwMjAwMjAsXG5cdCAgICAgICAgICAgIDB4MTc6IDB4MjAwMDAsXG5cdCAgICAgICAgICAgIDB4MTg6IDB4MCxcblx0ICAgICAgICAgICAgMHgxOTogMHgyMDAyMCxcblx0ICAgICAgICAgICAgMHgxYTogMHg4MDIwMDAwLFxuXHQgICAgICAgICAgICAweDFiOiAweDgwMDA4MjAsXG5cdCAgICAgICAgICAgIDB4MWM6IDB4ODAyMDgyMCxcblx0ICAgICAgICAgICAgMHgxZDogMHgyMDgwMCxcblx0ICAgICAgICAgICAgMHgxZTogMHg4MjAsXG5cdCAgICAgICAgICAgIDB4MWY6IDB4ODAwMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxMDogMHgyMDAwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxMTogMHg4MDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTI6IDB4ODAyMDAyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxMzogMHgyMDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxNDogMHgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxNTogMHg4MDIwMDAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDE2OiAweDgwMDAwMDAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMTc6IDB4ODAwMDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxODogMHg4MDIwODIwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDE5OiAweDgwMDAwMjAsXG5cdCAgICAgICAgICAgIDB4ODAwMDAwMWE6IDB4ODAwMDgwMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxYjogMHgwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDFjOiAweDIwODAwLFxuXHQgICAgICAgICAgICAweDgwMDAwMDFkOiAweDgyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxZTogMHgyMDAyMCxcblx0ICAgICAgICAgICAgMHg4MDAwMDAxZjogMHg4MDIwODAwXG5cdCAgICAgICAgfVxuXHQgICAgXTtcblxuXHQgICAgLy8gTWFza3MgdGhhdCBzZWxlY3QgdGhlIFNCT1ggaW5wdXRcblx0ICAgIHZhciBTQk9YX01BU0sgPSBbXG5cdCAgICAgICAgMHhmODAwMDAwMSwgMHgxZjgwMDAwMCwgMHgwMWY4MDAwMCwgMHgwMDFmODAwMCxcblx0ICAgICAgICAweDAwMDFmODAwLCAweDAwMDAxZjgwLCAweDAwMDAwMWY4LCAweDgwMDAwMDFmXG5cdCAgICBdO1xuXG5cdCAgICAvKipcblx0ICAgICAqIERFUyBibG9jayBjaXBoZXIgYWxnb3JpdGhtLlxuXHQgICAgICovXG5cdCAgICB2YXIgREVTID0gQ19hbGdvLkRFUyA9IEJsb2NrQ2lwaGVyLmV4dGVuZCh7XG5cdCAgICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXk7XG5cdCAgICAgICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3JkcztcblxuXHQgICAgICAgICAgICAvLyBTZWxlY3QgNTYgYml0cyBhY2NvcmRpbmcgdG8gUEMxXG5cdCAgICAgICAgICAgIHZhciBrZXlCaXRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTY7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGtleUJpdFBvcyA9IFBDMVtpXSAtIDE7XG5cdCAgICAgICAgICAgICAgICBrZXlCaXRzW2ldID0gKGtleVdvcmRzW2tleUJpdFBvcyA+Pj4gNV0gPj4+ICgzMSAtIGtleUJpdFBvcyAlIDMyKSkgJiAxO1xuXHQgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgLy8gQXNzZW1ibGUgMTYgc3Via2V5c1xuXHQgICAgICAgICAgICB2YXIgc3ViS2V5cyA9IHRoaXMuX3N1YktleXMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgblN1YktleSA9IDA7IG5TdWJLZXkgPCAxNjsgblN1YktleSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBDcmVhdGUgc3Via2V5XG5cdCAgICAgICAgICAgICAgICB2YXIgc3ViS2V5ID0gc3ViS2V5c1tuU3ViS2V5XSA9IFtdO1xuXG5cdCAgICAgICAgICAgICAgICAvLyBTaG9ydGN1dFxuXHQgICAgICAgICAgICAgICAgdmFyIGJpdFNoaWZ0ID0gQklUX1NISUZUU1tuU3ViS2V5XTtcblxuXHQgICAgICAgICAgICAgICAgLy8gU2VsZWN0IDQ4IGJpdHMgYWNjb3JkaW5nIHRvIFBDMlxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgLy8gU2VsZWN0IGZyb20gdGhlIGxlZnQgMjgga2V5IGJpdHNcblx0ICAgICAgICAgICAgICAgICAgICBzdWJLZXlbKGkgLyA2KSB8IDBdIHw9IGtleUJpdHNbKChQQzJbaV0gLSAxKSArIGJpdFNoaWZ0KSAlIDI4XSA8PCAoMzEgLSBpICUgNik7XG5cblx0ICAgICAgICAgICAgICAgICAgICAvLyBTZWxlY3QgZnJvbSB0aGUgcmlnaHQgMjgga2V5IGJpdHNcblx0ICAgICAgICAgICAgICAgICAgICBzdWJLZXlbNCArICgoaSAvIDYpIHwgMCldIHw9IGtleUJpdHNbMjggKyAoKChQQzJbaSArIDI0XSAtIDEpICsgYml0U2hpZnQpICUgMjgpXSA8PCAoMzEgLSBpICUgNik7XG5cdCAgICAgICAgICAgICAgICB9XG5cblx0ICAgICAgICAgICAgICAgIC8vIFNpbmNlIGVhY2ggc3Via2V5IGlzIGFwcGxpZWQgdG8gYW4gZXhwYW5kZWQgMzItYml0IGlucHV0LFxuXHQgICAgICAgICAgICAgICAgLy8gdGhlIHN1YmtleSBjYW4gYmUgYnJva2VuIGludG8gOCB2YWx1ZXMgc2NhbGVkIHRvIDMyLWJpdHMsXG5cdCAgICAgICAgICAgICAgICAvLyB3aGljaCBhbGxvd3MgdGhlIGtleSB0byBiZSB1c2VkIHdpdGhvdXQgZXhwYW5zaW9uXG5cdCAgICAgICAgICAgICAgICBzdWJLZXlbMF0gPSAoc3ViS2V5WzBdIDw8IDEpIHwgKHN1YktleVswXSA+Pj4gMzEpO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCA3OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBzdWJLZXlbaV0gPSBzdWJLZXlbaV0gPj4+ICgoaSAtIDEpICogNCArIDMpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgc3ViS2V5WzddID0gKHN1YktleVs3XSA8PCA1KSB8IChzdWJLZXlbN10gPj4+IDI3KTtcblx0ICAgICAgICAgICAgfVxuXG5cdCAgICAgICAgICAgIC8vIENvbXB1dGUgaW52ZXJzZSBzdWJrZXlzXG5cdCAgICAgICAgICAgIHZhciBpbnZTdWJLZXlzID0gdGhpcy5faW52U3ViS2V5cyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIGludlN1YktleXNbaV0gPSBzdWJLZXlzWzE1IC0gaV07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgZW5jcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2RvQ3J5cHRCbG9jayhNLCBvZmZzZXQsIHRoaXMuX3N1YktleXMpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBkZWNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcblx0ICAgICAgICAgICAgdGhpcy5fZG9DcnlwdEJsb2NrKE0sIG9mZnNldCwgdGhpcy5faW52U3ViS2V5cyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIF9kb0NyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQsIHN1YktleXMpIHtcblx0ICAgICAgICAgICAgLy8gR2V0IGlucHV0XG5cdCAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IE1bb2Zmc2V0XTtcblx0ICAgICAgICAgICAgdGhpcy5fckJsb2NrID0gTVtvZmZzZXQgKyAxXTtcblxuXHQgICAgICAgICAgICAvLyBJbml0aWFsIHBlcm11dGF0aW9uXG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCA0LCAgMHgwZjBmMGYwZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxNiwgMHgwMDAwZmZmZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCAyLCAgMHgzMzMzMzMzMyk7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCA4LCAgMHgwMGZmMDBmZik7XG5cdCAgICAgICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxLCAgMHg1NTU1NTU1NSk7XG5cblx0ICAgICAgICAgICAgLy8gUm91bmRzXG5cdCAgICAgICAgICAgIGZvciAodmFyIHJvdW5kID0gMDsgcm91bmQgPCAxNjsgcm91bmQrKykge1xuXHQgICAgICAgICAgICAgICAgLy8gU2hvcnRjdXRzXG5cdCAgICAgICAgICAgICAgICB2YXIgc3ViS2V5ID0gc3ViS2V5c1tyb3VuZF07XG5cdCAgICAgICAgICAgICAgICB2YXIgbEJsb2NrID0gdGhpcy5fbEJsb2NrO1xuXHQgICAgICAgICAgICAgICAgdmFyIHJCbG9jayA9IHRoaXMuX3JCbG9jaztcblxuXHQgICAgICAgICAgICAgICAgLy8gRmVpc3RlbCBmdW5jdGlvblxuXHQgICAgICAgICAgICAgICAgdmFyIGYgPSAwO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBmIHw9IFNCT1hfUFtpXVsoKHJCbG9jayBeIHN1YktleVtpXSkgJiBTQk9YX01BU0tbaV0pID4+PiAwXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHRoaXMuX2xCbG9jayA9IHJCbG9jaztcblx0ICAgICAgICAgICAgICAgIHRoaXMuX3JCbG9jayA9IGxCbG9jayBeIGY7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICAvLyBVbmRvIHN3YXAgZnJvbSBsYXN0IHJvdW5kXG5cdCAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fbEJsb2NrO1xuXHQgICAgICAgICAgICB0aGlzLl9sQmxvY2sgPSB0aGlzLl9yQmxvY2s7XG5cdCAgICAgICAgICAgIHRoaXMuX3JCbG9jayA9IHQ7XG5cblx0ICAgICAgICAgICAgLy8gRmluYWwgcGVybXV0YXRpb25cblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDEsICAweDU1NTU1NTU1KTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDgsICAweDAwZmYwMGZmKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VSTC5jYWxsKHRoaXMsIDIsICAweDMzMzMzMzMzKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDE2LCAweDAwMDBmZmZmKTtcblx0ICAgICAgICAgICAgZXhjaGFuZ2VMUi5jYWxsKHRoaXMsIDQsICAweDBmMGYwZjBmKTtcblxuXHQgICAgICAgICAgICAvLyBTZXQgb3V0cHV0XG5cdCAgICAgICAgICAgIE1bb2Zmc2V0XSA9IHRoaXMuX2xCbG9jaztcblx0ICAgICAgICAgICAgTVtvZmZzZXQgKyAxXSA9IHRoaXMuX3JCbG9jaztcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAga2V5U2l6ZTogNjQvMzIsXG5cblx0ICAgICAgICBpdlNpemU6IDY0LzMyLFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiA2NC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIC8vIFN3YXAgYml0cyBhY3Jvc3MgdGhlIGxlZnQgYW5kIHJpZ2h0IHdvcmRzXG5cdCAgICBmdW5jdGlvbiBleGNoYW5nZUxSKG9mZnNldCwgbWFzaykge1xuXHQgICAgICAgIHZhciB0ID0gKCh0aGlzLl9sQmxvY2sgPj4+IG9mZnNldCkgXiB0aGlzLl9yQmxvY2spICYgbWFzaztcblx0ICAgICAgICB0aGlzLl9yQmxvY2sgXj0gdDtcblx0ICAgICAgICB0aGlzLl9sQmxvY2sgXj0gdCA8PCBvZmZzZXQ7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGV4Y2hhbmdlUkwob2Zmc2V0LCBtYXNrKSB7XG5cdCAgICAgICAgdmFyIHQgPSAoKHRoaXMuX3JCbG9jayA+Pj4gb2Zmc2V0KSBeIHRoaXMuX2xCbG9jaykgJiBtYXNrO1xuXHQgICAgICAgIHRoaXMuX2xCbG9jayBePSB0O1xuXHQgICAgICAgIHRoaXMuX3JCbG9jayBePSB0IDw8IG9mZnNldDtcblx0ICAgIH1cblxuXHQgICAgLyoqXG5cdCAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXG5cdCAgICAgKlxuXHQgICAgICogQGV4YW1wbGVcblx0ICAgICAqXG5cdCAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5ERVMuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XG5cdCAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5ERVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XG5cdCAgICAgKi9cblx0ICAgIEMuREVTID0gQmxvY2tDaXBoZXIuX2NyZWF0ZUhlbHBlcihERVMpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIFRyaXBsZS1ERVMgYmxvY2sgY2lwaGVyIGFsZ29yaXRobS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFRyaXBsZURFUyA9IENfYWxnby5UcmlwbGVERVMgPSBCbG9ja0NpcGhlci5leHRlbmQoe1xuXHQgICAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5O1xuXHQgICAgICAgICAgICB2YXIga2V5V29yZHMgPSBrZXkud29yZHM7XG5cblx0ICAgICAgICAgICAgLy8gQ3JlYXRlIERFUyBpbnN0YW5jZXNcblx0ICAgICAgICAgICAgdGhpcy5fZGVzMSA9IERFUy5jcmVhdGVFbmNyeXB0b3IoV29yZEFycmF5LmNyZWF0ZShrZXlXb3Jkcy5zbGljZSgwLCAyKSkpO1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMyID0gREVTLmNyZWF0ZUVuY3J5cHRvcihXb3JkQXJyYXkuY3JlYXRlKGtleVdvcmRzLnNsaWNlKDIsIDQpKSk7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczMgPSBERVMuY3JlYXRlRW5jcnlwdG9yKFdvcmRBcnJheS5jcmVhdGUoa2V5V29yZHMuc2xpY2UoNCwgNikpKTtcblx0ICAgICAgICB9LFxuXG5cdCAgICAgICAgZW5jcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczEuZW5jcnlwdEJsb2NrKE0sIG9mZnNldCk7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczIuZGVjcnlwdEJsb2NrKE0sIG9mZnNldCk7XG5cdCAgICAgICAgICAgIHRoaXMuX2RlczMuZW5jcnlwdEJsb2NrKE0sIG9mZnNldCk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIGRlY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMzLmRlY3J5cHRCbG9jayhNLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMyLmVuY3J5cHRCbG9jayhNLCBvZmZzZXQpO1xuXHQgICAgICAgICAgICB0aGlzLl9kZXMxLmRlY3J5cHRCbG9jayhNLCBvZmZzZXQpO1xuXHQgICAgICAgIH0sXG5cblx0ICAgICAgICBrZXlTaXplOiAxOTIvMzIsXG5cblx0ICAgICAgICBpdlNpemU6IDY0LzMyLFxuXG5cdCAgICAgICAgYmxvY2tTaXplOiA2NC8zMlxuXHQgICAgfSk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxuXHQgICAgICpcblx0ICAgICAqIEBleGFtcGxlXG5cdCAgICAgKlxuXHQgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuVHJpcGxlREVTLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xuXHQgICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuVHJpcGxlREVTLmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xuXHQgICAgICovXG5cdCAgICBDLlRyaXBsZURFUyA9IEJsb2NrQ2lwaGVyLl9jcmVhdGVIZWxwZXIoVHJpcGxlREVTKTtcblx0fSgpKTtcblxuXG5cdHJldHVybiBDcnlwdG9KUy5UcmlwbGVERVM7XG5cbn0pKTsiLCI7KGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuXHRcdC8vIENvbW1vbkpTXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiLi9jb3JlXCIpKTtcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbXCIuL2NvcmVcIl0sIGZhY3RvcnkpO1xuXHR9XG5cdGVsc2Uge1xuXHRcdC8vIEdsb2JhbCAoYnJvd3Nlcilcblx0XHRmYWN0b3J5KHJvb3QuQ3J5cHRvSlMpO1xuXHR9XG59KHRoaXMsIGZ1bmN0aW9uIChDcnlwdG9KUykge1xuXG5cdChmdW5jdGlvbiAodW5kZWZpbmVkKSB7XG5cdCAgICAvLyBTaG9ydGN1dHNcblx0ICAgIHZhciBDID0gQ3J5cHRvSlM7XG5cdCAgICB2YXIgQ19saWIgPSBDLmxpYjtcblx0ICAgIHZhciBCYXNlID0gQ19saWIuQmFzZTtcblx0ICAgIHZhciBYMzJXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXk7XG5cblx0ICAgIC8qKlxuXHQgICAgICogeDY0IG5hbWVzcGFjZS5cblx0ICAgICAqL1xuXHQgICAgdmFyIENfeDY0ID0gQy54NjQgPSB7fTtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBBIDY0LWJpdCB3b3JkLlxuXHQgICAgICovXG5cdCAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQgPSBCYXNlLmV4dGVuZCh7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIDY0LWJpdCB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGhpZ2ggVGhlIGhpZ2ggMzIgYml0cy5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93IFRoZSBsb3cgMzIgYml0cy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHg2NFdvcmQgPSBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgwMDAxMDIwMywgMHgwNDA1MDYwNyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgaW5pdDogZnVuY3Rpb24gKGhpZ2gsIGxvdykge1xuXHQgICAgICAgICAgICB0aGlzLmhpZ2ggPSBoaWdoO1xuXHQgICAgICAgICAgICB0aGlzLmxvdyA9IGxvdztcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBCaXR3aXNlIE5PVHMgdGhpcyB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIG5lZ2F0aW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgbmVnYXRlZCA9IHg2NFdvcmQubm90KCk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gbm90OiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBoaWdoID0gfnRoaXMuaGlnaDtcblx0ICAgICAgICAgICAgLy8gdmFyIGxvdyA9IH50aGlzLmxvdztcblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogQml0d2lzZSBBTkRzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7WDY0V29yZH0gd29yZCBUaGUgeDY0LVdvcmQgdG8gQU5EIHdpdGggdGhpcyB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIEFORGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGFuZGVkID0geDY0V29yZC5hbmQoYW5vdGhlclg2NFdvcmQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIGFuZDogZnVuY3Rpb24gKHdvcmQpIHtcblx0ICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggJiB3b3JkLmhpZ2g7XG5cdCAgICAgICAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmxvdyAmIHdvcmQubG93O1xuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBCaXR3aXNlIE9ScyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIE9SIHdpdGggdGhpcyB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIE9SaW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgb3JlZCA9IHg2NFdvcmQub3IoYW5vdGhlclg2NFdvcmQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIG9yOiBmdW5jdGlvbiAod29yZCkge1xuXHQgICAgICAgICAgICAvLyB2YXIgaGlnaCA9IHRoaXMuaGlnaCB8IHdvcmQuaGlnaDtcblx0ICAgICAgICAgICAgLy8gdmFyIGxvdyA9IHRoaXMubG93IHwgd29yZC5sb3c7XG5cblx0ICAgICAgICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XG5cdCAgICAgICAgLy8gfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIEJpdHdpc2UgWE9ScyB0aGlzIHdvcmQgd2l0aCB0aGUgcGFzc2VkIHdvcmQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIFhPUiB3aXRoIHRoaXMgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBYT1JpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciB4b3JlZCA9IHg2NFdvcmQueG9yKGFub3RoZXJYNjRXb3JkKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICAvLyB4b3I6IGZ1bmN0aW9uICh3b3JkKSB7XG5cdCAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoIF4gd29yZC5oaWdoO1xuXHQgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgXiB3b3JkLmxvdztcblxuXHQgICAgICAgICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcblx0ICAgICAgICAvLyB9LFxuXG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogU2hpZnRzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIGxlZnQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gc2hpZnQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgc2hpZnRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBzaGlmdGVkID0geDY0V29yZC5zaGlmdEwoMjUpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIHNoaWZ0TDogZnVuY3Rpb24gKG4pIHtcblx0ICAgICAgICAgICAgLy8gaWYgKG4gPCAzMikge1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSAodGhpcy5oaWdoIDw8IG4pIHwgKHRoaXMubG93ID4+PiAoMzIgLSBuKSk7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgPDwgbjtcblx0ICAgICAgICAgICAgLy8gfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5sb3cgPDwgKG4gLSAzMik7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgbG93ID0gMDtcblx0ICAgICAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBTaGlmdHMgdGhpcyB3b3JkIG4gYml0cyB0byB0aGUgcmlnaHQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gc2hpZnQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgc2hpZnRpbmcuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAZXhhbXBsZVxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogICAgIHZhciBzaGlmdGVkID0geDY0V29yZC5zaGlmdFIoNyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gc2hpZnRSOiBmdW5jdGlvbiAobikge1xuXHQgICAgICAgICAgICAvLyBpZiAobiA8IDMyKSB7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgbG93ID0gKHRoaXMubG93ID4+PiBuKSB8ICh0aGlzLmhpZ2ggPDwgKDMyIC0gbikpO1xuXHQgICAgICAgICAgICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggPj4+IG47XG5cdCAgICAgICAgICAgIC8vIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyB2YXIgbG93ID0gdGhpcy5oaWdoID4+PiAobiAtIDMyKTtcblx0ICAgICAgICAgICAgICAgIC8vIHZhciBoaWdoID0gMDtcblx0ICAgICAgICAgICAgLy8gfVxuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSb3RhdGVzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIGxlZnQuXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gcm90YXRlLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHJvdGF0aW5nLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgcm90YXRlZCA9IHg2NFdvcmQucm90TCgyNSk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gcm90TDogZnVuY3Rpb24gKG4pIHtcblx0ICAgICAgICAgICAgLy8gcmV0dXJuIHRoaXMuc2hpZnRMKG4pLm9yKHRoaXMuc2hpZnRSKDY0IC0gbikpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBSb3RhdGVzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIHJpZ2h0LlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHJvdGF0ZS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciByb3RhdGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHJvdGF0ZWQgPSB4NjRXb3JkLnJvdFIoNyk7XG5cdCAgICAgICAgICovXG5cdCAgICAgICAgLy8gcm90UjogZnVuY3Rpb24gKG4pIHtcblx0ICAgICAgICAgICAgLy8gcmV0dXJuIHRoaXMuc2hpZnRSKG4pLm9yKHRoaXMuc2hpZnRMKDY0IC0gbikpO1xuXHQgICAgICAgIC8vIH0sXG5cblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBBZGRzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7WDY0V29yZH0gd29yZCBUaGUgeDY0LVdvcmQgdG8gYWRkIHdpdGggdGhpcyB3b3JkLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIGFkZGluZy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIGFkZGVkID0geDY0V29yZC5hZGQoYW5vdGhlclg2NFdvcmQpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIC8vIGFkZDogZnVuY3Rpb24gKHdvcmQpIHtcblx0ICAgICAgICAgICAgLy8gdmFyIGxvdyA9ICh0aGlzLmxvdyArIHdvcmQubG93KSB8IDA7XG5cdCAgICAgICAgICAgIC8vIHZhciBjYXJyeSA9IChsb3cgPj4+IDApIDwgKHRoaXMubG93ID4+PiAwKSA/IDEgOiAwO1xuXHQgICAgICAgICAgICAvLyB2YXIgaGlnaCA9ICh0aGlzLmhpZ2ggKyB3b3JkLmhpZ2ggKyBjYXJyeSkgfCAwO1xuXG5cdCAgICAgICAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xuXHQgICAgICAgIC8vIH1cblx0ICAgIH0pO1xuXG5cdCAgICAvKipcblx0ICAgICAqIEFuIGFycmF5IG9mIDY0LWJpdCB3b3Jkcy5cblx0ICAgICAqXG5cdCAgICAgKiBAcHJvcGVydHkge0FycmF5fSB3b3JkcyBUaGUgYXJyYXkgb2YgQ3J5cHRvSlMueDY0LldvcmQgb2JqZWN0cy5cblx0ICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaWdCeXRlcyBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAqL1xuXHQgICAgdmFyIFg2NFdvcmRBcnJheSA9IENfeDY0LldvcmRBcnJheSA9IEJhc2UuZXh0ZW5kKHtcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBwYXJhbSB7QXJyYXl9IHdvcmRzIChPcHRpb25hbCkgQW4gYXJyYXkgb2YgQ3J5cHRvSlMueDY0LldvcmQgb2JqZWN0cy5cblx0ICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2lnQnl0ZXMgKE9wdGlvbmFsKSBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoZSB3b3Jkcy5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLng2NC5Xb3JkQXJyYXkuY3JlYXRlKCk7XG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLng2NC5Xb3JkQXJyYXkuY3JlYXRlKFtcblx0ICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDAwMDEwMjAzLCAweDA0MDUwNjA3KSxcblx0ICAgICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDE4MTkxYTFiLCAweDFjMWQxZTFmKVxuXHQgICAgICAgICAqICAgICBdKTtcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMueDY0LldvcmRBcnJheS5jcmVhdGUoW1xuXHQgICAgICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MDAwMTAyMDMsIDB4MDQwNTA2MDcpLFxuXHQgICAgICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MTgxOTFhMWIsIDB4MWMxZDFlMWYpXG5cdCAgICAgICAgICogICAgIF0sIDEwKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpbml0OiBmdW5jdGlvbiAod29yZHMsIHNpZ0J5dGVzKSB7XG5cdCAgICAgICAgICAgIHdvcmRzID0gdGhpcy53b3JkcyA9IHdvcmRzIHx8IFtdO1xuXG5cdCAgICAgICAgICAgIGlmIChzaWdCeXRlcyAhPSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSBzaWdCeXRlcztcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSB3b3Jkcy5sZW5ndGggKiA4O1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENvbnZlcnRzIHRoaXMgNjQtYml0IHdvcmQgYXJyYXkgdG8gYSAzMi1iaXQgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge0NyeXB0b0pTLmxpYi5Xb3JkQXJyYXl9IFRoaXMgd29yZCBhcnJheSdzIGRhdGEgYXMgYSAzMi1iaXQgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBleGFtcGxlXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAgICAgdmFyIHgzMldvcmRBcnJheSA9IHg2NFdvcmRBcnJheS50b1gzMigpO1xuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHRvWDMyOiBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xuXHQgICAgICAgICAgICB2YXIgeDY0V29yZHMgPSB0aGlzLndvcmRzO1xuXHQgICAgICAgICAgICB2YXIgeDY0V29yZHNMZW5ndGggPSB4NjRXb3Jkcy5sZW5ndGg7XG5cblx0ICAgICAgICAgICAgLy8gQ29udmVydFxuXHQgICAgICAgICAgICB2YXIgeDMyV29yZHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4NjRXb3Jkc0xlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgeDY0V29yZCA9IHg2NFdvcmRzW2ldO1xuXHQgICAgICAgICAgICAgICAgeDMyV29yZHMucHVzaCh4NjRXb3JkLmhpZ2gpO1xuXHQgICAgICAgICAgICAgICAgeDMyV29yZHMucHVzaCh4NjRXb3JkLmxvdyk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gWDMyV29yZEFycmF5LmNyZWF0ZSh4MzJXb3JkcywgdGhpcy5zaWdCeXRlcyk7XG5cdCAgICAgICAgfSxcblxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgd29yZCBhcnJheS5cblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEByZXR1cm4ge1g2NFdvcmRBcnJheX0gVGhlIGNsb25lLlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogQGV4YW1wbGVcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqICAgICB2YXIgY2xvbmUgPSB4NjRXb3JkQXJyYXkuY2xvbmUoKTtcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmUgPSBCYXNlLmNsb25lLmNhbGwodGhpcyk7XG5cblx0ICAgICAgICAgICAgLy8gQ2xvbmUgXCJ3b3Jkc1wiIGFycmF5XG5cdCAgICAgICAgICAgIHZhciB3b3JkcyA9IGNsb25lLndvcmRzID0gdGhpcy53b3Jkcy5zbGljZSgwKTtcblxuXHQgICAgICAgICAgICAvLyBDbG9uZSBlYWNoIFg2NFdvcmQgb2JqZWN0XG5cdCAgICAgICAgICAgIHZhciB3b3Jkc0xlbmd0aCA9IHdvcmRzLmxlbmd0aDtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3Jkc0xlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB3b3Jkc1tpXSA9IHdvcmRzW2ldLmNsb25lKCk7XG5cdCAgICAgICAgICAgIH1cblxuXHQgICAgICAgICAgICByZXR1cm4gY2xvbmU7XG5cdCAgICAgICAgfVxuXHQgICAgfSk7XG5cdH0oKSk7XG5cblxuXHRyZXR1cm4gQ3J5cHRvSlM7XG5cbn0pKTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMudXRpbHMgPSByZXF1aXJlKCcuL2Rlcy91dGlscycpO1xuZXhwb3J0cy5DaXBoZXIgPSByZXF1aXJlKCcuL2Rlcy9jaXBoZXInKTtcbmV4cG9ydHMuREVTID0gcmVxdWlyZSgnLi9kZXMvZGVzJyk7XG5leHBvcnRzLkNCQyA9IHJlcXVpcmUoJy4vZGVzL2NiYycpO1xuZXhwb3J0cy5FREUgPSByZXF1aXJlKCcuL2Rlcy9lZGUnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBwcm90byA9IHt9O1xuXG5mdW5jdGlvbiBDQkNTdGF0ZShpdikge1xuICBhc3NlcnQuZXF1YWwoaXYubGVuZ3RoLCA4LCAnSW52YWxpZCBJViBsZW5ndGgnKTtcblxuICB0aGlzLml2ID0gbmV3IEFycmF5KDgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXYubGVuZ3RoOyBpKyspXG4gICAgdGhpcy5pdltpXSA9IGl2W2ldO1xufVxuXG5mdW5jdGlvbiBpbnN0YW50aWF0ZShCYXNlKSB7XG4gIGZ1bmN0aW9uIENCQyhvcHRpb25zKSB7XG4gICAgQmFzZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIHRoaXMuX2NiY0luaXQoKTtcbiAgfVxuICBpbmhlcml0cyhDQkMsIEJhc2UpO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvdG8pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBDQkMucHJvdG90eXBlW2tleV0gPSBwcm90b1trZXldO1xuICB9XG5cbiAgQ0JDLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBDQkMob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIENCQztcbn1cblxuZXhwb3J0cy5pbnN0YW50aWF0ZSA9IGluc3RhbnRpYXRlO1xuXG5wcm90by5fY2JjSW5pdCA9IGZ1bmN0aW9uIF9jYmNJbml0KCkge1xuICB2YXIgc3RhdGUgPSBuZXcgQ0JDU3RhdGUodGhpcy5vcHRpb25zLml2KTtcbiAgdGhpcy5fY2JjU3RhdGUgPSBzdGF0ZTtcbn07XG5cbnByb3RvLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2NiY1N0YXRlO1xuICB2YXIgc3VwZXJQcm90byA9IHRoaXMuY29uc3RydWN0b3Iuc3VwZXJfLnByb3RvdHlwZTtcblxuICB2YXIgaXYgPSBzdGF0ZS5pdjtcbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gXj0gaW5wW2luT2ZmICsgaV07XG5cbiAgICBzdXBlclByb3RvLl91cGRhdGUuY2FsbCh0aGlzLCBpdiwgMCwgb3V0LCBvdXRPZmYpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gPSBvdXRbb3V0T2ZmICsgaV07XG4gIH0gZWxzZSB7XG4gICAgc3VwZXJQcm90by5fdXBkYXRlLmNhbGwodGhpcywgaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgb3V0W291dE9mZiArIGldIF49IGl2W2ldO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgaSsrKVxuICAgICAgaXZbaV0gPSBpbnBbaW5PZmYgKyBpXTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gQ2lwaGVyKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICB0aGlzLnR5cGUgPSB0aGlzLm9wdGlvbnMudHlwZTtcbiAgdGhpcy5ibG9ja1NpemUgPSA4O1xuICB0aGlzLl9pbml0KCk7XG5cbiAgdGhpcy5idWZmZXIgPSBuZXcgQXJyYXkodGhpcy5ibG9ja1NpemUpO1xuICB0aGlzLmJ1ZmZlck9mZiA9IDA7XG59XG5tb2R1bGUuZXhwb3J0cyA9IENpcGhlcjtcblxuQ2lwaGVyLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIF9pbml0KCkge1xuICAvLyBNaWdodCBiZSBvdmVycmlkZWRcbn07XG5cbkNpcGhlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKGRhdGEpIHtcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodGhpcy50eXBlID09PSAnZGVjcnlwdCcpXG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZURlY3J5cHQoZGF0YSk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fdXBkYXRlRW5jcnlwdChkYXRhKTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2J1ZmZlciA9IGZ1bmN0aW9uIF9idWZmZXIoZGF0YSwgb2ZmKSB7XG4gIC8vIEFwcGVuZCBkYXRhIHRvIGJ1ZmZlclxuICB2YXIgbWluID0gTWF0aC5taW4odGhpcy5idWZmZXIubGVuZ3RoIC0gdGhpcy5idWZmZXJPZmYsIGRhdGEubGVuZ3RoIC0gb2ZmKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaW47IGkrKylcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlck9mZiArIGldID0gZGF0YVtvZmYgKyBpXTtcbiAgdGhpcy5idWZmZXJPZmYgKz0gbWluO1xuXG4gIC8vIFNoaWZ0IG5leHRcbiAgcmV0dXJuIG1pbjtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX2ZsdXNoQnVmZmVyID0gZnVuY3Rpb24gX2ZsdXNoQnVmZmVyKG91dCwgb2ZmKSB7XG4gIHRoaXMuX3VwZGF0ZSh0aGlzLmJ1ZmZlciwgMCwgb3V0LCBvZmYpO1xuICB0aGlzLmJ1ZmZlck9mZiA9IDA7XG4gIHJldHVybiB0aGlzLmJsb2NrU2l6ZTtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZUVuY3J5cHQgPSBmdW5jdGlvbiBfdXBkYXRlRW5jcnlwdChkYXRhKSB7XG4gIHZhciBpbnB1dE9mZiA9IDA7XG4gIHZhciBvdXRwdXRPZmYgPSAwO1xuXG4gIHZhciBjb3VudCA9ICgodGhpcy5idWZmZXJPZmYgKyBkYXRhLmxlbmd0aCkgLyB0aGlzLmJsb2NrU2l6ZSkgfCAwO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KGNvdW50ICogdGhpcy5ibG9ja1NpemUpO1xuXG4gIGlmICh0aGlzLmJ1ZmZlck9mZiAhPT0gMCkge1xuICAgIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG5cbiAgICBpZiAodGhpcy5idWZmZXJPZmYgPT09IHRoaXMuYnVmZmVyLmxlbmd0aClcbiAgICAgIG91dHB1dE9mZiArPSB0aGlzLl9mbHVzaEJ1ZmZlcihvdXQsIG91dHB1dE9mZik7XG4gIH1cblxuICAvLyBXcml0ZSBibG9ja3NcbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoIC0gKChkYXRhLmxlbmd0aCAtIGlucHV0T2ZmKSAlIHRoaXMuYmxvY2tTaXplKTtcbiAgZm9yICg7IGlucHV0T2ZmIDwgbWF4OyBpbnB1dE9mZiArPSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgIHRoaXMuX3VwZGF0ZShkYXRhLCBpbnB1dE9mZiwgb3V0LCBvdXRwdXRPZmYpO1xuICAgIG91dHB1dE9mZiArPSB0aGlzLmJsb2NrU2l6ZTtcbiAgfVxuXG4gIC8vIFF1ZXVlIHJlc3RcbiAgZm9yICg7IGlucHV0T2ZmIDwgZGF0YS5sZW5ndGg7IGlucHV0T2ZmKyssIHRoaXMuYnVmZmVyT2ZmKyspXG4gICAgdGhpcy5idWZmZXJbdGhpcy5idWZmZXJPZmZdID0gZGF0YVtpbnB1dE9mZl07XG5cbiAgcmV0dXJuIG91dDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3VwZGF0ZURlY3J5cHQgPSBmdW5jdGlvbiBfdXBkYXRlRGVjcnlwdChkYXRhKSB7XG4gIHZhciBpbnB1dE9mZiA9IDA7XG4gIHZhciBvdXRwdXRPZmYgPSAwO1xuXG4gIHZhciBjb3VudCA9IE1hdGguY2VpbCgodGhpcy5idWZmZXJPZmYgKyBkYXRhLmxlbmd0aCkgLyB0aGlzLmJsb2NrU2l6ZSkgLSAxO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KGNvdW50ICogdGhpcy5ibG9ja1NpemUpO1xuXG4gIC8vIFRPRE8oaW5kdXRueSk6IG9wdGltaXplIGl0LCB0aGlzIGlzIGZhciBmcm9tIG9wdGltYWxcbiAgZm9yICg7IGNvdW50ID4gMDsgY291bnQtLSkge1xuICAgIGlucHV0T2ZmICs9IHRoaXMuX2J1ZmZlcihkYXRhLCBpbnB1dE9mZik7XG4gICAgb3V0cHV0T2ZmICs9IHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgb3V0cHV0T2ZmKTtcbiAgfVxuXG4gIC8vIEJ1ZmZlciByZXN0IG9mIHRoZSBpbnB1dFxuICBpbnB1dE9mZiArPSB0aGlzLl9idWZmZXIoZGF0YSwgaW5wdXRPZmYpO1xuXG4gIHJldHVybiBvdXQ7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLmZpbmFsID0gZnVuY3Rpb24gZmluYWwoYnVmZmVyKSB7XG4gIHZhciBmaXJzdDtcbiAgaWYgKGJ1ZmZlcilcbiAgICBmaXJzdCA9IHRoaXMudXBkYXRlKGJ1ZmZlcik7XG5cbiAgdmFyIGxhc3Q7XG4gIGlmICh0aGlzLnR5cGUgPT09ICdlbmNyeXB0JylcbiAgICBsYXN0ID0gdGhpcy5fZmluYWxFbmNyeXB0KCk7XG4gIGVsc2VcbiAgICBsYXN0ID0gdGhpcy5fZmluYWxEZWNyeXB0KCk7XG5cbiAgaWYgKGZpcnN0KVxuICAgIHJldHVybiBmaXJzdC5jb25jYXQobGFzdCk7XG4gIGVsc2VcbiAgICByZXR1cm4gbGFzdDtcbn07XG5cbkNpcGhlci5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIF9wYWQoYnVmZmVyLCBvZmYpIHtcbiAgaWYgKG9mZiA9PT0gMClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgd2hpbGUgKG9mZiA8IGJ1ZmZlci5sZW5ndGgpXG4gICAgYnVmZmVyW29mZisrXSA9IDA7XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl9maW5hbEVuY3J5cHQgPSBmdW5jdGlvbiBfZmluYWxFbmNyeXB0KCkge1xuICBpZiAoIXRoaXMuX3BhZCh0aGlzLmJ1ZmZlciwgdGhpcy5idWZmZXJPZmYpKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgb3V0ID0gbmV3IEFycmF5KHRoaXMuYmxvY2tTaXplKTtcbiAgdGhpcy5fdXBkYXRlKHRoaXMuYnVmZmVyLCAwLCBvdXQsIDApO1xuICByZXR1cm4gb3V0O1xufTtcblxuQ2lwaGVyLnByb3RvdHlwZS5fdW5wYWQgPSBmdW5jdGlvbiBfdW5wYWQoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG5DaXBoZXIucHJvdG90eXBlLl9maW5hbERlY3J5cHQgPSBmdW5jdGlvbiBfZmluYWxEZWNyeXB0KCkge1xuICBhc3NlcnQuZXF1YWwodGhpcy5idWZmZXJPZmYsIHRoaXMuYmxvY2tTaXplLCAnTm90IGVub3VnaCBkYXRhIHRvIGRlY3J5cHQnKTtcbiAgdmFyIG91dCA9IG5ldyBBcnJheSh0aGlzLmJsb2NrU2l6ZSk7XG4gIHRoaXMuX2ZsdXNoQnVmZmVyKG91dCwgMCk7XG5cbiAgcmV0dXJuIHRoaXMuX3VucGFkKG91dCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxudmFyIGRlcyA9IHJlcXVpcmUoJy4uL2RlcycpO1xudmFyIHV0aWxzID0gZGVzLnV0aWxzO1xudmFyIENpcGhlciA9IGRlcy5DaXBoZXI7XG5cbmZ1bmN0aW9uIERFU1N0YXRlKCkge1xuICB0aGlzLnRtcCA9IG5ldyBBcnJheSgyKTtcbiAgdGhpcy5rZXlzID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gREVTKG9wdGlvbnMpIHtcbiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHN0YXRlID0gbmV3IERFU1N0YXRlKCk7XG4gIHRoaXMuX2Rlc1N0YXRlID0gc3RhdGU7XG5cbiAgdGhpcy5kZXJpdmVLZXlzKHN0YXRlLCBvcHRpb25zLmtleSk7XG59XG5pbmhlcml0cyhERVMsIENpcGhlcik7XG5tb2R1bGUuZXhwb3J0cyA9IERFUztcblxuREVTLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgREVTKG9wdGlvbnMpO1xufTtcblxudmFyIHNoaWZ0VGFibGUgPSBbXG4gIDEsIDEsIDIsIDIsIDIsIDIsIDIsIDIsXG4gIDEsIDIsIDIsIDIsIDIsIDIsIDIsIDFcbl07XG5cbkRFUy5wcm90b3R5cGUuZGVyaXZlS2V5cyA9IGZ1bmN0aW9uIGRlcml2ZUtleXMoc3RhdGUsIGtleSkge1xuICBzdGF0ZS5rZXlzID0gbmV3IEFycmF5KDE2ICogMik7XG5cbiAgYXNzZXJ0LmVxdWFsKGtleS5sZW5ndGgsIHRoaXMuYmxvY2tTaXplLCAnSW52YWxpZCBrZXkgbGVuZ3RoJyk7XG5cbiAgdmFyIGtMID0gdXRpbHMucmVhZFVJbnQzMkJFKGtleSwgMCk7XG4gIHZhciBrUiA9IHV0aWxzLnJlYWRVSW50MzJCRShrZXksIDQpO1xuXG4gIHV0aWxzLnBjMShrTCwga1IsIHN0YXRlLnRtcCwgMCk7XG4gIGtMID0gc3RhdGUudG1wWzBdO1xuICBrUiA9IHN0YXRlLnRtcFsxXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5rZXlzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIHNoaWZ0ID0gc2hpZnRUYWJsZVtpID4+PiAxXTtcbiAgICBrTCA9IHV0aWxzLnIyOHNobChrTCwgc2hpZnQpO1xuICAgIGtSID0gdXRpbHMucjI4c2hsKGtSLCBzaGlmdCk7XG4gICAgdXRpbHMucGMyKGtMLCBrUiwgc3RhdGUua2V5cywgaSk7XG4gIH1cbn07XG5cbkRFUy5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIF91cGRhdGUoaW5wLCBpbk9mZiwgb3V0LCBvdXRPZmYpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fZGVzU3RhdGU7XG5cbiAgdmFyIGwgPSB1dGlscy5yZWFkVUludDMyQkUoaW5wLCBpbk9mZik7XG4gIHZhciByID0gdXRpbHMucmVhZFVJbnQzMkJFKGlucCwgaW5PZmYgKyA0KTtcblxuICAvLyBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLmlwKGwsIHIsIHN0YXRlLnRtcCwgMCk7XG4gIGwgPSBzdGF0ZS50bXBbMF07XG4gIHIgPSBzdGF0ZS50bXBbMV07XG5cbiAgaWYgKHRoaXMudHlwZSA9PT0gJ2VuY3J5cHQnKVxuICAgIHRoaXMuX2VuY3J5cHQoc3RhdGUsIGwsIHIsIHN0YXRlLnRtcCwgMCk7XG4gIGVsc2VcbiAgICB0aGlzLl9kZWNyeXB0KHN0YXRlLCBsLCByLCBzdGF0ZS50bXAsIDApO1xuXG4gIGwgPSBzdGF0ZS50bXBbMF07XG4gIHIgPSBzdGF0ZS50bXBbMV07XG5cbiAgdXRpbHMud3JpdGVVSW50MzJCRShvdXQsIGwsIG91dE9mZik7XG4gIHV0aWxzLndyaXRlVUludDMyQkUob3V0LCByLCBvdXRPZmYgKyA0KTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX3BhZCA9IGZ1bmN0aW9uIF9wYWQoYnVmZmVyLCBvZmYpIHtcbiAgdmFyIHZhbHVlID0gYnVmZmVyLmxlbmd0aCAtIG9mZjtcbiAgZm9yICh2YXIgaSA9IG9mZjsgaSA8IGJ1ZmZlci5sZW5ndGg7IGkrKylcbiAgICBidWZmZXJbaV0gPSB2YWx1ZTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkRFUy5wcm90b3R5cGUuX3VucGFkID0gZnVuY3Rpb24gX3VucGFkKGJ1ZmZlcikge1xuICB2YXIgcGFkID0gYnVmZmVyW2J1ZmZlci5sZW5ndGggLSAxXTtcbiAgZm9yICh2YXIgaSA9IGJ1ZmZlci5sZW5ndGggLSBwYWQ7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspXG4gICAgYXNzZXJ0LmVxdWFsKGJ1ZmZlcltpXSwgcGFkKTtcblxuICByZXR1cm4gYnVmZmVyLnNsaWNlKDAsIGJ1ZmZlci5sZW5ndGggLSBwYWQpO1xufTtcblxuREVTLnByb3RvdHlwZS5fZW5jcnlwdCA9IGZ1bmN0aW9uIF9lbmNyeXB0KHN0YXRlLCBsU3RhcnQsIHJTdGFydCwgb3V0LCBvZmYpIHtcbiAgdmFyIGwgPSBsU3RhcnQ7XG4gIHZhciByID0gclN0YXJ0O1xuXG4gIC8vIEFwcGx5IGYoKSB4MTYgdGltZXNcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5rZXlzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleUwgPSBzdGF0ZS5rZXlzW2ldO1xuICAgIHZhciBrZXlSID0gc3RhdGUua2V5c1tpICsgMV07XG5cbiAgICAvLyBmKHIsIGspXG4gICAgdXRpbHMuZXhwYW5kKHIsIHN0YXRlLnRtcCwgMCk7XG5cbiAgICBrZXlMIF49IHN0YXRlLnRtcFswXTtcbiAgICBrZXlSIF49IHN0YXRlLnRtcFsxXTtcbiAgICB2YXIgcyA9IHV0aWxzLnN1YnN0aXR1dGUoa2V5TCwga2V5Uik7XG4gICAgdmFyIGYgPSB1dGlscy5wZXJtdXRlKHMpO1xuXG4gICAgdmFyIHQgPSByO1xuICAgIHIgPSAobCBeIGYpID4+PiAwO1xuICAgIGwgPSB0O1xuICB9XG5cbiAgLy8gUmV2ZXJzZSBJbml0aWFsIFBlcm11dGF0aW9uXG4gIHV0aWxzLnJpcChyLCBsLCBvdXQsIG9mZik7XG59O1xuXG5ERVMucHJvdG90eXBlLl9kZWNyeXB0ID0gZnVuY3Rpb24gX2RlY3J5cHQoc3RhdGUsIGxTdGFydCwgclN0YXJ0LCBvdXQsIG9mZikge1xuICB2YXIgbCA9IHJTdGFydDtcbiAgdmFyIHIgPSBsU3RhcnQ7XG5cbiAgLy8gQXBwbHkgZigpIHgxNiB0aW1lc1xuICBmb3IgKHZhciBpID0gc3RhdGUua2V5cy5sZW5ndGggLSAyOyBpID49IDA7IGkgLT0gMikge1xuICAgIHZhciBrZXlMID0gc3RhdGUua2V5c1tpXTtcbiAgICB2YXIga2V5UiA9IHN0YXRlLmtleXNbaSArIDFdO1xuXG4gICAgLy8gZihyLCBrKVxuICAgIHV0aWxzLmV4cGFuZChsLCBzdGF0ZS50bXAsIDApO1xuXG4gICAga2V5TCBePSBzdGF0ZS50bXBbMF07XG4gICAga2V5UiBePSBzdGF0ZS50bXBbMV07XG4gICAgdmFyIHMgPSB1dGlscy5zdWJzdGl0dXRlKGtleUwsIGtleVIpO1xuICAgIHZhciBmID0gdXRpbHMucGVybXV0ZShzKTtcblxuICAgIHZhciB0ID0gbDtcbiAgICBsID0gKHIgXiBmKSA+Pj4gMDtcbiAgICByID0gdDtcbiAgfVxuXG4gIC8vIFJldmVyc2UgSW5pdGlhbCBQZXJtdXRhdGlvblxuICB1dGlscy5yaXAobCwgciwgb3V0LCBvZmYpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbnZhciBkZXMgPSByZXF1aXJlKCcuLi9kZXMnKTtcbnZhciBDaXBoZXIgPSBkZXMuQ2lwaGVyO1xudmFyIERFUyA9IGRlcy5ERVM7XG5cbmZ1bmN0aW9uIEVERVN0YXRlKHR5cGUsIGtleSkge1xuICBhc3NlcnQuZXF1YWwoa2V5Lmxlbmd0aCwgMjQsICdJbnZhbGlkIGtleSBsZW5ndGgnKTtcblxuICB2YXIgazEgPSBrZXkuc2xpY2UoMCwgOCk7XG4gIHZhciBrMiA9IGtleS5zbGljZSg4LCAxNik7XG4gIHZhciBrMyA9IGtleS5zbGljZSgxNiwgMjQpO1xuXG4gIGlmICh0eXBlID09PSAnZW5jcnlwdCcpIHtcbiAgICB0aGlzLmNpcGhlcnMgPSBbXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsxIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMiB9KSxcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZW5jcnlwdCcsIGtleTogazMgfSlcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuY2lwaGVycyA9IFtcbiAgICAgIERFUy5jcmVhdGUoeyB0eXBlOiAnZGVjcnlwdCcsIGtleTogazMgfSksXG4gICAgICBERVMuY3JlYXRlKHsgdHlwZTogJ2VuY3J5cHQnLCBrZXk6IGsyIH0pLFxuICAgICAgREVTLmNyZWF0ZSh7IHR5cGU6ICdkZWNyeXB0Jywga2V5OiBrMSB9KVxuICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRURFKG9wdGlvbnMpIHtcbiAgQ2lwaGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHN0YXRlID0gbmV3IEVERVN0YXRlKHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLmtleSk7XG4gIHRoaXMuX2VkZVN0YXRlID0gc3RhdGU7XG59XG5pbmhlcml0cyhFREUsIENpcGhlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gRURFO1xuXG5FREUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBFREUob3B0aW9ucyk7XG59O1xuXG5FREUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKGlucCwgaW5PZmYsIG91dCwgb3V0T2ZmKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX2VkZVN0YXRlO1xuXG4gIHN0YXRlLmNpcGhlcnNbMF0uX3VwZGF0ZShpbnAsIGluT2ZmLCBvdXQsIG91dE9mZik7XG4gIHN0YXRlLmNpcGhlcnNbMV0uX3VwZGF0ZShvdXQsIG91dE9mZiwgb3V0LCBvdXRPZmYpO1xuICBzdGF0ZS5jaXBoZXJzWzJdLl91cGRhdGUob3V0LCBvdXRPZmYsIG91dCwgb3V0T2ZmKTtcbn07XG5cbkVERS5wcm90b3R5cGUuX3BhZCA9IERFUy5wcm90b3R5cGUuX3BhZDtcbkVERS5wcm90b3R5cGUuX3VucGFkID0gREVTLnByb3RvdHlwZS5fdW5wYWQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFKGJ5dGVzLCBvZmYpIHtcbiAgdmFyIHJlcyA9ICAoYnl0ZXNbMCArIG9mZl0gPDwgMjQpIHxcbiAgICAgICAgICAgICAoYnl0ZXNbMSArIG9mZl0gPDwgMTYpIHxcbiAgICAgICAgICAgICAoYnl0ZXNbMiArIG9mZl0gPDwgOCkgfFxuICAgICAgICAgICAgIGJ5dGVzWzMgKyBvZmZdO1xuICByZXR1cm4gcmVzID4+PiAwO1xufTtcblxuZXhwb3J0cy53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRShieXRlcywgdmFsdWUsIG9mZikge1xuICBieXRlc1swICsgb2ZmXSA9IHZhbHVlID4+PiAyNDtcbiAgYnl0ZXNbMSArIG9mZl0gPSAodmFsdWUgPj4+IDE2KSAmIDB4ZmY7XG4gIGJ5dGVzWzIgKyBvZmZdID0gKHZhbHVlID4+PiA4KSAmIDB4ZmY7XG4gIGJ5dGVzWzMgKyBvZmZdID0gdmFsdWUgJiAweGZmO1xufTtcblxuZXhwb3J0cy5pcCA9IGZ1bmN0aW9uIGlwKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICBmb3IgKHZhciBpID0gNjsgaSA+PSAwOyBpIC09IDIpIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRMIDw8PSAxO1xuICAgICAgb3V0TCB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gNjsgaSA+PSAwOyBpIC09IDIpIHtcbiAgICBmb3IgKHZhciBqID0gMTsgaiA8PSAyNTsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAxOyBqIDw9IDI1OyBqICs9IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5yaXAgPSBmdW5jdGlvbiByaXAoaW5MLCBpblIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgZm9yICh2YXIgaiA9IDI0OyBqID49IDA7IGogLT0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+Pj4gKGogKyBpKSkgJiAxO1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluTCA+Pj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBpID0gNDsgaSA8IDg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpblIgPj4+IChqICsgaSkpICYgMTtcbiAgICAgIG91dFIgPDw9IDE7XG4gICAgICBvdXRSIHw9IChpbkwgPj4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5wYzEgPSBmdW5jdGlvbiBwYzEoaW5MLCBpblIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIC8vIDcsIDE1LCAyMywgMzEsIDM5LCA0NywgNTUsIDYzXG4gIC8vIDYsIDE0LCAyMiwgMzAsIDM5LCA0NywgNTUsIDYzXG4gIC8vIDUsIDEzLCAyMSwgMjksIDM5LCA0NywgNTUsIDYzXG4gIC8vIDQsIDEyLCAyMCwgMjhcbiAgZm9yICh2YXIgaSA9IDc7IGkgPj0gNTsgaS0tKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0TCA8PD0gMTtcbiAgICAgIG91dEwgfD0gKGluUiA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICAgIG91dEwgPDw9IDE7XG4gICAgICBvdXRMIHw9IChpbkwgPj4gKGogKyBpKSkgJiAxO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgb3V0TCA8PD0gMTtcbiAgICBvdXRMIHw9IChpblIgPj4gKGogKyBpKSkgJiAxO1xuICB9XG5cbiAgLy8gMSwgOSwgMTcsIDI1LCAzMywgNDEsIDQ5LCA1N1xuICAvLyAyLCAxMCwgMTgsIDI2LCAzNCwgNDIsIDUwLCA1OFxuICAvLyAzLCAxMSwgMTksIDI3LCAzNSwgNDMsIDUxLCA1OVxuICAvLyAzNiwgNDQsIDUyLCA2MFxuICBmb3IgKHZhciBpID0gMTsgaSA8PSAzOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSAyNDsgaiArPSA4KSB7XG4gICAgICBvdXRSIDw8PSAxO1xuICAgICAgb3V0UiB8PSAoaW5SID4+IChqICsgaSkpICYgMTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPD0gMjQ7IGogKz0gOCkge1xuICAgICAgb3V0UiA8PD0gMTtcbiAgICAgIG91dFIgfD0gKGluTCA+PiAoaiArIGkpKSAmIDE7XG4gICAgfVxuICB9XG4gIGZvciAodmFyIGogPSAwOyBqIDw9IDI0OyBqICs9IDgpIHtcbiAgICBvdXRSIDw8PSAxO1xuICAgIG91dFIgfD0gKGluTCA+PiAoaiArIGkpKSAmIDE7XG4gIH1cblxuICBvdXRbb2ZmICsgMF0gPSBvdXRMID4+PiAwO1xuICBvdXRbb2ZmICsgMV0gPSBvdXRSID4+PiAwO1xufTtcblxuZXhwb3J0cy5yMjhzaGwgPSBmdW5jdGlvbiByMjhzaGwobnVtLCBzaGlmdCkge1xuICByZXR1cm4gKChudW0gPDwgc2hpZnQpICYgMHhmZmZmZmZmKSB8IChudW0gPj4+ICgyOCAtIHNoaWZ0KSk7XG59O1xuXG52YXIgcGMydGFibGUgPSBbXG4gIC8vIGluTCA9PiBvdXRMXG4gIDE0LCAxMSwgMTcsIDQsIDI3LCAyMywgMjUsIDAsXG4gIDEzLCAyMiwgNywgMTgsIDUsIDksIDE2LCAyNCxcbiAgMiwgMjAsIDEyLCAyMSwgMSwgOCwgMTUsIDI2LFxuXG4gIC8vIGluUiA9PiBvdXRSXG4gIDE1LCA0LCAyNSwgMTksIDksIDEsIDI2LCAxNixcbiAgNSwgMTEsIDIzLCA4LCAxMiwgNywgMTcsIDAsXG4gIDIyLCAzLCAxMCwgMTQsIDYsIDIwLCAyNywgMjRcbl07XG5cbmV4cG9ydHMucGMyID0gZnVuY3Rpb24gcGMyKGluTCwgaW5SLCBvdXQsIG9mZikge1xuICB2YXIgb3V0TCA9IDA7XG4gIHZhciBvdXRSID0gMDtcblxuICB2YXIgbGVuID0gcGMydGFibGUubGVuZ3RoID4+PiAxO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgb3V0TCA8PD0gMTtcbiAgICBvdXRMIHw9IChpbkwgPj4+IHBjMnRhYmxlW2ldKSAmIDB4MTtcbiAgfVxuICBmb3IgKHZhciBpID0gbGVuOyBpIDwgcGMydGFibGUubGVuZ3RoOyBpKyspIHtcbiAgICBvdXRSIDw8PSAxO1xuICAgIG91dFIgfD0gKGluUiA+Pj4gcGMydGFibGVbaV0pICYgMHgxO1xuICB9XG5cbiAgb3V0W29mZiArIDBdID0gb3V0TCA+Pj4gMDtcbiAgb3V0W29mZiArIDFdID0gb3V0UiA+Pj4gMDtcbn07XG5cbmV4cG9ydHMuZXhwYW5kID0gZnVuY3Rpb24gZXhwYW5kKHIsIG91dCwgb2ZmKSB7XG4gIHZhciBvdXRMID0gMDtcbiAgdmFyIG91dFIgPSAwO1xuXG4gIG91dEwgPSAoKHIgJiAxKSA8PCA1KSB8IChyID4+PiAyNyk7XG4gIGZvciAodmFyIGkgPSAyMzsgaSA+PSAxNTsgaSAtPSA0KSB7XG4gICAgb3V0TCA8PD0gNjtcbiAgICBvdXRMIHw9IChyID4+PiBpKSAmIDB4M2Y7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDExOyBpID49IDM7IGkgLT0gNCkge1xuICAgIG91dFIgfD0gKHIgPj4+IGkpICYgMHgzZjtcbiAgICBvdXRSIDw8PSA2O1xuICB9XG4gIG91dFIgfD0gKChyICYgMHgxZikgPDwgMSkgfCAociA+Pj4gMzEpO1xuXG4gIG91dFtvZmYgKyAwXSA9IG91dEwgPj4+IDA7XG4gIG91dFtvZmYgKyAxXSA9IG91dFIgPj4+IDA7XG59O1xuXG52YXIgc1RhYmxlID0gW1xuICAxNCwgMCwgNCwgMTUsIDEzLCA3LCAxLCA0LCAyLCAxNCwgMTUsIDIsIDExLCAxMywgOCwgMSxcbiAgMywgMTAsIDEwLCA2LCA2LCAxMiwgMTIsIDExLCA1LCA5LCA5LCA1LCAwLCAzLCA3LCA4LFxuICA0LCAxNSwgMSwgMTIsIDE0LCA4LCA4LCAyLCAxMywgNCwgNiwgOSwgMiwgMSwgMTEsIDcsXG4gIDE1LCA1LCAxMiwgMTEsIDksIDMsIDcsIDE0LCAzLCAxMCwgMTAsIDAsIDUsIDYsIDAsIDEzLFxuXG4gIDE1LCAzLCAxLCAxMywgOCwgNCwgMTQsIDcsIDYsIDE1LCAxMSwgMiwgMywgOCwgNCwgMTQsXG4gIDksIDEyLCA3LCAwLCAyLCAxLCAxMywgMTAsIDEyLCA2LCAwLCA5LCA1LCAxMSwgMTAsIDUsXG4gIDAsIDEzLCAxNCwgOCwgNywgMTAsIDExLCAxLCAxMCwgMywgNCwgMTUsIDEzLCA0LCAxLCAyLFxuICA1LCAxMSwgOCwgNiwgMTIsIDcsIDYsIDEyLCA5LCAwLCAzLCA1LCAyLCAxNCwgMTUsIDksXG5cbiAgMTAsIDEzLCAwLCA3LCA5LCAwLCAxNCwgOSwgNiwgMywgMywgNCwgMTUsIDYsIDUsIDEwLFxuICAxLCAyLCAxMywgOCwgMTIsIDUsIDcsIDE0LCAxMSwgMTIsIDQsIDExLCAyLCAxNSwgOCwgMSxcbiAgMTMsIDEsIDYsIDEwLCA0LCAxMywgOSwgMCwgOCwgNiwgMTUsIDksIDMsIDgsIDAsIDcsXG4gIDExLCA0LCAxLCAxNSwgMiwgMTQsIDEyLCAzLCA1LCAxMSwgMTAsIDUsIDE0LCAyLCA3LCAxMixcblxuICA3LCAxMywgMTMsIDgsIDE0LCAxMSwgMywgNSwgMCwgNiwgNiwgMTUsIDksIDAsIDEwLCAzLFxuICAxLCA0LCAyLCA3LCA4LCAyLCA1LCAxMiwgMTEsIDEsIDEyLCAxMCwgNCwgMTQsIDE1LCA5LFxuICAxMCwgMywgNiwgMTUsIDksIDAsIDAsIDYsIDEyLCAxMCwgMTEsIDEsIDcsIDEzLCAxMywgOCxcbiAgMTUsIDksIDEsIDQsIDMsIDUsIDE0LCAxMSwgNSwgMTIsIDIsIDcsIDgsIDIsIDQsIDE0LFxuXG4gIDIsIDE0LCAxMiwgMTEsIDQsIDIsIDEsIDEyLCA3LCA0LCAxMCwgNywgMTEsIDEzLCA2LCAxLFxuICA4LCA1LCA1LCAwLCAzLCAxNSwgMTUsIDEwLCAxMywgMywgMCwgOSwgMTQsIDgsIDksIDYsXG4gIDQsIDExLCAyLCA4LCAxLCAxMiwgMTEsIDcsIDEwLCAxLCAxMywgMTQsIDcsIDIsIDgsIDEzLFxuICAxNSwgNiwgOSwgMTUsIDEyLCAwLCA1LCA5LCA2LCAxMCwgMywgNCwgMCwgNSwgMTQsIDMsXG5cbiAgMTIsIDEwLCAxLCAxNSwgMTAsIDQsIDE1LCAyLCA5LCA3LCAyLCAxMiwgNiwgOSwgOCwgNSxcbiAgMCwgNiwgMTMsIDEsIDMsIDEzLCA0LCAxNCwgMTQsIDAsIDcsIDExLCA1LCAzLCAxMSwgOCxcbiAgOSwgNCwgMTQsIDMsIDE1LCAyLCA1LCAxMiwgMiwgOSwgOCwgNSwgMTIsIDE1LCAzLCAxMCxcbiAgNywgMTEsIDAsIDE0LCA0LCAxLCAxMCwgNywgMSwgNiwgMTMsIDAsIDExLCA4LCA2LCAxMyxcblxuICA0LCAxMywgMTEsIDAsIDIsIDExLCAxNCwgNywgMTUsIDQsIDAsIDksIDgsIDEsIDEzLCAxMCxcbiAgMywgMTQsIDEyLCAzLCA5LCA1LCA3LCAxMiwgNSwgMiwgMTAsIDE1LCA2LCA4LCAxLCA2LFxuICAxLCA2LCA0LCAxMSwgMTEsIDEzLCAxMywgOCwgMTIsIDEsIDMsIDQsIDcsIDEwLCAxNCwgNyxcbiAgMTAsIDksIDE1LCA1LCA2LCAwLCA4LCAxNSwgMCwgMTQsIDUsIDIsIDksIDMsIDIsIDEyLFxuXG4gIDEzLCAxLCAyLCAxNSwgOCwgMTMsIDQsIDgsIDYsIDEwLCAxNSwgMywgMTEsIDcsIDEsIDQsXG4gIDEwLCAxMiwgOSwgNSwgMywgNiwgMTQsIDExLCA1LCAwLCAwLCAxNCwgMTIsIDksIDcsIDIsXG4gIDcsIDIsIDExLCAxLCA0LCAxNCwgMSwgNywgOSwgNCwgMTIsIDEwLCAxNCwgOCwgMiwgMTMsXG4gIDAsIDE1LCA2LCAxMiwgMTAsIDksIDEzLCAwLCAxNSwgMywgMywgNSwgNSwgNiwgOCwgMTFcbl07XG5cbmV4cG9ydHMuc3Vic3RpdHV0ZSA9IGZ1bmN0aW9uIHN1YnN0aXR1dGUoaW5MLCBpblIpIHtcbiAgdmFyIG91dCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgdmFyIGIgPSAoaW5MID4+PiAoMTggLSBpICogNikpICYgMHgzZjtcbiAgICB2YXIgc2IgPSBzVGFibGVbaSAqIDB4NDAgKyBiXTtcblxuICAgIG91dCA8PD0gNDtcbiAgICBvdXQgfD0gc2I7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgYiA9IChpblIgPj4+ICgxOCAtIGkgKiA2KSkgJiAweDNmO1xuICAgIHZhciBzYiA9IHNUYWJsZVs0ICogMHg0MCArIGkgKiAweDQwICsgYl07XG5cbiAgICBvdXQgPDw9IDQ7XG4gICAgb3V0IHw9IHNiO1xuICB9XG4gIHJldHVybiBvdXQgPj4+IDA7XG59O1xuXG52YXIgcGVybXV0ZVRhYmxlID0gW1xuICAxNiwgMjUsIDEyLCAxMSwgMywgMjAsIDQsIDE1LCAzMSwgMTcsIDksIDYsIDI3LCAxNCwgMSwgMjIsXG4gIDMwLCAyNCwgOCwgMTgsIDAsIDUsIDI5LCAyMywgMTMsIDE5LCAyLCAyNiwgMTAsIDIxLCAyOCwgN1xuXTtcblxuZXhwb3J0cy5wZXJtdXRlID0gZnVuY3Rpb24gcGVybXV0ZShudW0pIHtcbiAgdmFyIG91dCA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGVybXV0ZVRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0IDw8PSAxO1xuICAgIG91dCB8PSAobnVtID4+PiBwZXJtdXRlVGFibGVbaV0pICYgMHgxO1xuICB9XG4gIHJldHVybiBvdXQgPj4+IDA7XG59O1xuXG5leHBvcnRzLnBhZFNwbGl0ID0gZnVuY3Rpb24gcGFkU3BsaXQobnVtLCBzaXplLCBncm91cCkge1xuICB2YXIgc3RyID0gbnVtLnRvU3RyaW5nKDIpO1xuICB3aGlsZSAoc3RyLmxlbmd0aCA8IHNpemUpXG4gICAgc3RyID0gJzAnICsgc3RyO1xuXG4gIHZhciBvdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpICs9IGdyb3VwKVxuICAgIG91dC5wdXNoKHN0ci5zbGljZShpLCBpICsgZ3JvdXApKTtcbiAgcmV0dXJuIG91dC5qb2luKCcgJyk7XG59O1xuIiwidmFyIGdlbmVyYXRlUHJpbWUgPSByZXF1aXJlKCcuL2xpYi9nZW5lcmF0ZVByaW1lJylcbnZhciBwcmltZXMgPSByZXF1aXJlKCcuL2xpYi9wcmltZXMuanNvbicpXG5cbnZhciBESCA9IHJlcXVpcmUoJy4vbGliL2RoJylcblxuZnVuY3Rpb24gZ2V0RGlmZmllSGVsbG1hbiAobW9kKSB7XG4gIHZhciBwcmltZSA9IG5ldyBCdWZmZXIocHJpbWVzW21vZF0ucHJpbWUsICdoZXgnKVxuICB2YXIgZ2VuID0gbmV3IEJ1ZmZlcihwcmltZXNbbW9kXS5nZW4sICdoZXgnKVxuXG4gIHJldHVybiBuZXcgREgocHJpbWUsIGdlbilcbn1cblxudmFyIEVOQ09ESU5HUyA9IHtcbiAgJ2JpbmFyeSc6IHRydWUsICdoZXgnOiB0cnVlLCAnYmFzZTY0JzogdHJ1ZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEaWZmaWVIZWxsbWFuIChwcmltZSwgZW5jLCBnZW5lcmF0b3IsIGdlbmMpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihlbmMpIHx8IEVOQ09ESU5HU1tlbmNdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY3JlYXRlRGlmZmllSGVsbG1hbihwcmltZSwgJ2JpbmFyeScsIGVuYywgZ2VuZXJhdG9yKVxuICB9XG5cbiAgZW5jID0gZW5jIHx8ICdiaW5hcnknXG4gIGdlbmMgPSBnZW5jIHx8ICdiaW5hcnknXG4gIGdlbmVyYXRvciA9IGdlbmVyYXRvciB8fCBuZXcgQnVmZmVyKFsyXSlcblxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihnZW5lcmF0b3IpKSB7XG4gICAgZ2VuZXJhdG9yID0gbmV3IEJ1ZmZlcihnZW5lcmF0b3IsIGdlbmMpXG4gIH1cblxuICBpZiAodHlwZW9mIHByaW1lID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBuZXcgREgoZ2VuZXJhdGVQcmltZShwcmltZSwgZ2VuZXJhdG9yKSwgZ2VuZXJhdG9yLCB0cnVlKVxuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocHJpbWUpKSB7XG4gICAgcHJpbWUgPSBuZXcgQnVmZmVyKHByaW1lLCBlbmMpXG4gIH1cblxuICByZXR1cm4gbmV3IERIKHByaW1lLCBnZW5lcmF0b3IsIHRydWUpXG59XG5cbmV4cG9ydHMuRGlmZmllSGVsbG1hbkdyb3VwID0gZXhwb3J0cy5jcmVhdGVEaWZmaWVIZWxsbWFuR3JvdXAgPSBleHBvcnRzLmdldERpZmZpZUhlbGxtYW4gPSBnZXREaWZmaWVIZWxsbWFuXG5leHBvcnRzLmNyZWF0ZURpZmZpZUhlbGxtYW4gPSBleHBvcnRzLkRpZmZpZUhlbGxtYW4gPSBjcmVhdGVEaWZmaWVIZWxsbWFuXG4iLCJ2YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIE1pbGxlclJhYmluID0gcmVxdWlyZSgnbWlsbGVyLXJhYmluJyk7XG52YXIgbWlsbGVyUmFiaW4gPSBuZXcgTWlsbGVyUmFiaW4oKTtcbnZhciBUV0VOVFlGT1VSID0gbmV3IEJOKDI0KTtcbnZhciBFTEVWRU4gPSBuZXcgQk4oMTEpO1xudmFyIFRFTiA9IG5ldyBCTigxMCk7XG52YXIgVEhSRUUgPSBuZXcgQk4oMyk7XG52YXIgU0VWRU4gPSBuZXcgQk4oNyk7XG52YXIgcHJpbWVzID0gcmVxdWlyZSgnLi9nZW5lcmF0ZVByaW1lJyk7XG52YXIgcmFuZG9tQnl0ZXMgPSByZXF1aXJlKCdyYW5kb21ieXRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSBESDtcblxuZnVuY3Rpb24gc2V0UHVibGljS2V5KHB1YiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHB1YikpIHtcbiAgICBwdWIgPSBuZXcgQnVmZmVyKHB1YiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wdWIgPSBuZXcgQk4ocHViKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNldFByaXZhdGVLZXkocHJpdiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHByaXYpKSB7XG4gICAgcHJpdiA9IG5ldyBCdWZmZXIocHJpdiwgZW5jKTtcbiAgfVxuICB0aGlzLl9wcml2ID0gbmV3IEJOKHByaXYpO1xuICByZXR1cm4gdGhpcztcbn1cblxudmFyIHByaW1lQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGNoZWNrUHJpbWUocHJpbWUsIGdlbmVyYXRvcikge1xuICB2YXIgZ2VuID0gZ2VuZXJhdG9yLnRvU3RyaW5nKCdoZXgnKTtcbiAgdmFyIGhleCA9IFtnZW4sIHByaW1lLnRvU3RyaW5nKDE2KV0uam9pbignXycpO1xuICBpZiAoaGV4IGluIHByaW1lQ2FjaGUpIHtcbiAgICByZXR1cm4gcHJpbWVDYWNoZVtoZXhdO1xuICB9XG4gIHZhciBlcnJvciA9IDA7XG5cbiAgaWYgKHByaW1lLmlzRXZlbigpIHx8XG4gICAgIXByaW1lcy5zaW1wbGVTaWV2ZSB8fFxuICAgICFwcmltZXMuZmVybWF0VGVzdChwcmltZSkgfHxcbiAgICAhbWlsbGVyUmFiaW4udGVzdChwcmltZSkpIHtcbiAgICAvL25vdCBhIHByaW1lIHNvICsxXG4gICAgZXJyb3IgKz0gMTtcblxuICAgIGlmIChnZW4gPT09ICcwMicgfHwgZ2VuID09PSAnMDUnKSB7XG4gICAgICAvLyB3ZSdkIGJlIGFibGUgdG8gY2hlY2sgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gaXQgd291bGQgZmFpbCBzbyArOFxuICAgICAgZXJyb3IgKz0gODtcbiAgICB9IGVsc2Uge1xuICAgICAgLy93ZSB3b3VsZG4ndCBiZSBhYmxlIHRvIHRlc3QgdGhlIGdlbmVyYXRvclxuICAgICAgLy8gc28gKzRcbiAgICAgIGVycm9yICs9IDQ7XG4gICAgfVxuICAgIHByaW1lQ2FjaGVbaGV4XSA9IGVycm9yO1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuICBpZiAoIW1pbGxlclJhYmluLnRlc3QocHJpbWUuc2hybigxKSkpIHtcbiAgICAvL25vdCBhIHNhZmUgcHJpbWVcbiAgICBlcnJvciArPSAyO1xuICB9XG4gIHZhciByZW07XG4gIHN3aXRjaCAoZ2VuKSB7XG4gICAgY2FzZSAnMDInOlxuICAgICAgaWYgKHByaW1lLm1vZChUV0VOVFlGT1VSKS5jbXAoRUxFVkVOKSkge1xuICAgICAgICAvLyB1bnN1aWRhYmxlIGdlbmVyYXRvclxuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnMDUnOlxuICAgICAgcmVtID0gcHJpbWUubW9kKFRFTik7XG4gICAgICBpZiAocmVtLmNtcChUSFJFRSkgJiYgcmVtLmNtcChTRVZFTikpIHtcbiAgICAgICAgLy8gcHJpbWUgbW9kIDEwIG5lZWRzIHRvIGVxdWFsIDMgb3IgN1xuICAgICAgICBlcnJvciArPSA4O1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGVycm9yICs9IDQ7XG4gIH1cbiAgcHJpbWVDYWNoZVtoZXhdID0gZXJyb3I7XG4gIHJldHVybiBlcnJvcjtcbn1cblxuZnVuY3Rpb24gREgocHJpbWUsIGdlbmVyYXRvciwgbWFsbGVhYmxlKSB7XG4gIHRoaXMuc2V0R2VuZXJhdG9yKGdlbmVyYXRvcik7XG4gIHRoaXMuX19wcmltZSA9IG5ldyBCTihwcmltZSk7XG4gIHRoaXMuX3ByaW1lID0gQk4ubW9udCh0aGlzLl9fcHJpbWUpO1xuICB0aGlzLl9wcmltZUxlbiA9IHByaW1lLmxlbmd0aDtcbiAgdGhpcy5fcHViID0gdW5kZWZpbmVkO1xuICB0aGlzLl9wcml2ID0gdW5kZWZpbmVkO1xuICB0aGlzLl9wcmltZUNvZGUgPSB1bmRlZmluZWQ7XG4gIGlmIChtYWxsZWFibGUpIHtcbiAgICB0aGlzLnNldFB1YmxpY0tleSA9IHNldFB1YmxpY0tleTtcbiAgICB0aGlzLnNldFByaXZhdGVLZXkgPSBzZXRQcml2YXRlS2V5O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3ByaW1lQ29kZSA9IDg7XG4gIH1cbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShESC5wcm90b3R5cGUsICd2ZXJpZnlFcnJvcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9wcmltZUNvZGUgIT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLl9wcmltZUNvZGUgPSBjaGVja1ByaW1lKHRoaXMuX19wcmltZSwgdGhpcy5fX2dlbik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9wcmltZUNvZGU7XG4gIH1cbn0pO1xuREgucHJvdG90eXBlLmdlbmVyYXRlS2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLl9wcml2KSB7XG4gICAgdGhpcy5fcHJpdiA9IG5ldyBCTihyYW5kb21CeXRlcyh0aGlzLl9wcmltZUxlbikpO1xuICB9XG4gIHRoaXMuX3B1YiA9IHRoaXMuX2dlbi50b1JlZCh0aGlzLl9wcmltZSkucmVkUG93KHRoaXMuX3ByaXYpLmZyb21SZWQoKTtcbiAgcmV0dXJuIHRoaXMuZ2V0UHVibGljS2V5KCk7XG59O1xuXG5ESC5wcm90b3R5cGUuY29tcHV0ZVNlY3JldCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICBvdGhlciA9IG5ldyBCTihvdGhlcik7XG4gIG90aGVyID0gb3RoZXIudG9SZWQodGhpcy5fcHJpbWUpO1xuICB2YXIgc2VjcmV0ID0gb3RoZXIucmVkUG93KHRoaXMuX3ByaXYpLmZyb21SZWQoKTtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIoc2VjcmV0LnRvQXJyYXkoKSk7XG4gIHZhciBwcmltZSA9IHRoaXMuZ2V0UHJpbWUoKTtcbiAgaWYgKG91dC5sZW5ndGggPCBwcmltZS5sZW5ndGgpIHtcbiAgICB2YXIgZnJvbnQgPSBuZXcgQnVmZmVyKHByaW1lLmxlbmd0aCAtIG91dC5sZW5ndGgpO1xuICAgIGZyb250LmZpbGwoMCk7XG4gICAgb3V0ID0gQnVmZmVyLmNvbmNhdChbZnJvbnQsIG91dF0pO1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG5ESC5wcm90b3R5cGUuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gZ2V0UHVibGljS2V5KGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fcHViLCBlbmMpO1xufTtcblxuREgucHJvdG90eXBlLmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiBnZXRQcml2YXRlS2V5KGVuYykge1xuICByZXR1cm4gZm9ybWF0UmV0dXJuVmFsdWUodGhpcy5fcHJpdiwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRQcmltZSA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgcmV0dXJuIGZvcm1hdFJldHVyblZhbHVlKHRoaXMuX19wcmltZSwgZW5jKTtcbn07XG5cbkRILnByb3RvdHlwZS5nZXRHZW5lcmF0b3IgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHJldHVybiBmb3JtYXRSZXR1cm5WYWx1ZSh0aGlzLl9nZW4sIGVuYyk7XG59O1xuXG5ESC5wcm90b3R5cGUuc2V0R2VuZXJhdG9yID0gZnVuY3Rpb24gKGdlbiwgZW5jKSB7XG4gIGVuYyA9IGVuYyB8fCAndXRmOCc7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGdlbikpIHtcbiAgICBnZW4gPSBuZXcgQnVmZmVyKGdlbiwgZW5jKTtcbiAgfVxuICB0aGlzLl9fZ2VuID0gZ2VuO1xuICB0aGlzLl9nZW4gPSBuZXcgQk4oZ2VuKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRSZXR1cm5WYWx1ZShibiwgZW5jKSB7XG4gIHZhciBidWYgPSBuZXcgQnVmZmVyKGJuLnRvQXJyYXkoKSk7XG4gIGlmICghZW5jKSB7XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYnVmLnRvU3RyaW5nKGVuYyk7XG4gIH1cbn1cbiIsInZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRQcmltZTtcbmZpbmRQcmltZS5zaW1wbGVTaWV2ZSA9IHNpbXBsZVNpZXZlO1xuZmluZFByaW1lLmZlcm1hdFRlc3QgPSBmZXJtYXRUZXN0O1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBUV0VOVFlGT1VSID0gbmV3IEJOKDI0KTtcbnZhciBNaWxsZXJSYWJpbiA9IHJlcXVpcmUoJ21pbGxlci1yYWJpbicpO1xudmFyIG1pbGxlclJhYmluID0gbmV3IE1pbGxlclJhYmluKCk7XG52YXIgT05FID0gbmV3IEJOKDEpO1xudmFyIFRXTyA9IG5ldyBCTigyKTtcbnZhciBGSVZFID0gbmV3IEJOKDUpO1xudmFyIFNJWFRFRU4gPSBuZXcgQk4oMTYpO1xudmFyIEVJR0hUID0gbmV3IEJOKDgpO1xudmFyIFRFTiA9IG5ldyBCTigxMCk7XG52YXIgVEhSRUUgPSBuZXcgQk4oMyk7XG52YXIgU0VWRU4gPSBuZXcgQk4oNyk7XG52YXIgRUxFVkVOID0gbmV3IEJOKDExKTtcbnZhciBGT1VSID0gbmV3IEJOKDQpO1xudmFyIFRXRUxWRSA9IG5ldyBCTigxMik7XG52YXIgcHJpbWVzID0gbnVsbDtcblxuZnVuY3Rpb24gX2dldFByaW1lcygpIHtcbiAgaWYgKHByaW1lcyAhPT0gbnVsbClcbiAgICByZXR1cm4gcHJpbWVzO1xuXG4gIHZhciBsaW1pdCA9IDB4MTAwMDAwO1xuICB2YXIgcmVzID0gW107XG4gIHJlc1swXSA9IDI7XG4gIGZvciAodmFyIGkgPSAxLCBrID0gMzsgayA8IGxpbWl0OyBrICs9IDIpIHtcbiAgICB2YXIgc3FydCA9IE1hdGguY2VpbChNYXRoLnNxcnQoaykpO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgaSAmJiByZXNbal0gPD0gc3FydDsgaisrKVxuICAgICAgaWYgKGsgJSByZXNbal0gPT09IDApXG4gICAgICAgIGJyZWFrO1xuXG4gICAgaWYgKGkgIT09IGogJiYgcmVzW2pdIDw9IHNxcnQpXG4gICAgICBjb250aW51ZTtcblxuICAgIHJlc1tpKytdID0gaztcbiAgfVxuICBwcmltZXMgPSByZXM7XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZVNpZXZlKHApIHtcbiAgdmFyIHByaW1lcyA9IF9nZXRQcmltZXMoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW1lcy5sZW5ndGg7IGkrKylcbiAgICBpZiAocC5tb2RuKHByaW1lc1tpXSkgPT09IDApIHtcbiAgICAgIGlmIChwLmNtcG4ocHJpbWVzW2ldKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGZlcm1hdFRlc3QocCkge1xuICB2YXIgcmVkID0gQk4ubW9udChwKTtcbiAgcmV0dXJuIFRXTy50b1JlZChyZWQpLnJlZFBvdyhwLnN1Ym4oMSkpLmZyb21SZWQoKS5jbXBuKDEpID09PSAwO1xufVxuXG5mdW5jdGlvbiBmaW5kUHJpbWUoYml0cywgZ2VuKSB7XG4gIGlmIChiaXRzIDwgMTYpIHtcbiAgICAvLyB0aGlzIGlzIHdoYXQgb3BlbnNzbCBkb2VzXG4gICAgaWYgKGdlbiA9PT0gMiB8fCBnZW4gPT09IDUpIHtcbiAgICAgIHJldHVybiBuZXcgQk4oWzB4OGMsIDB4N2JdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBCTihbMHg4YywgMHgyN10pO1xuICAgIH1cbiAgfVxuICBnZW4gPSBuZXcgQk4oZ2VuKTtcblxuICB2YXIgbnVtLCBuMjtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIG51bSA9IG5ldyBCTihyYW5kb21CeXRlcyhNYXRoLmNlaWwoYml0cyAvIDgpKSk7XG4gICAgd2hpbGUgKG51bS5iaXRMZW5ndGgoKSA+IGJpdHMpIHtcbiAgICAgIG51bS5pc2hybigxKTtcbiAgICB9XG4gICAgaWYgKG51bS5pc0V2ZW4oKSkge1xuICAgICAgbnVtLmlhZGQoT05FKTtcbiAgICB9XG4gICAgaWYgKCFudW0udGVzdG4oMSkpIHtcbiAgICAgIG51bS5pYWRkKFRXTyk7XG4gICAgfVxuICAgIGlmICghZ2VuLmNtcChUV08pKSB7XG4gICAgICB3aGlsZSAobnVtLm1vZChUV0VOVFlGT1VSKS5jbXAoRUxFVkVOKSkge1xuICAgICAgICBudW0uaWFkZChGT1VSKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFnZW4uY21wKEZJVkUpKSB7XG4gICAgICB3aGlsZSAobnVtLm1vZChURU4pLmNtcChUSFJFRSkpIHtcbiAgICAgICAgbnVtLmlhZGQoRk9VUik7XG4gICAgICB9XG4gICAgfVxuICAgIG4yID0gbnVtLnNocm4oMSk7XG4gICAgaWYgKHNpbXBsZVNpZXZlKG4yKSAmJiBzaW1wbGVTaWV2ZShudW0pICYmXG4gICAgICBmZXJtYXRUZXN0KG4yKSAmJiBmZXJtYXRUZXN0KG51bSkgJiZcbiAgICAgIG1pbGxlclJhYmluLnRlc3QobjIpICYmIG1pbGxlclJhYmluLnRlc3QobnVtKSkge1xuICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG4gIH1cblxufVxuIiwibW9kdWxlLmV4cG9ydHM9e1xuICAgIFwibW9kcDFcIjoge1xuICAgICAgICBcImdlblwiOiBcIjAyXCIsXG4gICAgICAgIFwicHJpbWVcIjogXCJmZmZmZmZmZmZmZmZmZmZmYzkwZmRhYTIyMTY4YzIzNGM0YzY2MjhiODBkYzFjZDEyOTAyNGUwODhhNjdjYzc0MDIwYmJlYTYzYjEzOWIyMjUxNGEwODc5OGUzNDA0ZGRlZjk1MTliM2NkM2E0MzFiMzAyYjBhNmRmMjVmMTQzNzRmZTEzNTZkNmQ1MWMyNDVlNDg1YjU3NjYyNWU3ZWM2ZjQ0YzQyZTlhNjNhMzYyMGZmZmZmZmZmZmZmZmZmZmZcIlxuICAgIH0sXG4gICAgXCJtb2RwMlwiOiB7XG4gICAgICAgIFwiZ2VuXCI6IFwiMDJcIixcbiAgICAgICAgXCJwcmltZVwiOiBcImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2MzdlZDZiMGJmZjVjYjZmNDA2YjdlZGVlMzg2YmZiNWE4OTlmYTVhZTlmMjQxMTdjNGIxZmU2NDkyODY2NTFlY2U2NTM4MWZmZmZmZmZmZmZmZmZmZmZcIlxuICAgIH0sXG4gICAgXCJtb2RwNVwiOiB7XG4gICAgICAgIFwiZ2VuXCI6IFwiMDJcIixcbiAgICAgICAgXCJwcmltZVwiOiBcImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2MzdlZDZiMGJmZjVjYjZmNDA2YjdlZGVlMzg2YmZiNWE4OTlmYTVhZTlmMjQxMTdjNGIxZmU2NDkyODY2NTFlY2U0NWIzZGMyMDA3Y2I4YTE2M2JmMDU5OGRhNDgzNjFjNTVkMzlhNjkxNjNmYThmZDI0Y2Y1ZjgzNjU1ZDIzZGNhM2FkOTYxYzYyZjM1NjIwODU1MmJiOWVkNTI5MDc3MDk2OTY2ZDY3MGMzNTRlNGFiYzk4MDRmMTc0NmMwOGNhMjM3MzI3ZmZmZmZmZmZmZmZmZmZmZlwiXG4gICAgfSxcbiAgICBcIm1vZHAxNFwiOiB7XG4gICAgICAgIFwiZ2VuXCI6IFwiMDJcIixcbiAgICAgICAgXCJwcmltZVwiOiBcImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2MzdlZDZiMGJmZjVjYjZmNDA2YjdlZGVlMzg2YmZiNWE4OTlmYTVhZTlmMjQxMTdjNGIxZmU2NDkyODY2NTFlY2U0NWIzZGMyMDA3Y2I4YTE2M2JmMDU5OGRhNDgzNjFjNTVkMzlhNjkxNjNmYThmZDI0Y2Y1ZjgzNjU1ZDIzZGNhM2FkOTYxYzYyZjM1NjIwODU1MmJiOWVkNTI5MDc3MDk2OTY2ZDY3MGMzNTRlNGFiYzk4MDRmMTc0NmMwOGNhMTgyMTdjMzI5MDVlNDYyZTM2Y2UzYmUzOWU3NzJjMTgwZTg2MDM5YjI3ODNhMmVjMDdhMjhmYjVjNTVkZjA2ZjRjNTJjOWRlMmJjYmY2OTU1ODE3MTgzOTk1NDk3Y2VhOTU2YWU1MTVkMjI2MTg5OGZhMDUxMDE1NzI4ZTVhOGFhY2FhNjhmZmZmZmZmZmZmZmZmZmZmXCJcbiAgICB9LFxuICAgIFwibW9kcDE1XCI6IHtcbiAgICAgICAgXCJnZW5cIjogXCIwMlwiLFxuICAgICAgICBcInByaW1lXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmM5MGZkYWEyMjE2OGMyMzRjNGM2NjI4YjgwZGMxY2QxMjkwMjRlMDg4YTY3Y2M3NDAyMGJiZWE2M2IxMzliMjI1MTRhMDg3OThlMzQwNGRkZWY5NTE5YjNjZDNhNDMxYjMwMmIwYTZkZjI1ZjE0Mzc0ZmUxMzU2ZDZkNTFjMjQ1ZTQ4NWI1NzY2MjVlN2VjNmY0NGM0MmU5YTYzN2VkNmIwYmZmNWNiNmY0MDZiN2VkZWUzODZiZmI1YTg5OWZhNWFlOWYyNDExN2M0YjFmZTY0OTI4NjY1MWVjZTQ1YjNkYzIwMDdjYjhhMTYzYmYwNTk4ZGE0ODM2MWM1NWQzOWE2OTE2M2ZhOGZkMjRjZjVmODM2NTVkMjNkY2EzYWQ5NjFjNjJmMzU2MjA4NTUyYmI5ZWQ1MjkwNzcwOTY5NjZkNjcwYzM1NGU0YWJjOTgwNGYxNzQ2YzA4Y2ExODIxN2MzMjkwNWU0NjJlMzZjZTNiZTM5ZTc3MmMxODBlODYwMzliMjc4M2EyZWMwN2EyOGZiNWM1NWRmMDZmNGM1MmM5ZGUyYmNiZjY5NTU4MTcxODM5OTU0OTdjZWE5NTZhZTUxNWQyMjYxODk4ZmEwNTEwMTU3MjhlNWE4YWFhYzQyZGFkMzMxNzBkMDQ1MDdhMzNhODU1MjFhYmRmMWNiYTY0ZWNmYjg1MDQ1OGRiZWYwYThhZWE3MTU3NWQwNjBjN2RiMzk3MGY4NWE2ZTFlNGM3YWJmNWFlOGNkYjA5MzNkNzFlOGM5NGUwNGEyNTYxOWRjZWUzZDIyNjFhZDJlZTZiZjEyZmZhMDZkOThhMDg2NGQ4NzYwMjczM2VjODZhNjQ1MjFmMmIxODE3N2IyMDBjYmJlMTE3NTc3YTYxNWQ2Yzc3MDk4OGMwYmFkOTQ2ZTIwOGUyNGZhMDc0ZTVhYjMxNDNkYjViZmNlMGZkMTA4ZTRiODJkMTIwYTkzYWQyY2FmZmZmZmZmZmZmZmZmZmZmXCJcbiAgICB9LFxuICAgIFwibW9kcDE2XCI6IHtcbiAgICAgICAgXCJnZW5cIjogXCIwMlwiLFxuICAgICAgICBcInByaW1lXCI6IFwiZmZmZmZmZmZmZmZmZmZmZmM5MGZkYWEyMjE2OGMyMzRjNGM2NjI4YjgwZGMxY2QxMjkwMjRlMDg4YTY3Y2M3NDAyMGJiZWE2M2IxMzliMjI1MTRhMDg3OThlMzQwNGRkZWY5NTE5YjNjZDNhNDMxYjMwMmIwYTZkZjI1ZjE0Mzc0ZmUxMzU2ZDZkNTFjMjQ1ZTQ4NWI1NzY2MjVlN2VjNmY0NGM0MmU5YTYzN2VkNmIwYmZmNWNiNmY0MDZiN2VkZWUzODZiZmI1YTg5OWZhNWFlOWYyNDExN2M0YjFmZTY0OTI4NjY1MWVjZTQ1YjNkYzIwMDdjYjhhMTYzYmYwNTk4ZGE0ODM2MWM1NWQzOWE2OTE2M2ZhOGZkMjRjZjVmODM2NTVkMjNkY2EzYWQ5NjFjNjJmMzU2MjA4NTUyYmI5ZWQ1MjkwNzcwOTY5NjZkNjcwYzM1NGU0YWJjOTgwNGYxNzQ2YzA4Y2ExODIxN2MzMjkwNWU0NjJlMzZjZTNiZTM5ZTc3MmMxODBlODYwMzliMjc4M2EyZWMwN2EyOGZiNWM1NWRmMDZmNGM1MmM5ZGUyYmNiZjY5NTU4MTcxODM5OTU0OTdjZWE5NTZhZTUxNWQyMjYxODk4ZmEwNTEwMTU3MjhlNWE4YWFhYzQyZGFkMzMxNzBkMDQ1MDdhMzNhODU1MjFhYmRmMWNiYTY0ZWNmYjg1MDQ1OGRiZWYwYThhZWE3MTU3NWQwNjBjN2RiMzk3MGY4NWE2ZTFlNGM3YWJmNWFlOGNkYjA5MzNkNzFlOGM5NGUwNGEyNTYxOWRjZWUzZDIyNjFhZDJlZTZiZjEyZmZhMDZkOThhMDg2NGQ4NzYwMjczM2VjODZhNjQ1MjFmMmIxODE3N2IyMDBjYmJlMTE3NTc3YTYxNWQ2Yzc3MDk4OGMwYmFkOTQ2ZTIwOGUyNGZhMDc0ZTVhYjMxNDNkYjViZmNlMGZkMTA4ZTRiODJkMTIwYTkyMTA4MDExYTcyM2MxMmE3ODdlNmQ3ODg3MTlhMTBiZGJhNWIyNjk5YzMyNzE4NmFmNGUyM2MxYTk0NjgzNGI2MTUwYmRhMjU4M2U5Y2EyYWQ0NGNlOGRiYmJjMmRiMDRkZThlZjkyZThlZmMxNDFmYmVjYWE2Mjg3YzU5NDc0ZTZiYzA1ZDk5YjI5NjRmYTA5MGMzYTIyMzNiYTE4NjUxNWJlN2VkMWY2MTI5NzBjZWUyZDdhZmI4MWJkZDc2MjE3MDQ4MWNkMDA2OTEyN2Q1YjA1YWE5OTNiNGVhOTg4ZDhmZGRjMTg2ZmZiN2RjOTBhNmMwOGY0ZGY0MzVjOTM0MDYzMTk5ZmZmZmZmZmZmZmZmZmZmZlwiXG4gICAgfSxcbiAgICBcIm1vZHAxN1wiOiB7XG4gICAgICAgIFwiZ2VuXCI6IFwiMDJcIixcbiAgICAgICAgXCJwcmltZVwiOiBcImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2MzdlZDZiMGJmZjVjYjZmNDA2YjdlZGVlMzg2YmZiNWE4OTlmYTVhZTlmMjQxMTdjNGIxZmU2NDkyODY2NTFlY2U0NWIzZGMyMDA3Y2I4YTE2M2JmMDU5OGRhNDgzNjFjNTVkMzlhNjkxNjNmYThmZDI0Y2Y1ZjgzNjU1ZDIzZGNhM2FkOTYxYzYyZjM1NjIwODU1MmJiOWVkNTI5MDc3MDk2OTY2ZDY3MGMzNTRlNGFiYzk4MDRmMTc0NmMwOGNhMTgyMTdjMzI5MDVlNDYyZTM2Y2UzYmUzOWU3NzJjMTgwZTg2MDM5YjI3ODNhMmVjMDdhMjhmYjVjNTVkZjA2ZjRjNTJjOWRlMmJjYmY2OTU1ODE3MTgzOTk1NDk3Y2VhOTU2YWU1MTVkMjI2MTg5OGZhMDUxMDE1NzI4ZTVhOGFhYWM0MmRhZDMzMTcwZDA0NTA3YTMzYTg1NTIxYWJkZjFjYmE2NGVjZmI4NTA0NThkYmVmMGE4YWVhNzE1NzVkMDYwYzdkYjM5NzBmODVhNmUxZTRjN2FiZjVhZThjZGIwOTMzZDcxZThjOTRlMDRhMjU2MTlkY2VlM2QyMjYxYWQyZWU2YmYxMmZmYTA2ZDk4YTA4NjRkODc2MDI3MzNlYzg2YTY0NTIxZjJiMTgxNzdiMjAwY2JiZTExNzU3N2E2MTVkNmM3NzA5ODhjMGJhZDk0NmUyMDhlMjRmYTA3NGU1YWIzMTQzZGI1YmZjZTBmZDEwOGU0YjgyZDEyMGE5MjEwODAxMWE3MjNjMTJhNzg3ZTZkNzg4NzE5YTEwYmRiYTViMjY5OWMzMjcxODZhZjRlMjNjMWE5NDY4MzRiNjE1MGJkYTI1ODNlOWNhMmFkNDRjZThkYmJiYzJkYjA0ZGU4ZWY5MmU4ZWZjMTQxZmJlY2FhNjI4N2M1OTQ3NGU2YmMwNWQ5OWIyOTY0ZmEwOTBjM2EyMjMzYmExODY1MTViZTdlZDFmNjEyOTcwY2VlMmQ3YWZiODFiZGQ3NjIxNzA0ODFjZDAwNjkxMjdkNWIwNWFhOTkzYjRlYTk4OGQ4ZmRkYzE4NmZmYjdkYzkwYTZjMDhmNGRmNDM1YzkzNDAyODQ5MjM2YzNmYWI0ZDI3YzcwMjZjMWQ0ZGNiMjYwMjY0NmRlYzk3NTFlNzYzZGJhMzdiZGY4ZmY5NDA2YWQ5ZTUzMGVlNWRiMzgyZjQxMzAwMWFlYjA2YTUzZWQ5MDI3ZDgzMTE3OTcyN2IwODY1YTg5MThkYTNlZGJlYmNmOWIxNGVkNDRjZTZjYmFjZWQ0YmIxYmRiN2YxNDQ3ZTZjYzI1NGIzMzIwNTE1MTJiZDdhZjQyNmZiOGY0MDEzNzhjZDJiZjU5ODNjYTAxYzY0YjkyZWNmMDMyZWExNWQxNzIxZDAzZjQ4MmQ3Y2U2ZTc0ZmVmNmQ1NWU3MDJmNDY5ODBjODJiNWE4NDAzMTkwMGIxYzllNTllN2M5N2ZiZWM3ZThmMzIzYTk3YTdlMzZjYzg4YmUwZjFkNDViN2ZmNTg1YWM1NGJkNDA3YjIyYjQxNTRhYWNjOGY2ZDdlYmY0OGUxZDgxNGNjNWVkMjBmODAzN2UwYTc5NzE1ZWVmMjliZTMyODA2YTFkNThiYjdjNWRhNzZmNTUwYWEzZDhhMWZiZmYwZWIxOWNjYjFhMzEzZDU1Y2RhNTZjOWVjMmVmMjk2MzIzODdmZThkNzZlM2MwNDY4MDQzZThmNjYzZjQ4NjBlZTEyYmYyZDViMGI3NDc0ZDZlNjk0ZjkxZTZkY2M0MDI0ZmZmZmZmZmZmZmZmZmZmZlwiXG4gICAgfSxcbiAgICBcIm1vZHAxOFwiOiB7XG4gICAgICAgIFwiZ2VuXCI6IFwiMDJcIixcbiAgICAgICAgXCJwcmltZVwiOiBcImZmZmZmZmZmZmZmZmZmZmZjOTBmZGFhMjIxNjhjMjM0YzRjNjYyOGI4MGRjMWNkMTI5MDI0ZTA4OGE2N2NjNzQwMjBiYmVhNjNiMTM5YjIyNTE0YTA4Nzk4ZTM0MDRkZGVmOTUxOWIzY2QzYTQzMWIzMDJiMGE2ZGYyNWYxNDM3NGZlMTM1NmQ2ZDUxYzI0NWU0ODViNTc2NjI1ZTdlYzZmNDRjNDJlOWE2MzdlZDZiMGJmZjVjYjZmNDA2YjdlZGVlMzg2YmZiNWE4OTlmYTVhZTlmMjQxMTdjNGIxZmU2NDkyODY2NTFlY2U0NWIzZGMyMDA3Y2I4YTE2M2JmMDU5OGRhNDgzNjFjNTVkMzlhNjkxNjNmYThmZDI0Y2Y1ZjgzNjU1ZDIzZGNhM2FkOTYxYzYyZjM1NjIwODU1MmJiOWVkNTI5MDc3MDk2OTY2ZDY3MGMzNTRlNGFiYzk4MDRmMTc0NmMwOGNhMTgyMTdjMzI5MDVlNDYyZTM2Y2UzYmUzOWU3NzJjMTgwZTg2MDM5YjI3ODNhMmVjMDdhMjhmYjVjNTVkZjA2ZjRjNTJjOWRlMmJjYmY2OTU1ODE3MTgzOTk1NDk3Y2VhOTU2YWU1MTVkMjI2MTg5OGZhMDUxMDE1NzI4ZTVhOGFhYWM0MmRhZDMzMTcwZDA0NTA3YTMzYTg1NTIxYWJkZjFjYmE2NGVjZmI4NTA0NThkYmVmMGE4YWVhNzE1NzVkMDYwYzdkYjM5NzBmODVhNmUxZTRjN2FiZjVhZThjZGIwOTMzZDcxZThjOTRlMDRhMjU2MTlkY2VlM2QyMjYxYWQyZWU2YmYxMmZmYTA2ZDk4YTA4NjRkODc2MDI3MzNlYzg2YTY0NTIxZjJiMTgxNzdiMjAwY2JiZTExNzU3N2E2MTVkNmM3NzA5ODhjMGJhZDk0NmUyMDhlMjRmYTA3NGU1YWIzMTQzZGI1YmZjZTBmZDEwOGU0YjgyZDEyMGE5MjEwODAxMWE3MjNjMTJhNzg3ZTZkNzg4NzE5YTEwYmRiYTViMjY5OWMzMjcxODZhZjRlMjNjMWE5NDY4MzRiNjE1MGJkYTI1ODNlOWNhMmFkNDRjZThkYmJiYzJkYjA0ZGU4ZWY5MmU4ZWZjMTQxZmJlY2FhNjI4N2M1OTQ3NGU2YmMwNWQ5OWIyOTY0ZmEwOTBjM2EyMjMzYmExODY1MTViZTdlZDFmNjEyOTcwY2VlMmQ3YWZiODFiZGQ3NjIxNzA0ODFjZDAwNjkxMjdkNWIwNWFhOTkzYjRlYTk4OGQ4ZmRkYzE4NmZmYjdkYzkwYTZjMDhmNGRmNDM1YzkzNDAyODQ5MjM2YzNmYWI0ZDI3YzcwMjZjMWQ0ZGNiMjYwMjY0NmRlYzk3NTFlNzYzZGJhMzdiZGY4ZmY5NDA2YWQ5ZTUzMGVlNWRiMzgyZjQxMzAwMWFlYjA2YTUzZWQ5MDI3ZDgzMTE3OTcyN2IwODY1YTg5MThkYTNlZGJlYmNmOWIxNGVkNDRjZTZjYmFjZWQ0YmIxYmRiN2YxNDQ3ZTZjYzI1NGIzMzIwNTE1MTJiZDdhZjQyNmZiOGY0MDEzNzhjZDJiZjU5ODNjYTAxYzY0YjkyZWNmMDMyZWExNWQxNzIxZDAzZjQ4MmQ3Y2U2ZTc0ZmVmNmQ1NWU3MDJmNDY5ODBjODJiNWE4NDAzMTkwMGIxYzllNTllN2M5N2ZiZWM3ZThmMzIzYTk3YTdlMzZjYzg4YmUwZjFkNDViN2ZmNTg1YWM1NGJkNDA3YjIyYjQxNTRhYWNjOGY2ZDdlYmY0OGUxZDgxNGNjNWVkMjBmODAzN2UwYTc5NzE1ZWVmMjliZTMyODA2YTFkNThiYjdjNWRhNzZmNTUwYWEzZDhhMWZiZmYwZWIxOWNjYjFhMzEzZDU1Y2RhNTZjOWVjMmVmMjk2MzIzODdmZThkNzZlM2MwNDY4MDQzZThmNjYzZjQ4NjBlZTEyYmYyZDViMGI3NDc0ZDZlNjk0ZjkxZTZkYmUxMTU5NzRhMzkyNmYxMmZlZTVlNDM4Nzc3Y2I2YTkzMmRmOGNkOGJlYzRkMDczYjkzMWJhM2JjODMyYjY4ZDlkZDMwMDc0MWZhN2JmOGFmYzQ3ZWQyNTc2ZjY5MzZiYTQyNDY2M2FhYjYzOWM1YWU0ZjU2ODM0MjNiNDc0MmJmMWM5NzgyMzhmMTZjYmUzOWQ2NTJkZTNmZGI4YmVmYzg0OGFkOTIyMjIyZTA0YTQwMzdjMDcxM2ViNTdhODFhMjNmMGM3MzQ3M2ZjNjQ2Y2VhMzA2YjRiY2JjODg2MmY4Mzg1ZGRmYTlkNGI3ZmEyYzA4N2U4Nzk2ODMzMDNlZDViZGQzYTA2MmIzY2Y1YjNhMjc4YTY2ZDJhMTNmODNmNDRmODJkZGYzMTBlZTA3NGFiNmEzNjQ1OTdlODk5YTAyNTVkYzE2NGYzMWNjNTA4NDY4NTFkZjlhYjQ4MTk1ZGVkN2VhMWIxZDUxMGJkN2VlNzRkNzNmYWYzNmJjMzFlY2ZhMjY4MzU5MDQ2ZjRlYjg3OWY5MjQwMDk0MzhiNDgxYzZjZDc4ODlhMDAyZWQ1ZWUzODJiYzkxOTBkYTZmYzAyNmU0Nzk1NThlNDQ3NTY3N2U5YWE5ZTMwNTBlMjc2NTY5NGRmYzgxZjU2ZTg4MGI5NmU3MTYwYzk4MGRkOThlZGQzZGZmZmZmZmZmZmZmZmZmZmZmXCJcbiAgICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZWxsaXB0aWMgPSBleHBvcnRzO1xuXG5lbGxpcHRpYy52ZXJzaW9uID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbmVsbGlwdGljLnV0aWxzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy91dGlscycpO1xuZWxsaXB0aWMucmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcbmVsbGlwdGljLmN1cnZlID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZScpO1xuZWxsaXB0aWMuY3VydmVzID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9jdXJ2ZXMnKTtcblxuLy8gUHJvdG9jb2xzXG5lbGxpcHRpYy5lYyA9IHJlcXVpcmUoJy4vZWxsaXB0aWMvZWMnKTtcbmVsbGlwdGljLmVkZHNhID0gcmVxdWlyZSgnLi9lbGxpcHRpYy9lZGRzYScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciB1dGlscyA9IGVsbGlwdGljLnV0aWxzO1xudmFyIGdldE5BRiA9IHV0aWxzLmdldE5BRjtcbnZhciBnZXRKU0YgPSB1dGlscy5nZXRKU0Y7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBCYXNlQ3VydmUodHlwZSwgY29uZikge1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnAgPSBuZXcgQk4oY29uZi5wLCAxNik7XG5cbiAgLy8gVXNlIE1vbnRnb21lcnksIHdoZW4gdGhlcmUgaXMgbm8gZmFzdCByZWR1Y3Rpb24gZm9yIHRoZSBwcmltZVxuICB0aGlzLnJlZCA9IGNvbmYucHJpbWUgPyBCTi5yZWQoY29uZi5wcmltZSkgOiBCTi5tb250KHRoaXMucCk7XG5cbiAgLy8gVXNlZnVsIGZvciBtYW55IGN1cnZlc1xuICB0aGlzLnplcm8gPSBuZXcgQk4oMCkudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLm9uZSA9IG5ldyBCTigxKS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMudHdvID0gbmV3IEJOKDIpLnRvUmVkKHRoaXMucmVkKTtcblxuICAvLyBDdXJ2ZSBjb25maWd1cmF0aW9uLCBvcHRpb25hbFxuICB0aGlzLm4gPSBjb25mLm4gJiYgbmV3IEJOKGNvbmYubiwgMTYpO1xuICB0aGlzLmcgPSBjb25mLmcgJiYgdGhpcy5wb2ludEZyb21KU09OKGNvbmYuZywgY29uZi5nUmVkKTtcblxuICAvLyBUZW1wb3JhcnkgYXJyYXlzXG4gIHRoaXMuX3duYWZUMSA9IG5ldyBBcnJheSg0KTtcbiAgdGhpcy5fd25hZlQyID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl93bmFmVDMgPSBuZXcgQXJyYXkoNCk7XG4gIHRoaXMuX3duYWZUNCA9IG5ldyBBcnJheSg0KTtcblxuICAvLyBHZW5lcmFsaXplZCBHcmVnIE1heHdlbGwncyB0cmlja1xuICB2YXIgYWRqdXN0Q291bnQgPSB0aGlzLm4gJiYgdGhpcy5wLmRpdih0aGlzLm4pO1xuICBpZiAoIWFkanVzdENvdW50IHx8IGFkanVzdENvdW50LmNtcG4oMTAwKSA+IDApIHtcbiAgICB0aGlzLnJlZE4gPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX21heHdlbGxUcmljayA9IHRydWU7XG4gICAgdGhpcy5yZWROID0gdGhpcy5uLnRvUmVkKHRoaXMucmVkKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBCYXNlQ3VydmU7XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VDdXJ2ZS5wcm90b3R5cGUuX2ZpeGVkTmFmTXVsID0gZnVuY3Rpb24gX2ZpeGVkTmFmTXVsKHAsIGspIHtcbiAgYXNzZXJ0KHAucHJlY29tcHV0ZWQpO1xuICB2YXIgZG91YmxlcyA9IHAuX2dldERvdWJsZXMoKTtcblxuICB2YXIgbmFmID0gZ2V0TkFGKGssIDEpO1xuICB2YXIgSSA9ICgxIDw8IChkb3VibGVzLnN0ZXAgKyAxKSkgLSAoZG91Ymxlcy5zdGVwICUgMiA9PT0gMCA/IDIgOiAxKTtcbiAgSSAvPSAzO1xuXG4gIC8vIFRyYW5zbGF0ZSBpbnRvIG1vcmUgd2luZG93ZWQgZm9ybVxuICB2YXIgcmVwciA9IFtdO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IG5hZi5sZW5ndGg7IGogKz0gZG91Ymxlcy5zdGVwKSB7XG4gICAgdmFyIG5hZlcgPSAwO1xuICAgIGZvciAodmFyIGsgPSBqICsgZG91Ymxlcy5zdGVwIC0gMTsgayA+PSBqOyBrLS0pXG4gICAgICBuYWZXID0gKG5hZlcgPDwgMSkgKyBuYWZba107XG4gICAgcmVwci5wdXNoKG5hZlcpO1xuICB9XG5cbiAgdmFyIGEgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgdmFyIGIgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IEk7IGkgPiAwOyBpLS0pIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlcHIubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBuYWZXID0gcmVwcltqXTtcbiAgICAgIGlmIChuYWZXID09PSBpKVxuICAgICAgICBiID0gYi5taXhlZEFkZChkb3VibGVzLnBvaW50c1tqXSk7XG4gICAgICBlbHNlIGlmIChuYWZXID09PSAtaSlcbiAgICAgICAgYiA9IGIubWl4ZWRBZGQoZG91Ymxlcy5wb2ludHNbal0ubmVnKCkpO1xuICAgIH1cbiAgICBhID0gYS5hZGQoYik7XG4gIH1cbiAgcmV0dXJuIGEudG9QKCk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsID0gZnVuY3Rpb24gX3duYWZNdWwocCwgaykge1xuICB2YXIgdyA9IDQ7XG5cbiAgLy8gUHJlY29tcHV0ZSB3aW5kb3dcbiAgdmFyIG5hZlBvaW50cyA9IHAuX2dldE5BRlBvaW50cyh3KTtcbiAgdyA9IG5hZlBvaW50cy53bmQ7XG4gIHZhciB3bmQgPSBuYWZQb2ludHMucG9pbnRzO1xuXG4gIC8vIEdldCBOQUYgZm9ybVxuICB2YXIgbmFmID0gZ2V0TkFGKGssIHcpO1xuXG4gIC8vIEFkZCBgdGhpc2AqKE4rMSkgZm9yIGV2ZXJ5IHctTkFGIGluZGV4XG4gIHZhciBhY2MgPSB0aGlzLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcbiAgZm9yICh2YXIgaSA9IG5hZi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIC8vIENvdW50IHplcm9lc1xuICAgIGZvciAodmFyIGsgPSAwOyBpID49IDAgJiYgbmFmW2ldID09PSAwOyBpLS0pXG4gICAgICBrKys7XG4gICAgaWYgKGkgPj0gMClcbiAgICAgIGsrKztcbiAgICBhY2MgPSBhY2MuZGJscChrKTtcblxuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuICAgIHZhciB6ID0gbmFmW2ldO1xuICAgIGFzc2VydCh6ICE9PSAwKTtcbiAgICBpZiAocC50eXBlID09PSAnYWZmaW5lJykge1xuICAgICAgLy8gSiArLSBQXG4gICAgICBpZiAoeiA+IDApXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZCh3bmRbKHogLSAxKSA+PiAxXSk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZCh3bmRbKC16IC0gMSkgPj4gMV0ubmVnKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBKICstIEpcbiAgICAgIGlmICh6ID4gMClcbiAgICAgICAgYWNjID0gYWNjLmFkZCh3bmRbKHogLSAxKSA+PiAxXSk7XG4gICAgICBlbHNlXG4gICAgICAgIGFjYyA9IGFjYy5hZGQod25kWygteiAtIDEpID4+IDFdLm5lZygpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHAudHlwZSA9PT0gJ2FmZmluZScgPyBhY2MudG9QKCkgOiBhY2M7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLl93bmFmTXVsQWRkID0gZnVuY3Rpb24gX3duYWZNdWxBZGQoZGVmVyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29lZmZzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqYWNvYmlhblJlc3VsdCkge1xuICB2YXIgd25kV2lkdGggPSB0aGlzLl93bmFmVDE7XG4gIHZhciB3bmQgPSB0aGlzLl93bmFmVDI7XG4gIHZhciBuYWYgPSB0aGlzLl93bmFmVDM7XG5cbiAgLy8gRmlsbCBhbGwgYXJyYXlzXG4gIHZhciBtYXggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIHAgPSBwb2ludHNbaV07XG4gICAgdmFyIG5hZlBvaW50cyA9IHAuX2dldE5BRlBvaW50cyhkZWZXKTtcbiAgICB3bmRXaWR0aFtpXSA9IG5hZlBvaW50cy53bmQ7XG4gICAgd25kW2ldID0gbmFmUG9pbnRzLnBvaW50cztcbiAgfVxuXG4gIC8vIENvbWIgc21hbGwgd2luZG93IE5BRnNcbiAgZm9yICh2YXIgaSA9IGxlbiAtIDE7IGkgPj0gMTsgaSAtPSAyKSB7XG4gICAgdmFyIGEgPSBpIC0gMTtcbiAgICB2YXIgYiA9IGk7XG4gICAgaWYgKHduZFdpZHRoW2FdICE9PSAxIHx8IHduZFdpZHRoW2JdICE9PSAxKSB7XG4gICAgICBuYWZbYV0gPSBnZXROQUYoY29lZmZzW2FdLCB3bmRXaWR0aFthXSk7XG4gICAgICBuYWZbYl0gPSBnZXROQUYoY29lZmZzW2JdLCB3bmRXaWR0aFtiXSk7XG4gICAgICBtYXggPSBNYXRoLm1heChuYWZbYV0ubGVuZ3RoLCBtYXgpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobmFmW2JdLmxlbmd0aCwgbWF4KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBjb21iID0gW1xuICAgICAgcG9pbnRzW2FdLCAvKiAxICovXG4gICAgICBudWxsLCAvKiAzICovXG4gICAgICBudWxsLCAvKiA1ICovXG4gICAgICBwb2ludHNbYl0gLyogNyAqL1xuICAgIF07XG5cbiAgICAvLyBUcnkgdG8gYXZvaWQgUHJvamVjdGl2ZSBwb2ludHMsIGlmIHBvc3NpYmxlXG4gICAgaWYgKHBvaW50c1thXS55LmNtcChwb2ludHNbYl0ueSkgPT09IDApIHtcbiAgICAgIGNvbWJbMV0gPSBwb2ludHNbYV0uYWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfSBlbHNlIGlmIChwb2ludHNbYV0ueS5jbXAocG9pbnRzW2JdLnkucmVkTmVnKCkpID09PSAwKSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLmFkZChwb2ludHNbYl0ubmVnKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21iWzFdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXSk7XG4gICAgICBjb21iWzJdID0gcG9pbnRzW2FdLnRvSigpLm1peGVkQWRkKHBvaW50c1tiXS5uZWcoKSk7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gW1xuICAgICAgLTMsIC8qIC0xIC0xICovXG4gICAgICAtMSwgLyogLTEgMCAqL1xuICAgICAgLTUsIC8qIC0xIDEgKi9cbiAgICAgIC03LCAvKiAwIC0xICovXG4gICAgICAwLCAvKiAwIDAgKi9cbiAgICAgIDcsIC8qIDAgMSAqL1xuICAgICAgNSwgLyogMSAtMSAqL1xuICAgICAgMSwgLyogMSAwICovXG4gICAgICAzICAvKiAxIDEgKi9cbiAgICBdO1xuXG4gICAgdmFyIGpzZiA9IGdldEpTRihjb2VmZnNbYV0sIGNvZWZmc1tiXSk7XG4gICAgbWF4ID0gTWF0aC5tYXgoanNmWzBdLmxlbmd0aCwgbWF4KTtcbiAgICBuYWZbYV0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBuYWZbYl0gPSBuZXcgQXJyYXkobWF4KTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1heDsgaisrKSB7XG4gICAgICB2YXIgamEgPSBqc2ZbMF1bal0gfCAwO1xuICAgICAgdmFyIGpiID0ganNmWzFdW2pdIHwgMDtcblxuICAgICAgbmFmW2FdW2pdID0gaW5kZXhbKGphICsgMSkgKiAzICsgKGpiICsgMSldO1xuICAgICAgbmFmW2JdW2pdID0gMDtcbiAgICAgIHduZFthXSA9IGNvbWI7XG4gICAgfVxuICB9XG5cbiAgdmFyIGFjYyA9IHRoaXMuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICB2YXIgdG1wID0gdGhpcy5fd25hZlQ0O1xuICBmb3IgKHZhciBpID0gbWF4OyBpID49IDA7IGktLSkge1xuICAgIHZhciBrID0gMDtcblxuICAgIHdoaWxlIChpID49IDApIHtcbiAgICAgIHZhciB6ZXJvID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgdG1wW2pdID0gbmFmW2pdW2ldIHwgMDtcbiAgICAgICAgaWYgKHRtcFtqXSAhPT0gMClcbiAgICAgICAgICB6ZXJvID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXplcm8pXG4gICAgICAgIGJyZWFrO1xuICAgICAgaysrO1xuICAgICAgaS0tO1xuICAgIH1cbiAgICBpZiAoaSA+PSAwKVxuICAgICAgaysrO1xuICAgIGFjYyA9IGFjYy5kYmxwKGspO1xuICAgIGlmIChpIDwgMClcbiAgICAgIGJyZWFrO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBsZW47IGorKykge1xuICAgICAgdmFyIHogPSB0bXBbal07XG4gICAgICB2YXIgcDtcbiAgICAgIGlmICh6ID09PSAwKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGVsc2UgaWYgKHogPiAwKVxuICAgICAgICBwID0gd25kW2pdWyh6IC0gMSkgPj4gMV07XG4gICAgICBlbHNlIGlmICh6IDwgMClcbiAgICAgICAgcCA9IHduZFtqXVsoLXogLSAxKSA+PiAxXS5uZWcoKTtcblxuICAgICAgaWYgKHAudHlwZSA9PT0gJ2FmZmluZScpXG4gICAgICAgIGFjYyA9IGFjYy5taXhlZEFkZChwKTtcbiAgICAgIGVsc2VcbiAgICAgICAgYWNjID0gYWNjLmFkZChwKTtcbiAgICB9XG4gIH1cbiAgLy8gWmVyb2lmeSByZWZlcmVuY2VzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgd25kW2ldID0gbnVsbDtcblxuICBpZiAoamFjb2JpYW5SZXN1bHQpXG4gICAgcmV0dXJuIGFjYztcbiAgZWxzZVxuICAgIHJldHVybiBhY2MudG9QKCk7XG59O1xuXG5mdW5jdGlvbiBCYXNlUG9pbnQoY3VydmUsIHR5cGUpIHtcbiAgdGhpcy5jdXJ2ZSA9IGN1cnZlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnByZWNvbXB1dGVkID0gbnVsbDtcbn1cbkJhc2VDdXJ2ZS5CYXNlUG9pbnQgPSBCYXNlUG9pbnQ7XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSgvKm90aGVyKi8pIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUudmFsaWRhdGUodGhpcyk7XG59O1xuXG5CYXNlQ3VydmUucHJvdG90eXBlLmRlY29kZVBvaW50ID0gZnVuY3Rpb24gZGVjb2RlUG9pbnQoYnl0ZXMsIGVuYykge1xuICBieXRlcyA9IHV0aWxzLnRvQXJyYXkoYnl0ZXMsIGVuYyk7XG5cbiAgdmFyIGxlbiA9IHRoaXMucC5ieXRlTGVuZ3RoKCk7XG5cbiAgLy8gdW5jb21wcmVzc2VkLCBoeWJyaWQtb2RkLCBoeWJyaWQtZXZlblxuICBpZiAoKGJ5dGVzWzBdID09PSAweDA0IHx8IGJ5dGVzWzBdID09PSAweDA2IHx8IGJ5dGVzWzBdID09PSAweDA3KSAmJlxuICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gMiAqIGxlbikge1xuICAgIGlmIChieXRlc1swXSA9PT0gMHgwNilcbiAgICAgIGFzc2VydChieXRlc1tieXRlcy5sZW5ndGggLSAxXSAlIDIgPT09IDApO1xuICAgIGVsc2UgaWYgKGJ5dGVzWzBdID09PSAweDA3KVxuICAgICAgYXNzZXJ0KGJ5dGVzW2J5dGVzLmxlbmd0aCAtIDFdICUgMiA9PT0gMSk7XG5cbiAgICB2YXIgcmVzID0gIHRoaXMucG9pbnQoYnl0ZXMuc2xpY2UoMSwgMSArIGxlbiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzLnNsaWNlKDEgKyBsZW4sIDEgKyAyICogbGVuKSk7XG5cbiAgICByZXR1cm4gcmVzO1xuICB9IGVsc2UgaWYgKChieXRlc1swXSA9PT0gMHgwMiB8fCBieXRlc1swXSA9PT0gMHgwMykgJiZcbiAgICAgICAgICAgICAgYnl0ZXMubGVuZ3RoIC0gMSA9PT0gbGVuKSB7XG4gICAgcmV0dXJuIHRoaXMucG9pbnRGcm9tWChieXRlcy5zbGljZSgxLCAxICsgbGVuKSwgYnl0ZXNbMF0gPT09IDB4MDMpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwb2ludCBmb3JtYXQnKTtcbn07XG5cbkJhc2VQb2ludC5wcm90b3R5cGUuZW5jb2RlQ29tcHJlc3NlZCA9IGZ1bmN0aW9uIGVuY29kZUNvbXByZXNzZWQoZW5jKSB7XG4gIHJldHVybiB0aGlzLmVuY29kZShlbmMsIHRydWUpO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZW5jb2RlID0gZnVuY3Rpb24gX2VuY29kZShjb21wYWN0KSB7XG4gIHZhciBsZW4gPSB0aGlzLmN1cnZlLnAuYnl0ZUxlbmd0aCgpO1xuICB2YXIgeCA9IHRoaXMuZ2V0WCgpLnRvQXJyYXkoJ2JlJywgbGVuKTtcblxuICBpZiAoY29tcGFjdClcbiAgICByZXR1cm4gWyB0aGlzLmdldFkoKS5pc0V2ZW4oKSA/IDB4MDIgOiAweDAzIF0uY29uY2F0KHgpO1xuXG4gIHJldHVybiBbIDB4MDQgXS5jb25jYXQoeCwgdGhpcy5nZXRZKCkudG9BcnJheSgnYmUnLCBsZW4pKSA7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShlbmMsIGNvbXBhY3QpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLl9lbmNvZGUoY29tcGFjdCksIGVuYyk7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLnByZWNvbXB1dGUgPSBmdW5jdGlvbiBwcmVjb21wdXRlKHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIHZhciBwcmVjb21wdXRlZCA9IHtcbiAgICBkb3VibGVzOiBudWxsLFxuICAgIG5hZjogbnVsbCxcbiAgICBiZXRhOiBudWxsXG4gIH07XG4gIHByZWNvbXB1dGVkLm5hZiA9IHRoaXMuX2dldE5BRlBvaW50cyg4KTtcbiAgcHJlY29tcHV0ZWQuZG91YmxlcyA9IHRoaXMuX2dldERvdWJsZXMoNCwgcG93ZXIpO1xuICBwcmVjb21wdXRlZC5iZXRhID0gdGhpcy5fZ2V0QmV0YSgpO1xuICB0aGlzLnByZWNvbXB1dGVkID0gcHJlY29tcHV0ZWQ7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9oYXNEb3VibGVzID0gZnVuY3Rpb24gX2hhc0RvdWJsZXMoaykge1xuICBpZiAoIXRoaXMucHJlY29tcHV0ZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBkb3VibGVzID0gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuICBpZiAoIWRvdWJsZXMpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiBkb3VibGVzLnBvaW50cy5sZW5ndGggPj0gTWF0aC5jZWlsKChrLmJpdExlbmd0aCgpICsgMSkgLyBkb3VibGVzLnN0ZXApO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5fZ2V0RG91YmxlcyA9IGZ1bmN0aW9uIF9nZXREb3VibGVzKHN0ZXAsIHBvd2VyKSB7XG4gIGlmICh0aGlzLnByZWNvbXB1dGVkICYmIHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcylcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzO1xuXG4gIHZhciBkb3VibGVzID0gWyB0aGlzIF07XG4gIHZhciBhY2MgPSB0aGlzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvd2VyOyBpICs9IHN0ZXApIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0ZXA7IGorKylcbiAgICAgIGFjYyA9IGFjYy5kYmwoKTtcbiAgICBkb3VibGVzLnB1c2goYWNjKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0ZXA6IHN0ZXAsXG4gICAgcG9pbnRzOiBkb3VibGVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXROQUZQb2ludHMgPSBmdW5jdGlvbiBfZ2V0TkFGUG9pbnRzKHduZCkge1xuICBpZiAodGhpcy5wcmVjb21wdXRlZCAmJiB0aGlzLnByZWNvbXB1dGVkLm5hZilcbiAgICByZXR1cm4gdGhpcy5wcmVjb21wdXRlZC5uYWY7XG5cbiAgdmFyIHJlcyA9IFsgdGhpcyBdO1xuICB2YXIgbWF4ID0gKDEgPDwgd25kKSAtIDE7XG4gIHZhciBkYmwgPSBtYXggPT09IDEgPyBudWxsIDogdGhpcy5kYmwoKTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBtYXg7IGkrKylcbiAgICByZXNbaV0gPSByZXNbaSAtIDFdLmFkZChkYmwpO1xuICByZXR1cm4ge1xuICAgIHduZDogd25kLFxuICAgIHBvaW50czogcmVzXG4gIH07XG59O1xuXG5CYXNlUG9pbnQucHJvdG90eXBlLl9nZXRCZXRhID0gZnVuY3Rpb24gX2dldEJldGEoKSB7XG4gIHJldHVybiBudWxsO1xufTtcblxuQmFzZVBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChrKSB7XG4gIHZhciByID0gdGhpcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrOyBpKyspXG4gICAgciA9IHIuZGJsKCk7XG4gIHJldHVybiByO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gcmVxdWlyZSgnLi4vY3VydmUnKTtcbnZhciBlbGxpcHRpYyA9IHJlcXVpcmUoJy4uLy4uL2VsbGlwdGljJyk7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gY3VydmUuYmFzZTtcblxudmFyIGFzc2VydCA9IGVsbGlwdGljLnV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gRWR3YXJkc0N1cnZlKGNvbmYpIHtcbiAgLy8gTk9URTogSW1wb3J0YW50IGFzIHdlIGFyZSBjcmVhdGluZyBwb2ludCBpbiBCYXNlLmNhbGwoKVxuICB0aGlzLnR3aXN0ZWQgPSAoY29uZi5hIHwgMCkgIT09IDE7XG4gIHRoaXMubU9uZUEgPSB0aGlzLnR3aXN0ZWQgJiYgKGNvbmYuYSB8IDApID09PSAtMTtcbiAgdGhpcy5leHRlbmRlZCA9IHRoaXMubU9uZUE7XG5cbiAgQmFzZS5jYWxsKHRoaXMsICdlZHdhcmRzJywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnVtb2QodGhpcy5yZWQubSk7XG4gIHRoaXMuYSA9IHRoaXMuYS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYyA9IG5ldyBCTihjb25mLmMsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuYzIgPSB0aGlzLmMucmVkU3FyKCk7XG4gIHRoaXMuZCA9IG5ldyBCTihjb25mLmQsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIHRoaXMuZGQgPSB0aGlzLmQucmVkQWRkKHRoaXMuZCk7XG5cbiAgYXNzZXJ0KCF0aGlzLnR3aXN0ZWQgfHwgdGhpcy5jLmZyb21SZWQoKS5jbXBuKDEpID09PSAwKTtcbiAgdGhpcy5vbmVDID0gKGNvbmYuYyB8IDApID09PSAxO1xufVxuaW5oZXJpdHMoRWR3YXJkc0N1cnZlLCBCYXNlKTtcbm1vZHVsZS5leHBvcnRzID0gRWR3YXJkc0N1cnZlO1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLl9tdWxBID0gZnVuY3Rpb24gX211bEEobnVtKSB7XG4gIGlmICh0aGlzLm1PbmVBKVxuICAgIHJldHVybiBudW0ucmVkTmVnKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5hLnJlZE11bChudW0pO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5fbXVsQyA9IGZ1bmN0aW9uIF9tdWxDKG51bSkge1xuICBpZiAodGhpcy5vbmVDKVxuICAgIHJldHVybiBudW07XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jLnJlZE11bChudW0pO1xufTtcblxuLy8gSnVzdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIFNob3J0IGN1cnZlXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLmpwb2ludCA9IGZ1bmN0aW9uIGpwb2ludCh4LCB5LCB6LCB0KSB7XG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHksIHosIHQpO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21YID0gZnVuY3Rpb24gcG9pbnRGcm9tWCh4LCBvZGQpIHtcbiAgeCA9IG5ldyBCTih4LCAxNik7XG4gIGlmICgheC5yZWQpXG4gICAgeCA9IHgudG9SZWQodGhpcy5yZWQpO1xuXG4gIHZhciB4MiA9IHgucmVkU3FyKCk7XG4gIHZhciByaHMgPSB0aGlzLmMyLnJlZFN1Yih0aGlzLmEucmVkTXVsKHgyKSk7XG4gIHZhciBsaHMgPSB0aGlzLm9uZS5yZWRTdWIodGhpcy5jMi5yZWRNdWwodGhpcy5kKS5yZWRNdWwoeDIpKTtcblxuICB2YXIgeTIgPSByaHMucmVkTXVsKGxocy5yZWRJbnZtKCkpO1xuICB2YXIgeSA9IHkyLnJlZFNxcnQoKTtcbiAgaWYgKHkucmVkU3FyKCkucmVkU3ViKHkyKS5jbXAodGhpcy56ZXJvKSAhPT0gMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQnKTtcblxuICB2YXIgaXNPZGQgPSB5LmZyb21SZWQoKS5pc09kZCgpO1xuICBpZiAob2RkICYmICFpc09kZCB8fCAhb2RkICYmIGlzT2RkKVxuICAgIHkgPSB5LnJlZE5lZygpO1xuXG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHkpO1xufTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21ZID0gZnVuY3Rpb24gcG9pbnRGcm9tWSh5LCBvZGQpIHtcbiAgeSA9IG5ldyBCTih5LCAxNik7XG4gIGlmICgheS5yZWQpXG4gICAgeSA9IHkudG9SZWQodGhpcy5yZWQpO1xuXG4gIC8vIHheMiA9ICh5XjIgLSAxKSAvIChkIHleMiArIDEpXG4gIHZhciB5MiA9IHkucmVkU3FyKCk7XG4gIHZhciBsaHMgPSB5Mi5yZWRTdWIodGhpcy5vbmUpO1xuICB2YXIgcmhzID0geTIucmVkTXVsKHRoaXMuZCkucmVkQWRkKHRoaXMub25lKTtcbiAgdmFyIHgyID0gbGhzLnJlZE11bChyaHMucmVkSW52bSgpKTtcblxuICBpZiAoeDIuY21wKHRoaXMuemVybykgPT09IDApIHtcbiAgICBpZiAob2RkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRoaXMucG9pbnQodGhpcy56ZXJvLCB5KTtcbiAgfVxuXG4gIHZhciB4ID0geDIucmVkU3FydCgpO1xuICBpZiAoeC5yZWRTcXIoKS5yZWRTdWIoeDIpLmNtcCh0aGlzLnplcm8pICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwb2ludCcpO1xuXG4gIGlmICh4LmlzT2RkKCkgIT09IG9kZClcbiAgICB4ID0geC5yZWROZWcoKTtcblxuICByZXR1cm4gdGhpcy5wb2ludCh4LCB5KTtcbn07XG5cbkVkd2FyZHNDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICBpZiAocG9pbnQuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIC8vIEN1cnZlOiBBICogWF4yICsgWV4yID0gQ14yICogKDEgKyBEICogWF4yICogWV4yKVxuICBwb2ludC5ub3JtYWxpemUoKTtcblxuICB2YXIgeDIgPSBwb2ludC54LnJlZFNxcigpO1xuICB2YXIgeTIgPSBwb2ludC55LnJlZFNxcigpO1xuICB2YXIgbGhzID0geDIucmVkTXVsKHRoaXMuYSkucmVkQWRkKHkyKTtcbiAgdmFyIHJocyA9IHRoaXMuYzIucmVkTXVsKHRoaXMub25lLnJlZEFkZCh0aGlzLmQucmVkTXVsKHgyKS5yZWRNdWwoeTIpKSk7XG5cbiAgcmV0dXJuIGxocy5jbXAocmhzKSA9PT0gMDtcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB5LCB6LCB0KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdwcm9qZWN0aXZlJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHkgPT09IG51bGwgJiYgeiA9PT0gbnVsbCkge1xuICAgIHRoaXMueCA9IHRoaXMuY3VydmUuemVybztcbiAgICB0aGlzLnkgPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnQgPSB0aGlzLmN1cnZlLnplcm87XG4gICAgdGhpcy56T25lID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueSA9IG5ldyBCTih5LCAxNik7XG4gICAgdGhpcy56ID0geiA/IG5ldyBCTih6LCAxNikgOiB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnQgPSB0ICYmIG5ldyBCTih0LCAxNik7XG4gICAgaWYgKCF0aGlzLngucmVkKVxuICAgICAgdGhpcy54ID0gdGhpcy54LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgICBpZiAoIXRoaXMueS5yZWQpXG4gICAgICB0aGlzLnkgPSB0aGlzLnkudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy56LnJlZClcbiAgICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKHRoaXMudCAmJiAhdGhpcy50LnJlZClcbiAgICAgIHRoaXMudCA9IHRoaXMudC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgdGhpcy56T25lID0gdGhpcy56ID09PSB0aGlzLmN1cnZlLm9uZTtcblxuICAgIC8vIFVzZSBleHRlbmRlZCBjb29yZGluYXRlc1xuICAgIGlmICh0aGlzLmN1cnZlLmV4dGVuZGVkICYmICF0aGlzLnQpIHtcbiAgICAgIHRoaXMudCA9IHRoaXMueC5yZWRNdWwodGhpcy55KTtcbiAgICAgIGlmICghdGhpcy56T25lKVxuICAgICAgICB0aGlzLnQgPSB0aGlzLnQucmVkTXVsKHRoaXMuei5yZWRJbnZtKCkpO1xuICAgIH1cbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuRWR3YXJkc0N1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmopIHtcbiAgcmV0dXJuIFBvaW50LmZyb21KU09OKHRoaXMsIG9iaik7XG59O1xuXG5FZHdhcmRzQ3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeSwgeiwgdCkge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHksIHosIHQpO1xufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqKSB7XG4gIHJldHVybiBuZXcgUG9pbnQoY3VydmUsIG9ialswXSwgb2JqWzFdLCBvYmpbMl0pO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgUG9pbnQgSW5maW5pdHk+JztcbiAgcmV0dXJuICc8RUMgUG9pbnQgeDogJyArIHRoaXMueC5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgeTogJyArIHRoaXMueS5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei5mcm9tUmVkKCkudG9TdHJpbmcoMTYsIDIpICsgJz4nO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy54LmNtcG4oMCkgPT09IDAgJiZcbiAgICAgICAgIHRoaXMueS5jbXAodGhpcy56KSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5fZXh0RGJsID0gZnVuY3Rpb24gX2V4dERibCgpIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtZXh0ZW5kZWQtMS5odG1sXG4gIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDgtaHdjZFxuICAvLyA0TSArIDRTXG5cbiAgLy8gQSA9IFgxXjJcbiAgdmFyIGEgPSB0aGlzLngucmVkU3FyKCk7XG4gIC8vIEIgPSBZMV4yXG4gIHZhciBiID0gdGhpcy55LnJlZFNxcigpO1xuICAvLyBDID0gMiAqIFoxXjJcbiAgdmFyIGMgPSB0aGlzLnoucmVkU3FyKCk7XG4gIGMgPSBjLnJlZElBZGQoYyk7XG4gIC8vIEQgPSBhICogQVxuICB2YXIgZCA9IHRoaXMuY3VydmUuX211bEEoYSk7XG4gIC8vIEUgPSAoWDEgKyBZMSleMiAtIEEgLSBCXG4gIHZhciBlID0gdGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZFNxcigpLnJlZElTdWIoYSkucmVkSVN1YihiKTtcbiAgLy8gRyA9IEQgKyBCXG4gIHZhciBnID0gZC5yZWRBZGQoYik7XG4gIC8vIEYgPSBHIC0gQ1xuICB2YXIgZiA9IGcucmVkU3ViKGMpO1xuICAvLyBIID0gRCAtIEJcbiAgdmFyIGggPSBkLnJlZFN1YihiKTtcbiAgLy8gWDMgPSBFICogRlxuICB2YXIgbnggPSBlLnJlZE11bChmKTtcbiAgLy8gWTMgPSBHICogSFxuICB2YXIgbnkgPSBnLnJlZE11bChoKTtcbiAgLy8gVDMgPSBFICogSFxuICB2YXIgbnQgPSBlLnJlZE11bChoKTtcbiAgLy8gWjMgPSBGICogR1xuICB2YXIgbnogPSBmLnJlZE11bChnKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueiwgbnQpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9wcm9qRGJsID0gZnVuY3Rpb24gX3Byb2pEYmwoKSB7XG4gIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by10d2lzdGVkLXByb2plY3RpdmUuaHRtbFxuICAvLyAgICAgI2RvdWJsaW5nLWRibC0yMDA4LWJiamxwXG4gIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDctYmxcbiAgLy8gYW5kIG90aGVyc1xuICAvLyBHZW5lcmFsbHkgM00gKyA0UyBvciAyTSArIDRTXG5cbiAgLy8gQiA9IChYMSArIFkxKV4yXG4gIHZhciBiID0gdGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZFNxcigpO1xuICAvLyBDID0gWDFeMlxuICB2YXIgYyA9IHRoaXMueC5yZWRTcXIoKTtcbiAgLy8gRCA9IFkxXjJcbiAgdmFyIGQgPSB0aGlzLnkucmVkU3FyKCk7XG5cbiAgdmFyIG54O1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgaWYgKHRoaXMuY3VydmUudHdpc3RlZCkge1xuICAgIC8vIEUgPSBhICogQ1xuICAgIHZhciBlID0gdGhpcy5jdXJ2ZS5fbXVsQShjKTtcbiAgICAvLyBGID0gRSArIERcbiAgICB2YXIgZiA9IGUucmVkQWRkKGQpO1xuICAgIGlmICh0aGlzLnpPbmUpIHtcbiAgICAgIC8vIFgzID0gKEIgLSBDIC0gRCkgKiAoRiAtIDIpXG4gICAgICBueCA9IGIucmVkU3ViKGMpLnJlZFN1YihkKS5yZWRNdWwoZi5yZWRTdWIodGhpcy5jdXJ2ZS50d28pKTtcbiAgICAgIC8vIFkzID0gRiAqIChFIC0gRClcbiAgICAgIG55ID0gZi5yZWRNdWwoZS5yZWRTdWIoZCkpO1xuICAgICAgLy8gWjMgPSBGXjIgLSAyICogRlxuICAgICAgbnogPSBmLnJlZFNxcigpLnJlZFN1YihmKS5yZWRTdWIoZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEggPSBaMV4yXG4gICAgICB2YXIgaCA9IHRoaXMuei5yZWRTcXIoKTtcbiAgICAgIC8vIEogPSBGIC0gMiAqIEhcbiAgICAgIHZhciBqID0gZi5yZWRTdWIoaCkucmVkSVN1YihoKTtcbiAgICAgIC8vIFgzID0gKEItQy1EKSpKXG4gICAgICBueCA9IGIucmVkU3ViKGMpLnJlZElTdWIoZCkucmVkTXVsKGopO1xuICAgICAgLy8gWTMgPSBGICogKEUgLSBEKVxuICAgICAgbnkgPSBmLnJlZE11bChlLnJlZFN1YihkKSk7XG4gICAgICAvLyBaMyA9IEYgKiBKXG4gICAgICBueiA9IGYucmVkTXVsKGopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBFID0gQyArIERcbiAgICB2YXIgZSA9IGMucmVkQWRkKGQpO1xuICAgIC8vIEggPSAoYyAqIFoxKV4yXG4gICAgdmFyIGggPSB0aGlzLmN1cnZlLl9tdWxDKHRoaXMuYy5yZWRNdWwodGhpcy56KSkucmVkU3FyKCk7XG4gICAgLy8gSiA9IEUgLSAyICogSFxuICAgIHZhciBqID0gZS5yZWRTdWIoaCkucmVkU3ViKGgpO1xuICAgIC8vIFgzID0gYyAqIChCIC0gRSkgKiBKXG4gICAgbnggPSB0aGlzLmN1cnZlLl9tdWxDKGIucmVkSVN1YihlKSkucmVkTXVsKGopO1xuICAgIC8vIFkzID0gYyAqIEUgKiAoQyAtIEQpXG4gICAgbnkgPSB0aGlzLmN1cnZlLl9tdWxDKGUpLnJlZE11bChjLnJlZElTdWIoZCkpO1xuICAgIC8vIFozID0gRSAqIEpcbiAgICBueiA9IGUucmVkTXVsKGopO1xuICB9XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSwgbnopO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIERvdWJsZSBpbiBleHRlbmRlZCBjb29yZGluYXRlc1xuICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZClcbiAgICByZXR1cm4gdGhpcy5fZXh0RGJsKCk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5fcHJvakRibCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9leHRBZGQgPSBmdW5jdGlvbiBfZXh0QWRkKHApIHtcbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXR3aXN0ZWQtZXh0ZW5kZWQtMS5odG1sXG4gIC8vICAgICAjYWRkaXRpb24tYWRkLTIwMDgtaHdjZC0zXG4gIC8vIDhNXG5cbiAgLy8gQSA9IChZMSAtIFgxKSAqIChZMiAtIFgyKVxuICB2YXIgYSA9IHRoaXMueS5yZWRTdWIodGhpcy54KS5yZWRNdWwocC55LnJlZFN1YihwLngpKTtcbiAgLy8gQiA9IChZMSArIFgxKSAqIChZMiArIFgyKVxuICB2YXIgYiA9IHRoaXMueS5yZWRBZGQodGhpcy54KS5yZWRNdWwocC55LnJlZEFkZChwLngpKTtcbiAgLy8gQyA9IFQxICogayAqIFQyXG4gIHZhciBjID0gdGhpcy50LnJlZE11bCh0aGlzLmN1cnZlLmRkKS5yZWRNdWwocC50KTtcbiAgLy8gRCA9IFoxICogMiAqIFoyXG4gIHZhciBkID0gdGhpcy56LnJlZE11bChwLnoucmVkQWRkKHAueikpO1xuICAvLyBFID0gQiAtIEFcbiAgdmFyIGUgPSBiLnJlZFN1YihhKTtcbiAgLy8gRiA9IEQgLSBDXG4gIHZhciBmID0gZC5yZWRTdWIoYyk7XG4gIC8vIEcgPSBEICsgQ1xuICB2YXIgZyA9IGQucmVkQWRkKGMpO1xuICAvLyBIID0gQiArIEFcbiAgdmFyIGggPSBiLnJlZEFkZChhKTtcbiAgLy8gWDMgPSBFICogRlxuICB2YXIgbnggPSBlLnJlZE11bChmKTtcbiAgLy8gWTMgPSBHICogSFxuICB2YXIgbnkgPSBnLnJlZE11bChoKTtcbiAgLy8gVDMgPSBFICogSFxuICB2YXIgbnQgPSBlLnJlZE11bChoKTtcbiAgLy8gWjMgPSBGICogR1xuICB2YXIgbnogPSBmLnJlZE11bChnKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG55LCBueiwgbnQpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLl9wcm9qQWRkID0gZnVuY3Rpb24gX3Byb2pBZGQocCkge1xuICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tdHdpc3RlZC1wcm9qZWN0aXZlLmh0bWxcbiAgLy8gICAgICNhZGRpdGlvbi1hZGQtMjAwOC1iYmpscFxuICAvLyAgICAgI2FkZGl0aW9uLWFkZC0yMDA3LWJsXG4gIC8vIDEwTSArIDFTXG5cbiAgLy8gQSA9IFoxICogWjJcbiAgdmFyIGEgPSB0aGlzLnoucmVkTXVsKHAueik7XG4gIC8vIEIgPSBBXjJcbiAgdmFyIGIgPSBhLnJlZFNxcigpO1xuICAvLyBDID0gWDEgKiBYMlxuICB2YXIgYyA9IHRoaXMueC5yZWRNdWwocC54KTtcbiAgLy8gRCA9IFkxICogWTJcbiAgdmFyIGQgPSB0aGlzLnkucmVkTXVsKHAueSk7XG4gIC8vIEUgPSBkICogQyAqIERcbiAgdmFyIGUgPSB0aGlzLmN1cnZlLmQucmVkTXVsKGMpLnJlZE11bChkKTtcbiAgLy8gRiA9IEIgLSBFXG4gIHZhciBmID0gYi5yZWRTdWIoZSk7XG4gIC8vIEcgPSBCICsgRVxuICB2YXIgZyA9IGIucmVkQWRkKGUpO1xuICAvLyBYMyA9IEEgKiBGICogKChYMSArIFkxKSAqIChYMiArIFkyKSAtIEMgLSBEKVxuICB2YXIgdG1wID0gdGhpcy54LnJlZEFkZCh0aGlzLnkpLnJlZE11bChwLngucmVkQWRkKHAueSkpLnJlZElTdWIoYykucmVkSVN1YihkKTtcbiAgdmFyIG54ID0gYS5yZWRNdWwoZikucmVkTXVsKHRtcCk7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICBpZiAodGhpcy5jdXJ2ZS50d2lzdGVkKSB7XG4gICAgLy8gWTMgPSBBICogRyAqIChEIC0gYSAqIEMpXG4gICAgbnkgPSBhLnJlZE11bChnKS5yZWRNdWwoZC5yZWRTdWIodGhpcy5jdXJ2ZS5fbXVsQShjKSkpO1xuICAgIC8vIFozID0gRiAqIEdcbiAgICBueiA9IGYucmVkTXVsKGcpO1xuICB9IGVsc2Uge1xuICAgIC8vIFkzID0gQSAqIEcgKiAoRCAtIEMpXG4gICAgbnkgPSBhLnJlZE11bChnKS5yZWRNdWwoZC5yZWRTdWIoYykpO1xuICAgIC8vIFozID0gYyAqIEYgKiBHXG4gICAgbnogPSB0aGlzLmN1cnZlLl9tdWxDKGYpLnJlZE11bChnKTtcbiAgfVxuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChueCwgbnksIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHA7XG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gdGhpcztcblxuICBpZiAodGhpcy5jdXJ2ZS5leHRlbmRlZClcbiAgICByZXR1cm4gdGhpcy5fZXh0QWRkKHApO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX3Byb2pBZGQocCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgaWYgKHRoaXMuX2hhc0RvdWJsZXMoaykpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX2ZpeGVkTmFmTXVsKHRoaXMsIGspO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWwodGhpcywgayk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsQWRkID0gZnVuY3Rpb24gbXVsQWRkKGsxLCBwLCBrMikge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBbIHRoaXMsIHAgXSwgWyBrMSwgazIgXSwgMiwgZmFsc2UpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmptdWxBZGQgPSBmdW5jdGlvbiBqbXVsQWRkKGsxLCBwLCBrMikge1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBbIHRoaXMsIHAgXSwgWyBrMSwgazIgXSwgMiwgdHJ1ZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKCkge1xuICBpZiAodGhpcy56T25lKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIE5vcm1hbGl6ZSBjb29yZGluYXRlc1xuICB2YXIgemkgPSB0aGlzLnoucmVkSW52bSgpO1xuICB0aGlzLnggPSB0aGlzLngucmVkTXVsKHppKTtcbiAgdGhpcy55ID0gdGhpcy55LnJlZE11bCh6aSk7XG4gIGlmICh0aGlzLnQpXG4gICAgdGhpcy50ID0gdGhpcy50LnJlZE11bCh6aSk7XG4gIHRoaXMueiA9IHRoaXMuY3VydmUub25lO1xuICB0aGlzLnpPbmUgPSB0cnVlO1xuICByZXR1cm4gdGhpcztcbn07XG5cblBvaW50LnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcoKSB7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KHRoaXMueC5yZWROZWcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnosXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudCAmJiB0aGlzLnQucmVkTmVnKCkpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbiBnZXRYKCkge1xuICB0aGlzLm5vcm1hbGl6ZSgpO1xuICByZXR1cm4gdGhpcy54LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5nZXRZID0gZnVuY3Rpb24gZ2V0WSgpIHtcbiAgdGhpcy5ub3JtYWxpemUoKTtcbiAgcmV0dXJuIHRoaXMueS5mcm9tUmVkKCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShvdGhlcikge1xuICByZXR1cm4gdGhpcyA9PT0gb3RoZXIgfHxcbiAgICAgICAgIHRoaXMuZ2V0WCgpLmNtcChvdGhlci5nZXRYKCkpID09PSAwICYmXG4gICAgICAgICB0aGlzLmdldFkoKS5jbXAob3RoZXIuZ2V0WSgpKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5lcVhUb1AgPSBmdW5jdGlvbiBlcVhUb1AoeCkge1xuICB2YXIgcnggPSB4LnRvUmVkKHRoaXMuY3VydmUucmVkKS5yZWRNdWwodGhpcy56KTtcbiAgaWYgKHRoaXMueC5jbXAocngpID09PSAwKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHZhciB4YyA9IHguY2xvbmUoKTtcbiAgdmFyIHQgPSB0aGlzLmN1cnZlLnJlZE4ucmVkTXVsKHRoaXMueik7XG4gIGZvciAoOzspIHtcbiAgICB4Yy5pYWRkKHRoaXMuY3VydmUubik7XG4gICAgaWYgKHhjLmNtcCh0aGlzLmN1cnZlLnApID49IDApXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByeC5yZWRJQWRkKHQpO1xuICAgIGlmICh0aGlzLnguY21wKHJ4KSA9PT0gMClcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8vIENvbXBhdGliaWxpdHkgd2l0aCBCYXNlQ3VydmVcblBvaW50LnByb3RvdHlwZS50b1AgPSBQb2ludC5wcm90b3R5cGUubm9ybWFsaXplO1xuUG9pbnQucHJvdG90eXBlLm1peGVkQWRkID0gUG9pbnQucHJvdG90eXBlLmFkZDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGN1cnZlID0gZXhwb3J0cztcblxuY3VydmUuYmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuY3VydmUuc2hvcnQgPSByZXF1aXJlKCcuL3Nob3J0Jyk7XG5jdXJ2ZS5tb250ID0gcmVxdWlyZSgnLi9tb250Jyk7XG5jdXJ2ZS5lZHdhcmRzID0gcmVxdWlyZSgnLi9lZHdhcmRzJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjdXJ2ZSA9IHJlcXVpcmUoJy4uL2N1cnZlJyk7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbnZhciBCYXNlID0gY3VydmUuYmFzZTtcblxudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciB1dGlscyA9IGVsbGlwdGljLnV0aWxzO1xuXG5mdW5jdGlvbiBNb250Q3VydmUoY29uZikge1xuICBCYXNlLmNhbGwodGhpcywgJ21vbnQnLCBjb25mKTtcblxuICB0aGlzLmEgPSBuZXcgQk4oY29uZi5hLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmIgPSBuZXcgQk4oY29uZi5iLCAxNikudG9SZWQodGhpcy5yZWQpO1xuICB0aGlzLmk0ID0gbmV3IEJOKDQpLnRvUmVkKHRoaXMucmVkKS5yZWRJbnZtKCk7XG4gIHRoaXMudHdvID0gbmV3IEJOKDIpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5hMjQgPSB0aGlzLmk0LnJlZE11bCh0aGlzLmEucmVkQWRkKHRoaXMudHdvKSk7XG59XG5pbmhlcml0cyhNb250Q3VydmUsIEJhc2UpO1xubW9kdWxlLmV4cG9ydHMgPSBNb250Q3VydmU7XG5cbk1vbnRDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICB2YXIgeCA9IHBvaW50Lm5vcm1hbGl6ZSgpLng7XG4gIHZhciB4MiA9IHgucmVkU3FyKCk7XG4gIHZhciByaHMgPSB4Mi5yZWRNdWwoeCkucmVkQWRkKHgyLnJlZE11bCh0aGlzLmEpKS5yZWRBZGQoeCk7XG4gIHZhciB5ID0gcmhzLnJlZFNxcnQoKTtcblxuICByZXR1cm4geS5yZWRTcXIoKS5jbXAocmhzKSA9PT0gMDtcbn07XG5cbmZ1bmN0aW9uIFBvaW50KGN1cnZlLCB4LCB6KSB7XG4gIEJhc2UuQmFzZVBvaW50LmNhbGwodGhpcywgY3VydmUsICdwcm9qZWN0aXZlJyk7XG4gIGlmICh4ID09PSBudWxsICYmIHogPT09IG51bGwpIHtcbiAgICB0aGlzLnggPSB0aGlzLmN1cnZlLm9uZTtcbiAgICB0aGlzLnogPSB0aGlzLmN1cnZlLnplcm87XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54ID0gbmV3IEJOKHgsIDE2KTtcbiAgICB0aGlzLnogPSBuZXcgQk4oeiwgMTYpO1xuICAgIGlmICghdGhpcy54LnJlZClcbiAgICAgIHRoaXMueCA9IHRoaXMueC50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgaWYgKCF0aGlzLnoucmVkKVxuICAgICAgdGhpcy56ID0gdGhpcy56LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5kZWNvZGVQb2ludCA9IGZ1bmN0aW9uIGRlY29kZVBvaW50KGJ5dGVzLCBlbmMpIHtcbiAgcmV0dXJuIHRoaXMucG9pbnQodXRpbHMudG9BcnJheShieXRlcywgZW5jKSwgMSk7XG59O1xuXG5Nb250Q3VydmUucHJvdG90eXBlLnBvaW50ID0gZnVuY3Rpb24gcG9pbnQoeCwgeikge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHopO1xufTtcblxuTW9udEN1cnZlLnByb3RvdHlwZS5wb2ludEZyb21KU09OID0gZnVuY3Rpb24gcG9pbnRGcm9tSlNPTihvYmopIHtcbiAgcmV0dXJuIFBvaW50LmZyb21KU09OKHRoaXMsIG9iaik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUucHJlY29tcHV0ZSA9IGZ1bmN0aW9uIHByZWNvbXB1dGUoKSB7XG4gIC8vIE5vLW9wXG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2VuY29kZSA9IGZ1bmN0aW9uIF9lbmNvZGUoKSB7XG4gIHJldHVybiB0aGlzLmdldFgoKS50b0FycmF5KCdiZScsIHRoaXMuY3VydmUucC5ieXRlTGVuZ3RoKCkpO1xufTtcblxuUG9pbnQuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihjdXJ2ZSwgb2JqKSB7XG4gIHJldHVybiBuZXcgUG9pbnQoY3VydmUsIG9ialswXSwgb2JqWzFdIHx8IGN1cnZlLm9uZSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB6OiAnICsgdGhpcy56LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIC8vIFhYWCBUaGlzIGNvZGUgYXNzdW1lcyB0aGF0IHplcm8gaXMgYWx3YXlzIHplcm8gaW4gcmVkXG4gIHJldHVybiB0aGlzLnouY21wbigwKSA9PT0gMDtcbn07XG5cblBvaW50LnByb3RvdHlwZS5kYmwgPSBmdW5jdGlvbiBkYmwoKSB7XG4gIC8vIGh0dHA6Ly9oeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tbW9udGdvbS14ei5odG1sI2RvdWJsaW5nLWRibC0xOTg3LW0tM1xuICAvLyAyTSArIDJTICsgNEFcblxuICAvLyBBID0gWDEgKyBaMVxuICB2YXIgYSA9IHRoaXMueC5yZWRBZGQodGhpcy56KTtcbiAgLy8gQUEgPSBBXjJcbiAgdmFyIGFhID0gYS5yZWRTcXIoKTtcbiAgLy8gQiA9IFgxIC0gWjFcbiAgdmFyIGIgPSB0aGlzLngucmVkU3ViKHRoaXMueik7XG4gIC8vIEJCID0gQl4yXG4gIHZhciBiYiA9IGIucmVkU3FyKCk7XG4gIC8vIEMgPSBBQSAtIEJCXG4gIHZhciBjID0gYWEucmVkU3ViKGJiKTtcbiAgLy8gWDMgPSBBQSAqIEJCXG4gIHZhciBueCA9IGFhLnJlZE11bChiYik7XG4gIC8vIFozID0gQyAqIChCQiArIEEyNCAqIEMpXG4gIHZhciBueiA9IGMucmVkTXVsKGJiLnJlZEFkZCh0aGlzLmN1cnZlLmEyNC5yZWRNdWwoYykpKTtcbiAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobngsIG56KTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQoKSB7XG4gIHRocm93IG5ldyBFcnJvcignTm90IHN1cHBvcnRlZCBvbiBNb250Z29tZXJ5IGN1cnZlJyk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGlmZkFkZCA9IGZ1bmN0aW9uIGRpZmZBZGQocCwgZGlmZikge1xuICAvLyBodHRwOi8vaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLW1vbnRnb20teHouaHRtbCNkaWZmYWRkLWRhZGQtMTk4Ny1tLTNcbiAgLy8gNE0gKyAyUyArIDZBXG5cbiAgLy8gQSA9IFgyICsgWjJcbiAgdmFyIGEgPSB0aGlzLngucmVkQWRkKHRoaXMueik7XG4gIC8vIEIgPSBYMiAtIFoyXG4gIHZhciBiID0gdGhpcy54LnJlZFN1Yih0aGlzLnopO1xuICAvLyBDID0gWDMgKyBaM1xuICB2YXIgYyA9IHAueC5yZWRBZGQocC56KTtcbiAgLy8gRCA9IFgzIC0gWjNcbiAgdmFyIGQgPSBwLngucmVkU3ViKHAueik7XG4gIC8vIERBID0gRCAqIEFcbiAgdmFyIGRhID0gZC5yZWRNdWwoYSk7XG4gIC8vIENCID0gQyAqIEJcbiAgdmFyIGNiID0gYy5yZWRNdWwoYik7XG4gIC8vIFg1ID0gWjEgKiAoREEgKyBDQileMlxuICB2YXIgbnggPSBkaWZmLnoucmVkTXVsKGRhLnJlZEFkZChjYikucmVkU3FyKCkpO1xuICAvLyBaNSA9IFgxICogKERBIC0gQ0IpXjJcbiAgdmFyIG56ID0gZGlmZi54LnJlZE11bChkYS5yZWRJU3ViKGNiKS5yZWRTcXIoKSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsKGspIHtcbiAgdmFyIHQgPSBrLmNsb25lKCk7XG4gIHZhciBhID0gdGhpczsgLy8gKE4gLyAyKSAqIFEgKyBRXG4gIHZhciBiID0gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTsgLy8gKE4gLyAyKSAqIFFcbiAgdmFyIGMgPSB0aGlzOyAvLyBRXG5cbiAgZm9yICh2YXIgYml0cyA9IFtdOyB0LmNtcG4oMCkgIT09IDA7IHQuaXVzaHJuKDEpKVxuICAgIGJpdHMucHVzaCh0LmFuZGxuKDEpKTtcblxuICBmb3IgKHZhciBpID0gYml0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGlmIChiaXRzW2ldID09PSAwKSB7XG4gICAgICAvLyBOICogUSArIFEgPSAoKE4gLyAyKSAqIFEgKyBRKSkgKyAoTiAvIDIpICogUVxuICAgICAgYSA9IGEuZGlmZkFkZChiLCBjKTtcbiAgICAgIC8vIE4gKiBRID0gMiAqICgoTiAvIDIpICogUSArIFEpKVxuICAgICAgYiA9IGIuZGJsKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE4gKiBRID0gKChOIC8gMikgKiBRICsgUSkgKyAoKE4gLyAyKSAqIFEpXG4gICAgICBiID0gYS5kaWZmQWRkKGIsIGMpO1xuICAgICAgLy8gTiAqIFEgKyBRID0gMiAqICgoTiAvIDIpICogUSArIFEpXG4gICAgICBhID0gYS5kYmwoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGI7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUubXVsQWRkID0gZnVuY3Rpb24gbXVsQWRkKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmp1bWxBZGQgPSBmdW5jdGlvbiBqdW1sQWRkKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBzdXBwb3J0ZWQgb24gTW9udGdvbWVyeSBjdXJ2ZScpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMuZ2V0WCgpLmNtcChvdGhlci5nZXRYKCkpID09PSAwO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZSgpIHtcbiAgdGhpcy54ID0gdGhpcy54LnJlZE11bCh0aGlzLnoucmVkSW52bSgpKTtcbiAgdGhpcy56ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFggPSBmdW5jdGlvbiBnZXRYKCkge1xuICAvLyBOb3JtYWxpemUgY29vcmRpbmF0ZXNcbiAgdGhpcy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gdGhpcy54LmZyb21SZWQoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjdXJ2ZSA9IHJlcXVpcmUoJy4uL2N1cnZlJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG52YXIgQmFzZSA9IGN1cnZlLmJhc2U7XG5cbnZhciBhc3NlcnQgPSBlbGxpcHRpYy51dGlscy5hc3NlcnQ7XG5cbmZ1bmN0aW9uIFNob3J0Q3VydmUoY29uZikge1xuICBCYXNlLmNhbGwodGhpcywgJ3Nob3J0JywgY29uZik7XG5cbiAgdGhpcy5hID0gbmV3IEJOKGNvbmYuYSwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy5iID0gbmV3IEJOKGNvbmYuYiwgMTYpLnRvUmVkKHRoaXMucmVkKTtcbiAgdGhpcy50aW52ID0gdGhpcy50d28ucmVkSW52bSgpO1xuXG4gIHRoaXMuemVyb0EgPSB0aGlzLmEuZnJvbVJlZCgpLmNtcG4oMCkgPT09IDA7XG4gIHRoaXMudGhyZWVBID0gdGhpcy5hLmZyb21SZWQoKS5zdWIodGhpcy5wKS5jbXBuKC0zKSA9PT0gMDtcblxuICAvLyBJZiB0aGUgY3VydmUgaXMgZW5kb21vcnBoaWMsIHByZWNhbGN1bGF0ZSBiZXRhIGFuZCBsYW1iZGFcbiAgdGhpcy5lbmRvID0gdGhpcy5fZ2V0RW5kb21vcnBoaXNtKGNvbmYpO1xuICB0aGlzLl9lbmRvV25hZlQxID0gbmV3IEFycmF5KDQpO1xuICB0aGlzLl9lbmRvV25hZlQyID0gbmV3IEFycmF5KDQpO1xufVxuaW5oZXJpdHMoU2hvcnRDdXJ2ZSwgQmFzZSk7XG5tb2R1bGUuZXhwb3J0cyA9IFNob3J0Q3VydmU7XG5cblNob3J0Q3VydmUucHJvdG90eXBlLl9nZXRFbmRvbW9ycGhpc20gPSBmdW5jdGlvbiBfZ2V0RW5kb21vcnBoaXNtKGNvbmYpIHtcbiAgLy8gTm8gZWZmaWNpZW50IGVuZG9tb3JwaGlzbVxuICBpZiAoIXRoaXMuemVyb0EgfHwgIXRoaXMuZyB8fCAhdGhpcy5uIHx8IHRoaXMucC5tb2RuKDMpICE9PSAxKVxuICAgIHJldHVybjtcblxuICAvLyBDb21wdXRlIGJldGEgYW5kIGxhbWJkYSwgdGhhdCBsYW1iZGEgKiBQID0gKGJldGEgKiBQeDsgUHkpXG4gIHZhciBiZXRhO1xuICB2YXIgbGFtYmRhO1xuICBpZiAoY29uZi5iZXRhKSB7XG4gICAgYmV0YSA9IG5ldyBCTihjb25mLmJldGEsIDE2KS50b1JlZCh0aGlzLnJlZCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJldGFzID0gdGhpcy5fZ2V0RW5kb1Jvb3RzKHRoaXMucCk7XG4gICAgLy8gQ2hvb3NlIHRoZSBzbWFsbGVzdCBiZXRhXG4gICAgYmV0YSA9IGJldGFzWzBdLmNtcChiZXRhc1sxXSkgPCAwID8gYmV0YXNbMF0gOiBiZXRhc1sxXTtcbiAgICBiZXRhID0gYmV0YS50b1JlZCh0aGlzLnJlZCk7XG4gIH1cbiAgaWYgKGNvbmYubGFtYmRhKSB7XG4gICAgbGFtYmRhID0gbmV3IEJOKGNvbmYubGFtYmRhLCAxNik7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2hvb3NlIHRoZSBsYW1iZGEgdGhhdCBpcyBtYXRjaGluZyBzZWxlY3RlZCBiZXRhXG4gICAgdmFyIGxhbWJkYXMgPSB0aGlzLl9nZXRFbmRvUm9vdHModGhpcy5uKTtcbiAgICBpZiAodGhpcy5nLm11bChsYW1iZGFzWzBdKS54LmNtcCh0aGlzLmcueC5yZWRNdWwoYmV0YSkpID09PSAwKSB7XG4gICAgICBsYW1iZGEgPSBsYW1iZGFzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYW1iZGEgPSBsYW1iZGFzWzFdO1xuICAgICAgYXNzZXJ0KHRoaXMuZy5tdWwobGFtYmRhKS54LmNtcCh0aGlzLmcueC5yZWRNdWwoYmV0YSkpID09PSAwKTtcbiAgICB9XG4gIH1cblxuICAvLyBHZXQgYmFzaXMgdmVjdG9ycywgdXNlZCBmb3IgYmFsYW5jZWQgbGVuZ3RoLXR3byByZXByZXNlbnRhdGlvblxuICB2YXIgYmFzaXM7XG4gIGlmIChjb25mLmJhc2lzKSB7XG4gICAgYmFzaXMgPSBjb25mLmJhc2lzLm1hcChmdW5jdGlvbih2ZWMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGE6IG5ldyBCTih2ZWMuYSwgMTYpLFxuICAgICAgICBiOiBuZXcgQk4odmVjLmIsIDE2KVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBiYXNpcyA9IHRoaXMuX2dldEVuZG9CYXNpcyhsYW1iZGEpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiZXRhOiBiZXRhLFxuICAgIGxhbWJkYTogbGFtYmRhLFxuICAgIGJhc2lzOiBiYXNpc1xuICB9O1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2dldEVuZG9Sb290cyA9IGZ1bmN0aW9uIF9nZXRFbmRvUm9vdHMobnVtKSB7XG4gIC8vIEZpbmQgcm9vdHMgb2YgZm9yIHheMiArIHggKyAxIGluIEZcbiAgLy8gUm9vdCA9ICgtMSArLSBTcXJ0KC0zKSkgLyAyXG4gIC8vXG4gIHZhciByZWQgPSBudW0gPT09IHRoaXMucCA/IHRoaXMucmVkIDogQk4ubW9udChudW0pO1xuICB2YXIgdGludiA9IG5ldyBCTigyKS50b1JlZChyZWQpLnJlZEludm0oKTtcbiAgdmFyIG50aW52ID0gdGludi5yZWROZWcoKTtcblxuICB2YXIgcyA9IG5ldyBCTigzKS50b1JlZChyZWQpLnJlZE5lZygpLnJlZFNxcnQoKS5yZWRNdWwodGludik7XG5cbiAgdmFyIGwxID0gbnRpbnYucmVkQWRkKHMpLmZyb21SZWQoKTtcbiAgdmFyIGwyID0gbnRpbnYucmVkU3ViKHMpLmZyb21SZWQoKTtcbiAgcmV0dXJuIFsgbDEsIGwyIF07XG59O1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5fZ2V0RW5kb0Jhc2lzID0gZnVuY3Rpb24gX2dldEVuZG9CYXNpcyhsYW1iZGEpIHtcbiAgLy8gYXByeFNxcnQgPj0gc3FydCh0aGlzLm4pXG4gIHZhciBhcHJ4U3FydCA9IHRoaXMubi51c2hybihNYXRoLmZsb29yKHRoaXMubi5iaXRMZW5ndGgoKSAvIDIpKTtcblxuICAvLyAzLjc0XG4gIC8vIFJ1biBFR0NELCB1bnRpbCByKEwgKyAxKSA8IGFwcnhTcXJ0XG4gIHZhciB1ID0gbGFtYmRhO1xuICB2YXIgdiA9IHRoaXMubi5jbG9uZSgpO1xuICB2YXIgeDEgPSBuZXcgQk4oMSk7XG4gIHZhciB5MSA9IG5ldyBCTigwKTtcbiAgdmFyIHgyID0gbmV3IEJOKDApO1xuICB2YXIgeTIgPSBuZXcgQk4oMSk7XG5cbiAgLy8gTk9URTogYWxsIHZlY3RvcnMgYXJlIHJvb3RzIG9mOiBhICsgYiAqIGxhbWJkYSA9IDAgKG1vZCBuKVxuICB2YXIgYTA7XG4gIHZhciBiMDtcbiAgLy8gRmlyc3QgdmVjdG9yXG4gIHZhciBhMTtcbiAgdmFyIGIxO1xuICAvLyBTZWNvbmQgdmVjdG9yXG4gIHZhciBhMjtcbiAgdmFyIGIyO1xuXG4gIHZhciBwcmV2UjtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcjtcbiAgdmFyIHg7XG4gIHdoaWxlICh1LmNtcG4oMCkgIT09IDApIHtcbiAgICB2YXIgcSA9IHYuZGl2KHUpO1xuICAgIHIgPSB2LnN1YihxLm11bCh1KSk7XG4gICAgeCA9IHgyLnN1YihxLm11bCh4MSkpO1xuICAgIHZhciB5ID0geTIuc3ViKHEubXVsKHkxKSk7XG5cbiAgICBpZiAoIWExICYmIHIuY21wKGFwcnhTcXJ0KSA8IDApIHtcbiAgICAgIGEwID0gcHJldlIubmVnKCk7XG4gICAgICBiMCA9IHgxO1xuICAgICAgYTEgPSByLm5lZygpO1xuICAgICAgYjEgPSB4O1xuICAgIH0gZWxzZSBpZiAoYTEgJiYgKytpID09PSAyKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcHJldlIgPSByO1xuXG4gICAgdiA9IHU7XG4gICAgdSA9IHI7XG4gICAgeDIgPSB4MTtcbiAgICB4MSA9IHg7XG4gICAgeTIgPSB5MTtcbiAgICB5MSA9IHk7XG4gIH1cbiAgYTIgPSByLm5lZygpO1xuICBiMiA9IHg7XG5cbiAgdmFyIGxlbjEgPSBhMS5zcXIoKS5hZGQoYjEuc3FyKCkpO1xuICB2YXIgbGVuMiA9IGEyLnNxcigpLmFkZChiMi5zcXIoKSk7XG4gIGlmIChsZW4yLmNtcChsZW4xKSA+PSAwKSB7XG4gICAgYTIgPSBhMDtcbiAgICBiMiA9IGIwO1xuICB9XG5cbiAgLy8gTm9ybWFsaXplIHNpZ25zXG4gIGlmIChhMS5uZWdhdGl2ZSkge1xuICAgIGExID0gYTEubmVnKCk7XG4gICAgYjEgPSBiMS5uZWcoKTtcbiAgfVxuICBpZiAoYTIubmVnYXRpdmUpIHtcbiAgICBhMiA9IGEyLm5lZygpO1xuICAgIGIyID0gYjIubmVnKCk7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIHsgYTogYTEsIGI6IGIxIH0sXG4gICAgeyBhOiBhMiwgYjogYjIgfVxuICBdO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2VuZG9TcGxpdCA9IGZ1bmN0aW9uIF9lbmRvU3BsaXQoaykge1xuICB2YXIgYmFzaXMgPSB0aGlzLmVuZG8uYmFzaXM7XG4gIHZhciB2MSA9IGJhc2lzWzBdO1xuICB2YXIgdjIgPSBiYXNpc1sxXTtcblxuICB2YXIgYzEgPSB2Mi5iLm11bChrKS5kaXZSb3VuZCh0aGlzLm4pO1xuICB2YXIgYzIgPSB2MS5iLm5lZygpLm11bChrKS5kaXZSb3VuZCh0aGlzLm4pO1xuXG4gIHZhciBwMSA9IGMxLm11bCh2MS5hKTtcbiAgdmFyIHAyID0gYzIubXVsKHYyLmEpO1xuICB2YXIgcTEgPSBjMS5tdWwodjEuYik7XG4gIHZhciBxMiA9IGMyLm11bCh2Mi5iKTtcblxuICAvLyBDYWxjdWxhdGUgYW5zd2VyXG4gIHZhciBrMSA9IGsuc3ViKHAxKS5zdWIocDIpO1xuICB2YXIgazIgPSBxMS5hZGQocTIpLm5lZygpO1xuICByZXR1cm4geyBrMTogazEsIGsyOiBrMiB9O1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnRGcm9tWCA9IGZ1bmN0aW9uIHBvaW50RnJvbVgoeCwgb2RkKSB7XG4gIHggPSBuZXcgQk4oeCwgMTYpO1xuICBpZiAoIXgucmVkKVxuICAgIHggPSB4LnRvUmVkKHRoaXMucmVkKTtcblxuICB2YXIgeTIgPSB4LnJlZFNxcigpLnJlZE11bCh4KS5yZWRJQWRkKHgucmVkTXVsKHRoaXMuYSkpLnJlZElBZGQodGhpcy5iKTtcbiAgdmFyIHkgPSB5Mi5yZWRTcXJ0KCk7XG4gIGlmICh5LnJlZFNxcigpLnJlZFN1Yih5MikuY21wKHRoaXMuemVybykgIT09IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBvaW50Jyk7XG5cbiAgLy8gWFhYIElzIHRoZXJlIGFueSB3YXkgdG8gdGVsbCBpZiB0aGUgbnVtYmVyIGlzIG9kZCB3aXRob3V0IGNvbnZlcnRpbmcgaXRcbiAgLy8gdG8gbm9uLXJlZCBmb3JtP1xuICB2YXIgaXNPZGQgPSB5LmZyb21SZWQoKS5pc09kZCgpO1xuICBpZiAob2RkICYmICFpc09kZCB8fCAhb2RkICYmIGlzT2RkKVxuICAgIHkgPSB5LnJlZE5lZygpO1xuXG4gIHJldHVybiB0aGlzLnBvaW50KHgsIHkpO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiB2YWxpZGF0ZShwb2ludCkge1xuICBpZiAocG9pbnQuaW5mKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIHZhciB4ID0gcG9pbnQueDtcbiAgdmFyIHkgPSBwb2ludC55O1xuXG4gIHZhciBheCA9IHRoaXMuYS5yZWRNdWwoeCk7XG4gIHZhciByaHMgPSB4LnJlZFNxcigpLnJlZE11bCh4KS5yZWRJQWRkKGF4KS5yZWRJQWRkKHRoaXMuYik7XG4gIHJldHVybiB5LnJlZFNxcigpLnJlZElTdWIocmhzKS5jbXBuKDApID09PSAwO1xufTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUuX2VuZG9XbmFmTXVsQWRkID1cbiAgICBmdW5jdGlvbiBfZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMsIGphY29iaWFuUmVzdWx0KSB7XG4gIHZhciBucG9pbnRzID0gdGhpcy5fZW5kb1duYWZUMTtcbiAgdmFyIG5jb2VmZnMgPSB0aGlzLl9lbmRvV25hZlQyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzcGxpdCA9IHRoaXMuX2VuZG9TcGxpdChjb2VmZnNbaV0pO1xuICAgIHZhciBwID0gcG9pbnRzW2ldO1xuICAgIHZhciBiZXRhID0gcC5fZ2V0QmV0YSgpO1xuXG4gICAgaWYgKHNwbGl0LmsxLm5lZ2F0aXZlKSB7XG4gICAgICBzcGxpdC5rMS5pbmVnKCk7XG4gICAgICBwID0gcC5uZWcodHJ1ZSk7XG4gICAgfVxuICAgIGlmIChzcGxpdC5rMi5uZWdhdGl2ZSkge1xuICAgICAgc3BsaXQuazIuaW5lZygpO1xuICAgICAgYmV0YSA9IGJldGEubmVnKHRydWUpO1xuICAgIH1cblxuICAgIG5wb2ludHNbaSAqIDJdID0gcDtcbiAgICBucG9pbnRzW2kgKiAyICsgMV0gPSBiZXRhO1xuICAgIG5jb2VmZnNbaSAqIDJdID0gc3BsaXQuazE7XG4gICAgbmNvZWZmc1tpICogMiArIDFdID0gc3BsaXQuazI7XG4gIH1cbiAgdmFyIHJlcyA9IHRoaXMuX3duYWZNdWxBZGQoMSwgbnBvaW50cywgbmNvZWZmcywgaSAqIDIsIGphY29iaWFuUmVzdWx0KTtcblxuICAvLyBDbGVhbi11cCByZWZlcmVuY2VzIHRvIHBvaW50cyBhbmQgY29lZmZpY2llbnRzXG4gIGZvciAodmFyIGogPSAwOyBqIDwgaSAqIDI7IGorKykge1xuICAgIG5wb2ludHNbal0gPSBudWxsO1xuICAgIG5jb2VmZnNbal0gPSBudWxsO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBQb2ludChjdXJ2ZSwgeCwgeSwgaXNSZWQpIHtcbiAgQmFzZS5CYXNlUG9pbnQuY2FsbCh0aGlzLCBjdXJ2ZSwgJ2FmZmluZScpO1xuICBpZiAoeCA9PT0gbnVsbCAmJiB5ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gbnVsbDtcbiAgICB0aGlzLnkgPSBudWxsO1xuICAgIHRoaXMuaW5mID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnggPSBuZXcgQk4oeCwgMTYpO1xuICAgIHRoaXMueSA9IG5ldyBCTih5LCAxNik7XG4gICAgLy8gRm9yY2UgcmVkZ29tZXJ5IHJlcHJlc2VudGF0aW9uIHdoZW4gbG9hZGluZyBmcm9tIEpTT05cbiAgICBpZiAoaXNSZWQpIHtcbiAgICAgIHRoaXMueC5mb3JjZVJlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgICB0aGlzLnkuZm9yY2VSZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMueC5yZWQpXG4gICAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICAgIGlmICghdGhpcy55LnJlZClcbiAgICAgIHRoaXMueSA9IHRoaXMueS50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG4gICAgdGhpcy5pbmYgPSBmYWxzZTtcbiAgfVxufVxuaW5oZXJpdHMoUG9pbnQsIEJhc2UuQmFzZVBvaW50KTtcblxuU2hvcnRDdXJ2ZS5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiBwb2ludCh4LCB5LCBpc1JlZCkge1xuICByZXR1cm4gbmV3IFBvaW50KHRoaXMsIHgsIHksIGlzUmVkKTtcbn07XG5cblNob3J0Q3VydmUucHJvdG90eXBlLnBvaW50RnJvbUpTT04gPSBmdW5jdGlvbiBwb2ludEZyb21KU09OKG9iaiwgcmVkKSB7XG4gIHJldHVybiBQb2ludC5mcm9tSlNPTih0aGlzLCBvYmosIHJlZCk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuX2dldEJldGEgPSBmdW5jdGlvbiBfZ2V0QmV0YSgpIHtcbiAgaWYgKCF0aGlzLmN1cnZlLmVuZG8pXG4gICAgcmV0dXJuO1xuXG4gIHZhciBwcmUgPSB0aGlzLnByZWNvbXB1dGVkO1xuICBpZiAocHJlICYmIHByZS5iZXRhKVxuICAgIHJldHVybiBwcmUuYmV0YTtcblxuICB2YXIgYmV0YSA9IHRoaXMuY3VydmUucG9pbnQodGhpcy54LnJlZE11bCh0aGlzLmN1cnZlLmVuZG8uYmV0YSksIHRoaXMueSk7XG4gIGlmIChwcmUpIHtcbiAgICB2YXIgY3VydmUgPSB0aGlzLmN1cnZlO1xuICAgIHZhciBlbmRvTXVsID0gZnVuY3Rpb24ocCkge1xuICAgICAgcmV0dXJuIGN1cnZlLnBvaW50KHAueC5yZWRNdWwoY3VydmUuZW5kby5iZXRhKSwgcC55KTtcbiAgICB9O1xuICAgIHByZS5iZXRhID0gYmV0YTtcbiAgICBiZXRhLnByZWNvbXB1dGVkID0ge1xuICAgICAgYmV0YTogbnVsbCxcbiAgICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICAgIHBvaW50czogcHJlLm5hZi5wb2ludHMubWFwKGVuZG9NdWwpXG4gICAgICB9LFxuICAgICAgZG91YmxlczogcHJlLmRvdWJsZXMgJiYge1xuICAgICAgICBzdGVwOiBwcmUuZG91Ymxlcy5zdGVwLFxuICAgICAgICBwb2ludHM6IHByZS5kb3VibGVzLnBvaW50cy5tYXAoZW5kb011bClcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiBiZXRhO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgaWYgKCF0aGlzLnByZWNvbXB1dGVkKVxuICAgIHJldHVybiBbIHRoaXMueCwgdGhpcy55IF07XG5cbiAgcmV0dXJuIFsgdGhpcy54LCB0aGlzLnksIHRoaXMucHJlY29tcHV0ZWQgJiYge1xuICAgIGRvdWJsZXM6IHRoaXMucHJlY29tcHV0ZWQuZG91YmxlcyAmJiB7XG4gICAgICBzdGVwOiB0aGlzLnByZWNvbXB1dGVkLmRvdWJsZXMuc3RlcCxcbiAgICAgIHBvaW50czogdGhpcy5wcmVjb21wdXRlZC5kb3VibGVzLnBvaW50cy5zbGljZSgxKVxuICAgIH0sXG4gICAgbmFmOiB0aGlzLnByZWNvbXB1dGVkLm5hZiAmJiB7XG4gICAgICB3bmQ6IHRoaXMucHJlY29tcHV0ZWQubmFmLnduZCxcbiAgICAgIHBvaW50czogdGhpcy5wcmVjb21wdXRlZC5uYWYucG9pbnRzLnNsaWNlKDEpXG4gICAgfVxuICB9IF07XG59O1xuXG5Qb2ludC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OKGN1cnZlLCBvYmosIHJlZCkge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpXG4gICAgb2JqID0gSlNPTi5wYXJzZShvYmopO1xuICB2YXIgcmVzID0gY3VydmUucG9pbnQob2JqWzBdLCBvYmpbMV0sIHJlZCk7XG4gIGlmICghb2JqWzJdKVxuICAgIHJldHVybiByZXM7XG5cbiAgZnVuY3Rpb24gb2JqMnBvaW50KG9iaikge1xuICAgIHJldHVybiBjdXJ2ZS5wb2ludChvYmpbMF0sIG9ialsxXSwgcmVkKTtcbiAgfVxuXG4gIHZhciBwcmUgPSBvYmpbMl07XG4gIHJlcy5wcmVjb21wdXRlZCA9IHtcbiAgICBiZXRhOiBudWxsLFxuICAgIGRvdWJsZXM6IHByZS5kb3VibGVzICYmIHtcbiAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICBwb2ludHM6IFsgcmVzIF0uY29uY2F0KHByZS5kb3VibGVzLnBvaW50cy5tYXAob2JqMnBvaW50KSlcbiAgICB9LFxuICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICB3bmQ6IHByZS5uYWYud25kLFxuICAgICAgcG9pbnRzOiBbIHJlcyBdLmNvbmNhdChwcmUubmFmLnBvaW50cy5tYXAob2JqMnBvaW50KSlcbiAgICB9XG4gIH07XG4gIHJldHVybiByZXM7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gJzxFQyBQb2ludCBJbmZpbml0eT4nO1xuICByZXR1cm4gJzxFQyBQb2ludCB4OiAnICsgdGhpcy54LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgK1xuICAgICAgJyB5OiAnICsgdGhpcy55LmZyb21SZWQoKS50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuaXNJbmZpbml0eSA9IGZ1bmN0aW9uIGlzSW5maW5pdHkoKSB7XG4gIHJldHVybiB0aGlzLmluZjtcbn07XG5cblBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiBwO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gUCArIFAgPSAyUFxuICBpZiAodGhpcy5lcShwKSlcbiAgICByZXR1cm4gdGhpcy5kYmwoKTtcblxuICAvLyBQICsgKC1QKSA9IE9cbiAgaWYgKHRoaXMubmVnKCkuZXEocCkpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgLy8gUCArIFEgPSBPXG4gIGlmICh0aGlzLnguY21wKHAueCkgPT09IDApXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIGMgPSB0aGlzLnkucmVkU3ViKHAueSk7XG4gIGlmIChjLmNtcG4oMCkgIT09IDApXG4gICAgYyA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIocC54KS5yZWRJbnZtKCkpO1xuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodGhpcy54KS5yZWRJU3ViKHAueCk7XG4gIHZhciBueSA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIobngpKS5yZWRJU3ViKHRoaXMueSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZGJsID0gZnVuY3Rpb24gZGJsKCkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gMlAgPSBPXG4gIHZhciB5czEgPSB0aGlzLnkucmVkQWRkKHRoaXMueSk7XG4gIGlmICh5czEuY21wbigwKSA9PT0gMClcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludChudWxsLCBudWxsKTtcblxuICB2YXIgYSA9IHRoaXMuY3VydmUuYTtcblxuICB2YXIgeDIgPSB0aGlzLngucmVkU3FyKCk7XG4gIHZhciBkeWludiA9IHlzMS5yZWRJbnZtKCk7XG4gIHZhciBjID0geDIucmVkQWRkKHgyKS5yZWRJQWRkKHgyKS5yZWRJQWRkKGEpLnJlZE11bChkeWludik7XG5cbiAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHRoaXMueC5yZWRBZGQodGhpcy54KSk7XG4gIHZhciBueSA9IGMucmVkTXVsKHRoaXMueC5yZWRTdWIobngpKS5yZWRJU3ViKHRoaXMueSk7XG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KG54LCBueSk7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuZ2V0WCA9IGZ1bmN0aW9uIGdldFgoKSB7XG4gIHJldHVybiB0aGlzLnguZnJvbVJlZCgpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmdldFkgPSBmdW5jdGlvbiBnZXRZKCkge1xuICByZXR1cm4gdGhpcy55LmZyb21SZWQoKTtcbn07XG5cblBvaW50LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwoaykge1xuICBrID0gbmV3IEJOKGssIDE2KTtcblxuICBpZiAodGhpcy5faGFzRG91YmxlcyhrKSlcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZml4ZWROYWZNdWwodGhpcywgayk7XG4gIGVsc2UgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQoWyB0aGlzIF0sIFsgayBdKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl93bmFmTXVsKHRoaXMsIGspO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm11bEFkZCA9IGZ1bmN0aW9uIG11bEFkZChrMSwgcDIsIGsyKSB7XG4gIHZhciBwb2ludHMgPSBbIHRoaXMsIHAyIF07XG4gIHZhciBjb2VmZnMgPSBbIGsxLCBrMiBdO1xuICBpZiAodGhpcy5jdXJ2ZS5lbmRvKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLl9lbmRvV25hZk11bEFkZChwb2ludHMsIGNvZWZmcyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bEFkZCgxLCBwb2ludHMsIGNvZWZmcywgMik7XG59O1xuXG5Qb2ludC5wcm90b3R5cGUuam11bEFkZCA9IGZ1bmN0aW9uIGptdWxBZGQoazEsIHAyLCBrMikge1xuICB2YXIgcG9pbnRzID0gWyB0aGlzLCBwMiBdO1xuICB2YXIgY29lZmZzID0gWyBrMSwgazIgXTtcbiAgaWYgKHRoaXMuY3VydmUuZW5kbylcbiAgICByZXR1cm4gdGhpcy5jdXJ2ZS5fZW5kb1duYWZNdWxBZGQocG9pbnRzLCBjb2VmZnMsIHRydWUpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuY3VydmUuX3duYWZNdWxBZGQoMSwgcG9pbnRzLCBjb2VmZnMsIDIsIHRydWUpO1xufTtcblxuUG9pbnQucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEocCkge1xuICByZXR1cm4gdGhpcyA9PT0gcCB8fFxuICAgICAgICAgdGhpcy5pbmYgPT09IHAuaW5mICYmXG4gICAgICAgICAgICAgKHRoaXMuaW5mIHx8IHRoaXMueC5jbXAocC54KSA9PT0gMCAmJiB0aGlzLnkuY21wKHAueSkgPT09IDApO1xufTtcblxuUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyhfcHJlY29tcHV0ZSkge1xuICBpZiAodGhpcy5pbmYpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHJlcyA9IHRoaXMuY3VydmUucG9pbnQodGhpcy54LCB0aGlzLnkucmVkTmVnKCkpO1xuICBpZiAoX3ByZWNvbXB1dGUgJiYgdGhpcy5wcmVjb21wdXRlZCkge1xuICAgIHZhciBwcmUgPSB0aGlzLnByZWNvbXB1dGVkO1xuICAgIHZhciBuZWdhdGUgPSBmdW5jdGlvbihwKSB7XG4gICAgICByZXR1cm4gcC5uZWcoKTtcbiAgICB9O1xuICAgIHJlcy5wcmVjb21wdXRlZCA9IHtcbiAgICAgIG5hZjogcHJlLm5hZiAmJiB7XG4gICAgICAgIHduZDogcHJlLm5hZi53bmQsXG4gICAgICAgIHBvaW50czogcHJlLm5hZi5wb2ludHMubWFwKG5lZ2F0ZSlcbiAgICAgIH0sXG4gICAgICBkb3VibGVzOiBwcmUuZG91YmxlcyAmJiB7XG4gICAgICAgIHN0ZXA6IHByZS5kb3VibGVzLnN0ZXAsXG4gICAgICAgIHBvaW50czogcHJlLmRvdWJsZXMucG9pbnRzLm1hcChuZWdhdGUpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuUG9pbnQucHJvdG90eXBlLnRvSiA9IGZ1bmN0aW9uIHRvSigpIHtcbiAgaWYgKHRoaXMuaW5mKVxuICAgIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChudWxsLCBudWxsLCBudWxsKTtcblxuICB2YXIgcmVzID0gdGhpcy5jdXJ2ZS5qcG9pbnQodGhpcy54LCB0aGlzLnksIHRoaXMuY3VydmUub25lKTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIEpQb2ludChjdXJ2ZSwgeCwgeSwgeikge1xuICBCYXNlLkJhc2VQb2ludC5jYWxsKHRoaXMsIGN1cnZlLCAnamFjb2JpYW4nKTtcbiAgaWYgKHggPT09IG51bGwgJiYgeSA9PT0gbnVsbCAmJiB6ID09PSBudWxsKSB7XG4gICAgdGhpcy54ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy55ID0gdGhpcy5jdXJ2ZS5vbmU7XG4gICAgdGhpcy56ID0gbmV3IEJOKDApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMueCA9IG5ldyBCTih4LCAxNik7XG4gICAgdGhpcy55ID0gbmV3IEJOKHksIDE2KTtcbiAgICB0aGlzLnogPSBuZXcgQk4oeiwgMTYpO1xuICB9XG4gIGlmICghdGhpcy54LnJlZClcbiAgICB0aGlzLnggPSB0aGlzLngudG9SZWQodGhpcy5jdXJ2ZS5yZWQpO1xuICBpZiAoIXRoaXMueS5yZWQpXG4gICAgdGhpcy55ID0gdGhpcy55LnRvUmVkKHRoaXMuY3VydmUucmVkKTtcbiAgaWYgKCF0aGlzLnoucmVkKVxuICAgIHRoaXMueiA9IHRoaXMuei50b1JlZCh0aGlzLmN1cnZlLnJlZCk7XG5cbiAgdGhpcy56T25lID0gdGhpcy56ID09PSB0aGlzLmN1cnZlLm9uZTtcbn1cbmluaGVyaXRzKEpQb2ludCwgQmFzZS5CYXNlUG9pbnQpO1xuXG5TaG9ydEN1cnZlLnByb3RvdHlwZS5qcG9pbnQgPSBmdW5jdGlvbiBqcG9pbnQoeCwgeSwgeikge1xuICByZXR1cm4gbmV3IEpQb2ludCh0aGlzLCB4LCB5LCB6KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUudG9QID0gZnVuY3Rpb24gdG9QKCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXMuY3VydmUucG9pbnQobnVsbCwgbnVsbCk7XG5cbiAgdmFyIHppbnYgPSB0aGlzLnoucmVkSW52bSgpO1xuICB2YXIgemludjIgPSB6aW52LnJlZFNxcigpO1xuICB2YXIgYXggPSB0aGlzLngucmVkTXVsKHppbnYyKTtcbiAgdmFyIGF5ID0gdGhpcy55LnJlZE11bCh6aW52MikucmVkTXVsKHppbnYpO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLnBvaW50KGF4LCBheSk7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZygpIHtcbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KHRoaXMueCwgdGhpcy55LnJlZE5lZygpLCB0aGlzLnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQocCkge1xuICAvLyBPICsgUCA9IFBcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiBwO1xuXG4gIC8vIFAgKyBPID0gUFxuICBpZiAocC5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gMTJNICsgNFMgKyA3QVxuICB2YXIgcHoyID0gcC56LnJlZFNxcigpO1xuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciB1MSA9IHRoaXMueC5yZWRNdWwocHoyKTtcbiAgdmFyIHUyID0gcC54LnJlZE11bCh6Mik7XG4gIHZhciBzMSA9IHRoaXMueS5yZWRNdWwocHoyLnJlZE11bChwLnopKTtcbiAgdmFyIHMyID0gcC55LnJlZE11bCh6Mi5yZWRNdWwodGhpcy56KSk7XG5cbiAgdmFyIGggPSB1MS5yZWRTdWIodTIpO1xuICB2YXIgciA9IHMxLnJlZFN1YihzMik7XG4gIGlmIChoLmNtcG4oMCkgPT09IDApIHtcbiAgICBpZiAoci5jbXBuKDApICE9PSAwKVxuICAgICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLmRibCgpO1xuICB9XG5cbiAgdmFyIGgyID0gaC5yZWRTcXIoKTtcbiAgdmFyIGgzID0gaDIucmVkTXVsKGgpO1xuICB2YXIgdiA9IHUxLnJlZE11bChoMik7XG5cbiAgdmFyIG54ID0gci5yZWRTcXIoKS5yZWRJQWRkKGgzKS5yZWRJU3ViKHYpLnJlZElTdWIodik7XG4gIHZhciBueSA9IHIucmVkTXVsKHYucmVkSVN1YihueCkpLnJlZElTdWIoczEucmVkTXVsKGgzKSk7XG4gIHZhciBueiA9IHRoaXMuei5yZWRNdWwocC56KS5yZWRNdWwoaCk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5taXhlZEFkZCA9IGZ1bmN0aW9uIG1peGVkQWRkKHApIHtcbiAgLy8gTyArIFAgPSBQXG4gIGlmICh0aGlzLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gcC50b0ooKTtcblxuICAvLyBQICsgTyA9IFBcbiAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIDhNICsgM1MgKyA3QVxuICB2YXIgejIgPSB0aGlzLnoucmVkU3FyKCk7XG4gIHZhciB1MSA9IHRoaXMueDtcbiAgdmFyIHUyID0gcC54LnJlZE11bCh6Mik7XG4gIHZhciBzMSA9IHRoaXMueTtcbiAgdmFyIHMyID0gcC55LnJlZE11bCh6MikucmVkTXVsKHRoaXMueik7XG5cbiAgdmFyIGggPSB1MS5yZWRTdWIodTIpO1xuICB2YXIgciA9IHMxLnJlZFN1YihzMik7XG4gIGlmIChoLmNtcG4oMCkgPT09IDApIHtcbiAgICBpZiAoci5jbXBuKDApICE9PSAwKVxuICAgICAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG51bGwsIG51bGwsIG51bGwpO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiB0aGlzLmRibCgpO1xuICB9XG5cbiAgdmFyIGgyID0gaC5yZWRTcXIoKTtcbiAgdmFyIGgzID0gaDIucmVkTXVsKGgpO1xuICB2YXIgdiA9IHUxLnJlZE11bChoMik7XG5cbiAgdmFyIG54ID0gci5yZWRTcXIoKS5yZWRJQWRkKGgzKS5yZWRJU3ViKHYpLnJlZElTdWIodik7XG4gIHZhciBueSA9IHIucmVkTXVsKHYucmVkSVN1YihueCkpLnJlZElTdWIoczEucmVkTXVsKGgzKSk7XG4gIHZhciBueiA9IHRoaXMuei5yZWRNdWwoaCk7XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5kYmxwID0gZnVuY3Rpb24gZGJscChwb3cpIHtcbiAgaWYgKHBvdyA9PT0gMClcbiAgICByZXR1cm4gdGhpcztcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuICBpZiAoIXBvdylcbiAgICByZXR1cm4gdGhpcy5kYmwoKTtcblxuICBpZiAodGhpcy5jdXJ2ZS56ZXJvQSB8fCB0aGlzLmN1cnZlLnRocmVlQSkge1xuICAgIHZhciByID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvdzsgaSsrKVxuICAgICAgciA9IHIuZGJsKCk7XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICAvLyAxTSArIDJTICsgMUEgKyBOICogKDRTICsgNU0gKyA4QSlcbiAgLy8gTiA9IDEgPT4gNk0gKyA2UyArIDlBXG4gIHZhciBhID0gdGhpcy5jdXJ2ZS5hO1xuICB2YXIgdGludiA9IHRoaXMuY3VydmUudGludjtcblxuICB2YXIganggPSB0aGlzLng7XG4gIHZhciBqeSA9IHRoaXMueTtcbiAgdmFyIGp6ID0gdGhpcy56O1xuICB2YXIgano0ID0ganoucmVkU3FyKCkucmVkU3FyKCk7XG5cbiAgLy8gUmV1c2UgcmVzdWx0c1xuICB2YXIganlkID0gankucmVkQWRkKGp5KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3c7IGkrKykge1xuICAgIHZhciBqeDIgPSBqeC5yZWRTcXIoKTtcbiAgICB2YXIganlkMiA9IGp5ZC5yZWRTcXIoKTtcbiAgICB2YXIganlkNCA9IGp5ZDIucmVkU3FyKCk7XG4gICAgdmFyIGMgPSBqeDIucmVkQWRkKGp4MikucmVkSUFkZChqeDIpLnJlZElBZGQoYS5yZWRNdWwoano0KSk7XG5cbiAgICB2YXIgdDEgPSBqeC5yZWRNdWwoanlkMik7XG4gICAgdmFyIG54ID0gYy5yZWRTcXIoKS5yZWRJU3ViKHQxLnJlZEFkZCh0MSkpO1xuICAgIHZhciB0MiA9IHQxLnJlZElTdWIobngpO1xuICAgIHZhciBkbnkgPSBjLnJlZE11bCh0Mik7XG4gICAgZG55ID0gZG55LnJlZElBZGQoZG55KS5yZWRJU3ViKGp5ZDQpO1xuICAgIHZhciBueiA9IGp5ZC5yZWRNdWwoanopO1xuICAgIGlmIChpICsgMSA8IHBvdylcbiAgICAgIGp6NCA9IGp6NC5yZWRNdWwoanlkNCk7XG5cbiAgICBqeCA9IG54O1xuICAgIGp6ID0gbno7XG4gICAganlkID0gZG55O1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KGp4LCBqeWQucmVkTXVsKHRpbnYpLCBqeik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmRibCA9IGZ1bmN0aW9uIGRibCgpIHtcbiAgaWYgKHRoaXMuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIGlmICh0aGlzLmN1cnZlLnplcm9BKVxuICAgIHJldHVybiB0aGlzLl96ZXJvRGJsKCk7XG4gIGVsc2UgaWYgKHRoaXMuY3VydmUudGhyZWVBKVxuICAgIHJldHVybiB0aGlzLl90aHJlZURibCgpO1xuICBlbHNlXG4gICAgcmV0dXJuIHRoaXMuX2RibCgpO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5femVyb0RibCA9IGZ1bmN0aW9uIF96ZXJvRGJsKCkge1xuICB2YXIgbng7XG4gIHZhciBueTtcbiAgdmFyIG56O1xuICAvLyBaID0gMVxuICBpZiAodGhpcy56T25lKSB7XG4gICAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0wLmh0bWxcbiAgICAvLyAgICAgI2RvdWJsaW5nLW1kYmwtMjAwNy1ibFxuICAgIC8vIDFNICsgNVMgKyAxNEFcblxuICAgIC8vIFhYID0gWDFeMlxuICAgIHZhciB4eCA9IHRoaXMueC5yZWRTcXIoKTtcbiAgICAvLyBZWSA9IFkxXjJcbiAgICB2YXIgeXkgPSB0aGlzLnkucmVkU3FyKCk7XG4gICAgLy8gWVlZWSA9IFlZXjJcbiAgICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAgIC8vIFMgPSAyICogKChYMSArIFlZKV4yIC0gWFggLSBZWVlZKVxuICAgIHZhciBzID0gdGhpcy54LnJlZEFkZCh5eSkucmVkU3FyKCkucmVkSVN1Yih4eCkucmVkSVN1Yih5eXl5KTtcbiAgICBzID0gcy5yZWRJQWRkKHMpO1xuICAgIC8vIE0gPSAzICogWFggKyBhOyBhID0gMFxuICAgIHZhciBtID0geHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KTtcbiAgICAvLyBUID0gTSBeIDIgLSAyKlNcbiAgICB2YXIgdCA9IG0ucmVkU3FyKCkucmVkSVN1YihzKS5yZWRJU3ViKHMpO1xuXG4gICAgLy8gOCAqIFlZWVlcbiAgICB2YXIgeXl5eTggPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICB5eXl5OCA9IHl5eXk4LnJlZElBZGQoeXl5eTgpO1xuXG4gICAgLy8gWDMgPSBUXG4gICAgbnggPSB0O1xuICAgIC8vIFkzID0gTSAqIChTIC0gVCkgLSA4ICogWVlZWVxuICAgIG55ID0gbS5yZWRNdWwocy5yZWRJU3ViKHQpKS5yZWRJU3ViKHl5eXk4KTtcbiAgICAvLyBaMyA9IDIqWTFcbiAgICBueiA9IHRoaXMueS5yZWRBZGQodGhpcy55KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTAuaHRtbFxuICAgIC8vICAgICAjZG91YmxpbmctZGJsLTIwMDktbFxuICAgIC8vIDJNICsgNVMgKyAxM0FcblxuICAgIC8vIEEgPSBYMV4yXG4gICAgdmFyIGEgPSB0aGlzLngucmVkU3FyKCk7XG4gICAgLy8gQiA9IFkxXjJcbiAgICB2YXIgYiA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBDID0gQl4yXG4gICAgdmFyIGMgPSBiLnJlZFNxcigpO1xuICAgIC8vIEQgPSAyICogKChYMSArIEIpXjIgLSBBIC0gQylcbiAgICB2YXIgZCA9IHRoaXMueC5yZWRBZGQoYikucmVkU3FyKCkucmVkSVN1YihhKS5yZWRJU3ViKGMpO1xuICAgIGQgPSBkLnJlZElBZGQoZCk7XG4gICAgLy8gRSA9IDMgKiBBXG4gICAgdmFyIGUgPSBhLnJlZEFkZChhKS5yZWRJQWRkKGEpO1xuICAgIC8vIEYgPSBFXjJcbiAgICB2YXIgZiA9IGUucmVkU3FyKCk7XG5cbiAgICAvLyA4ICogQ1xuICAgIHZhciBjOCA9IGMucmVkSUFkZChjKTtcbiAgICBjOCA9IGM4LnJlZElBZGQoYzgpO1xuICAgIGM4ID0gYzgucmVkSUFkZChjOCk7XG5cbiAgICAvLyBYMyA9IEYgLSAyICogRFxuICAgIG54ID0gZi5yZWRJU3ViKGQpLnJlZElTdWIoZCk7XG4gICAgLy8gWTMgPSBFICogKEQgLSBYMykgLSA4ICogQ1xuICAgIG55ID0gZS5yZWRNdWwoZC5yZWRJU3ViKG54KSkucmVkSVN1YihjOCk7XG4gICAgLy8gWjMgPSAyICogWTEgKiBaMVxuICAgIG56ID0gdGhpcy55LnJlZE11bCh0aGlzLnopO1xuICAgIG56ID0gbnoucmVkSUFkZChueik7XG4gIH1cblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLl90aHJlZURibCA9IGZ1bmN0aW9uIF90aHJlZURibCgpIHtcbiAgdmFyIG54O1xuICB2YXIgbnk7XG4gIHZhciBuejtcbiAgLy8gWiA9IDFcbiAgaWYgKHRoaXMuek9uZSkge1xuICAgIC8vIGh5cGVyZWxsaXB0aWMub3JnL0VGRC9nMXAvYXV0by1zaG9ydHctamFjb2JpYW4tMy5odG1sXG4gICAgLy8gICAgICNkb3VibGluZy1tZGJsLTIwMDctYmxcbiAgICAvLyAxTSArIDVTICsgMTVBXG5cbiAgICAvLyBYWCA9IFgxXjJcbiAgICB2YXIgeHggPSB0aGlzLngucmVkU3FyKCk7XG4gICAgLy8gWVkgPSBZMV4yXG4gICAgdmFyIHl5ID0gdGhpcy55LnJlZFNxcigpO1xuICAgIC8vIFlZWVkgPSBZWV4yXG4gICAgdmFyIHl5eXkgPSB5eS5yZWRTcXIoKTtcbiAgICAvLyBTID0gMiAqICgoWDEgKyBZWSleMiAtIFhYIC0gWVlZWSlcbiAgICB2YXIgcyA9IHRoaXMueC5yZWRBZGQoeXkpLnJlZFNxcigpLnJlZElTdWIoeHgpLnJlZElTdWIoeXl5eSk7XG4gICAgcyA9IHMucmVkSUFkZChzKTtcbiAgICAvLyBNID0gMyAqIFhYICsgYVxuICAgIHZhciBtID0geHgucmVkQWRkKHh4KS5yZWRJQWRkKHh4KS5yZWRJQWRkKHRoaXMuY3VydmUuYSk7XG4gICAgLy8gVCA9IE1eMiAtIDIgKiBTXG4gICAgdmFyIHQgPSBtLnJlZFNxcigpLnJlZElTdWIocykucmVkSVN1YihzKTtcbiAgICAvLyBYMyA9IFRcbiAgICBueCA9IHQ7XG4gICAgLy8gWTMgPSBNICogKFMgLSBUKSAtIDggKiBZWVlZXG4gICAgdmFyIHl5eXk4ID0geXl5eS5yZWRJQWRkKHl5eXkpO1xuICAgIHl5eXk4ID0geXl5eTgucmVkSUFkZCh5eXl5OCk7XG4gICAgeXl5eTggPSB5eXl5OC5yZWRJQWRkKHl5eXk4KTtcbiAgICBueSA9IG0ucmVkTXVsKHMucmVkSVN1Yih0KSkucmVkSVN1Yih5eXl5OCk7XG4gICAgLy8gWjMgPSAyICogWTFcbiAgICBueiA9IHRoaXMueS5yZWRBZGQodGhpcy55KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBoeXBlcmVsbGlwdGljLm9yZy9FRkQvZzFwL2F1dG8tc2hvcnR3LWphY29iaWFuLTMuaHRtbCNkb3VibGluZy1kYmwtMjAwMS1iXG4gICAgLy8gM00gKyA1U1xuXG4gICAgLy8gZGVsdGEgPSBaMV4yXG4gICAgdmFyIGRlbHRhID0gdGhpcy56LnJlZFNxcigpO1xuICAgIC8vIGdhbW1hID0gWTFeMlxuICAgIHZhciBnYW1tYSA9IHRoaXMueS5yZWRTcXIoKTtcbiAgICAvLyBiZXRhID0gWDEgKiBnYW1tYVxuICAgIHZhciBiZXRhID0gdGhpcy54LnJlZE11bChnYW1tYSk7XG4gICAgLy8gYWxwaGEgPSAzICogKFgxIC0gZGVsdGEpICogKFgxICsgZGVsdGEpXG4gICAgdmFyIGFscGhhID0gdGhpcy54LnJlZFN1YihkZWx0YSkucmVkTXVsKHRoaXMueC5yZWRBZGQoZGVsdGEpKTtcbiAgICBhbHBoYSA9IGFscGhhLnJlZEFkZChhbHBoYSkucmVkSUFkZChhbHBoYSk7XG4gICAgLy8gWDMgPSBhbHBoYV4yIC0gOCAqIGJldGFcbiAgICB2YXIgYmV0YTQgPSBiZXRhLnJlZElBZGQoYmV0YSk7XG4gICAgYmV0YTQgPSBiZXRhNC5yZWRJQWRkKGJldGE0KTtcbiAgICB2YXIgYmV0YTggPSBiZXRhNC5yZWRBZGQoYmV0YTQpO1xuICAgIG54ID0gYWxwaGEucmVkU3FyKCkucmVkSVN1YihiZXRhOCk7XG4gICAgLy8gWjMgPSAoWTEgKyBaMSleMiAtIGdhbW1hIC0gZGVsdGFcbiAgICBueiA9IHRoaXMueS5yZWRBZGQodGhpcy56KS5yZWRTcXIoKS5yZWRJU3ViKGdhbW1hKS5yZWRJU3ViKGRlbHRhKTtcbiAgICAvLyBZMyA9IGFscGhhICogKDQgKiBiZXRhIC0gWDMpIC0gOCAqIGdhbW1hXjJcbiAgICB2YXIgZ2dhbW1hOCA9IGdhbW1hLnJlZFNxcigpO1xuICAgIGdnYW1tYTggPSBnZ2FtbWE4LnJlZElBZGQoZ2dhbW1hOCk7XG4gICAgZ2dhbW1hOCA9IGdnYW1tYTgucmVkSUFkZChnZ2FtbWE4KTtcbiAgICBnZ2FtbWE4ID0gZ2dhbW1hOC5yZWRJQWRkKGdnYW1tYTgpO1xuICAgIG55ID0gYWxwaGEucmVkTXVsKGJldGE0LnJlZElTdWIobngpKS5yZWRJU3ViKGdnYW1tYTgpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuY3VydmUuanBvaW50KG54LCBueSwgbnopO1xufTtcblxuSlBvaW50LnByb3RvdHlwZS5fZGJsID0gZnVuY3Rpb24gX2RibCgpIHtcbiAgdmFyIGEgPSB0aGlzLmN1cnZlLmE7XG5cbiAgLy8gNE0gKyA2UyArIDEwQVxuICB2YXIganggPSB0aGlzLng7XG4gIHZhciBqeSA9IHRoaXMueTtcbiAgdmFyIGp6ID0gdGhpcy56O1xuICB2YXIgano0ID0ganoucmVkU3FyKCkucmVkU3FyKCk7XG5cbiAgdmFyIGp4MiA9IGp4LnJlZFNxcigpO1xuICB2YXIgankyID0gankucmVkU3FyKCk7XG5cbiAgdmFyIGMgPSBqeDIucmVkQWRkKGp4MikucmVkSUFkZChqeDIpLnJlZElBZGQoYS5yZWRNdWwoano0KSk7XG5cbiAgdmFyIGp4ZDQgPSBqeC5yZWRBZGQoangpO1xuICBqeGQ0ID0ganhkNC5yZWRJQWRkKGp4ZDQpO1xuICB2YXIgdDEgPSBqeGQ0LnJlZE11bChqeTIpO1xuICB2YXIgbnggPSBjLnJlZFNxcigpLnJlZElTdWIodDEucmVkQWRkKHQxKSk7XG4gIHZhciB0MiA9IHQxLnJlZElTdWIobngpO1xuXG4gIHZhciBqeWQ4ID0gankyLnJlZFNxcigpO1xuICBqeWQ4ID0ganlkOC5yZWRJQWRkKGp5ZDgpO1xuICBqeWQ4ID0ganlkOC5yZWRJQWRkKGp5ZDgpO1xuICBqeWQ4ID0ganlkOC5yZWRJQWRkKGp5ZDgpO1xuICB2YXIgbnkgPSBjLnJlZE11bCh0MikucmVkSVN1YihqeWQ4KTtcbiAgdmFyIG56ID0gankucmVkQWRkKGp5KS5yZWRNdWwoanopO1xuXG4gIHJldHVybiB0aGlzLmN1cnZlLmpwb2ludChueCwgbnksIG56KTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUudHJwbCA9IGZ1bmN0aW9uIHRycGwoKSB7XG4gIGlmICghdGhpcy5jdXJ2ZS56ZXJvQSlcbiAgICByZXR1cm4gdGhpcy5kYmwoKS5hZGQodGhpcyk7XG5cbiAgLy8gaHlwZXJlbGxpcHRpYy5vcmcvRUZEL2cxcC9hdXRvLXNob3J0dy1qYWNvYmlhbi0wLmh0bWwjdHJpcGxpbmctdHBsLTIwMDctYmxcbiAgLy8gNU0gKyAxMFMgKyAuLi5cblxuICAvLyBYWCA9IFgxXjJcbiAgdmFyIHh4ID0gdGhpcy54LnJlZFNxcigpO1xuICAvLyBZWSA9IFkxXjJcbiAgdmFyIHl5ID0gdGhpcy55LnJlZFNxcigpO1xuICAvLyBaWiA9IFoxXjJcbiAgdmFyIHp6ID0gdGhpcy56LnJlZFNxcigpO1xuICAvLyBZWVlZID0gWVleMlxuICB2YXIgeXl5eSA9IHl5LnJlZFNxcigpO1xuICAvLyBNID0gMyAqIFhYICsgYSAqIFpaMjsgYSA9IDBcbiAgdmFyIG0gPSB4eC5yZWRBZGQoeHgpLnJlZElBZGQoeHgpO1xuICAvLyBNTSA9IE1eMlxuICB2YXIgbW0gPSBtLnJlZFNxcigpO1xuICAvLyBFID0gNiAqICgoWDEgKyBZWSleMiAtIFhYIC0gWVlZWSkgLSBNTVxuICB2YXIgZSA9IHRoaXMueC5yZWRBZGQoeXkpLnJlZFNxcigpLnJlZElTdWIoeHgpLnJlZElTdWIoeXl5eSk7XG4gIGUgPSBlLnJlZElBZGQoZSk7XG4gIGUgPSBlLnJlZEFkZChlKS5yZWRJQWRkKGUpO1xuICBlID0gZS5yZWRJU3ViKG1tKTtcbiAgLy8gRUUgPSBFXjJcbiAgdmFyIGVlID0gZS5yZWRTcXIoKTtcbiAgLy8gVCA9IDE2KllZWVlcbiAgdmFyIHQgPSB5eXl5LnJlZElBZGQoeXl5eSk7XG4gIHQgPSB0LnJlZElBZGQodCk7XG4gIHQgPSB0LnJlZElBZGQodCk7XG4gIHQgPSB0LnJlZElBZGQodCk7XG4gIC8vIFUgPSAoTSArIEUpXjIgLSBNTSAtIEVFIC0gVFxuICB2YXIgdSA9IG0ucmVkSUFkZChlKS5yZWRTcXIoKS5yZWRJU3ViKG1tKS5yZWRJU3ViKGVlKS5yZWRJU3ViKHQpO1xuICAvLyBYMyA9IDQgKiAoWDEgKiBFRSAtIDQgKiBZWSAqIFUpXG4gIHZhciB5eXU0ID0geXkucmVkTXVsKHUpO1xuICB5eXU0ID0geXl1NC5yZWRJQWRkKHl5dTQpO1xuICB5eXU0ID0geXl1NC5yZWRJQWRkKHl5dTQpO1xuICB2YXIgbnggPSB0aGlzLngucmVkTXVsKGVlKS5yZWRJU3ViKHl5dTQpO1xuICBueCA9IG54LnJlZElBZGQobngpO1xuICBueCA9IG54LnJlZElBZGQobngpO1xuICAvLyBZMyA9IDggKiBZMSAqIChVICogKFQgLSBVKSAtIEUgKiBFRSlcbiAgdmFyIG55ID0gdGhpcy55LnJlZE11bCh1LnJlZE11bCh0LnJlZElTdWIodSkpLnJlZElTdWIoZS5yZWRNdWwoZWUpKSk7XG4gIG55ID0gbnkucmVkSUFkZChueSk7XG4gIG55ID0gbnkucmVkSUFkZChueSk7XG4gIG55ID0gbnkucmVkSUFkZChueSk7XG4gIC8vIFozID0gKFoxICsgRSleMiAtIFpaIC0gRUVcbiAgdmFyIG56ID0gdGhpcy56LnJlZEFkZChlKS5yZWRTcXIoKS5yZWRJU3ViKHp6KS5yZWRJU3ViKGVlKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5qcG9pbnQobngsIG55LCBueik7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bChrLCBrYmFzZSkge1xuICBrID0gbmV3IEJOKGssIGtiYXNlKTtcblxuICByZXR1cm4gdGhpcy5jdXJ2ZS5fd25hZk11bCh0aGlzLCBrKTtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcShwKSB7XG4gIGlmIChwLnR5cGUgPT09ICdhZmZpbmUnKVxuICAgIHJldHVybiB0aGlzLmVxKHAudG9KKCkpO1xuXG4gIGlmICh0aGlzID09PSBwKVxuICAgIHJldHVybiB0cnVlO1xuXG4gIC8vIHgxICogejJeMiA9PSB4MiAqIHoxXjJcbiAgdmFyIHoyID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgcHoyID0gcC56LnJlZFNxcigpO1xuICBpZiAodGhpcy54LnJlZE11bChwejIpLnJlZElTdWIocC54LnJlZE11bCh6MikpLmNtcG4oMCkgIT09IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIHkxICogejJeMyA9PSB5MiAqIHoxXjNcbiAgdmFyIHozID0gejIucmVkTXVsKHRoaXMueik7XG4gIHZhciBwejMgPSBwejIucmVkTXVsKHAueik7XG4gIHJldHVybiB0aGlzLnkucmVkTXVsKHB6MykucmVkSVN1YihwLnkucmVkTXVsKHozKSkuY21wbigwKSA9PT0gMDtcbn07XG5cbkpQb2ludC5wcm90b3R5cGUuZXFYVG9QID0gZnVuY3Rpb24gZXFYVG9QKHgpIHtcbiAgdmFyIHpzID0gdGhpcy56LnJlZFNxcigpO1xuICB2YXIgcnggPSB4LnRvUmVkKHRoaXMuY3VydmUucmVkKS5yZWRNdWwoenMpO1xuICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgdmFyIHhjID0geC5jbG9uZSgpO1xuICB2YXIgdCA9IHRoaXMuY3VydmUucmVkTi5yZWRNdWwoenMpO1xuICBmb3IgKDs7KSB7XG4gICAgeGMuaWFkZCh0aGlzLmN1cnZlLm4pO1xuICAgIGlmICh4Yy5jbXAodGhpcy5jdXJ2ZS5wKSA+PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcngucmVkSUFkZCh0KTtcbiAgICBpZiAodGhpcy54LmNtcChyeCkgPT09IDApXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0KCkge1xuICBpZiAodGhpcy5pc0luZmluaXR5KCkpXG4gICAgcmV0dXJuICc8RUMgSlBvaW50IEluZmluaXR5Pic7XG4gIHJldHVybiAnPEVDIEpQb2ludCB4OiAnICsgdGhpcy54LnRvU3RyaW5nKDE2LCAyKSArXG4gICAgICAnIHk6ICcgKyB0aGlzLnkudG9TdHJpbmcoMTYsIDIpICtcbiAgICAgICcgejogJyArIHRoaXMuei50b1N0cmluZygxNiwgMikgKyAnPic7XG59O1xuXG5KUG9pbnQucHJvdG90eXBlLmlzSW5maW5pdHkgPSBmdW5jdGlvbiBpc0luZmluaXR5KCkge1xuICAvLyBYWFggVGhpcyBjb2RlIGFzc3VtZXMgdGhhdCB6ZXJvIGlzIGFsd2F5cyB6ZXJvIGluIHJlZFxuICByZXR1cm4gdGhpcy56LmNtcG4oMCkgPT09IDA7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VydmVzID0gZXhwb3J0cztcblxudmFyIGhhc2ggPSByZXF1aXJlKCdoYXNoLmpzJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi9lbGxpcHRpYycpO1xuXG52YXIgYXNzZXJ0ID0gZWxsaXB0aWMudXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBQcmVzZXRDdXJ2ZShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnR5cGUgPT09ICdzaG9ydCcpXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5jdXJ2ZS5zaG9ydChvcHRpb25zKTtcbiAgZWxzZSBpZiAob3B0aW9ucy50eXBlID09PSAnZWR3YXJkcycpXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5jdXJ2ZS5lZHdhcmRzKG9wdGlvbnMpO1xuICBlbHNlXG4gICAgdGhpcy5jdXJ2ZSA9IG5ldyBlbGxpcHRpYy5jdXJ2ZS5tb250KG9wdGlvbnMpO1xuICB0aGlzLmcgPSB0aGlzLmN1cnZlLmc7XG4gIHRoaXMubiA9IHRoaXMuY3VydmUubjtcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoO1xuXG4gIGFzc2VydCh0aGlzLmcudmFsaWRhdGUoKSwgJ0ludmFsaWQgY3VydmUnKTtcbiAgYXNzZXJ0KHRoaXMuZy5tdWwodGhpcy5uKS5pc0luZmluaXR5KCksICdJbnZhbGlkIGN1cnZlLCBHKk4gIT0gTycpO1xufVxuY3VydmVzLlByZXNldEN1cnZlID0gUHJlc2V0Q3VydmU7XG5cbmZ1bmN0aW9uIGRlZmluZUN1cnZlKG5hbWUsIG9wdGlvbnMpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN1cnZlcywgbmFtZSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3VydmUgPSBuZXcgUHJlc2V0Q3VydmUob3B0aW9ucyk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3VydmVzLCBuYW1lLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IGN1cnZlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjdXJ2ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5kZWZpbmVDdXJ2ZSgncDE5MicsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6ICdwMTkyJyxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzY0MjEwNTE5IGU1OWM4MGU3IDBmYTdlOWFiIDcyMjQzMDQ5IGZlYjhkZWVjIGMxNDZiOWIxJyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDk5ZGVmODM2IDE0NmJjOWIxIGI0ZDIyODMxJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzE4OGRhODBlIGIwMzA5MGY2IDdjYmYyMGViIDQzYTE4ODAwIGY0ZmYwYWZkIDgyZmYxMDEyJyxcbiAgICAnMDcxOTJiOTUgZmZjOGRhNzggNjMxMDExZWQgNmIyNGNkZDUgNzNmOTc3YTEgMWU3OTQ4MTEnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDIyNCcsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6ICdwMjI0JyxcbiAgcDogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIDAwMDAwMDAxJyxcbiAgYTogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlJyxcbiAgYjogJ2I0MDUwYTg1IDBjMDRiM2FiIGY1NDEzMjU2IDUwNDRiMGI3IGQ3YmZkOGJhIDI3MGIzOTQzIDIzNTVmZmI0JyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmYxNmEyIGUwYjhmMDNlIDEzZGQyOTQ1IDVjNWMyYTNkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJ2I3MGUwY2JkIDZiYjRiZjdmIDMyMTM5MGI5IDRhMDNjMWQzIDU2YzIxMTIyIDM0MzI4MGQ2IDExNWMxZDIxJyxcbiAgICAnYmQzNzYzODggYjVmNzIzZmIgNGMyMmRmZTYgY2Q0Mzc1YTAgNWEwNzQ3NjQgNDRkNTgxOTkgODUwMDdlMzQnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDI1NicsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICdmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiAwMDAwMDAwMSAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmYycsXG4gIGI6ICc1YWM2MzVkOCBhYTNhOTNlNyBiM2ViYmQ1NSA3Njk4ODZiYyA2NTFkMDZiMCBjYzUzYjBmNiAzYmNlM2MzZSAyN2QyNjA0YicsXG4gIG46ICdmZmZmZmZmZiAwMDAwMDAwMCBmZmZmZmZmZiBmZmZmZmZmZiBiY2U2ZmFhZCBhNzE3OWU4NCBmM2I5Y2FjMiBmYzYzMjU1MScsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc2YjE3ZDFmMiBlMTJjNDI0NyBmOGJjZTZlNSA2M2E0NDBmMiA3NzAzN2Q4MSAyZGViMzNhMCBmNGExMzk0NSBkODk4YzI5NicsXG4gICAgJzRmZTM0MmUyIGZlMWE3ZjliIDhlZTdlYjRhIDdjMGY5ZTE2IDJiY2UzMzU3IDZiMzE1ZWNlIGNiYjY0MDY4IDM3YmY1MWY1J1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ3AzODQnLCB7XG4gIHR5cGU6ICdzaG9ydCcsXG4gIHByaW1lOiBudWxsLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZSBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCBmZmZmZmZmZicsXG4gIGE6ICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZlIGZmZmZmZmZmIDAwMDAwMDAwIDAwMDAwMDAwIGZmZmZmZmZjJyxcbiAgYjogJ2IzMzEyZmE3IGUyM2VlN2U0IDk4OGUwNTZiIGUzZjgyZDE5IDE4MWQ5YzZlIGZlODE0MTEyIDAzMTQwODhmICcgK1xuICAgICAnNTAxMzg3NWEgYzY1NjM5OGQgOGEyZWQxOWQgMmE4NWM4ZWQgZDNlYzJhZWYnLFxuICBuOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgYzc2MzRkODEgJyArXG4gICAgICdmNDM3MmRkZiA1ODFhMGRiMiA0OGIwYTc3YSBlY2VjMTk2YSBjY2M1Mjk3MycsXG4gIGhhc2g6IGhhc2guc2hhMzg0LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICdhYTg3Y2EyMiBiZThiMDUzNyA4ZWIxYzcxZSBmMzIwYWQ3NCA2ZTFkM2I2MiA4YmE3OWI5OCA1OWY3NDFlMCA4MjU0MmEzOCAnICtcbiAgICAnNTUwMmYyNWQgYmY1NTI5NmMgM2E1NDVlMzggNzI3NjBhYjcnLFxuICAgICczNjE3ZGU0YSA5NjI2MmM2ZiA1ZDllOThiZiA5MjkyZGMyOSBmOGY0MWRiZCAyODlhMTQ3YyBlOWRhMzExMyBiNWYwYjhjMCAnICtcbiAgICAnMGE2MGIxY2UgMWQ3ZTgxOWQgN2E0MzFkN2MgOTBlYTBlNWYnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgncDUyMScsIHtcbiAgdHlwZTogJ3Nob3J0JyxcbiAgcHJpbWU6IG51bGwsXG4gIHA6ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmICcgK1xuICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYnLFxuICBhOiAnMDAwMDAxZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgJyArXG4gICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZjJyxcbiAgYjogJzAwMDAwMDUxIDk1M2ViOTYxIDhlMWM5YTFmIDkyOWEyMWEwIGI2ODU0MGVlIGEyZGE3MjViICcgK1xuICAgICAnOTliMzE1ZjMgYjhiNDg5OTEgOGVmMTA5ZTEgNTYxOTM5NTEgZWM3ZTkzN2IgMTY1MmMwYmQgJyArXG4gICAgICczYmIxYmYwNyAzNTczZGY4OCAzZDJjMzRmMSBlZjQ1MWZkNCA2YjUwM2YwMCcsXG4gIG46ICcwMDAwMDFmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAnICtcbiAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZhIDUxODY4NzgzIGJmMmY5NjZiIDdmY2MwMTQ4ICcgK1xuICAgICAnZjcwOWE1ZDAgM2JiNWM5YjggODk5YzQ3YWUgYmI2ZmI3MWUgOTEzODY0MDknLFxuICBoYXNoOiBoYXNoLnNoYTUxMixcbiAgZ1JlZDogZmFsc2UsXG4gIGc6IFtcbiAgICAnMDAwMDAwYzYgODU4ZTA2YjcgMDQwNGU5Y2QgOWUzZWNiNjYgMjM5NWI0NDIgOWM2NDgxMzkgJyArXG4gICAgJzA1M2ZiNTIxIGY4MjhhZjYwIDZiNGQzZGJhIGExNGI1ZTc3IGVmZTc1OTI4IGZlMWRjMTI3ICcgK1xuICAgICdhMmZmYThkZSAzMzQ4YjNjMSA4NTZhNDI5YiBmOTdlN2UzMSBjMmU1YmQ2NicsXG4gICAgJzAwMDAwMTE4IDM5Mjk2YTc4IDlhM2JjMDA0IDVjOGE1ZmI0IDJjN2QxYmQ5IDk4ZjU0NDQ5ICcgK1xuICAgICc1NzliNDQ2OCAxN2FmYmQxNyAyNzNlNjYyYyA5N2VlNzI5OSA1ZWY0MjY0MCBjNTUwYjkwMSAnICtcbiAgICAnM2ZhZDA3NjEgMzUzYzcwODYgYTI3MmMyNDAgODhiZTk0NzYgOWZkMTY2NTAnXG4gIF1cbn0pO1xuXG5kZWZpbmVDdXJ2ZSgnY3VydmUyNTUxOScsIHtcbiAgdHlwZTogJ21vbnQnLFxuICBwcmltZTogJ3AyNTUxOScsXG4gIHA6ICc3ZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmVkJyxcbiAgYTogJzc2ZDA2JyxcbiAgYjogJzEnLFxuICBuOiAnMTAwMDAwMDAwMDAwMDAwMCAwMDAwMDAwMDAwMDAwMDAwIDE0ZGVmOWRlYTJmNzljZDYgNTgxMjYzMWE1Y2Y1ZDNlZCcsXG4gIGhhc2g6IGhhc2guc2hhMjU2LFxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc5J1xuICBdXG59KTtcblxuZGVmaW5lQ3VydmUoJ2VkMjU1MTknLCB7XG4gIHR5cGU6ICdlZHdhcmRzJyxcbiAgcHJpbWU6ICdwMjU1MTknLFxuICBwOiAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcsXG4gIGE6ICctMScsXG4gIGM6ICcxJyxcbiAgLy8gLTEyMTY2NSAqICgxMjE2NjZeKC0xKSkgKG1vZCBQKVxuICBkOiAnNTIwMzZjZWUyYjZmZmU3MyA4Y2M3NDA3OTc3NzllODk4IDAwNzAwYTRkNDE0MWQ4YWIgNzVlYjRkY2ExMzU5NzhhMycsXG4gIG46ICcxMDAwMDAwMDAwMDAwMDAwIDAwMDAwMDAwMDAwMDAwMDAgMTRkZWY5ZGVhMmY3OWNkNiA1ODEyNjMxYTVjZjVkM2VkJyxcbiAgaGFzaDogaGFzaC5zaGEyNTYsXG4gIGdSZWQ6IGZhbHNlLFxuICBnOiBbXG4gICAgJzIxNjkzNmQzY2Q2ZTUzZmVjMGE0ZTIzMWZkZDZkYzVjNjkyY2M3NjA5NTI1YTdiMmM5NTYyZDYwOGYyNWQ1MWEnLFxuXG4gICAgLy8gNC81XG4gICAgJzY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NjY2NTgnXG4gIF1cbn0pO1xuXG52YXIgcHJlO1xudHJ5IHtcbiAgcHJlID0gcmVxdWlyZSgnLi9wcmVjb21wdXRlZC9zZWNwMjU2azEnKTtcbn0gY2F0Y2ggKGUpIHtcbiAgcHJlID0gdW5kZWZpbmVkO1xufVxuXG5kZWZpbmVDdXJ2ZSgnc2VjcDI1NmsxJywge1xuICB0eXBlOiAnc2hvcnQnLFxuICBwcmltZTogJ2syNTYnLFxuICBwOiAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnLFxuICBhOiAnMCcsXG4gIGI6ICc3JyxcbiAgbjogJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGJhYWVkY2U2IGFmNDhhMDNiIGJmZDI1ZThjIGQwMzY0MTQxJyxcbiAgaDogJzEnLFxuICBoYXNoOiBoYXNoLnNoYTI1NixcblxuICAvLyBQcmVjb21wdXRlZCBlbmRvbW9ycGhpc21cbiAgYmV0YTogJzdhZTk2YTJiNjU3YzA3MTA2ZTY0NDc5ZWFjMzQzNGU5OWNmMDQ5NzUxMmY1ODk5NWMxMzk2YzI4NzE5NTAxZWUnLFxuICBsYW1iZGE6ICc1MzYzYWQ0Y2MwNWMzMGUwYTUyNjFjMDI4ODEyNjQ1YTEyMmUyMmVhMjA4MTY2NzhkZjAyOTY3YzFiMjNiZDcyJyxcbiAgYmFzaXM6IFtcbiAgICB7XG4gICAgICBhOiAnMzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnLFxuICAgICAgYjogJy1lNDQzN2VkNjAxMGU4ODI4NmY1NDdmYTkwYWJmZTRjMydcbiAgICB9LFxuICAgIHtcbiAgICAgIGE6ICcxMTRjYTUwZjdhOGUyZjNmNjU3YzExMDhkOWQ0NGNmZDgnLFxuICAgICAgYjogJzMwODZkMjIxYTdkNDZiY2RlODZjOTBlNDkyODRlYjE1J1xuICAgIH1cbiAgXSxcblxuICBnUmVkOiBmYWxzZSxcbiAgZzogW1xuICAgICc3OWJlNjY3ZWY5ZGNiYmFjNTVhMDYyOTVjZTg3MGIwNzAyOWJmY2RiMmRjZTI4ZDk1OWYyODE1YjE2ZjgxNzk4JyxcbiAgICAnNDgzYWRhNzcyNmEzYzQ2NTVkYTRmYmZjMGUxMTA4YThmZDE3YjQ0OGE2ODU1NDE5OWM0N2QwOGZmYjEwZDRiOCcsXG4gICAgcHJlXG4gIF1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIEhtYWNEUkJHID0gcmVxdWlyZSgnaG1hYy1kcmJnJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG52YXIgS2V5UGFpciA9IHJlcXVpcmUoJy4va2V5Jyk7XG52YXIgU2lnbmF0dXJlID0gcmVxdWlyZSgnLi9zaWduYXR1cmUnKTtcblxuZnVuY3Rpb24gRUMob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRUMpKVxuICAgIHJldHVybiBuZXcgRUMob3B0aW9ucyk7XG5cbiAgLy8gU2hvcnRjdXQgYGVsbGlwdGljLmVjKGN1cnZlLW5hbWUpYFxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgYXNzZXJ0KGVsbGlwdGljLmN1cnZlcy5oYXNPd25Qcm9wZXJ0eShvcHRpb25zKSwgJ1Vua25vd24gY3VydmUgJyArIG9wdGlvbnMpO1xuXG4gICAgb3B0aW9ucyA9IGVsbGlwdGljLmN1cnZlc1tvcHRpb25zXTtcbiAgfVxuXG4gIC8vIFNob3J0Y3V0IGZvciBgZWxsaXB0aWMuZWMoZWxsaXB0aWMuY3VydmVzLmN1cnZlTmFtZSlgXG4gIGlmIChvcHRpb25zIGluc3RhbmNlb2YgZWxsaXB0aWMuY3VydmVzLlByZXNldEN1cnZlKVxuICAgIG9wdGlvbnMgPSB7IGN1cnZlOiBvcHRpb25zIH07XG5cbiAgdGhpcy5jdXJ2ZSA9IG9wdGlvbnMuY3VydmUuY3VydmU7XG4gIHRoaXMubiA9IHRoaXMuY3VydmUubjtcbiAgdGhpcy5uaCA9IHRoaXMubi51c2hybigxKTtcbiAgdGhpcy5nID0gdGhpcy5jdXJ2ZS5nO1xuXG4gIC8vIFBvaW50IG9uIGN1cnZlXG4gIHRoaXMuZyA9IG9wdGlvbnMuY3VydmUuZztcbiAgdGhpcy5nLnByZWNvbXB1dGUob3B0aW9ucy5jdXJ2ZS5uLmJpdExlbmd0aCgpICsgMSk7XG5cbiAgLy8gSGFzaCBmb3IgZnVuY3Rpb24gZm9yIERSQkdcbiAgdGhpcy5oYXNoID0gb3B0aW9ucy5oYXNoIHx8IG9wdGlvbnMuY3VydmUuaGFzaDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRUM7XG5cbkVDLnByb3RvdHlwZS5rZXlQYWlyID0gZnVuY3Rpb24ga2V5UGFpcihvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgS2V5UGFpcih0aGlzLCBvcHRpb25zKTtcbn07XG5cbkVDLnByb3RvdHlwZS5rZXlGcm9tUHJpdmF0ZSA9IGZ1bmN0aW9uIGtleUZyb21Qcml2YXRlKHByaXYsIGVuYykge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHJpdmF0ZSh0aGlzLCBwcml2LCBlbmMpO1xufTtcblxuRUMucHJvdG90eXBlLmtleUZyb21QdWJsaWMgPSBmdW5jdGlvbiBrZXlGcm9tUHVibGljKHB1YiwgZW5jKSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21QdWJsaWModGhpcywgcHViLCBlbmMpO1xufTtcblxuRUMucHJvdG90eXBlLmdlbktleVBhaXIgPSBmdW5jdGlvbiBnZW5LZXlQYWlyKG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fTtcblxuICAvLyBJbnN0YW50aWF0ZSBIbWFjX0RSQkdcbiAgdmFyIGRyYmcgPSBuZXcgSG1hY0RSQkcoe1xuICAgIGhhc2g6IHRoaXMuaGFzaCxcbiAgICBwZXJzOiBvcHRpb25zLnBlcnMsXG4gICAgcGVyc0VuYzogb3B0aW9ucy5wZXJzRW5jIHx8ICd1dGY4JyxcbiAgICBlbnRyb3B5OiBvcHRpb25zLmVudHJvcHkgfHwgZWxsaXB0aWMucmFuZCh0aGlzLmhhc2guaG1hY1N0cmVuZ3RoKSxcbiAgICBlbnRyb3B5RW5jOiBvcHRpb25zLmVudHJvcHkgJiYgb3B0aW9ucy5lbnRyb3B5RW5jIHx8ICd1dGY4JyxcbiAgICBub25jZTogdGhpcy5uLnRvQXJyYXkoKVxuICB9KTtcblxuICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxlbmd0aCgpO1xuICB2YXIgbnMyID0gdGhpcy5uLnN1YihuZXcgQk4oMikpO1xuICBkbyB7XG4gICAgdmFyIHByaXYgPSBuZXcgQk4oZHJiZy5nZW5lcmF0ZShieXRlcykpO1xuICAgIGlmIChwcml2LmNtcChuczIpID4gMClcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgcHJpdi5pYWRkbigxKTtcbiAgICByZXR1cm4gdGhpcy5rZXlGcm9tUHJpdmF0ZShwcml2KTtcbiAgfSB3aGlsZSAodHJ1ZSk7XG59O1xuXG5FQy5wcm90b3R5cGUuX3RydW5jYXRlVG9OID0gZnVuY3Rpb24gdHJ1bmNhdGVUb04obXNnLCB0cnVuY09ubHkpIHtcbiAgdmFyIGRlbHRhID0gbXNnLmJ5dGVMZW5ndGgoKSAqIDggLSB0aGlzLm4uYml0TGVuZ3RoKCk7XG4gIGlmIChkZWx0YSA+IDApXG4gICAgbXNnID0gbXNnLnVzaHJuKGRlbHRhKTtcbiAgaWYgKCF0cnVuY09ubHkgJiYgbXNnLmNtcCh0aGlzLm4pID49IDApXG4gICAgcmV0dXJuIG1zZy5zdWIodGhpcy5uKTtcbiAgZWxzZVxuICAgIHJldHVybiBtc2c7XG59O1xuXG5FQy5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obXNnLCBrZXksIGVuYywgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGVuYyA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0gZW5jO1xuICAgIGVuYyA9IG51bGw7XG4gIH1cbiAgaWYgKCFvcHRpb25zKVxuICAgIG9wdGlvbnMgPSB7fTtcblxuICBrZXkgPSB0aGlzLmtleUZyb21Qcml2YXRlKGtleSwgZW5jKTtcbiAgbXNnID0gdGhpcy5fdHJ1bmNhdGVUb04obmV3IEJOKG1zZywgMTYpKTtcblxuICAvLyBaZXJvLWV4dGVuZCBrZXkgdG8gcHJvdmlkZSBlbm91Z2ggZW50cm9weVxuICB2YXIgYnl0ZXMgPSB0aGlzLm4uYnl0ZUxlbmd0aCgpO1xuICB2YXIgYmtleSA9IGtleS5nZXRQcml2YXRlKCkudG9BcnJheSgnYmUnLCBieXRlcyk7XG5cbiAgLy8gWmVyby1leHRlbmQgbm9uY2UgdG8gaGF2ZSB0aGUgc2FtZSBieXRlIHNpemUgYXMgTlxuICB2YXIgbm9uY2UgPSBtc2cudG9BcnJheSgnYmUnLCBieXRlcyk7XG5cbiAgLy8gSW5zdGFudGlhdGUgSG1hY19EUkJHXG4gIHZhciBkcmJnID0gbmV3IEhtYWNEUkJHKHtcbiAgICBoYXNoOiB0aGlzLmhhc2gsXG4gICAgZW50cm9weTogYmtleSxcbiAgICBub25jZTogbm9uY2UsXG4gICAgcGVyczogb3B0aW9ucy5wZXJzLFxuICAgIHBlcnNFbmM6IG9wdGlvbnMucGVyc0VuYyB8fCAndXRmOCdcbiAgfSk7XG5cbiAgLy8gTnVtYmVyIG9mIGJ5dGVzIHRvIGdlbmVyYXRlXG4gIHZhciBuczEgPSB0aGlzLm4uc3ViKG5ldyBCTigxKSk7XG5cbiAgZm9yICh2YXIgaXRlciA9IDA7IHRydWU7IGl0ZXIrKykge1xuICAgIHZhciBrID0gb3B0aW9ucy5rID9cbiAgICAgICAgb3B0aW9ucy5rKGl0ZXIpIDpcbiAgICAgICAgbmV3IEJOKGRyYmcuZ2VuZXJhdGUodGhpcy5uLmJ5dGVMZW5ndGgoKSkpO1xuICAgIGsgPSB0aGlzLl90cnVuY2F0ZVRvTihrLCB0cnVlKTtcbiAgICBpZiAoay5jbXBuKDEpIDw9IDAgfHwgay5jbXAobnMxKSA+PSAwKVxuICAgICAgY29udGludWU7XG5cbiAgICB2YXIga3AgPSB0aGlzLmcubXVsKGspO1xuICAgIGlmIChrcC5pc0luZmluaXR5KCkpXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBrcFggPSBrcC5nZXRYKCk7XG4gICAgdmFyIHIgPSBrcFgudW1vZCh0aGlzLm4pO1xuICAgIGlmIChyLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciBzID0gay5pbnZtKHRoaXMubikubXVsKHIubXVsKGtleS5nZXRQcml2YXRlKCkpLmlhZGQobXNnKSk7XG4gICAgcyA9IHMudW1vZCh0aGlzLm4pO1xuICAgIGlmIChzLmNtcG4oMCkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIHZhciByZWNvdmVyeVBhcmFtID0gKGtwLmdldFkoKS5pc09kZCgpID8gMSA6IDApIHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChrcFguY21wKHIpICE9PSAwID8gMiA6IDApO1xuXG4gICAgLy8gVXNlIGNvbXBsZW1lbnQgb2YgYHNgLCBpZiBpdCBpcyA+IGBuIC8gMmBcbiAgICBpZiAob3B0aW9ucy5jYW5vbmljYWwgJiYgcy5jbXAodGhpcy5uaCkgPiAwKSB7XG4gICAgICBzID0gdGhpcy5uLnN1YihzKTtcbiAgICAgIHJlY292ZXJ5UGFyYW0gXj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNpZ25hdHVyZSh7IHI6IHIsIHM6IHMsIHJlY292ZXJ5UGFyYW06IHJlY292ZXJ5UGFyYW0gfSk7XG4gIH1cbn07XG5cbkVDLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobXNnLCBzaWduYXR1cmUsIGtleSwgZW5jKSB7XG4gIG1zZyA9IHRoaXMuX3RydW5jYXRlVG9OKG5ldyBCTihtc2csIDE2KSk7XG4gIGtleSA9IHRoaXMua2V5RnJvbVB1YmxpYyhrZXksIGVuYyk7XG4gIHNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoc2lnbmF0dXJlLCAnaGV4Jyk7XG5cbiAgLy8gUGVyZm9ybSBwcmltaXRpdmUgdmFsdWVzIHZhbGlkYXRpb25cbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcbiAgaWYgKHIuY21wbigxKSA8IDAgfHwgci5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKHMuY21wbigxKSA8IDAgfHwgcy5jbXAodGhpcy5uKSA+PSAwKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBWYWxpZGF0ZSBzaWduYXR1cmVcbiAgdmFyIHNpbnYgPSBzLmludm0odGhpcy5uKTtcbiAgdmFyIHUxID0gc2ludi5tdWwobXNnKS51bW9kKHRoaXMubik7XG4gIHZhciB1MiA9IHNpbnYubXVsKHIpLnVtb2QodGhpcy5uKTtcblxuICBpZiAoIXRoaXMuY3VydmUuX21heHdlbGxUcmljaykge1xuICAgIHZhciBwID0gdGhpcy5nLm11bEFkZCh1MSwga2V5LmdldFB1YmxpYygpLCB1Mik7XG4gICAgaWYgKHAuaXNJbmZpbml0eSgpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIHAuZ2V0WCgpLnVtb2QodGhpcy5uKS5jbXAocikgPT09IDA7XG4gIH1cblxuICAvLyBOT1RFOiBHcmVnIE1heHdlbGwncyB0cmljaywgaW5zcGlyZWQgYnk6XG4gIC8vIGh0dHBzOi8vZ2l0LmlvL3ZhZDNLXG5cbiAgdmFyIHAgPSB0aGlzLmcuam11bEFkZCh1MSwga2V5LmdldFB1YmxpYygpLCB1Mik7XG4gIGlmIChwLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gQ29tcGFyZSBgcC54YCBvZiBKYWNvYmlhbiBwb2ludCB3aXRoIGByYCxcbiAgLy8gdGhpcyB3aWxsIGRvIGBwLnggPT0gciAqIHAuel4yYCBpbnN0ZWFkIG9mIG11bHRpcGx5aW5nIGBwLnhgIGJ5IHRoZVxuICAvLyBpbnZlcnNlIG9mIGBwLnpeMmBcbiAgcmV0dXJuIHAuZXFYVG9QKHIpO1xufTtcblxuRUMucHJvdG90eXBlLnJlY292ZXJQdWJLZXkgPSBmdW5jdGlvbihtc2csIHNpZ25hdHVyZSwgaiwgZW5jKSB7XG4gIGFzc2VydCgoMyAmIGopID09PSBqLCAnVGhlIHJlY292ZXJ5IHBhcmFtIGlzIG1vcmUgdGhhbiB0d28gYml0cycpO1xuICBzaWduYXR1cmUgPSBuZXcgU2lnbmF0dXJlKHNpZ25hdHVyZSwgZW5jKTtcblxuICB2YXIgbiA9IHRoaXMubjtcbiAgdmFyIGUgPSBuZXcgQk4obXNnKTtcbiAgdmFyIHIgPSBzaWduYXR1cmUucjtcbiAgdmFyIHMgPSBzaWduYXR1cmUucztcblxuICAvLyBBIHNldCBMU0Igc2lnbmlmaWVzIHRoYXQgdGhlIHktY29vcmRpbmF0ZSBpcyBvZGRcbiAgdmFyIGlzWU9kZCA9IGogJiAxO1xuICB2YXIgaXNTZWNvbmRLZXkgPSBqID4+IDE7XG4gIGlmIChyLmNtcCh0aGlzLmN1cnZlLnAudW1vZCh0aGlzLmN1cnZlLm4pKSA+PSAwICYmIGlzU2Vjb25kS2V5KVxuICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgc2VuY29uZCBrZXkgY2FuZGluYXRlJyk7XG5cbiAgLy8gMS4xLiBMZXQgeCA9IHIgKyBqbi5cbiAgaWYgKGlzU2Vjb25kS2V5KVxuICAgIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgoci5hZGQodGhpcy5jdXJ2ZS5uKSwgaXNZT2RkKTtcbiAgZWxzZVxuICAgIHIgPSB0aGlzLmN1cnZlLnBvaW50RnJvbVgociwgaXNZT2RkKTtcblxuICB2YXIgckludiA9IHNpZ25hdHVyZS5yLmludm0obik7XG4gIHZhciBzMSA9IG4uc3ViKGUpLm11bChySW52KS51bW9kKG4pO1xuICB2YXIgczIgPSBzLm11bChySW52KS51bW9kKG4pO1xuXG4gIC8vIDEuNi4xIENvbXB1dGUgUSA9IHJeLTEgKHNSIC0gIGVHKVxuICAvLyAgICAgICAgICAgICAgIFEgPSByXi0xIChzUiArIC1lRylcbiAgcmV0dXJuIHRoaXMuZy5tdWxBZGQoczEsIHIsIHMyKTtcbn07XG5cbkVDLnByb3RvdHlwZS5nZXRLZXlSZWNvdmVyeVBhcmFtID0gZnVuY3Rpb24oZSwgc2lnbmF0dXJlLCBRLCBlbmMpIHtcbiAgc2lnbmF0dXJlID0gbmV3IFNpZ25hdHVyZShzaWduYXR1cmUsIGVuYyk7XG4gIGlmIChzaWduYXR1cmUucmVjb3ZlcnlQYXJhbSAhPT0gbnVsbClcbiAgICByZXR1cm4gc2lnbmF0dXJlLnJlY292ZXJ5UGFyYW07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICB2YXIgUXByaW1lO1xuICAgIHRyeSB7XG4gICAgICBRcHJpbWUgPSB0aGlzLnJlY292ZXJQdWJLZXkoZSwgc2lnbmF0dXJlLCBpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoUXByaW1lLmVxKFEpKVxuICAgICAgcmV0dXJuIGk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCB2YWxpZCByZWNvdmVyeSBmYWN0b3InKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xuXG5mdW5jdGlvbiBLZXlQYWlyKGVjLCBvcHRpb25zKSB7XG4gIHRoaXMuZWMgPSBlYztcbiAgdGhpcy5wcml2ID0gbnVsbDtcbiAgdGhpcy5wdWIgPSBudWxsO1xuXG4gIC8vIEtleVBhaXIoZWMsIHsgcHJpdjogLi4uLCBwdWI6IC4uLiB9KVxuICBpZiAob3B0aW9ucy5wcml2KVxuICAgIHRoaXMuX2ltcG9ydFByaXZhdGUob3B0aW9ucy5wcml2LCBvcHRpb25zLnByaXZFbmMpO1xuICBpZiAob3B0aW9ucy5wdWIpXG4gICAgdGhpcy5faW1wb3J0UHVibGljKG9wdGlvbnMucHViLCBvcHRpb25zLnB1YkVuYyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEtleVBhaXI7XG5cbktleVBhaXIuZnJvbVB1YmxpYyA9IGZ1bmN0aW9uIGZyb21QdWJsaWMoZWMsIHB1YiwgZW5jKSB7XG4gIGlmIChwdWIgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBwdWI7XG5cbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVjLCB7XG4gICAgcHViOiBwdWIsXG4gICAgcHViRW5jOiBlbmNcbiAgfSk7XG59O1xuXG5LZXlQYWlyLmZyb21Qcml2YXRlID0gZnVuY3Rpb24gZnJvbVByaXZhdGUoZWMsIHByaXYsIGVuYykge1xuICBpZiAocHJpdiBpbnN0YW5jZW9mIEtleVBhaXIpXG4gICAgcmV0dXJuIHByaXY7XG5cbiAgcmV0dXJuIG5ldyBLZXlQYWlyKGVjLCB7XG4gICAgcHJpdjogcHJpdixcbiAgICBwcml2RW5jOiBlbmNcbiAgfSk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKCkge1xuICB2YXIgcHViID0gdGhpcy5nZXRQdWJsaWMoKTtcblxuICBpZiAocHViLmlzSW5maW5pdHkoKSlcbiAgICByZXR1cm4geyByZXN1bHQ6IGZhbHNlLCByZWFzb246ICdJbnZhbGlkIHB1YmxpYyBrZXknIH07XG4gIGlmICghcHViLnZhbGlkYXRlKCkpXG4gICAgcmV0dXJuIHsgcmVzdWx0OiBmYWxzZSwgcmVhc29uOiAnUHVibGljIGtleSBpcyBub3QgYSBwb2ludCcgfTtcbiAgaWYgKCFwdWIubXVsKHRoaXMuZWMuY3VydmUubikuaXNJbmZpbml0eSgpKVxuICAgIHJldHVybiB7IHJlc3VsdDogZmFsc2UsIHJlYXNvbjogJ1B1YmxpYyBrZXkgKiBOICE9IE8nIH07XG5cbiAgcmV0dXJuIHsgcmVzdWx0OiB0cnVlLCByZWFzb246IG51bGwgfTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFB1YmxpYyA9IGZ1bmN0aW9uIGdldFB1YmxpYyhjb21wYWN0LCBlbmMpIHtcbiAgLy8gY29tcGFjdCBpcyBvcHRpb25hbCBhcmd1bWVudFxuICBpZiAodHlwZW9mIGNvbXBhY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jID0gY29tcGFjdDtcbiAgICBjb21wYWN0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICghdGhpcy5wdWIpXG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmcubXVsKHRoaXMucHJpdik7XG5cbiAgaWYgKCFlbmMpXG4gICAgcmV0dXJuIHRoaXMucHViO1xuXG4gIHJldHVybiB0aGlzLnB1Yi5lbmNvZGUoZW5jLCBjb21wYWN0KTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFByaXZhdGUgPSBmdW5jdGlvbiBnZXRQcml2YXRlKGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdGhpcy5wcml2LnRvU3RyaW5nKDE2LCAyKTtcbiAgZWxzZVxuICAgIHJldHVybiB0aGlzLnByaXY7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5faW1wb3J0UHJpdmF0ZSA9IGZ1bmN0aW9uIF9pbXBvcnRQcml2YXRlKGtleSwgZW5jKSB7XG4gIHRoaXMucHJpdiA9IG5ldyBCTihrZXksIGVuYyB8fCAxNik7XG5cbiAgLy8gRW5zdXJlIHRoYXQgdGhlIHByaXYgd29uJ3QgYmUgYmlnZ2VyIHRoYW4gbiwgb3RoZXJ3aXNlIHdlIG1heSBmYWlsXG4gIC8vIGluIGZpeGVkIG11bHRpcGxpY2F0aW9uIG1ldGhvZFxuICB0aGlzLnByaXYgPSB0aGlzLnByaXYudW1vZCh0aGlzLmVjLmN1cnZlLm4pO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUuX2ltcG9ydFB1YmxpYyA9IGZ1bmN0aW9uIF9pbXBvcnRQdWJsaWMoa2V5LCBlbmMpIHtcbiAgaWYgKGtleS54IHx8IGtleS55KSB7XG4gICAgLy8gTW9udGdvbWVyeSBwb2ludHMgb25seSBoYXZlIGFuIGB4YCBjb29yZGluYXRlLlxuICAgIC8vIFdlaWVyc3RyYXNzL0Vkd2FyZHMgcG9pbnRzIG9uIHRoZSBvdGhlciBoYW5kIGhhdmUgYm90aCBgeGAgYW5kXG4gICAgLy8gYHlgIGNvb3JkaW5hdGVzLlxuICAgIGlmICh0aGlzLmVjLmN1cnZlLnR5cGUgPT09ICdtb250Jykge1xuICAgICAgYXNzZXJ0KGtleS54LCAnTmVlZCB4IGNvb3JkaW5hdGUnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZWMuY3VydmUudHlwZSA9PT0gJ3Nob3J0JyB8fFxuICAgICAgICAgICAgICAgdGhpcy5lYy5jdXJ2ZS50eXBlID09PSAnZWR3YXJkcycpIHtcbiAgICAgIGFzc2VydChrZXkueCAmJiBrZXkueSwgJ05lZWQgYm90aCB4IGFuZCB5IGNvb3JkaW5hdGUnKTtcbiAgICB9XG4gICAgdGhpcy5wdWIgPSB0aGlzLmVjLmN1cnZlLnBvaW50KGtleS54LCBrZXkueSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucHViID0gdGhpcy5lYy5jdXJ2ZS5kZWNvZGVQb2ludChrZXksIGVuYyk7XG59O1xuXG4vLyBFQ0RIXG5LZXlQYWlyLnByb3RvdHlwZS5kZXJpdmUgPSBmdW5jdGlvbiBkZXJpdmUocHViKSB7XG4gIHJldHVybiBwdWIubXVsKHRoaXMucHJpdikuZ2V0WCgpO1xufTtcblxuLy8gRUNEU0FcbktleVBhaXIucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1zZywgZW5jLCBvcHRpb25zKSB7XG4gIHJldHVybiB0aGlzLmVjLnNpZ24obXNnLCB0aGlzLCBlbmMsIG9wdGlvbnMpO1xufTtcblxuS2V5UGFpci5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1zZywgc2lnbmF0dXJlKSB7XG4gIHJldHVybiB0aGlzLmVjLnZlcmlmeShtc2csIHNpZ25hdHVyZSwgdGhpcyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCgpIHtcbiAgcmV0dXJuICc8S2V5IHByaXY6ICcgKyAodGhpcy5wcml2ICYmIHRoaXMucHJpdi50b1N0cmluZygxNiwgMikpICtcbiAgICAgICAgICcgcHViOiAnICsgKHRoaXMucHViICYmIHRoaXMucHViLmluc3BlY3QoKSkgKyAnID4nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJOID0gcmVxdWlyZSgnYm4uanMnKTtcblxudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciB1dGlscyA9IGVsbGlwdGljLnV0aWxzO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcblxuZnVuY3Rpb24gU2lnbmF0dXJlKG9wdGlvbnMsIGVuYykge1xuICBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIFNpZ25hdHVyZSlcbiAgICByZXR1cm4gb3B0aW9ucztcblxuICBpZiAodGhpcy5faW1wb3J0REVSKG9wdGlvbnMsIGVuYykpXG4gICAgcmV0dXJuO1xuXG4gIGFzc2VydChvcHRpb25zLnIgJiYgb3B0aW9ucy5zLCAnU2lnbmF0dXJlIHdpdGhvdXQgciBvciBzJyk7XG4gIHRoaXMuciA9IG5ldyBCTihvcHRpb25zLnIsIDE2KTtcbiAgdGhpcy5zID0gbmV3IEJOKG9wdGlvbnMucywgMTYpO1xuICBpZiAob3B0aW9ucy5yZWNvdmVyeVBhcmFtID09PSB1bmRlZmluZWQpXG4gICAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcbiAgZWxzZVxuICAgIHRoaXMucmVjb3ZlcnlQYXJhbSA9IG9wdGlvbnMucmVjb3ZlcnlQYXJhbTtcbn1cbm1vZHVsZS5leHBvcnRzID0gU2lnbmF0dXJlO1xuXG5mdW5jdGlvbiBQb3NpdGlvbigpIHtcbiAgdGhpcy5wbGFjZSA9IDA7XG59XG5cbmZ1bmN0aW9uIGdldExlbmd0aChidWYsIHApIHtcbiAgdmFyIGluaXRpYWwgPSBidWZbcC5wbGFjZSsrXTtcbiAgaWYgKCEoaW5pdGlhbCAmIDB4ODApKSB7XG4gICAgcmV0dXJuIGluaXRpYWw7XG4gIH1cbiAgdmFyIG9jdGV0TGVuID0gaW5pdGlhbCAmIDB4ZjtcbiAgdmFyIHZhbCA9IDA7XG4gIGZvciAodmFyIGkgPSAwLCBvZmYgPSBwLnBsYWNlOyBpIDwgb2N0ZXRMZW47IGkrKywgb2ZmKyspIHtcbiAgICB2YWwgPDw9IDg7XG4gICAgdmFsIHw9IGJ1ZltvZmZdO1xuICB9XG4gIHAucGxhY2UgPSBvZmY7XG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIHJtUGFkZGluZyhidWYpIHtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aCAtIDE7XG4gIHdoaWxlICghYnVmW2ldICYmICEoYnVmW2kgKyAxXSAmIDB4ODApICYmIGkgPCBsZW4pIHtcbiAgICBpKys7XG4gIH1cbiAgaWYgKGkgPT09IDApIHtcbiAgICByZXR1cm4gYnVmO1xuICB9XG4gIHJldHVybiBidWYuc2xpY2UoaSk7XG59XG5cblNpZ25hdHVyZS5wcm90b3R5cGUuX2ltcG9ydERFUiA9IGZ1bmN0aW9uIF9pbXBvcnRERVIoZGF0YSwgZW5jKSB7XG4gIGRhdGEgPSB1dGlscy50b0FycmF5KGRhdGEsIGVuYyk7XG4gIHZhciBwID0gbmV3IFBvc2l0aW9uKCk7XG4gIGlmIChkYXRhW3AucGxhY2UrK10gIT09IDB4MzApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxlbiA9IGdldExlbmd0aChkYXRhLCBwKTtcbiAgaWYgKChsZW4gKyBwLnBsYWNlKSAhPT0gZGF0YS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGRhdGFbcC5wbGFjZSsrXSAhPT0gMHgwMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcmxlbiA9IGdldExlbmd0aChkYXRhLCBwKTtcbiAgdmFyIHIgPSBkYXRhLnNsaWNlKHAucGxhY2UsIHJsZW4gKyBwLnBsYWNlKTtcbiAgcC5wbGFjZSArPSBybGVuO1xuICBpZiAoZGF0YVtwLnBsYWNlKytdICE9PSAweDAyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBzbGVuID0gZ2V0TGVuZ3RoKGRhdGEsIHApO1xuICBpZiAoZGF0YS5sZW5ndGggIT09IHNsZW4gKyBwLnBsYWNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBzID0gZGF0YS5zbGljZShwLnBsYWNlLCBzbGVuICsgcC5wbGFjZSk7XG4gIGlmIChyWzBdID09PSAwICYmIChyWzFdICYgMHg4MCkpIHtcbiAgICByID0gci5zbGljZSgxKTtcbiAgfVxuICBpZiAoc1swXSA9PT0gMCAmJiAoc1sxXSAmIDB4ODApKSB7XG4gICAgcyA9IHMuc2xpY2UoMSk7XG4gIH1cblxuICB0aGlzLnIgPSBuZXcgQk4ocik7XG4gIHRoaXMucyA9IG5ldyBCTihzKTtcbiAgdGhpcy5yZWNvdmVyeVBhcmFtID0gbnVsbDtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdExlbmd0aChhcnIsIGxlbikge1xuICBpZiAobGVuIDwgMHg4MCkge1xuICAgIGFyci5wdXNoKGxlbik7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBvY3RldHMgPSAxICsgKE1hdGgubG9nKGxlbikgLyBNYXRoLkxOMiA+Pj4gMyk7XG4gIGFyci5wdXNoKG9jdGV0cyB8IDB4ODApO1xuICB3aGlsZSAoLS1vY3RldHMpIHtcbiAgICBhcnIucHVzaCgobGVuID4+PiAob2N0ZXRzIDw8IDMpKSAmIDB4ZmYpO1xuICB9XG4gIGFyci5wdXNoKGxlbik7XG59XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9ERVIgPSBmdW5jdGlvbiB0b0RFUihlbmMpIHtcbiAgdmFyIHIgPSB0aGlzLnIudG9BcnJheSgpO1xuICB2YXIgcyA9IHRoaXMucy50b0FycmF5KCk7XG5cbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoclswXSAmIDB4ODApXG4gICAgciA9IFsgMCBdLmNvbmNhdChyKTtcbiAgLy8gUGFkIHZhbHVlc1xuICBpZiAoc1swXSAmIDB4ODApXG4gICAgcyA9IFsgMCBdLmNvbmNhdChzKTtcblxuICByID0gcm1QYWRkaW5nKHIpO1xuICBzID0gcm1QYWRkaW5nKHMpO1xuXG4gIHdoaWxlICghc1swXSAmJiAhKHNbMV0gJiAweDgwKSkge1xuICAgIHMgPSBzLnNsaWNlKDEpO1xuICB9XG4gIHZhciBhcnIgPSBbIDB4MDIgXTtcbiAgY29uc3RydWN0TGVuZ3RoKGFyciwgci5sZW5ndGgpO1xuICBhcnIgPSBhcnIuY29uY2F0KHIpO1xuICBhcnIucHVzaCgweDAyKTtcbiAgY29uc3RydWN0TGVuZ3RoKGFyciwgcy5sZW5ndGgpO1xuICB2YXIgYmFja0hhbGYgPSBhcnIuY29uY2F0KHMpO1xuICB2YXIgcmVzID0gWyAweDMwIF07XG4gIGNvbnN0cnVjdExlbmd0aChyZXMsIGJhY2tIYWxmLmxlbmd0aCk7XG4gIHJlcyA9IHJlcy5jb25jYXQoYmFja0hhbGYpO1xuICByZXR1cm4gdXRpbHMuZW5jb2RlKHJlcywgZW5jKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciB1dGlscyA9IGVsbGlwdGljLnV0aWxzO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcbnZhciBwYXJzZUJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcztcbnZhciBLZXlQYWlyID0gcmVxdWlyZSgnLi9rZXknKTtcbnZhciBTaWduYXR1cmUgPSByZXF1aXJlKCcuL3NpZ25hdHVyZScpO1xuXG5mdW5jdGlvbiBFRERTQShjdXJ2ZSkge1xuICBhc3NlcnQoY3VydmUgPT09ICdlZDI1NTE5JywgJ29ubHkgdGVzdGVkIHdpdGggZWQyNTUxOSBzbyBmYXInKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRUREU0EpKVxuICAgIHJldHVybiBuZXcgRUREU0EoY3VydmUpO1xuXG4gIHZhciBjdXJ2ZSA9IGVsbGlwdGljLmN1cnZlc1tjdXJ2ZV0uY3VydmU7XG4gIHRoaXMuY3VydmUgPSBjdXJ2ZTtcbiAgdGhpcy5nID0gY3VydmUuZztcbiAgdGhpcy5nLnByZWNvbXB1dGUoY3VydmUubi5iaXRMZW5ndGgoKSArIDEpO1xuXG4gIHRoaXMucG9pbnRDbGFzcyA9IGN1cnZlLnBvaW50KCkuY29uc3RydWN0b3I7XG4gIHRoaXMuZW5jb2RpbmdMZW5ndGggPSBNYXRoLmNlaWwoY3VydmUubi5iaXRMZW5ndGgoKSAvIDgpO1xuICB0aGlzLmhhc2ggPSBoYXNoLnNoYTUxMjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFRERTQTtcblxuLyoqXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBtZXNzYWdlIC0gbWVzc2FnZSBieXRlc1xuKiBAcGFyYW0ge0FycmF5fFN0cmluZ3xLZXlQYWlyfSBzZWNyZXQgLSBzZWNyZXQgYnl0ZXMgb3IgYSBrZXlwYWlyXG4qIEByZXR1cm5zIHtTaWduYXR1cmV9IC0gc2lnbmF0dXJlXG4qL1xuRUREU0EucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKG1lc3NhZ2UsIHNlY3JldCkge1xuICBtZXNzYWdlID0gcGFyc2VCeXRlcyhtZXNzYWdlKTtcbiAgdmFyIGtleSA9IHRoaXMua2V5RnJvbVNlY3JldChzZWNyZXQpO1xuICB2YXIgciA9IHRoaXMuaGFzaEludChrZXkubWVzc2FnZVByZWZpeCgpLCBtZXNzYWdlKTtcbiAgdmFyIFIgPSB0aGlzLmcubXVsKHIpO1xuICB2YXIgUmVuY29kZWQgPSB0aGlzLmVuY29kZVBvaW50KFIpO1xuICB2YXIgc18gPSB0aGlzLmhhc2hJbnQoUmVuY29kZWQsIGtleS5wdWJCeXRlcygpLCBtZXNzYWdlKVxuICAgICAgICAgICAgICAgLm11bChrZXkucHJpdigpKTtcbiAgdmFyIFMgPSByLmFkZChzXykudW1vZCh0aGlzLmN1cnZlLm4pO1xuICByZXR1cm4gdGhpcy5tYWtlU2lnbmF0dXJlKHsgUjogUiwgUzogUywgUmVuY29kZWQ6IFJlbmNvZGVkIH0pO1xufTtcblxuLyoqXG4qIEBwYXJhbSB7QXJyYXl9IG1lc3NhZ2UgLSBtZXNzYWdlIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfFNpZ25hdHVyZX0gc2lnIC0gc2lnIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXl8U3RyaW5nfFBvaW50fEtleVBhaXJ9IHB1YiAtIHB1YmxpYyBrZXlcbiogQHJldHVybnMge0Jvb2xlYW59IC0gdHJ1ZSBpZiBwdWJsaWMga2V5IG1hdGNoZXMgc2lnIG9mIG1lc3NhZ2VcbiovXG5FRERTQS5wcm90b3R5cGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UsIHNpZywgcHViKSB7XG4gIG1lc3NhZ2UgPSBwYXJzZUJ5dGVzKG1lc3NhZ2UpO1xuICBzaWcgPSB0aGlzLm1ha2VTaWduYXR1cmUoc2lnKTtcbiAgdmFyIGtleSA9IHRoaXMua2V5RnJvbVB1YmxpYyhwdWIpO1xuICB2YXIgaCA9IHRoaXMuaGFzaEludChzaWcuUmVuY29kZWQoKSwga2V5LnB1YkJ5dGVzKCksIG1lc3NhZ2UpO1xuICB2YXIgU0cgPSB0aGlzLmcubXVsKHNpZy5TKCkpO1xuICB2YXIgUnBsdXNBaCA9IHNpZy5SKCkuYWRkKGtleS5wdWIoKS5tdWwoaCkpO1xuICByZXR1cm4gUnBsdXNBaC5lcShTRyk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuaGFzaEludCA9IGZ1bmN0aW9uIGhhc2hJbnQoKSB7XG4gIHZhciBoYXNoID0gdGhpcy5oYXNoKCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuICAgIGhhc2gudXBkYXRlKGFyZ3VtZW50c1tpXSk7XG4gIHJldHVybiB1dGlscy5pbnRGcm9tTEUoaGFzaC5kaWdlc3QoKSkudW1vZCh0aGlzLmN1cnZlLm4pO1xufTtcblxuRUREU0EucHJvdG90eXBlLmtleUZyb21QdWJsaWMgPSBmdW5jdGlvbiBrZXlGcm9tUHVibGljKHB1Yikge1xuICByZXR1cm4gS2V5UGFpci5mcm9tUHVibGljKHRoaXMsIHB1Yik7XG59O1xuXG5FRERTQS5wcm90b3R5cGUua2V5RnJvbVNlY3JldCA9IGZ1bmN0aW9uIGtleUZyb21TZWNyZXQoc2VjcmV0KSB7XG4gIHJldHVybiBLZXlQYWlyLmZyb21TZWNyZXQodGhpcywgc2VjcmV0KTtcbn07XG5cbkVERFNBLnByb3RvdHlwZS5tYWtlU2lnbmF0dXJlID0gZnVuY3Rpb24gbWFrZVNpZ25hdHVyZShzaWcpIHtcbiAgaWYgKHNpZyBpbnN0YW5jZW9mIFNpZ25hdHVyZSlcbiAgICByZXR1cm4gc2lnO1xuICByZXR1cm4gbmV3IFNpZ25hdHVyZSh0aGlzLCBzaWcpO1xufTtcblxuLyoqXG4qICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWpvc2Vmc3Nvbi1lZGRzYS1lZDI1NTE5LTAzI3NlY3Rpb24tNS4yXG4qXG4qIEVERFNBIGRlZmluZXMgbWV0aG9kcyBmb3IgZW5jb2RpbmcgYW5kIGRlY29kaW5nIHBvaW50cyBhbmQgaW50ZWdlcnMuIFRoZXNlIGFyZVxuKiBoZWxwZXIgY29udmVuaWVuY2UgbWV0aG9kcywgdGhhdCBwYXNzIGFsb25nIHRvIHV0aWxpdHkgZnVuY3Rpb25zIGltcGxpZWRcbiogcGFyYW1ldGVycy5cbipcbiovXG5FRERTQS5wcm90b3R5cGUuZW5jb2RlUG9pbnQgPSBmdW5jdGlvbiBlbmNvZGVQb2ludChwb2ludCkge1xuICB2YXIgZW5jID0gcG9pbnQuZ2V0WSgpLnRvQXJyYXkoJ2xlJywgdGhpcy5lbmNvZGluZ0xlbmd0aCk7XG4gIGVuY1t0aGlzLmVuY29kaW5nTGVuZ3RoIC0gMV0gfD0gcG9pbnQuZ2V0WCgpLmlzT2RkKCkgPyAweDgwIDogMDtcbiAgcmV0dXJuIGVuYztcbn07XG5cbkVERFNBLnByb3RvdHlwZS5kZWNvZGVQb2ludCA9IGZ1bmN0aW9uIGRlY29kZVBvaW50KGJ5dGVzKSB7XG4gIGJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcyhieXRlcyk7XG5cbiAgdmFyIGxhc3RJeCA9IGJ5dGVzLmxlbmd0aCAtIDE7XG4gIHZhciBub3JtZWQgPSBieXRlcy5zbGljZSgwLCBsYXN0SXgpLmNvbmNhdChieXRlc1tsYXN0SXhdICYgfjB4ODApO1xuICB2YXIgeElzT2RkID0gKGJ5dGVzW2xhc3RJeF0gJiAweDgwKSAhPT0gMDtcblxuICB2YXIgeSA9IHV0aWxzLmludEZyb21MRShub3JtZWQpO1xuICByZXR1cm4gdGhpcy5jdXJ2ZS5wb2ludEZyb21ZKHksIHhJc09kZCk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuZW5jb2RlSW50ID0gZnVuY3Rpb24gZW5jb2RlSW50KG51bSkge1xuICByZXR1cm4gbnVtLnRvQXJyYXkoJ2xlJywgdGhpcy5lbmNvZGluZ0xlbmd0aCk7XG59O1xuXG5FRERTQS5wcm90b3R5cGUuZGVjb2RlSW50ID0gZnVuY3Rpb24gZGVjb2RlSW50KGJ5dGVzKSB7XG4gIHJldHVybiB1dGlscy5pbnRGcm9tTEUoYnl0ZXMpO1xufTtcblxuRUREU0EucHJvdG90eXBlLmlzUG9pbnQgPSBmdW5jdGlvbiBpc1BvaW50KHZhbCkge1xuICByZXR1cm4gdmFsIGluc3RhbmNlb2YgdGhpcy5wb2ludENsYXNzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVsbGlwdGljID0gcmVxdWlyZSgnLi4vLi4vZWxsaXB0aWMnKTtcbnZhciB1dGlscyA9IGVsbGlwdGljLnV0aWxzO1xudmFyIGFzc2VydCA9IHV0aWxzLmFzc2VydDtcbnZhciBwYXJzZUJ5dGVzID0gdXRpbHMucGFyc2VCeXRlcztcbnZhciBjYWNoZWRQcm9wZXJ0eSA9IHV0aWxzLmNhY2hlZFByb3BlcnR5O1xuXG4vKipcbiogQHBhcmFtIHtFRERTQX0gZWRkc2EgLSBpbnN0YW5jZVxuKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gcHVibGljL3ByaXZhdGUga2V5IHBhcmFtZXRlcnNcbipcbiogQHBhcmFtIHtBcnJheTxCeXRlPn0gW3BhcmFtcy5zZWNyZXRdIC0gc2VjcmV0IHNlZWQgYnl0ZXNcbiogQHBhcmFtIHtQb2ludH0gW3BhcmFtcy5wdWJdIC0gcHVibGljIGtleSBwb2ludCAoYWthIGBBYCBpbiBlZGRzYSB0ZXJtcylcbiogQHBhcmFtIHtBcnJheTxCeXRlPn0gW3BhcmFtcy5wdWJdIC0gcHVibGljIGtleSBwb2ludCBlbmNvZGVkIGFzIGJ5dGVzXG4qXG4qL1xuZnVuY3Rpb24gS2V5UGFpcihlZGRzYSwgcGFyYW1zKSB7XG4gIHRoaXMuZWRkc2EgPSBlZGRzYTtcbiAgdGhpcy5fc2VjcmV0ID0gcGFyc2VCeXRlcyhwYXJhbXMuc2VjcmV0KTtcbiAgaWYgKGVkZHNhLmlzUG9pbnQocGFyYW1zLnB1YikpXG4gICAgdGhpcy5fcHViID0gcGFyYW1zLnB1YjtcbiAgZWxzZVxuICAgIHRoaXMuX3B1YkJ5dGVzID0gcGFyc2VCeXRlcyhwYXJhbXMucHViKTtcbn1cblxuS2V5UGFpci5mcm9tUHVibGljID0gZnVuY3Rpb24gZnJvbVB1YmxpYyhlZGRzYSwgcHViKSB7XG4gIGlmIChwdWIgaW5zdGFuY2VvZiBLZXlQYWlyKVxuICAgIHJldHVybiBwdWI7XG4gIHJldHVybiBuZXcgS2V5UGFpcihlZGRzYSwgeyBwdWI6IHB1YiB9KTtcbn07XG5cbktleVBhaXIuZnJvbVNlY3JldCA9IGZ1bmN0aW9uIGZyb21TZWNyZXQoZWRkc2EsIHNlY3JldCkge1xuICBpZiAoc2VjcmV0IGluc3RhbmNlb2YgS2V5UGFpcilcbiAgICByZXR1cm4gc2VjcmV0O1xuICByZXR1cm4gbmV3IEtleVBhaXIoZWRkc2EsIHsgc2VjcmV0OiBzZWNyZXQgfSk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5zZWNyZXQgPSBmdW5jdGlvbiBzZWNyZXQoKSB7XG4gIHJldHVybiB0aGlzLl9zZWNyZXQ7XG59O1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHViQnl0ZXMnLCBmdW5jdGlvbiBwdWJCeXRlcygpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlUG9pbnQodGhpcy5wdWIoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ3B1YicsIGZ1bmN0aW9uIHB1YigpIHtcbiAgaWYgKHRoaXMuX3B1YkJ5dGVzKVxuICAgIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZVBvaW50KHRoaXMuX3B1YkJ5dGVzKTtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZy5tdWwodGhpcy5wcml2KCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KEtleVBhaXIsICdwcml2Qnl0ZXMnLCBmdW5jdGlvbiBwcml2Qnl0ZXMoKSB7XG4gIHZhciBlZGRzYSA9IHRoaXMuZWRkc2E7XG4gIHZhciBoYXNoID0gdGhpcy5oYXNoKCk7XG4gIHZhciBsYXN0SXggPSBlZGRzYS5lbmNvZGluZ0xlbmd0aCAtIDE7XG5cbiAgdmFyIGEgPSBoYXNoLnNsaWNlKDAsIGVkZHNhLmVuY29kaW5nTGVuZ3RoKTtcbiAgYVswXSAmPSAyNDg7XG4gIGFbbGFzdEl4XSAmPSAxMjc7XG4gIGFbbGFzdEl4XSB8PSA2NDtcblxuICByZXR1cm4gYTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAncHJpdicsIGZ1bmN0aW9uIHByaXYoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZUludCh0aGlzLnByaXZCeXRlcygpKTtcbn0pO1xuXG5jYWNoZWRQcm9wZXJ0eShLZXlQYWlyLCAnaGFzaCcsIGZ1bmN0aW9uIGhhc2goKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmhhc2goKS51cGRhdGUodGhpcy5zZWNyZXQoKSkuZGlnZXN0KCk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoS2V5UGFpciwgJ21lc3NhZ2VQcmVmaXgnLCBmdW5jdGlvbiBtZXNzYWdlUHJlZml4KCkge1xuICByZXR1cm4gdGhpcy5oYXNoKCkuc2xpY2UodGhpcy5lZGRzYS5lbmNvZGluZ0xlbmd0aCk7XG59KTtcblxuS2V5UGFpci5wcm90b3R5cGUuc2lnbiA9IGZ1bmN0aW9uIHNpZ24obWVzc2FnZSkge1xuICBhc3NlcnQodGhpcy5fc2VjcmV0LCAnS2V5UGFpciBjYW4gb25seSB2ZXJpZnknKTtcbiAgcmV0dXJuIHRoaXMuZWRkc2Euc2lnbihtZXNzYWdlLCB0aGlzKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlLCBzaWcpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EudmVyaWZ5KG1lc3NhZ2UsIHNpZywgdGhpcyk7XG59O1xuXG5LZXlQYWlyLnByb3RvdHlwZS5nZXRTZWNyZXQgPSBmdW5jdGlvbiBnZXRTZWNyZXQoZW5jKSB7XG4gIGFzc2VydCh0aGlzLl9zZWNyZXQsICdLZXlQYWlyIGlzIHB1YmxpYyBvbmx5Jyk7XG4gIHJldHVybiB1dGlscy5lbmNvZGUodGhpcy5zZWNyZXQoKSwgZW5jKTtcbn07XG5cbktleVBhaXIucHJvdG90eXBlLmdldFB1YmxpYyA9IGZ1bmN0aW9uIGdldFB1YmxpYyhlbmMpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnB1YkJ5dGVzKCksIGVuYyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtleVBhaXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBCTiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgZWxsaXB0aWMgPSByZXF1aXJlKCcuLi8uLi9lbGxpcHRpYycpO1xudmFyIHV0aWxzID0gZWxsaXB0aWMudXRpbHM7XG52YXIgYXNzZXJ0ID0gdXRpbHMuYXNzZXJ0O1xudmFyIGNhY2hlZFByb3BlcnR5ID0gdXRpbHMuY2FjaGVkUHJvcGVydHk7XG52YXIgcGFyc2VCeXRlcyA9IHV0aWxzLnBhcnNlQnl0ZXM7XG5cbi8qKlxuKiBAcGFyYW0ge0VERFNBfSBlZGRzYSAtIGVkZHNhIGluc3RhbmNlXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fE9iamVjdH0gc2lnIC1cbiogQHBhcmFtIHtBcnJheTxCeXRlcz58UG9pbnR9IFtzaWcuUl0gLSBSIHBvaW50IGFzIFBvaW50IG9yIGJ5dGVzXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fGJufSBbc2lnLlNdIC0gUyBzY2FsYXIgYXMgYm4gb3IgYnl0ZXNcbiogQHBhcmFtIHtBcnJheTxCeXRlcz59IFtzaWcuUmVuY29kZWRdIC0gUiBwb2ludCBlbmNvZGVkXG4qIEBwYXJhbSB7QXJyYXk8Qnl0ZXM+fSBbc2lnLlNlbmNvZGVkXSAtIFMgc2NhbGFyIGVuY29kZWRcbiovXG5mdW5jdGlvbiBTaWduYXR1cmUoZWRkc2EsIHNpZykge1xuICB0aGlzLmVkZHNhID0gZWRkc2E7XG5cbiAgaWYgKHR5cGVvZiBzaWcgIT09ICdvYmplY3QnKVxuICAgIHNpZyA9IHBhcnNlQnl0ZXMoc2lnKTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShzaWcpKSB7XG4gICAgc2lnID0ge1xuICAgICAgUjogc2lnLnNsaWNlKDAsIGVkZHNhLmVuY29kaW5nTGVuZ3RoKSxcbiAgICAgIFM6IHNpZy5zbGljZShlZGRzYS5lbmNvZGluZ0xlbmd0aClcbiAgICB9O1xuICB9XG5cbiAgYXNzZXJ0KHNpZy5SICYmIHNpZy5TLCAnU2lnbmF0dXJlIHdpdGhvdXQgUiBvciBTJyk7XG5cbiAgaWYgKGVkZHNhLmlzUG9pbnQoc2lnLlIpKVxuICAgIHRoaXMuX1IgPSBzaWcuUjtcbiAgaWYgKHNpZy5TIGluc3RhbmNlb2YgQk4pXG4gICAgdGhpcy5fUyA9IHNpZy5TO1xuXG4gIHRoaXMuX1JlbmNvZGVkID0gQXJyYXkuaXNBcnJheShzaWcuUikgPyBzaWcuUiA6IHNpZy5SZW5jb2RlZDtcbiAgdGhpcy5fU2VuY29kZWQgPSBBcnJheS5pc0FycmF5KHNpZy5TKSA/IHNpZy5TIDogc2lnLlNlbmNvZGVkO1xufVxuXG5jYWNoZWRQcm9wZXJ0eShTaWduYXR1cmUsICdTJywgZnVuY3Rpb24gUygpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZGVjb2RlSW50KHRoaXMuU2VuY29kZWQoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUicsIGZ1bmN0aW9uIFIoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmRlY29kZVBvaW50KHRoaXMuUmVuY29kZWQoKSk7XG59KTtcblxuY2FjaGVkUHJvcGVydHkoU2lnbmF0dXJlLCAnUmVuY29kZWQnLCBmdW5jdGlvbiBSZW5jb2RlZCgpIHtcbiAgcmV0dXJuIHRoaXMuZWRkc2EuZW5jb2RlUG9pbnQodGhpcy5SKCkpO1xufSk7XG5cbmNhY2hlZFByb3BlcnR5KFNpZ25hdHVyZSwgJ1NlbmNvZGVkJywgZnVuY3Rpb24gU2VuY29kZWQoKSB7XG4gIHJldHVybiB0aGlzLmVkZHNhLmVuY29kZUludCh0aGlzLlMoKSk7XG59KTtcblxuU2lnbmF0dXJlLnByb3RvdHlwZS50b0J5dGVzID0gZnVuY3Rpb24gdG9CeXRlcygpIHtcbiAgcmV0dXJuIHRoaXMuUmVuY29kZWQoKS5jb25jYXQodGhpcy5TZW5jb2RlZCgpKTtcbn07XG5cblNpZ25hdHVyZS5wcm90b3R5cGUudG9IZXggPSBmdW5jdGlvbiB0b0hleCgpIHtcbiAgcmV0dXJuIHV0aWxzLmVuY29kZSh0aGlzLnRvQnl0ZXMoKSwgJ2hleCcpLnRvVXBwZXJDYXNlKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZ25hdHVyZTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBkb3VibGVzOiB7XG4gICAgc3RlcDogNCxcbiAgICBwb2ludHM6IFtcbiAgICAgIFtcbiAgICAgICAgJ2U2MGZjZTkzYjU5ZTllYzUzMDExYWFiYzIxYzIzZTk3YjJhMzEzNjliODdhNWFlOWM0NGVlODllMmE2ZGVjMGEnLFxuICAgICAgICAnZjdlMzUwNzM5OWU1OTU5MjlkYjk5ZjM0ZjU3OTM3MTAxMjk2ODkxZTQ0ZDIzZjBiZTFmMzJjY2U2OTYxNjgyMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4MjgyMjYzMjEyYzYwOWQ5ZWEyYTZlM2UxNzJkZTIzOGQ4YzM5Y2FiZDVhYzFjYTEwNjQ2ZTIzZmQ1ZjUxNTA4JyxcbiAgICAgICAgJzExZjhhODA5ODU1N2RmZTQ1ZTgyNTZlODMwYjYwYWNlNjJkNjEzYWMyZjdiMTdiZWQzMWI2ZWFmZjZlMjZjYWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTc1ZTE1OWY3MjhiODY1YTcyZjk5Y2M2YzZmYzg0NmRlMGI5MzgzM2ZkMjIyMmVkNzNmY2U1YjU1MWU1YjczOScsXG4gICAgICAgICdkMzUwNmUwZDllM2M3OWViYTRlZjk3YTUxZmY3MWY1ZWFjYjU5NTVhZGQyNDM0NWM2ZWZhNmZmZWU5ZmVkNjk1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM2M2Q5MGQ0NDdiMDBjOWM5OWNlYWMwNWI2MjYyZWUwNTM0NDFjN2U1NTU1MmZmZTUyNmJhZDhmODNmZjQ2NDAnLFxuICAgICAgICAnNGUyNzNhZGZjNzMyMjIxOTUzYjQ0NTM5N2YzMzYzMTQ1YjlhODkwMDgxOTllY2I2MjAwM2M3ZjNiZWU5ZGU5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhiNGI1ZjE2NWRmM2MyYmU4YzYyNDRiNWI3NDU2Mzg4NDNlNGE3ODFhMTViY2QxYjY5Zjc5YTU1ZGZmZGY4MGMnLFxuICAgICAgICAnNGFhZDBhNmY2OGQzMDhiNGIzZmJkNzgxM2FiMGRhMDRmOWUzMzY1NDYxNjJlZTU2YjNlZmYwYzY1ZmQ0ZmQzNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3MjNjYmFhNmU1ZGI5OTZkNmJmNzcxYzAwYmQ1NDhjN2I3MDBkYmZmYTZjMGU3N2JjYjYxMTU5MjUyMzJmY2RhJyxcbiAgICAgICAgJzk2ZTg2N2I1NTk1Y2M0OThhOTIxMTM3NDg4ODI0ZDZlMjY2MGEwNjUzNzc5NDk0ODAxZGMwNjlkOWViMzlmNWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWViZmE0ZDQ5M2JlYmY5OGJhNWZlZWM4MTJjMmQzYjUwOTQ3OTYxMjM3YTkxOTgzOWE1MzNlY2EwZTdkZDdmYScsXG4gICAgICAgICc1ZDlhOGNhMzk3MGVmMGYyNjllZTdlZGFmMTc4MDg5ZDlhZTRjZGMzYTcxMWY3MTJkZGZkNGZkYWUxZGU4OTk5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEwMGY0NGRhNjk2ZTcxNjcyNzkxZDBhMDliN2JkZTQ1OWYxMjE1YTI5YjNjMDNiZmVmZDc4MzViMzlhNDhkYjAnLFxuICAgICAgICAnY2RkOWUxMzE5MmEwMGI3NzJlYzhmMzMwMGMwOTA2NjZiN2ZmNGExOGZmNTE5NWFjMGZiZDVjZDYyYmM2NWEwOSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlMTAzMWJlMjYyYzdlZDFiMWRjOTIyN2E0YTA0YzAxN2E3N2Y4ZDQ0NjRmM2IzODUyYzhhY2RlNmU1MzRmZDJkJyxcbiAgICAgICAgJzlkNzA2MTkyODk0MDQwNWU2YmI2YTQxNzY1OTc1MzVhZjI5MmRkNDE5ZTFjZWQ3OWE0NGYxOGYyOTQ1NmEwMGQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmVlYTZjYWU0NmQ1NWI1MzBhYzI4MzlmMTQzYmQ3ZWM1Y2Y4YjI2NmE0MWQ2YWY1MmQ1ZTY4OGQ5MDk0Njk2ZCcsXG4gICAgICAgICdlNTdjNmI2Yzk3ZGNlMWJhYjA2ZTRlMTJiZjNlY2Q1Yzk4MWM4OTU3Y2M0MTQ0MmQzMTU1ZGViZjE4MDkwMDg4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RhNjdhOTFkOTEwNDljZGNiMzY3YmU0YmU2ZmZjYTNjZmVlZDY1N2Q4MDg1ODNkZTMzZmE5NzhiYzFlYzZjYjEnLFxuICAgICAgICAnOWJhY2FhMzU0ODE2NDJiYzQxZjQ2M2Y3ZWM5NzgwZTVkZWM3YWRjNTA4Zjc0MGExN2U5ZWE4ZTI3YTY4YmUxZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1MzkwNGZhYTBiMzM0Y2RkYTZlMDAwOTM1ZWYyMjE1MWVjMDhkMGY3YmIxMTA2OWY1NzU0NWNjYzFhMzdiN2MwJyxcbiAgICAgICAgJzViYzA4N2QwYmM4MDEwNmQ4OGM5ZWNjYWMyMGQzYzFjMTM5OTk5ODFlMTQ0MzQ2OTlkY2IwOTZiMDIyNzcxYzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGU3YmNkMGJkMzU5ODNhNzcxOWNjYTc3NjRjYTkwNjc3OWI1M2EwNDNhOWI4YmNhZWZmOTU5ZjQzYWQ4NjA0NycsXG4gICAgICAgICcxMGI3NzcwYjJhM2RhNGIzOTQwMzEwNDIwY2E5NTE0NTc5ZTg4ZTJlNDdmZDY4YjNlYTEwMDQ3ZTg0NjAzNzJhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM4NWVlZDM0YzFjZGZmMjFlNmQwODE4Njg5YjgxYmRlNzFhN2Y0ZjE4Mzk3ZTY2OTBhODQxZTE1OTljNDM4NjInLFxuICAgICAgICAnMjgzYmViYzNlOGVhMjNmNTY3MDFkZTE5ZTllYmY0NTc2YjMwNGVlYzIwODZkYzhjYzA0NThmZTU1NDJlNTQ1MydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2ZjlkOWI4MDNlY2YxOTE2MzdjNzNhNDQxM2RmYTE4MGZkZGY4NGE1OTQ3ZmJjOWM2MDZlZDg2YzNmYWMzYTcnLFxuICAgICAgICAnN2M4MGM2OGU2MDMwNTliYTY5YjhlMmEzMGU0NWM0ZDQ3ZWE0ZGQyZjVjMjgxMDAyZDg2ODkwNjAzYTg0MjE2MCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczMzIyZDQwMTI0M2M0ZTI1ODJhMjE0N2MxMDRkNmVjYmY3NzRkMTYzZGIwZjVlNTMxM2I3ZTBlNzQyZDBlNmJkJyxcbiAgICAgICAgJzU2ZTcwNzk3ZTk2NjRlZjViZmIwMTliYzRkZGFmOWI3MjgwNWY2M2VhMjg3M2FmNjI0ZjNhMmU5NmMyOGIyYTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODU2NzJjN2QyZGUwYjdkYTJiZDE3NzBkODk2NjU4Njg3NDFiM2Y5YWY3NjQzMzk3NzIxZDc0ZDI4MTM0YWI4MycsXG4gICAgICAgICc3YzQ4MWI5YjViNDNiMmViNjM3NDA0OWJmYTYyYzJlNWU3N2YxN2ZjYzUyOThmNDRjOGUzMDk0Zjc5MDMxM2E2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk0OGJmODA5YjE5ODhhNDZiMDZjOWYxOTE5NDEzYjEwZjkyMjZjNjBmNjY4ODMyZmZkOTU5YWY2MGM4MmEwYScsXG4gICAgICAgICc1M2E1NjI4NTZkY2I2NjQ2ZGM2Yjc0YzVkMWMzNDE4YzZkNGRmZjA4Yzk3Y2QyYmVkNGNiN2Y4OGQ4YzhlNTg5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYyNjBjZTdmNDYxODAxYzM0ZjA2N2NlMGYwMjg3M2E4ZjFiMGU0NGRmYzY5NzUyYWNjZWNkODE5ZjM4ZmQ4ZTgnLFxuICAgICAgICAnYmMyZGE4MmI2ZmE1YjU3MWE3ZjA5MDQ5Nzc2YTFlZjdlY2QyOTIyMzgwNTFjMTk4YzFhODRlOTViMmI0YWUxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNTAzN2RlMGFmYzFkOGQ0M2Q4MzQ4NDE0YmJmNDEwMzA0M2VjOGY1NzViZmRjNDMyOTUzY2M4ZDIwMzdmYTJkJyxcbiAgICAgICAgJzQ1NzE1MzRiYWE5NGQzYjVmOWY5OGQwOWZiOTkwYmRkYmQ1ZjViMDNlYzQ4MWYxMGUwZTVkYzg0MWQ3NTViZGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTA2MzcyYjBmNGEyMDdhZGY1ZWE5MDVlOGYxNzcxYjRlN2U4ZGJkMWM2YTZjNWI3MjU4NjZhMGFlNGZjZTcyNScsXG4gICAgICAgICc3YTkwODk3NGJjZTE4Y2ZlMTJhMjdiYjJhZDVhNDg4Y2Q3NDg0YTc3ODcxMDQ4NzBiMjcwMzRmOTRlZWUzMWRkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzIxM2M3YTcxNWNkNWQ0NTM1OGQwYmJmOWRjMGNlMDIyMDRiMTBiZGRlMmEzZjU4NTQwYWQ2OTA4ZDA1NTk3NTQnLFxuICAgICAgICAnNGI2ZGFkMGI1YWU0NjI1MDcwMTNhZDA2MjQ1YmExOTBiYjQ4NTBmNWYzNmE3ZWVkZGZmMmMyNzUzNGI0NThmMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0ZTdjMjcyYTdhZjRiMzRlOGRiYjkzNTJhNTQxOWE4N2UyODM4YzcwYWRjNjJjZGRmMGNjM2EzYjA4ZmJkNTNjJyxcbiAgICAgICAgJzE3NzQ5Yzc2NmM5ZDBiMThlMTZmZDA5ZjZkZWY2ODFiNTMwYjk2MTRiZmY3ZGQzM2UwYjM5NDE4MTdkY2FhZTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZmVhNzRlM2RiZTc3OGIxYjEwZjIzOGFkNjE2ODZhYTVjNzZlM2RiMmJlNDMwNTc2MzI0MjdlMjg0MGZiMjdiNicsXG4gICAgICAgICc2ZTA1NjhkYjliMGIxMzI5N2NmNjc0ZGVjY2I2YWY5MzEyNmI1OTZiOTczZjdiNzc3MDFkM2RiN2YyM2NiOTZmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc2ZTY0MTEzZjY3N2NmMGUxMGEyNTcwZDU5OTk2OGQzMTU0NGUxNzliNzYwNDMyOTUyYzAyYTQ0MTdiZGRlMzknLFxuICAgICAgICAnYzkwZGRmOGRlZTRlOTVjZjU3NzA2NmQ3MDY4MWYwZDM1ZTJhMzNkMmI1NmQyMDMyYjRiMTc1MmQxOTAxYWMwMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjNzM4YzU2YjAzYjJhYmUxZTgyODFiYWE3NDNmOGY5YThmN2NjNjQzZGYyNmNiZWUzYWIxNTAyNDJiY2JiODkxJyxcbiAgICAgICAgJzg5M2ZiNTc4OTUxYWQyNTM3ZjcxOGYyZWFjYmZiYmJiODIzMTRlZWY3ODgwY2ZlOTE3ZTczNWQ5Njk5YTg0YzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDg5NTYyNjU0OGI2NWI4MWUyNjRjNzYzN2M5NzI4NzdkMWQ3MmU1ZjNhOTI1MDE0MzcyZTlmNjU4OGY2YzE0YicsXG4gICAgICAgICdmZWJmYWEzOGYyYmM3ZWFlNzI4ZWM2MDgxOGMzNDBlYjAzNDI4ZDYzMmJiMDY3ZTE3OTM2M2VkNzVkN2Q5OTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I4ZGE5NDAzMmE5NTc1MThlYjBmNjQzMzU3MWU4NzYxY2VmZmM3MzY5M2U4NGVkZDQ5MTUwYTU2NGY2NzZlMDMnLFxuICAgICAgICAnMjgwNGRmYTQ0ODA1YTFlNGQ3Yzk5Y2M5NzYyODA4YjA5MmNjNTg0ZDk1ZmYzYjUxMTQ4OGU0ZTc0ZWZkZjZlNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlODBmZWExNDQ0MWZiMzNhN2Q4YWRhYjk0NzVkN2ZhYjIwMTllZmZiNTE1NmE3OTJmMWExMTc3OGUzYzBkZjVkJyxcbiAgICAgICAgJ2VlZDFkZTdmNjM4ZTAwNzcxZTg5NzY4Y2EzY2E5NDQ3MmQxNTVlODBhZjMyMmVhOWZjYjQyOTFiNmFjOWVjNzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTMwMTY5N2JkZmNkNzA0MzEzYmE0OGU1MWQ1Njc1NDNmMmExODIwMzFlZmQ2OTE1ZGRjMDdiYmNjNGUxNjA3MCcsXG4gICAgICAgICc3MzcwZjkxY2ZiNjdlNGY1MDgxODA5ZmEyNWQ0MGY5YjE3MzVkYmY3YzBhMTFhMTMwYzBkMWEwNDFlMTc3ZWExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkwYWQ4NWIzODlkNmI5MzY0NjNmOWQwNTEyNjc4ZGUyMDhjYzMzMGIxMTMwN2ZmZmFiN2FjNjNlM2ZiMDRlZDQnLFxuICAgICAgICAnZTUwN2EzNjIwYTM4MjYxYWZmZGNiZDk0MjcyMjJiODM5YWVmYWJlMTU4Mjg5NGQ5OTFkNGQ0OGNiNmVmMTUwJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzhmNjhiOWQyZjYzYjVmMzM5MjM5YzFhZDk4MWYxNjJlZTg4YzU2Nzg3MjNlYTMzNTFiN2I0NDRjOWVjNGMwZGEnLFxuICAgICAgICAnNjYyYTlmMmRiYTA2Mzk4NmRlMWQ5MGMyYjZiZTIxNWRiYmVhMmNmZTk1NTEwYmZkZjIzY2JmNzk1MDFmZmY4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNGYzZmIwMTc2YWY4NWQ2NWZmOTlmZjkxOThjMzYwOTFmNDhlODY1MDM2ODFlM2U2Njg2ZmQ1MDUzMjMxZTExJyxcbiAgICAgICAgJzFlNjM2MzNhZDBlZjRmMWMxNjYxYTZkMGVhMDJiNzI4NmNjN2U3NGVjOTUxZDFjOTgyMmMzODU3NmZlYjczYmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGMwMGZhOWIxOGViZjMzMWViOTYxNTM3YTQ1YTQyNjZjNzAzNGYyZjBkNGUxZDA3MTZmYjZlYWUyMGVhZTI5ZScsXG4gICAgICAgICdlZmE0NzI2N2ZlYTUyMWExYTlkYzM0M2EzNzM2Yzk3NGMyZmFkYWZhODFlMzZjNTRlN2QyYTRjNjY3MDI0MTRiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U3YTI2Y2U2OWRkNDgyOWYzZTEwY2VjMGE5ZTk4ZWQzMTQzZDA4NGYzMDhiOTJjMDk5N2ZkZGZjNjBjYjNlNDEnLFxuICAgICAgICAnMmE3NThlMzAwZmE3OTg0YjQ3MWIwMDZhMWFhZmJiMThkMGE2YjJjMDQyMGU4M2UyMGU4YTk0MjFjZjJjZmQ1MSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiNjQ1OWUwZWUzNjYyZWM4ZDIzNTQwYzIyM2JjYmRjNTcxY2JjYjk2N2Q3OTQyNGYzY2YyOWViM2RlNmI4MGVmJyxcbiAgICAgICAgJzY3Yzg3NmQwNmYzZTA2ZGUxZGFkZjE2ZTU2NjFkYjNjNGIzYWU2ZDQ4ZTM1YjJmZjMwYmYwYjYxYTcxYmE0NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNjhhODBjODI4MGJiODQwNzkzMjM0YWExMThmMDYyMzFkNmYxZmM2N2U3M2M1YTVkZWRhMGY1YjQ5Njk0M2U4JyxcbiAgICAgICAgJ2RiOGJhOWZmZjRiNTg2ZDAwYzRiMWY5MTc3YjBlMjhiNWIwZTdiOGY3ODQ1Mjk1YTI5NGM4NDI2NmIxMzMxMjAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzI0YWVkN2RmNjVjODA0MjUyZGMwMjcwOTA3YTMwYjA5NjEyYWViOTczNDQ5Y2VhNDA5NTk4MGZjMjhkM2Q1ZCcsXG4gICAgICAgICc2NDhhMzY1Nzc0YjYxZjJmZjEzMGMwYzM1YWVjMWY0ZjE5MjEzYjBjN2UzMzI4NDM5NjcyMjRhZjk2YWI3Yzg0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRkZjljMTQ5MTljZGU2MWY2ZDUxZGZkYmU1ZmVlNWRjZWVjNDE0M2JhOGQxY2E4ODhlOGJkMzczZmQwNTRjOTYnLFxuICAgICAgICAnMzVlYzUxMDkyZDg3MjgwNTA5NzRjMjNhMWQ4NWQ0YjVkNTA2Y2RjMjg4NDkwMTkyZWJhYzA2Y2FkMTBkNWQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOWMzOTE5YTg0YTQ3NDg3MGZhZWQ4YTljMWNjNjYwMjE1MjM0ODkwNTRkN2YwMzA4Y2JmYzk5YzhhYzFmOThjZCcsXG4gICAgICAgICdkZGI4NGYwZjRhNGRkZDU3NTg0ZjA0NGJmMjYwZTY0MTkwNTMyNmY3NmM2NGM4ZTZiZTdlNWUwM2Q0ZmM1OTlkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzYwNTcxNzBiMWRkMTJmZGY4ZGUwNWYyODFkOGUwNmJiOTFlMTQ5M2E4YjkxZDRjYzVhMjEzODIxMjBhOTU5ZTUnLFxuICAgICAgICAnOWExYWYwYjI2YTZhNDgwN2FkZDlhMmRhZjcxZGYyNjI0NjUxNTJiYzNlZTI0YzY1ZTg5OWJlOTMyMzg1YTJhOCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhNTc2ZGY4ZTIzYTA4NDExNDIxNDM5YTQ1MThkYTMxODgwY2VmMGZiYTdkNGRmMTJiMWE2OTczZWVjYjk0MjY2JyxcbiAgICAgICAgJzQwYTZiZjIwZTc2NjQwYjJjOTJiOTdhZmU1OGNkODJjNDMyZTEwYTdmNTE0ZDlmM2VlOGJlMTFhZTFiMjhlYzgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc3OGE3OGMyOGRlYzNlMzBhMDVmZTk2MjlkZThjMzhiYjMwZDFmNWNmOWEzYTIwOGY3NjM4ODliZTU4YWQ3MScsXG4gICAgICAgICczNDYyNmQ5YWI1YTViMjJmZjcwOThlMTJmMmZmNTgwMDg3YjM4NDExZmYyNGFjNTYzYjUxM2ZjMWZkOWY0M2FjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkyODk1NWVlNjM3YTg0NDYzNzI5ZmQzMGU3YWZkMmVkNWY5NjI3NGU1YWQ3ZTVjYjA5ZWRhOWMwNmQ5MDNhYycsXG4gICAgICAgICdjMjU2MjEwMDNkM2Y0MmE4MjdiNzhhMTMwOTNhOTVlZWFjM2QyNmVmYThhOGQ4M2ZjNTE4MGU5MzViY2QwOTFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1ZDBmZWYzZWM2ZGIxMDkzOTkwNjRmM2EwZTNiMjg1NTY0NWI0YTkwN2FkMzU0NTI3YWFlNzUxNjNkODI3NTEnLFxuICAgICAgICAnMWYwMzY0ODQxM2EzOGMwYmUyOWQ0OTZlNTgyY2Y1NjYzZTg3NTFlOTY4NzczMzE1ODJjMjM3YTI0ZWIxZjk2MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZjJiMGRjZTk3ZWVjZTk3YzFjOWI2MDQxNzk4Yjg1ZGZkZmI2ZDg4ODJkYTIwMzA4ZjU0MDQ4MjQ1MjYwODdlJyxcbiAgICAgICAgJzQ5M2QxM2ZlZjUyNGJhMTg4YWY0YzRkYzU0ZDA3OTM2YzdiN2VkNmZiOTBlMmNlYjJjOTUxZTAxZjBjMjk5MDcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODI3ZmJiZTRiMWU4ODBlYTllZDJiMmU2MzAxYjIxMmI1N2YxZWUxNDhjZDZkZDI4NzgwZTVlMmNmODU2ZTI0MScsXG4gICAgICAgICdjNjBmOWM5MjNjNzI3YjBiNzFiZWYyYzY3ZDFkMTI2ODdmZjdhNjMxODY5MDMxNjZkNjA1YjY4YmFlYzI5M2VjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhYTY0OWYyMWY1MWJkYmFlN2JlNGFlMzRjZTZlNTIxN2E1OGZkY2U3ZjQ3ZjlhYTdmM2I1OGZhMjEyMGUyYjMnLFxuICAgICAgICAnYmUzMjc5ZWQ1YmJiYjAzYWM2OWE4MGY4OTg3OWFhNWEwMWE2Yjk2NWYxM2Y3ZTU5ZDQ3YTUzMDViYTVhZDkzZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlNGE0MmQ0M2M1Y2YxNjlkOTM5MWRmNmRlY2Y0MmVlNTQxYjZkOGYwYzlhMTM3NDAxZTIzNjMyZGRhMzRkMjRmJyxcbiAgICAgICAgJzRkOWY5MmU3MTZkMWM3MzUyNmZjOTljY2ZiOGFkMzRjZTg4NmVlZGZhOGQ4ZTRmMTNhN2Y3MTMxZGViYTk0MTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMWVjODBmZWYzNjBjYmRkOTU0MTYwZmFkYWIzNTJiNmI5MmI1MzU3NmE4OGZlYTQ5NDcxNzNiOWQ0MzAwYmYxOScsXG4gICAgICAgICdhZWVmZTkzNzU2YjUzNDBkMmYzYTQ5NThhN2FiYmY1ZTAxNDZlNzdmNjI5NWEwN2I2NzFjZGMxY2MxMDdjZWZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE0NmE3NzhjMDQ2NzBjMmY5MWIwMGFmNDY4MGRmYThiY2UzNDkwNzE3ZDU4YmE4ODlkZGI1OTI4MzY2NjQyYmUnLFxuICAgICAgICAnYjMxOGUwZWMzMzU0MDI4YWRkNjY5ODI3ZjlkNGIyODcwYWFhOTcxZDJmN2U1ZWQxZDBiMjk3NDgzZDgzZWZkMCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmYTUwYzBmNjFkMjJlNWYwN2UzYWNlYmIxYWEwN2IxMjhkMDAxMjIwOWEyOGI5Nzc2ZDc2YTg3OTMxODBlZWY5JyxcbiAgICAgICAgJzZiODRjNjkyMjM5N2ViYTliNzJjZDI4NzIyODFhNjhhNWU2ODMyOTNhNTdhMjEzYjM4Y2Q4ZDdkM2Y0ZjI4MTEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGExZDYxZDBjYTcyMWExMWIxYTViZjZiN2Q4OGU4NDIxYTI4OGFiNWQ1YmJhNTIyMGU1M2QzMmI1ZjA2N2VjMicsXG4gICAgICAgICc4MTU3ZjU1YTdjOTkzMDZjNzljMDc2NjE2MWM5MWUyOTY2YTczODk5ZDI3OWI0OGE2NTVmYmEwZjFhZDgzNmYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E4ZTI4MmZmMGM5NzA2OTA3MjE1ZmY5OGU4ZmQ0MTY2MTUzMTFkZTA0NDZmMWUwNjJhNzNiMDYxMGQwNjRlMTMnLFxuICAgICAgICAnN2Y5NzM1NWI4ZGI4MWMwOWFiZmI3ZjNjNWIyNTE1ODg4YjY3OWEzZTUwZGQ2YmQ2Y2VmN2M3MzExMWY0Y2MwYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNzRhNTNiOWM5YTI4NTg3MmQzOWU1NmU2OTEzY2FiMTVkNTliMWZhNTEyNTA4YzAyMmYzODJkZTgzMTk0OTdjJyxcbiAgICAgICAgJ2NjYzlkYzM3YWJmYzljMTY1N2I0MTU1ZjJjNDdmOWU2NjQ2YjNhMWQ4Y2I5ODU0MzgzZGExM2FjMDc5YWZhNzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOTU5Mzk2OTgxOTQzNzg1YzNkM2U1N2VkZjUwMThjZGJlMDM5ZTczMGU0OTE4YjNkODg0ZmRmZjA5NDc1YjdiYScsXG4gICAgICAgICcyZTdlNTUyODg4YzMzMWRkOGJhMDM4NmE0YjljZDY4NDljNjUzZjY0Yzg3MDkzODVlOWI4YWJmODc1MjRmMmZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QyYTYzYTUwYWU0MDFlNTZkNjQ1YTExNTNiMTA5YThmY2NhMGE0M2Q1NjFmYmEyZGJiNTEzNDBjOWQ4MmIxNTEnLFxuICAgICAgICAnZTgyZDg2ZmI2NDQzZmNiNzU2NWFlZTU4YjI5NDgyMjBhNzBmNzUwYWY0ODRjYTUyZDQxNDIxNzRkY2Y4OTQwNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2NDU4N2UyMzM1NDcxZWI4OTBlZTc4OTZkN2NmZGM4NjZiYWNiZGJkMzgzOTMxN2IzNDM2ZjliNDU2MTdlMDczJyxcbiAgICAgICAgJ2Q5OWZjZGQ1YmY2OTAyZTJhZTk2ZGQ2NDQ3YzI5OWExODViOTBhMzkxMzNhZWFiMzU4Mjk5ZTVlOWZhZjY1ODknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODQ4MWJkZTBlNGU0ZDg4NWIzYTU0NmQzZTU0OWRlMDQyZjBhYTZjZWEyNTBlN2ZkMzU4ZDZjODZkZDQ1ZTQ1OCcsXG4gICAgICAgICczOGVlN2I4Y2JhNTQwNGRkODRhMjViZjM5Y2VjYjJjYTkwMGE3OWM0MmIyNjJlNTU2ZDY0YjFiNTk3NzkwNTdlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzEzNDY0YTU3YTc4MTAyYWE2MmI2OTc5YWU4MTdmNDYzN2ZmY2ZlZDNjNGIxY2UzMGJjZDYzMDNmNmNhZjY2NmInLFxuICAgICAgICAnNjliZTE1OTAwNDYxNDU4MGVmN2U0MzM0NTNjY2IwY2E0OGYzMDBhODFkMDk0MmUxM2Y0OTVhOTA3ZjZlY2MyNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdiYzRhOWRmNWI3MTNmZTJlOWFlZjQzMGJjYzFkYzk3YTBjZDljY2VkZTJmMjg1ODhjYWRhM2EwZDJkODNmMzY2JyxcbiAgICAgICAgJ2QzYTgxY2E2ZTc4NWMwNjM4MzkzN2FkZjRiNzk4Y2FhNmU4YTlmYmZhNTQ3YjE2ZDc1OGQ2NjY1ODFmMzNjMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4YzI4YTk3YmY4Mjk4YmMwZDIzZDhjNzQ5NDUyYTMyZTY5NGI2NWUzMGE5NDcyYTM5NTRhYjMwZmU1MzI0Y2FhJyxcbiAgICAgICAgJzQwYTMwNDYzYTMzMDUxOTMzNzhmZWRmMzFmN2NjMGViN2FlNzg0ZjA0NTFjYjk0NTllNzFkYzczY2JlZjk0ODInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGVhOTY2NjEzOTUyN2E4YzFkZDk0Y2U0ZjA3MWZkMjNjOGIzNTBjNWE0YmIzMzc0OGM0YmExMTFmYWNjYWUwJyxcbiAgICAgICAgJzYyMGVmYWJiYzhlZTI3ODJlMjRlN2MwY2ZiOTVjNWQ3MzViNzgzYmU5Y2YwZjhlOTU1YWYzNGEzMGU2MmI5NDUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZGQzNjI1ZmFlZjViYTA2MDc0NjY5NzE2YmJkMzc4OGQ4OWJkZGU4MTU5NTk5NjgwOTJmNzZjYzRlYjlhOTc4NycsXG4gICAgICAgICc3YTE4OGZhMzUyMGUzMGQ0NjFkYTI1MDEwNDU3MzFjYTk0MTQ2MTk4Mjg4MzM5NTkzN2Y2OGQwMGM2NDRhNTczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Y3MTBkNzlkOWViOTYyMjk3ZTRmNjIzMmI0MGU4ZjdmZWIyYmM2MzgxNDYxNGQ2OTJjMTJkZTc1MjQwODIyMWUnLFxuICAgICAgICAnZWE5OGU2NzIzMmQzYjMyOTVkM2I1MzU1MzIxMTVjY2FjODYxMmM3MjE4NTE2MTc1MjZhZTQ3YTljNzdiZmM4MidcbiAgICAgIF1cbiAgICBdXG4gIH0sXG4gIG5hZjoge1xuICAgIHduZDogNyxcbiAgICBwb2ludHM6IFtcbiAgICAgIFtcbiAgICAgICAgJ2Y5MzA4YTAxOTI1OGMzMTA0OTM0NGY4NWY4OWQ1MjI5YjUzMWM4NDU4MzZmOTliMDg2MDFmMTEzYmNlMDM2ZjknLFxuICAgICAgICAnMzg4ZjdiMGY2MzJkZTgxNDBmZTMzN2U2MmEzN2YzNTY2NTAwYTk5OTM0YzIyMzFiNmNiOWZkNzU4NGI4ZTY3MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyZjhiZGU0ZDFhMDcyMDkzNTViNGE3MjUwYTVjNTEyOGU4OGI4NGJkZGM2MTlhYjdjYmE4ZDU2OWIyNDBlZmU0JyxcbiAgICAgICAgJ2Q4YWMyMjI2MzZlNWUzZDZkNGRiYTlkZGE2YzljNDI2Zjc4ODI3MWJhYjBkNjg0MGRjYTg3ZDNhYTZhYzYyZDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWNiZGYwNjQ2ZTVkYjRlYWEzOThmMzY1ZjJlYTdhMGUzZDQxOWI3ZTAzMzBlMzljZTkyYmRkZWRjYWM0ZjliYycsXG4gICAgICAgICc2YWViY2E0MGJhMjU1OTYwYTMxNzhkNmQ4NjFhNTRkYmE4MTNkMGI4MTNmZGU3YjVhNTA4MjYyODA4NzI2NGRhJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2FjZDQ4NGUyZjBjN2Y2NTMwOWFkMTc4YTlmNTU5YWJkZTA5Nzk2OTc0YzU3ZTcxNGMzNWYxMTBkZmMyN2NjYmUnLFxuICAgICAgICAnY2MzMzg5MjFiMGE3ZDlmZDY0MzgwOTcxNzYzYjYxZTlhZGQ4ODhhNDM3NWY4ZTBmMDVjYzI2MmFjNjRmOWMzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NzRhZTdmODU4YTk0MTFlNWVmNDI0NmI3MGM2NWFhYzU2NDk5ODBiZTVjMTc4OTFiYmVjMTc4OTVkYTAwOGNiJyxcbiAgICAgICAgJ2Q5ODRhMDMyZWI2YjVlMTkwMjQzZGQ1NmQ3YjdiMzY1MzcyZGIxZTJkZmY5ZDZhODMwMWQ3NGM5Yzk1M2M2MWInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjI4NzczYzJkOTc1Mjg4YmM3ZDFkMjA1YzM3NDg2NTFiMDc1ZmJjNjYxMGU1OGNkZGVlZGRmOGYxOTQwNWFhOCcsXG4gICAgICAgICdhYjA5MDJlOGQ4ODBhODk3NTgyMTJlYjY1Y2RhZjQ3M2ExYTA2ZGE1MjFmYTkxZjI5YjVjYjUyZGIwM2VkODEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDc5MjRkNGY3ZDQzZWE5NjVhNDY1YWUzMDk1ZmY0MTEzMWU1OTQ2ZjNjODVmNzllNDRhZGJjZjhlMjdlMDgwZScsXG4gICAgICAgICc1ODFlMjg3MmE4NmM3MmE2ODM4NDJlYzIyOGNjNmRlZmVhNDBhZjJiZDg5NmQzYTVjNTA0ZGM5ZmY2YTI2YjU4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RlZmRlYTRjZGI2Nzc3NTBhNDIwZmVlODA3ZWFjZjIxZWI5ODk4YWU3OWI5NzY4NzY2ZTRmYWEwNGEyZDRhMzQnLFxuICAgICAgICAnNDIxMWFiMDY5NDYzNTE2OGU5OTdiMGVhZDJhOTNkYWVjZWQxZjRhMDRhOTVjMGY2Y2ZiMTk5ZjY5ZTU2ZWI3NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyYjRlYTBhNzk3YTQ0M2QyOTNlZjVjZmY0NDRmNDk3OWYwNmFjZmViZDdlODZkMjc3NDc1NjU2MTM4Mzg1YjZjJyxcbiAgICAgICAgJzg1ZTg5YmMwMzc5NDVkOTNiMzQzMDgzYjVhMWM4NjEzMWEwMWY2MGM1MDI2OTc2M2I1NzBjODU0ZTVjMDliN2EnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzUyYmJmNGE0Y2RkMTI1NjRmOTNmYTMzMmNlMzMzMzAxZDlhZDQwMjcxZjgxMDcxODEzNDBhZWYyNWJlNTlkNScsXG4gICAgICAgICczMjFlYjQwNzUzNDhmNTM0ZDU5YzE4MjU5ZGRhM2UxZjRhMWIzYjJlNzFiMTAzOWM2N2JkM2Q4YmNmODE5OThjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzJmYTIxMDRkNmIzOGQxMWIwMjMwMDEwNTU5ODc5MTI0ZTQyYWI4ZGZlZmY1ZmYyOWRjOWNkYWRkNGVjYWNjM2YnLFxuICAgICAgICAnMmRlMTA2ODI5NWRkODY1YjY0NTY5MzM1YmQ1ZGQ4MDE4MWQ3MGVjZmM4ODI2NDg0MjNiYTc2YjUzMmI3ZDY3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzkyNDgyNzliMDliNGQ2OGRhYjIxYTliMDY2ZWRkYTgzMjYzYzNkODRlMDk1NzJlMjY5Y2EwY2Q3ZjU0NTM3MTQnLFxuICAgICAgICAnNzMwMTZmN2JmMjM0YWFkZTVkMWFhNzFiZGVhMmIxZmYzZmMwZGUyYTg4NzkxMmZmZTU0YTMyY2U5N2NiMzQwMidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYWVkNGYyYmUzYThiZjI3OGU3MDEzMmZiMGJlYjc1MjJmNTcwZTE0NGJmNjE1YzA3ZTk5NmQ0NDNkZWU4NzI5JyxcbiAgICAgICAgJ2E2OWRjZTRhN2Q2Yzk4ZThkNGExYWNhODdlZjhkNzAwM2Y4M2MyMzBmM2FmYTcyNmFiNDBlNTIyOTBiZTFjNTUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQ0ZDEyYzcwNjVkODEyZThhY2YyOGQ3Y2JiMTlmOTAxMWVjZDllOWZkZjI4MWIwZTZhM2I1ZTg3ZDIyZTdkYicsXG4gICAgICAgICcyMTE5YTQ2MGNlMzI2Y2RjNzZjNDU5MjZjOTgyZmRhYzBlMTA2ZTg2MWVkZjYxYzVhMDM5MDYzZjBlMGU2NDgyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzZhMjQ1YmY2ZGM2OTg1MDRjODlhMjBjZmRlZDYwODUzMTUyYjY5NTMzNmMyODA2M2I2MWM2NWNiZDI2OWU2YjQnLFxuICAgICAgICAnZTAyMmNmNDJjMmJkNGE3MDhiM2Y1MTI2ZjE2YTI0YWQ4YjMzYmE0OGQwNDIzYjZlZmQ1ZTYzNDgxMDBkOGE4MidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNjk3ZmZhNmZkOWRlNjI3YzA3N2UzZDJmZTU0MTA4NGNlMTMzMDBiMGJlYzExNDZmOTVhZTU3ZjBkMGJkNmE1JyxcbiAgICAgICAgJ2I5YzM5OGYxODY4MDZmNWQyNzU2MTUwNmU0NTU3NDMzYTJjZjE1MDA5ZTQ5OGFlN2FkZWU5ZDYzZDAxYjIzOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjA1YmRiMDE5OTgxNzE4Yjk4NmQwZjA3ZTgzNGNiMGQ5ZGViODM2MGZmYjdmNjFkZjk4MjM0NWVmMjdhNzQ3OScsXG4gICAgICAgICcyOTcyZDJkZTRmOGQyMDY4MWE3OGQ5M2VjOTZmZTIzYzI2YmZhZTg0ZmIxNGRiNDNiMDFlMWU5MDU2YjhjNDknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNjJkMTRkYWI0MTUwYmY0OTc0MDJmZGM0NWEyMTVlMTBkY2IwMWMzNTQ5NTliMTBjZmUzMWM3ZTlkODdmZjMzZCcsXG4gICAgICAgICc4MGZjMDZiZDhjYzViMDEwOTgwODhhMTk1MGVlZDBkYjAxYWExMzI5NjdhYjQ3MjIzNWY1NjQyNDgzYjI1ZWFmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzgwYzYwYWQwMDQwZjI3ZGFkZTViNGIwNmM0MDhlNTZiMmM1MGU5ZjU2YjliOGI0MjVlNTU1YzJmODYzMDhiNmYnLFxuICAgICAgICAnMWMzODMwM2YxY2M1YzMwZjI2ZTY2YmFkN2ZlNzJmNzBhNjVlZWQ0Y2JlNzAyNGViMWFhMDFmNTY0MzBiZDU3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3YTkzNzVhZDYxNjdhZDU0YWE3NGM2MzQ4Y2M1NGQzNDRjYzVkYzk0ODdkODQ3MDQ5ZDVlYWJiMGZhMDNjOGZiJyxcbiAgICAgICAgJ2QwZTNmYTllY2E4NzI2OTA5NTU5ZTBkNzkyNjkwNDZiZGM1OWVhMTBjNzBjZTJiMDJkNDk5ZWMyMjRkYzdmNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNTI4ZWNkOWI2OTZiNTRjOTA3YTllZDA0NTQ0N2E3OWJiNDA4ZWMzOWI2OGRmNTA0YmI1MWY0NTliYzNmZmM5JyxcbiAgICAgICAgJ2VlY2Y0MTI1MzEzNmU1Zjk5OTY2ZjIxODgxZmQ2NTZlYmM0MzQ1NDA1YzUyMGRiYzA2MzQ2NWI1MjE0MDk5MzMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDkzNzBhNGI1ZjQzNDEyZWEyNWY1MTRlOGVjZGFkMDUyNjYxMTVlNGE3ZWNiMTM4NzIzMTgwOGY4YjQ1OTYzJyxcbiAgICAgICAgJzc1OGYzZjQxYWZkNmVkNDI4YjMwODFiMDUxMmZkNjJhNTRjM2YzYWZiYjViNjc2NGI2NTMwNTJhMTI5NDljOWEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzdmMjMwOTM2ZWU4OGNiYmQ3M2RmOTMwZDY0NzAyZWY4ODFkODExZTBlMTQ5OGUyZjFjMTNlYjFmYzM0NWQ3NCcsXG4gICAgICAgICc5NThlZjQyYTc4ODZiNjQwMGEwODI2NmU5YmExYjM3ODk2Yzk1MzMwZDk3MDc3Y2JiZThlYjNjNzY3MWM2MGQ2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyZGFjOTkxY2M0Y2U0YjllYTQ0ODg3ZTVjN2MwYmNlNThjODAwNzRhYjlkNGRiYWViMjg1MzFiNzczOWY1MzAnLFxuICAgICAgICAnZTBkZWRjOWIzYjJmOGRhZDRkYTFmMzJkZWMyNTMxZGY5ZWI1ZmJlYjA1OThlNGZkMWExMTdkYmE3MDNhM2MzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0NjNiM2Q5ZjY2MjYyMWZiMWI0YmU4ZmJiZTI1MjAxMjVhMjE2Y2RmYzlkYWUzZGViY2JhNDg1MGM2OTBkNDViJyxcbiAgICAgICAgJzVlZDQzMGQ3OGMyOTZjMzU0MzExNDMwNmRkODYyMmQ3YzYyMmUyN2M5NzBhMWRlMzFjYjM3N2IwMWFmNzMwN2UnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZjE2ZjgwNDI0NGU0NmUyYTA5MjMyZDRhZmYzYjU5OTc2Yjk4ZmFjMTQzMjhhMmQxYTMyNDk2YjQ5OTk4ZjI0NycsXG4gICAgICAgICdjZWRhYmQ5YjgyMjAzZjdlMTNkMjA2ZmNkZjRlMzNkOTJhNmM1M2MyNmU1Y2NlMjZkNjU3OTk2MmM0ZTMxZGY2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2NhZjc1NDI3MmRjODQ1NjNiMDM1MmI3YTE0MzExYWY1NWQyNDUzMTVhY2UyN2M2NTM2OWUxNWY3MTUxZDQxZDEnLFxuICAgICAgICAnY2I0NzQ2NjBlZjM1ZjVmMmE0MWI2NDNmYTVlNDYwNTc1ZjRmYTliNzk2MjIzMmE1YzMyZjkwODMxOGEwNDQ3NidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyNjAwY2E0YjI4MmNiOTg2Zjg1ZDBmMTcwOTk3OWQ4YjQ0YTA5YzA3Y2I4NmQ3YzEyNDQ5N2JjODZmMDgyMTIwJyxcbiAgICAgICAgJzQxMTliODg3NTNjMTViZDZhNjkzYjAzZmNkZGJiNDVkNWFjNmJlNzRhYjVmMGVmNDRiMGJlOTQ3NWE3ZTRiNDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzYzNWNhNzJkN2U4NDMyYzMzOGVjNTNjZDEyMjIwYmMwMWM0ODY4NWUyNGY3ZGM4YzYwMmE3NzQ2OTk4ZTQzNScsXG4gICAgICAgICc5MWI2NDk2MDk0ODlkNjEzZDFkNWU1OTBmNzhlNmQ3NGVjZmMwNjFkNTcwNDhiYWQ5ZTc2ZjMwMmM1YjljNjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzU0ZTMyMzlmMzI1NTcwY2RiYmY0YTg3ZGVlZThhNjZiN2YyYjMzNDc5ZDQ2OGZiYzFhNTA3NDNiZjU2Y2MxOCcsXG4gICAgICAgICc2NzNmYjg2ZTViZGEzMGZiM2NkMGVkMzA0ZWE0OWEwMjNlZTMzZDAxOTdhNjk1ZDBjNWQ5ODA5M2M1MzY2ODMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTNlNmJkMTA3MWExZTk2YWZmNTc4NTljODJkNTcwZjAzMzA4MDA2NjFkMWM5NTJmOWZlMjY5NDY5MWQ5YjllOCcsXG4gICAgICAgICc1OWM5ZTBiYmEzOTRlNzZmNDBjMGFhNTgzNzlhM2NiNmE1YTIyODM5OTNlOTBjNDE2NzAwMmFmNDkyMGUzN2Y1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE4NmI0ODNkMDU2YTAzMzgyNmFlNzNkODhmNzMyOTg1YzRjY2IxZjMyYmEzNWY0YjRjYzQ3ZmRjZjA0YWE2ZWInLFxuICAgICAgICAnM2I5NTJkMzJjNjdjZjc3ZTJlMTc0NDZlMjA0MTgwYWIyMWZiODA5MDg5NTEzOGI0YTRhNzk3Zjg2ZTgwODg4YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkZjlkNzBhNmI5ODc2Y2U1NDRjOTg1NjFmNGJlNGY3MjU0NDJlNmQyYjczN2Q5YzkxYTgzMjE3MjRjZTA5NjNmJyxcbiAgICAgICAgJzU1ZWIyZGFmZDg0ZDZjY2Q1Zjg2MmI3ODVkYzM5ZDRhYjE1NzIyMjcyMGVmOWRhMjE3YjhjNDVjZjJiYTI0MTcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNWVkZDVjYzIzYzUxZTg3YTQ5N2NhODE1ZDVkY2UwZjhhYjUyNTU0Zjg0OWVkODk5NWRlNjRjNWYzNGNlNzE0MycsXG4gICAgICAgICdlZmFlOWM4ZGJjMTQxMzA2NjFlOGNlYzAzMGM4OWFkMGMxM2M2NmMwZDE3YTI5MDVjZGM3MDZhYjczOTlhODY4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzI5MDc5OGMyYjY0NzY4MzBkYTEyZmUwMjI4N2U5ZTc3N2FhM2ZiYTFjMzU1YjE3YTcyMmQzNjJmODQ2MTRmYmEnLFxuICAgICAgICAnZTM4ZGE3NmRjZDQ0MDYyMTk4OGQwMGJjZjc5YWYyNWQ1YjI5YzA5NGRiMmEyMzE0NmQwMDNhZmQ0MTk0M2U3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhZjNjNDIzYTk1ZDlmNWIzMDU0NzU0ZWZhMTUwYWMzOWNkMjk1NTJmZTM2MDI1NzM2MmRmZGVjZWY0MDUzYjQ1JyxcbiAgICAgICAgJ2Y5OGEzZmQ4MzFlYjJiNzQ5YTkzYjBlNmYzNWNmYjQwYzhjZDVhYTY2N2ExNTU4MWJjMmZlZGVkNDk4ZmQ5YzYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzY2ZGJiMjRkMTM0ZTc0NWNjY2FhMjhjOTliZjI3NDkwNmJiNjZiMjZkY2Y5OGRmOGQyZmVkNTBkODg0MjQ5YScsXG4gICAgICAgICc3NDRiMTE1MmVhY2JlNWUzOGRjYzg4Nzk4MGRhMzhiODk3NTg0YTY1ZmEwNmNlZGQyYzkyNGY5N2NiYWM1OTk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzU5ZGJmNDZmOGM5NDc1OWJhMjEyNzdjMzM3ODRmNDE2NDVmN2I0NGY2YzU5NmE1OGNlOTJlNjY2MTkxYWJlM2UnLFxuICAgICAgICAnYzUzNGFkNDQxNzVmYmMzMDBmNGVhNmNlNjQ4MzA5YTA0MmNlNzM5YTc5MTk3OThjZDg1ZTIxNmM0YTMwN2Y2ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmMTNhZGE5NTEwM2M0NTM3MzA1ZTY5MWU3NGU5YTRhOGRkNjQ3ZTcxMWE5NWU3M2NiNjJkYzYwMThjZmQ4N2I4JyxcbiAgICAgICAgJ2UxMzgxN2I0NGVlMTRkZTY2M2JmNGJjODA4MzQxZjMyNjk0OWUyMWE2YTc1YzI1NzA3Nzg0MTliZGFmNTczM2QnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzc1NGI0ZmEwZThhY2VkMDZkNDE2N2EyYzU5Y2NhNGNkYTE4NjljMDZlYmFkZmI2NDg4NTUwMDE1YTg4NTIyYycsXG4gICAgICAgICczMGU5M2U4NjRlNjY5ZDgyMjI0Yjk2N2MzMDIwYjhmYThkMWU0ZTM1MGI2Y2JjYzUzN2E0OGI1Nzg0MTE2M2EyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzk0OGRjYWRmNTk5MGUwNDhhYTM4NzRkNDZhYmVmOWQ3MDE4NThmOTVkZTgwNDFkMmE2ODI4Yzk5ZTIyNjI1MTknLFxuICAgICAgICAnZTQ5MWE0MjUzN2Y2ZTU5N2Q1ZDI4YTMyMjRiMWJjMjVkZjkxNTRlZmJkMmVmMWQyY2JiYTJjYWU1MzQ3ZDU3ZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OTYyNDE0NDUwYzc2YzE2ODljN2I0OGY4MjAyZWMzN2ZiMjI0Y2Y1YWMwYmZhMTU3MDMyOGE4YTNkN2M3N2FiJyxcbiAgICAgICAgJzEwMGI2MTBlYzRmZmI0NzYwZDVjMWZjMTMzZWY2ZjZiMTI1MDdhMDUxZjA0YWM1NzYwYWZhNWIyOWRiODM0MzcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzUxNDA4NzgzNDk2NGI1NGIxNWIxNjA2NDRkOTE1NDg1YTE2OTc3MjI1Yjg4NDdiYjBkZDA4NTEzN2VjNDdjYScsXG4gICAgICAgICdlZjBhZmJiMjA1NjIwNTQ0OGUxNjUyYzQ4ZTgxMjdmYzYwMzllNzdjMTVjMjM3OGI3ZTdkMTVhMGRlMjkzMzExJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2QzY2MzMGFkNmI0ODNlNGJjNzljZTJjOWRkOGJjNTQ5OTNlOTQ3ZWI4ZGY3ODdiNDQyOTQzZDNmN2I1MjdlYWYnLFxuICAgICAgICAnOGIzNzhhMjJkODI3Mjc4ZDg5YzVlOWJlOGY5NTA4YWUzYzJhZDQ2MjkwMzU4NjMwYWZiMzRkYjA0ZWVkZTBhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxNjI0ZDg0NzgwNzMyODYwY2UxYzc4ZmNiZmVmZTA4YjJiMjk4MjNkYjkxM2Y2NDkzOTc1YmEwZmY0ODQ3NjEwJyxcbiAgICAgICAgJzY4NjUxY2Y5YjZkYTkwM2UwOTE0NDQ4YzZjZDlkNGNhODk2ODc4ZjUyODJiZTRjOGNjMDZlMmE0MDQwNzg1NzUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNzMzY2U4MGRhOTU1YThhMjY5MDJjOTU2MzNlNjJhOTg1MTkyNDc0YjVhZjIwN2RhNmRmN2I0ZmQ1ZmM2MWNkNCcsXG4gICAgICAgICdmNTQzNWEyYmQyYmFkZjdkNDg1YTRkOGI4ZGI5ZmNjZTNlMWVmOGUwMjAxZTQ1NzhjNTQ2NzNiYzFkYzVlYTFkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE1ZDk0NDEyNTQ5NDUwNjRjZjFhMWMzM2JiZDNiNDlmODk2NmM1MDkyMTcxZTY5OWVmMjU4ZGZhYjgxYzA0NWMnLFxuICAgICAgICAnZDU2ZWIzMGI2OTQ2M2U3MjM0ZjUxMzdiNzNiODQxNzc0MzQ4MDBiYWNlYmZjNjg1ZmMzN2JiZTllZmU0MDcwZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMWQwZmNmMmVjOWRlNjc1YjYxMjEzNmU1Y2U3MGQyNzFjMjE0MTdjOWQyYjhhYWFhYzEzODU5OWQwNzE3OTQwJyxcbiAgICAgICAgJ2VkZDc3ZjUwYmNiNWEzY2FiMmU5MDczNzMwOTY2N2YyNjQxNDYyYTU0MDcwZjNkNTE5MjEyZDM5YzE5N2E2MjknXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTIyZmJlMTVjMGFmOGNjYzU3ODBjMDczNWY4NGRiZTlhNzkwYmFkZWU4MjQ1YzA2YzdjYTM3MzMxY2IzNjk4MCcsXG4gICAgICAgICdhODU1YmFiYWQ1Y2Q2MGM4OGI0MzBhNjlmNTNhMWE3YTM4Mjg5MTU0OTY0Nzk5YmU0M2QwNmQ3N2QzMWRhMDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzExMDkxZGQ5ODYwZThlMjBlZTEzNDczYzExNTVmNWY2OTYzNWUzOTQ3MDRlYWE3NDAwOTQ1MjI0NmNmYTliMycsXG4gICAgICAgICc2NmRiNjU2Zjg3ZDFmMDRmZmZkMWYwNDc4OGMwNjgzMDg3MWVjNWE2NGZlZWU2ODViZDgwZjBiMTI4NmQ4Mzc0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM0YzFmZDA0ZDMwMWJlODliMzFjMDQ0MmQzZTZhYzI0ODgzOTI4YjQ1YTkzNDA3ODE4NjdkNDIzMmVjMmRiZGYnLFxuICAgICAgICAnOTQxNDY4NWU5N2IxYjU5NTRiZDQ2ZjczMDE3NDEzNmQ1N2YxY2VlYjQ4NzQ0M2RjNTMyMTg1N2JhNzNhYmVlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2YyMTllYTVkNmI1NDcwMWMxYzE0ZGU1YjU1N2ViNDJhOGQxM2YzYWJiY2QwOGFmZmNjMmE1ZTZiMDQ5YjhkNjMnLFxuICAgICAgICAnNGNiOTU5NTdlODNkNDBiMGY3M2FmNDU0NGNjY2Y2YjFmNGIwOGQzYzA3YjI3ZmI4ZDhjMjk2MmE0MDA3NjZkMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkN2I4NzQwZjc0YThmYmFhYjFmNjgzZGI4ZjQ1ZGUyNjU0M2E1NDkwYmNhNjI3MDg3MjM2OTEyNDY5YTBiNDQ4JyxcbiAgICAgICAgJ2ZhNzc5NjgxMjhkOWM5MmVlMTAxMGYzMzdhZDQ3MTdlZmYxNWRiNWVkM2MwNDliMzQxMWUwMzE1ZWFhNDU5M2InXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzJkMzFjMjIyZjhmNmYwZWY4NmY3Yzk4ZDNhMzMzNWVhZDViY2QzMmFiZGQ5NDI4OWZlNGQzMDkxYWE4MjRiZicsXG4gICAgICAgICc1ZjMwMzJmNTg5MjE1NmUzOWNjZDNkNzkxNWI5ZTFkYTJlNmRhYzllNmYyNmU5NjExMThkMTRiODQ2MmUxNjYxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc0NjFmMzcxOTE0YWIzMjY3MTA0NWExNTVkOTgzMWVhODc5M2Q3N2NkNTk1OTJjNDM0MGY4NmNiYzE4MzQ3YjUnLFxuICAgICAgICAnOGVjMGJhMjM4Yjk2YmVjMGNiZGRkY2FlMGFhNDQyNTQyZWVlMWZmNTBjOTg2ZWE2YjM5ODQ3YjNjYzA5MmZmNidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdlZTA3OWFkYjFkZjE4NjAwNzQzNTZhMjVhYTM4MjA2YTZkNzE2YjJjM2U2NzQ1M2QyODc2OThiYWQ3YjJiMmQ2JyxcbiAgICAgICAgJzhkYzI0MTJhYWZlM2JlNWM0YzVmMzdlMGVjYzVmOWY2YTQ0Njk4OWFmMDRjNGUyNWViYWFjNDc5ZWMxYzhjMWUnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTZlYzkzZTQ0N2VjODNmMDQ2N2IxODMwMmVlNjIwZjdlNjVkZTMzMTg3NGM5ZGM3MmJmZDg2MTZiYTlkYTZiNScsXG4gICAgICAgICc1ZTQ2MzExNTBlNjJmYjQwZDBlOGMyYTdjYTU4MDRhMzlkNTgxODZhNTBlNDk3MTM5NjI2Nzc4ZTI1YjA2NzRkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhYTVmOTgwYzI0NWY2ZjAzODk3ODI5MGFmYTcwYjZiZDg4NTU4OTdmOThiNmFhNDg1Yjk2MDY1ZDUzN2JkOTknLFxuICAgICAgICAnZjY1ZjVkM2UyOTJjMmUwODE5YTUyODM5MWM5OTQ2MjRkNzg0ODY5ZDdlNmVhNjdmYjE4MDQxMDI0ZWRjMDdkYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3OGM5NDA3NTQ0YWMxMzI2OTJlZTE5MTBhMDI0Mzk5NThhZTA0ODc3MTUxMzQyZWE5NmM0YjZiMzVhNDlmNTEnLFxuICAgICAgICAnZjNlMDMxOTE2OWViOWI4NWQ1NDA0Nzk1NTM5YTVlNjhmYTFmYmQ1ODNjMDY0ZDI0NjJiNjc1ZjE5NGEzZGRiNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc0OTRmNGJlMjE5YTFhNzcwMTZkY2Q4Mzg0MzFhZWEwMDAxY2RjOGFlN2E2ZmM2ODg3MjY1NzhkOTcwMjg1N2E1JyxcbiAgICAgICAgJzQyMjQyYTk2OTI4M2E1ZjMzOWJhN2YwNzVlMzZiYTJhZjkyNWNlMzBkNzY3ZWQ2ZTU1ZjRiMDMxODgwZDU2MmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYTU5OGE4MDMwZGE2ZDg2YzZiYzdmMmY1MTQ0ZWE1NDlkMjgyMTFlYTU4ZmFhNzBlYmY0YzFlNjY1YzFmZTliNScsXG4gICAgICAgICcyMDRiNWQ2Zjg0ODIyYzMwN2U0YjRhNzE0MDczN2FlYzIzZmM2M2I2NWIzNWY4NmExMDAyNmRiZDJkODY0ZTZiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2M0MTkxNjM2NWFiYjJiNWQwOTE5MmY1ZjJkYmVhZmVjMjA4ZjAyMGYxMjU3MGExODRkYmFkYzNlNTg1OTU5OTcnLFxuICAgICAgICAnNGYxNDM1MWQwMDg3ZWZhNDlkMjQ1YjMyODk4NDk4OWQ1Y2FmOTQ1MGYzNGJmYzBlZDE2ZTk2YjU4ZmE5OTEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg0MWQ2MDYzYTU4NmZhNDc1YTcyNDYwNGRhMDNiYzViOTJhMmUwZDJlMGEzNmFjZmU0YzczYTU1MTQ3NDI4ODEnLFxuICAgICAgICAnNzM4NjdmNTljMDY1OWU4MTkwNGY5YTFjNzU0MzY5OGU2MjU2MmQ2NzQ0YzE2OWNlN2EzNmRlMDFhOGQ2MTU0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzVlOTViYjM5OWE2OTcxZDM3NjAyNjk0N2Y4OWJkZTJmMjgyYjMzODEwOTI4YmU0ZGVkMTEyYWM0ZDcwZTIwZDUnLFxuICAgICAgICAnMzlmMjNmMzY2ODA5MDg1YmVlYmZjNzExODEzMTM3NzVhOTljOWFlZDdkOGJhMzhiMTYxMzg0Yzc0NjAxMjg2NSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNmU0NjQxYTUzOTQ4ZmQ0NzZjMzlmOGE5OWZkOTc0ZTVlYzA3NTY0YjUzMTVkOGJmOTk0NzFiY2EwZWYyZjY2JyxcbiAgICAgICAgJ2QyNDI0YjFiMWFiZTRlYjgxNjQyMjdiMDg1YzlhYTk0NTZlYTEzNDkzZmQ1NjNlMDZmZDUxY2Y1Njk0Yzc4ZmMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzM2NTgxZWE3YmZiYmIyOTBjMTkxYTJmNTA3YTQxY2Y1NjQzODQyMTcwZTkxNGZhZWFiMjdjMmM1NzlmNzI2JyxcbiAgICAgICAgJ2VhZDEyMTY4NTk1ZmUxYmU5OTI1MjEyOWI2ZTU2YjMzOTFmN2FiMTQxMGNkMWUwZWYzZGNkY2FiZDJmZGEyMjQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGFiODk4MTZkYWRmZDZiNmExZjI2MzRmY2YwMGVjODQwMzc4MTAyNWVkNjg5MGM0ODQ5NzQyNzA2YmQ0M2VkZScsXG4gICAgICAgICc2ZmRjZWYwOWYyZjZkMGEwNDRlNjU0YWVmNjI0MTM2ZjUwM2Q0NTljM2U4OTg0NTg1OGE0N2E5MTI5Y2RkMjRlJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFlMzNmMWE3NDZjOWM1Nzc4MTMzMzQ0ZDkyOTlmY2FhMjBiMDkzOGU4YWNmZjI1NDRiYjQwMjg0YjhjNWZiOTQnLFxuICAgICAgICAnNjA2NjAyNTdkZDExYjNhYTljOGVkNjE4ZDI0ZWRmZjIzMDZkMzIwZjFkMDMwMTBlMzNhN2QyMDU3ZjNiM2I2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzg1YjdjMWRjYjNjZWMxYjdlZTdmMzBkZWQ3OWRkMjBhMGVkMWY0Y2MxOGNiY2ZjZmE0MTAzNjFmZDhmMDhmMzEnLFxuICAgICAgICAnM2Q5OGE5Y2RkMDI2ZGQ0M2YzOTA0OGYyNWE4ODQ3ZjRmY2FmYWQxODk1ZDdhNjMzYzZmZWQzYzM1ZTk5OTUxMSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcyOWRmOWZiZDhkOWU0NjUwOTI3NWY0YjEyNWQ2ZDQ1ZDdmYmU5YTNiODc4YTdhZjg3MmEyODAwNjYxYWM1ZjUxJyxcbiAgICAgICAgJ2I0YzRmZTk5Yzc3NWE2MDZlMmQ4ODYyMTc5MTM5ZmZkYTYxZGM4NjFjMDE5ZTU1Y2QyODc2ZWIyYTI3ZDg0YidcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhMGIxY2FlMDZiMGE4NDdhM2ZlYTZlNjcxYWFmOGFkZmRmZTU4Y2EyZjc2ODEwNWM4MDgyYjJlNDQ5ZmNlMjUyJyxcbiAgICAgICAgJ2FlNDM0MTAyZWRkZTA5NThlYzRiMTlkOTE3YTZhMjhlNmI3MmRhMTgzNGFmZjBlNjUwZjA0OTUwM2EyOTZjZjInXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNGU4Y2VhZmI5YjNlOWExMzZkYzdmZjY3ZTg0MDI5NWI0OTlkZmIzYjIxMzNlNGJhMTEzZjJlNGMwZTEyMWU1JyxcbiAgICAgICAgJ2NmMjE3NDExOGM4YjZkN2E0YjQ4ZjZkNTM0Y2U1Yzc5NDIyYzA4NmE2MzQ2MDUwMmI4MjdjZTYyYTMyNjY4M2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZDI0YTQ0ZTA0N2UxOWI2ZjVhZmI4MWM3Y2EyZjY5MDgwYTUwNzY2ODlhMDEwOTE5ZjQyNzI1YzJiNzg5YTMzYicsXG4gICAgICAgICc2ZmI4ZDU1OTFiNDY2ZjhmYzYzZGI1MGYxYzBmMWM2OTAxM2Y5OTY4ODdiODI0NGQyY2RlYzQxN2FmZWE4ZmEzJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2VhMDE2MDZhN2E2YzljZGQyNDlmZGZjZmFjYjk5NTg0MDAxZWRkMjhhYmJhYjc3YjUxMDRlOThlOGUzYjM1ZDQnLFxuICAgICAgICAnMzIyYWY0OTA4YzczMTJiMGNmYmZlMzY5ZjdhN2IzY2RiN2Q0NDk0YmMyODIzNzAwY2ZkNjUyMTg4YTNlYTk4ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdhZjhhZGRiZjJiNjYxYzhhNmM2MzI4NjU1ZWI5NjY1MTI1MjAwN2Q4YzVlYTMxYmU0YWQxOTZkZThjZTIxMzFmJyxcbiAgICAgICAgJzY3NDllNjdjMDI5Yjg1ZjUyYTAzNGVhZmQwOTY4MzZiMjUyMDgxODY4MGUyNmFjOGYzZGZiY2RiNzE3NDk3MDAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTNhZTE5NzQ1NjZjYTA2Y2M1MTZkNDdlMGZiMTY1YTY3NGEzZGFiY2ZjYTE1ZTcyMmYwZTM0NTBmNDU4ODknLFxuICAgICAgICAnMmFlYWJlN2U0NTMxNTEwMTE2MjE3ZjA3YmY0ZDA3MzAwZGU5N2U0ODc0ZjgxZjUzMzQyMGE3MmVlYjBiZDZhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc1OTFlZTM1NTMxM2Q5OTcyMWNmNjk5M2ZmZWQxZTNlMzAxOTkzZmYzZWQyNTg4MDIwNzVlYThjZWQzOTdlMjQ2JyxcbiAgICAgICAgJ2IwZWE1NThhMTEzYzMwYmVhNjBmYzQ3NzU0NjBjNzkwMWZmMGIwNTNkMjVjYTJiZGVlZTk4ZjFhNGJlNWQxOTYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMTEzOTZkNTVmZGE1NGM0OWYxOWFhOTczMThkOGRhNjFmYTg1ODRlNDdiMDg0OTQ1MDc3Y2YwMzI1NWI1Mjk4NCcsXG4gICAgICAgICc5OThjNzRhOGNkNDVhYzAxMjg5ZDU4MzNhN2JlYjQ3NDRmZjUzNmIwMWIyNTdiZTRjNTc2N2JlYTkzZWE1N2E0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzNjNWQyYTFiYTM5YzVhMTc5MDAwMDczOGM5ZTBjNDBiOGRjZGZkNTQ2ODc1NGI2NDA1NTQwMTU3ZTAxN2FhN2EnLFxuICAgICAgICAnYjIyODQyNzk5OTVhMzRlMmY5ZDRkZTczOTZmYzE4YjgwZjliOGI5ZmRkMjcwZjY2NjFmNzljYTRjODFiZDI1NydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdjYzg3MDRiOGE2MGEwZGVmYTNhOTlhNzI5OWYyZTljM2ZiYzM5NWFmYjA0YWMwNzg0MjVlZjhhMTc5M2NjMDMwJyxcbiAgICAgICAgJ2JkZDQ2MDM5ZmVlZDE3ODgxZDFlMDg2MmRiMzQ3ZjhjZjM5NWI3NGZjNGJjZGM0ZTk0MGI3NGUzYWMxZjFiMTMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzUzM2U0ZjdlYTg1NTVhYWNkOTc3N2FjNWNhZDI5Yjk3ZGQ0ZGVmY2NjNTNlZTdlYTIwNDExOWIyODg5YjE5NycsXG4gICAgICAgICc2ZjBhMjU2YmM1ZWZkZjQyOWEyZmI2MjQyZjFhNDNhMmQ5YjkyNWJiNGE0YjNhMjZiYjhlMGY0NWViNTk2MDk2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2MxNGY4ZjJjY2IyN2Q2ZjEwOWY2ZDA4ZDAzY2M5NmE2OWJhOGMzNGVlYzA3YmJjZjU2NmQ0OGUzM2RhNjU5MycsXG4gICAgICAgICdjMzU5ZDY5MjNiYjM5OGY3ZmQ0NDczZTE2ZmUxYzI4NDc1Yjc0MGRkMDk4MDc1ZTZjMGU4NjQ5MTEzZGMzYTM4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2E2Y2JjMzA0NmJjNmE0NTBiYWMyNDc4OWZhMTcxMTVhNGM5NzM5ZWQ3NWY4ZjIxY2U0NDFmNzJlMGI5MGU2ZWYnLFxuICAgICAgICAnMjFhZTdmNDY4MGU4ODliYjEzMDYxOWUyYzBmOTVhMzYwY2ViNTczYzcwNjAzMTM5ODYyYWZkNjE3ZmE5YjlmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzM0N2Q2ZDlhMDJjNDg5MjdlYmZiODZjMTM1OWIxY2FmMTMwYTNjMDI2N2QxMWNlNjM0NGIzOWY5OWQ0M2NjMzgnLFxuICAgICAgICAnNjBlYTdmNjFhMzUzNTI0ZDFjOTg3ZjZlY2VjOTJmMDg2ZDU2NWFiNjg3ODcwY2IxMjY4OWZmMWUzMWM3NDQ0OCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkYTY1NDVkMjE4MWRiOGQ5ODNmN2RjYjM3NWVmNTg2NmQ0N2M2N2IxYmYzMWM4Y2Y4NTVlZjc0MzdiNzI2NTZhJyxcbiAgICAgICAgJzQ5Yjk2NzE1YWI2ODc4YTc5ZTc4ZjA3Y2U1NjgwYzVkNjY3MzA1MWI0OTM1YmQ4OTdmZWE4MjRiNzdkYzIwOGEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYzQwNzQ3Y2M5ZDAxMmNiMWExM2I4MTQ4MzA5YzZkZTdlYzI1ZDY5NDVkNjU3MTQ2YjlkNTk5NGI4ZmViMTExMScsXG4gICAgICAgICc1Y2E1NjA3NTNiZTJhMTJmYzZkZTZjYWYyY2I0ODk1NjVkYjkzNjE1NmI5NTE0ZTFiYjVlODMwMzdlMGZhMmQ0J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzRlNDJjOGVjODJjOTk3OThjY2YzYTYxMGJlODcwZTc4MzM4YzdmNzEzMzQ4YmQzNGM4MjAzZWY0MDM3ZjM1MDInLFxuICAgICAgICAnNzU3MWQ3NGVlNWUwZmI5MmE3YThiMzNhMDc3ODMzNDFhNTQ5MjE0NGNjNTRiY2M0MGE5NDQ3MzY5MzYwNjQzNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICczNzc1YWI3MDg5YmM2YWY4MjNhYmEyZTFhZjcwYjIzNmQyNTFjYWRiMGM4Njc0MzI4NzUyMmExYjNiMGRlZGVhJyxcbiAgICAgICAgJ2JlNTJkMTA3YmNmYTA5ZDhiY2I5NzM2YTgyOGNmYTdmYWM4ZGIxN2JmN2E3NmEyYzQyYWQ5NjE0MDkwMThjZjcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnY2VlMzFjYmY3ZTM0ZWMzNzlkOTRmYjgxNGQzZDc3NWFkOTU0NTk1ZDEzMTRiYTg4NDY5NTllM2U4MmY3NGUyNicsXG4gICAgICAgICc4ZmQ2NGExNGMwNmI1ODljMjZiOTQ3YWUyYmNmNmJmYTAxNDllZjBiZTE0ZWQ0ZDgwZjQ0OGEwMWM0M2IxYzZkJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2I0ZjllYWVhMDliNjkxNzYxOWY2ZWE2YTRlYjU0NjRlZmRkYjU4ZmQ0NWIxZWJlZmNkYzFhMDFkMDhiNDc5ODYnLFxuICAgICAgICAnMzllNWM5OTI1YjVhNTRiMDc0MzNhNGYxOGM2MTcyNmY4YmIxMzFjMDEyY2E1NDJlYjI0YThhYzA3MjAwNjgyYSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkNDI2M2RmYzNkMmRmOTIzYTAxNzlhNDg5NjZkMzBjZTg0ZTI1MTVhZmMzZGNjYzFiNzc5MDc3OTJlYmNjNjBlJyxcbiAgICAgICAgJzYyZGZhZjA3YTBmNzhmZWIzMGUzMGQ2Mjk1ODUzY2UxODllMTI3NzYwYWQ2Y2Y3ZmFlMTY0ZTEyMmEyMDhkNTQnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDg0NTc1MjQ4MjBmYTY1YTRmOGQzNWViNjkzMDg1N2MwMDMyYWNjMGE0YTJkZTQyMjIzM2VlZGE4OTc2MTJjNCcsXG4gICAgICAgICcyNWE3NDhhYjM2Nzk3OWQ5ODczM2MzOGExZmExYzJlN2RjNmNjMDdkYjJkNjBhOWFlN2E3NmFhYTQ5YmQwZjc3J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2RmZWVlZjE4ODExMDFmMmNiMTE2NDRmM2EyYWZkZmMyMDQ1ZTE5OTE5MTUyOTIzZjM2N2ExNzY3YzExY2NlZGEnLFxuICAgICAgICAnZWNmYjcwNTZjZjFkZTA0MmY5NDIwYmFiMzk2NzkzYzBjMzkwYmRlNzRiNGJiZGZmMTZhODNhZTA5YTlhNzUxNydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc2ZDdlZjZiMTc1NDNmODM3M2M1NzNmNDRlMWYzODk4MzVkODliY2JjNjA2MmNlZDM2YzgyZGY4M2I4ZmFlODU5JyxcbiAgICAgICAgJ2NkNDUwZWMzMzU0Mzg5ODZkZmVmYTEwYzU3ZmVhOWJjYzUyMWEwOTU5YjJkODBiYmY3NGIxOTBkY2E3MTJkMTAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZTc1NjA1ZDU5MTAyYTVhMjY4NDUwMGQzYjk5MWYyZTNmM2M4OGI5MzIyNTU0NzAzNWFmMjVhZjY2ZTA0NTQxZicsXG4gICAgICAgICdmNWM1NDc1NGE4ZjcxZWU1NDBiOWI0ODcyODQ3M2UzMTRmNzI5YWM1MzA4YjA2OTM4MzYwOTkwZTJiZmFkMTI1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2ViOTg2NjBmNGM0ZGZhYTA2YTJiZTQ1M2Q1MDIwYmM5OWEwYzJlNjBhYmUzODg0NTdkZDQzZmVmYjFlZDYyMGMnLFxuICAgICAgICAnNmNiOWE4ODc2ZDljYjg1MjA2MDlhZjNhZGQyNmNkMjBhMGE3Y2Q4YTk0MTExMzFjZTg1ZjQ0MTAwMDk5MjIzZSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICcxM2U4N2IwMjdkODUxNGQzNTkzOWYyZTY4OTJiMTk5MjIxNTQ1OTY5NDE4ODgzMzZkYzM1NjNlM2I4ZGJhOTQyJyxcbiAgICAgICAgJ2ZlZjVhM2M2ODA1OWE2ZGVjNWQ2MjQxMTRiZjFlOTFhYWMyYjlkYTU2OGQ2YWJlYjI1NzBkNTU2NDZiOGFkZjEnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnZWUxNjMwMjZlOWZkNmZlMDE3YzM4ZjA2YTViZTZmYzEyNTQyNGIzNzFjZTI3MDhlN2JmNDQ5MTY5MWU1NzY0YScsXG4gICAgICAgICcxYWNiMjUwZjI1NWRkNjFjNDNkOTRjY2M2NzBkMGY1OGY0OWFlM2ZhMTViOTY2MjNlNTQzMGRhMGFkNmM2MmIyJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2IyNjhmNWVmOWFkNTFlNGQ3OGRlM2E3NTBjMmRjODliMWU2MjZkNDM1MDU4Njc5OTk5MzJlNWRiMzNhZjNkODAnLFxuICAgICAgICAnNWYzMTBkNGIzYzk5YjllYmIxOWY3N2Q0MWMxZGVlMDE4Y2YwZDM0ZmQ0MTkxNjE0MDAzZTk0NWExMjE2ZTQyMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdmZjA3ZjMxMThhOWRmMDM1ZTlmYWQ4NWViNmM3YmZlNDJiMDJmMDFjYTk5Y2VlYTNiZjdmZmRiYTkzYzQ3NTBkJyxcbiAgICAgICAgJzQzODEzNmQ2MDNlODU4YTNhNWM0NDBjMzhlY2NiYWRkYzFkMjk0MjExNGUyZWRkZDQ3NDBkMDk4Y2VkMWYwZDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnOGQ4Yjk4NTVjN2MwNTJhMzQxNDZmZDIwZmZiNjU4YmVhNGI5ZjY5ZTBkODI1ZWJlYzE2ZThjM2NlMmI1MjZhMScsXG4gICAgICAgICdjZGI1NTllZWRjMmQ3OWY5MjZiYWY0NGZiODRlYTRkNDRiY2Y1MGZlZTUxZDdjZWIzMGUyZTdmNDYzMDM2NzU4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzUyZGIwYjUzODRkZmJmMDViZmE5ZDQ3MmQ3YWUyNmRmZTRiODUxY2VjYTkxYjFlYmE1NDI2MzE4MGRhMzJiNjMnLFxuICAgICAgICAnYzNiOTk3ZDA1MGVlNWQ0MjNlYmFmNjZhNmRiOWY1N2IzMTgwYzkwMjg3NTY3OWRlOTI0YjY5ZDg0YTdiMzc1J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2U2MmY5NDkwZDNkNTFkYTYzOTVlZmQyNGU4MDkxOWNjN2QwZjI5YzNmM2ZhNDhjNmZmZjU0M2JlY2JkNDMzNTInLFxuICAgICAgICAnNmQ4OWFkN2JhNDg3NmIwYjIyYzJjYTI4MGM2ODI4NjJmMzQyYzg1OTFmMWRhZjUxNzBlMDdiZmQ5Y2NhZmE3ZCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3ZjMwZWEyNDc2YjM5OWI0OTU3NTA5Yzg4Zjc3ZDAxOTFhZmEyZmY1Y2I3YjE0ZmQ2ZDhlN2Q2NWFhYWIxMTkzJyxcbiAgICAgICAgJ2NhNWVmN2Q0YjIzMWM5NGMzYjE1Mzg5YTVmNjMxMWU5ZGFmZjdiYjY3YjEwM2U5ODgwZWY0YmZmNjM3YWNhZWMnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNTA5OGZmMWUxZDlmMTRmYjQ2YTIxMGZhZGE2YzkwM2ZlZjBmYjdiNGExZGQxZDlhYzYwYTAzNjE4MDBiN2EwMCcsXG4gICAgICAgICc5NzMxMTQxZDgxZmM4ZjgwODRkMzdjNmU3NTQyMDA2YjNlZTFiNDBkNjBkZmU1MzYyYTViMTMyZmQxN2RkYzAnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzJiNzhjN2RlOWVlNTEyYTcyODk1YmU2YjljYmVmYTZlMmYzYzRjY2NlNDQ1Yzk2YjlmMmM4MWUyNzc4YWQ1OCcsXG4gICAgICAgICdlZTE4NDlmNTEzZGY3MWUzMmVmYzM4OTZlZTI4MjYwYzczYmI4MDU0N2FlMjI3NWJhNDk3MjM3Nzk0Yzg3NTNjJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2UyY2I3NGZkZGM4ZTlmYmNkMDc2ZWVmMmE3YzcyYjBjZTM3ZDUwZjA4MjY5ZGZjMDc0YjU4MTU1MDU0N2E0ZjcnLFxuICAgICAgICAnZDNhYTJlZDcxYzlkZDIyNDdhNjJkZjA2MjczNmViMGJhZGRlYTllMzYxMjJkMmJlODY0MWFiY2IwMDVjYzRhNCdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc4NDM4NDQ3NTY2ZDRkN2JlZGFkYzI5OTQ5NmFiMzU3NDI2MDA5YTM1ZjIzNWNiMTQxYmUwZDk5Y2QxMGFlM2E4JyxcbiAgICAgICAgJ2M0ZTEwMjA5MTY5ODBhNGRhNWQwMWFjNWU2YWQzMzA3MzRlZjBkNzkwNjYzMWM0ZjIzOTA0MjZiMmVkZDc5MWYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDE2MmQ0ODhiODk0MDIwMzliNTg0YzZmYzZjMzA4ODcwNTg3ZDljNDZmNjYwYjg3OGFiNjVjODJjNzExZDY3ZScsXG4gICAgICAgICc2NzE2M2U5MDMyMzYyODlmNzc2ZjIyYzI1ZmI4YTNhZmMxNzMyZjJiODRiNGU5NWRiZGE0N2FlNWEwODUyNjQ5J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzNmYWQzZmE4NGNhZjBmMzRmMGY4OWJmZDJkY2Y1NGZjMTc1ZDc2N2FlYzNlNTA2ODRmM2JhNGE0YmY1ZjY4M2QnLFxuICAgICAgICAnY2QxYmM3Y2I2Y2M0MDdiYjJmMGNhNjQ3YzcxOGE3MzBjZjcxODcyZTdkMGQyYTUzZmEyMGVmY2RmZTYxODI2J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzY3NGYyNjAwYTMwMDdhMDA1NjhjMWE3Y2UwNWQwODE2YzFmYjg0YmYxMzcwNzk4ZjFjNjk1MzJmYWViMWE4NmInLFxuICAgICAgICAnMjk5ZDIxZjk0MTNmMzNiM2VkZjQzYjI1NzAwNDU4MGI3MGRiNTdkYTBiMTgyMjU5ZTA5ZWVjYzY5ZTBkMzhhNSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkMzJmNGRhNTRhZGU3NGFiYjgxYjgxNWFkMWZiM2IyNjNkODJkNmM2OTI3MTRiY2ZmODdkMjliZDVlZTlmMDhmJyxcbiAgICAgICAgJ2Y5NDI5ZTczOGI4ZTUzYjk2OGU5OTAxNmMwNTk3MDc3ODJlMTRmNDUzNTM1OWQ1ODJmYzQxNjkxMGIzZWVhODcnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzBlNGU2NzA0MzUzODU1NTZlNTkzNjU3MTM1ODQ1ZDM2ZmJiNjkzMWY3MmIwOGNiMWVkOTU0ZjFlM2NlM2ZmNicsXG4gICAgICAgICc0NjJmOWJjZTYxOTg5ODYzODQ5OTM1MDExM2JiYzliMTBhODc4ZDM1ZGE3MDc0MGRjNjk1YTU1OWViODhkYjdiJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2JlMjA2MjAwM2M1MWNjMzAwNDY4MjkwNDMzMGU0ZGVlN2YzZGNkMTBiMDFlNTgwYmYxOTcxYjA0ZDRjYWQyOTcnLFxuICAgICAgICAnNjIxODhiYzQ5ZDYxZTU0Mjg1NzNkNDhhNzRlMWM2NTViMWM2MTA5MDkwNTY4MmEwZDU1NThlZDcyZGNjYjliYydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc5MzE0NDQyM2FjZTM0NTFlZDI5ZTBmYjlhYzJhZjIxMWNiNmU4NGE2MDFkZjU5OTNjNDE5ODU5ZmZmNWRmMDRhJyxcbiAgICAgICAgJzdjMTBkZmIxNjRjMzQyNWY1YzcxYTNmOWQ3OTkyMDM4ZjEwNjUyMjRmNzJiYjlkMWQ5MDJhNmQxMzAzN2I0N2MnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnYjAxNWY4MDQ0ZjVmY2JkY2YyMWNhMjZkNmMzNGZiODE5NzgyOTIwNWM3YjdkMmE3Y2I2NjQxOGMxNTdiMTEyYycsXG4gICAgICAgICdhYjhjMWUwODZkMDRlODEzNzQ0YTY1NWIyZGY4ZDVmODNiM2NkYzZmYWEzMDg4YzFkM2FlYTE0NTRlM2ExZDVmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJ2Q1ZTllMWRhNjQ5ZDk3ZDg5ZTQ4NjgxMTdhNDY1YTNhNGY4YTE4ZGU1N2ExNDBkMzZiM2YyYWYzNDFhMjFiNTInLFxuICAgICAgICAnNGNiMDQ0MzdmMzkxZWQ3MzExMWExM2NjMWQ0ZGQwZGIxNjkzNDY1YzIyNDA0ODBkODk1NWU4NTkyZjI3NDQ3YSdcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICdkM2FlNDEwNDdkZDdjYTA2NWRiZjhlZDc3Yjk5MjQzOTk4MzAwNWNkNzJlMTZkNmY5OTZhNTMxNmQzNjk2NmJiJyxcbiAgICAgICAgJ2JkMWFlYjIxYWQyMmViYjIyYTEwZjAzMDM0MTdjNmQ5NjRmOGNkZDdkZjBhY2E2MTRiMTBkYzE0ZDEyNWFjNDYnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnNDYzZTI3NjNkODg1Zjk1OGZjNjZjZGQyMjgwMGYwYTQ4NzE5N2QwYTgyZTM3N2I0OWY4MGFmODdjODk3YjA2NScsXG4gICAgICAgICdiZmVmYWNkYjBlNWQwZmQ3ZGYzYTMxMWE5NGRlMDYyYjI2YjgwYzYxZmJjOTc1MDhiNzk5OTI2NzFlZjdjYTdmJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzc5ODVmZGZkMTI3YzA1NjdjNmY1M2VjMWJiNjNlYzMxNThlNTk3YzQwYmZlNzQ3YzgzY2RkZmM5MTA2NDE5MTcnLFxuICAgICAgICAnNjAzYzEyZGFmM2Q5ODYyZWYyYjI1ZmUxZGUyODlhZWQyNGVkMjkxZTBlYzY3MDg3MDNhNWJkNTY3ZjMyZWQwMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NGExYWQ2YjVmNzZlMzlkYjJkZDI0OTQxMGVhYzdmOTllNzRjNTljYjgzZDJkMGVkNWZmMTU0M2RhNzcwM2U5JyxcbiAgICAgICAgJ2NjNjE1N2VmMThjOWM2M2NkNjE5M2Q4MzYzMWJiZWEwMDkzZTA5Njg5NDJlOGMzM2Q1NzM3ZmQ3OTBlMGRiMDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnMzA2ODJhNTA3MDMzNzVmNjAyZDQxNjY2NGJhMTliN2ZjOWJhYjQyYzcyNzQ3NDYzYTcxZDA4OTZiMjJmNmRhMycsXG4gICAgICAgICc1NTNlMDRmNmIwMThiNGZhNmM4ZjM5ZTdmMzExZDMxNzYyOTBkMGUwZjE5Y2E3M2YxNzcxNGQ5OTc3YTIyZmY4J1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzllMjE1OGYwZDdjMGQ1ZjI2YzM3OTFlZmVmYTc5NTk3NjU0ZTdhMmIyNDY0ZjUyYjFlZTZjMTM0Nzc2OWVmNTcnLFxuICAgICAgICAnNzEyZmNkZDFiOTA1M2YwOTAwM2EzNDgxZmE3NzYyZTlmZmQ3YzhlZjM1YTM4NTA5ZTJmYmYyNjI5MDA4MzczJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzE3NmUyNjk4OWE0M2M5Y2ZlYmE0MDI5YzIwMjUzOGMyODE3MmU1NjZlM2M0ZmNlNzMyMjg1N2YzYmUzMjdkNjYnLFxuICAgICAgICAnZWQ4Y2M5ZDA0YjI5ZWI4NzdkMjcwYjQ4NzhkYzQzYzE5YWVmZDMxZjRlZWUwOWVlN2I0NzgzNGMxZmE0YjFjMydcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgICc3NWQ0NmVmZWEzNzcxZTZlNjhhYmI4OWExM2FkNzQ3ZWNmMTg5MjM5M2RmYzRmMWI3MDA0Nzg4YzUwMzc0ZGE4JyxcbiAgICAgICAgJzk4NTIzOTBhOTk1MDc2NzlmZDBiODZmZDJiMzlhODY4ZDdlZmMyMjE1MTM0NmUxYTNjYTQ3MjY1ODZhNmJlZDgnXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICAnODA5YTIwYzY3ZDY0OTAwZmZiNjk4YzRjODI1ZjZkNWYyMzEwZmIwNDUxYzg2OTM0NWI3MzE5ZjY0NTYwNTcyMScsXG4gICAgICAgICc5ZTk5NDk4MGQ5OTE3ZTIyYjc2YjA2MTkyN2ZhMDQxNDNkMDk2Y2NjNTQ5NjNlNmE1ZWJmYTVmM2Y4ZTI4NmMxJ1xuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgJzFiMzg5MDNhNDNmN2YxMTRlZDQ1MDBiNGVhYzcwODNmZGVmZWNlMWNmMjljNjM1MjhkNTYzNDQ2Zjk3MmMxODAnLFxuICAgICAgICAnNDAzNmVkYzkzMWE2MGFlODg5MzUzZjc3ZmQ1M2RlNGEyNzA4YjI2YjZmNWRhNzJhZDMzOTQxMTlkYWY0MDhmOSdcbiAgICAgIF1cbiAgICBdXG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IGV4cG9ydHM7XG52YXIgQk4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIG1pbkFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcbnZhciBtaW5VdGlscyA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHMnKTtcblxudXRpbHMuYXNzZXJ0ID0gbWluQXNzZXJ0O1xudXRpbHMudG9BcnJheSA9IG1pblV0aWxzLnRvQXJyYXk7XG51dGlscy56ZXJvMiA9IG1pblV0aWxzLnplcm8yO1xudXRpbHMudG9IZXggPSBtaW5VdGlscy50b0hleDtcbnV0aWxzLmVuY29kZSA9IG1pblV0aWxzLmVuY29kZTtcblxuLy8gUmVwcmVzZW50IG51bSBpbiBhIHctTkFGIGZvcm1cbmZ1bmN0aW9uIGdldE5BRihudW0sIHcpIHtcbiAgdmFyIG5hZiA9IFtdO1xuICB2YXIgd3MgPSAxIDw8ICh3ICsgMSk7XG4gIHZhciBrID0gbnVtLmNsb25lKCk7XG4gIHdoaWxlIChrLmNtcG4oMSkgPj0gMCkge1xuICAgIHZhciB6O1xuICAgIGlmIChrLmlzT2RkKCkpIHtcbiAgICAgIHZhciBtb2QgPSBrLmFuZGxuKHdzIC0gMSk7XG4gICAgICBpZiAobW9kID4gKHdzID4+IDEpIC0gMSlcbiAgICAgICAgeiA9ICh3cyA+PiAxKSAtIG1vZDtcbiAgICAgIGVsc2VcbiAgICAgICAgeiA9IG1vZDtcbiAgICAgIGsuaXN1Ym4oeik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHogPSAwO1xuICAgIH1cbiAgICBuYWYucHVzaCh6KTtcblxuICAgIC8vIE9wdGltaXphdGlvbiwgc2hpZnQgYnkgd29yZCBpZiBwb3NzaWJsZVxuICAgIHZhciBzaGlmdCA9IChrLmNtcG4oMCkgIT09IDAgJiYgay5hbmRsbih3cyAtIDEpID09PSAwKSA/ICh3ICsgMSkgOiAxO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgc2hpZnQ7IGkrKylcbiAgICAgIG5hZi5wdXNoKDApO1xuICAgIGsuaXVzaHJuKHNoaWZ0KTtcbiAgfVxuXG4gIHJldHVybiBuYWY7XG59XG51dGlscy5nZXROQUYgPSBnZXROQUY7XG5cbi8vIFJlcHJlc2VudCBrMSwgazIgaW4gYSBKb2ludCBTcGFyc2UgRm9ybVxuZnVuY3Rpb24gZ2V0SlNGKGsxLCBrMikge1xuICB2YXIganNmID0gW1xuICAgIFtdLFxuICAgIFtdXG4gIF07XG5cbiAgazEgPSBrMS5jbG9uZSgpO1xuICBrMiA9IGsyLmNsb25lKCk7XG4gIHZhciBkMSA9IDA7XG4gIHZhciBkMiA9IDA7XG4gIHdoaWxlIChrMS5jbXBuKC1kMSkgPiAwIHx8IGsyLmNtcG4oLWQyKSA+IDApIHtcblxuICAgIC8vIEZpcnN0IHBoYXNlXG4gICAgdmFyIG0xNCA9IChrMS5hbmRsbigzKSArIGQxKSAmIDM7XG4gICAgdmFyIG0yNCA9IChrMi5hbmRsbigzKSArIGQyKSAmIDM7XG4gICAgaWYgKG0xNCA9PT0gMylcbiAgICAgIG0xNCA9IC0xO1xuICAgIGlmIChtMjQgPT09IDMpXG4gICAgICBtMjQgPSAtMTtcbiAgICB2YXIgdTE7XG4gICAgaWYgKChtMTQgJiAxKSA9PT0gMCkge1xuICAgICAgdTEgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbTggPSAoazEuYW5kbG4oNykgKyBkMSkgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTI0ID09PSAyKVxuICAgICAgICB1MSA9IC1tMTQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUxID0gbTE0O1xuICAgIH1cbiAgICBqc2ZbMF0ucHVzaCh1MSk7XG5cbiAgICB2YXIgdTI7XG4gICAgaWYgKChtMjQgJiAxKSA9PT0gMCkge1xuICAgICAgdTIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbTggPSAoazIuYW5kbG4oNykgKyBkMikgJiA3O1xuICAgICAgaWYgKChtOCA9PT0gMyB8fCBtOCA9PT0gNSkgJiYgbTE0ID09PSAyKVxuICAgICAgICB1MiA9IC1tMjQ7XG4gICAgICBlbHNlXG4gICAgICAgIHUyID0gbTI0O1xuICAgIH1cbiAgICBqc2ZbMV0ucHVzaCh1Mik7XG5cbiAgICAvLyBTZWNvbmQgcGhhc2VcbiAgICBpZiAoMiAqIGQxID09PSB1MSArIDEpXG4gICAgICBkMSA9IDEgLSBkMTtcbiAgICBpZiAoMiAqIGQyID09PSB1MiArIDEpXG4gICAgICBkMiA9IDEgLSBkMjtcbiAgICBrMS5pdXNocm4oMSk7XG4gICAgazIuaXVzaHJuKDEpO1xuICB9XG5cbiAgcmV0dXJuIGpzZjtcbn1cbnV0aWxzLmdldEpTRiA9IGdldEpTRjtcblxuZnVuY3Rpb24gY2FjaGVkUHJvcGVydHkob2JqLCBuYW1lLCBjb21wdXRlcikge1xuICB2YXIga2V5ID0gJ18nICsgbmFtZTtcbiAgb2JqLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uIGNhY2hlZFByb3BlcnR5KCkge1xuICAgIHJldHVybiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCA/IHRoaXNba2V5XSA6XG4gICAgICAgICAgIHRoaXNba2V5XSA9IGNvbXB1dGVyLmNhbGwodGhpcyk7XG4gIH07XG59XG51dGlscy5jYWNoZWRQcm9wZXJ0eSA9IGNhY2hlZFByb3BlcnR5O1xuXG5mdW5jdGlvbiBwYXJzZUJ5dGVzKGJ5dGVzKSB7XG4gIHJldHVybiB0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnID8gdXRpbHMudG9BcnJheShieXRlcywgJ2hleCcpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlcztcbn1cbnV0aWxzLnBhcnNlQnl0ZXMgPSBwYXJzZUJ5dGVzO1xuXG5mdW5jdGlvbiBpbnRGcm9tTEUoYnl0ZXMpIHtcbiAgcmV0dXJuIG5ldyBCTihieXRlcywgJ2hleCcsICdsZScpO1xufVxudXRpbHMuaW50RnJvbUxFID0gaW50RnJvbUxFO1xuXG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiX2FyZ3NcIjogW1xuICAgIFtcbiAgICAgIFwiZWxsaXB0aWNANi40LjBcIixcbiAgICAgIFwiL1VzZXJzL3dpbGxjbGFyay9Eb2N1bWVudHMvcmVwb3MvcHJvbWV0aC13ZWJzaXRlXCJcbiAgICBdXG4gIF0sXG4gIFwiX2Zyb21cIjogXCJlbGxpcHRpY0A2LjQuMFwiLFxuICBcIl9pZFwiOiBcImVsbGlwdGljQDYuNC4wXCIsXG4gIFwiX2luQnVuZGxlXCI6IGZhbHNlLFxuICBcIl9pbnRlZ3JpdHlcIjogXCJzaGExLXlzbXZoMkxJV0RZWWNBUEkzK0dUNWVMcTVkOD1cIixcbiAgXCJfbG9jYXRpb25cIjogXCIvZWxsaXB0aWNcIixcbiAgXCJfcGhhbnRvbUNoaWxkcmVuXCI6IHt9LFxuICBcIl9yZXF1ZXN0ZWRcIjoge1xuICAgIFwidHlwZVwiOiBcInZlcnNpb25cIixcbiAgICBcInJlZ2lzdHJ5XCI6IHRydWUsXG4gICAgXCJyYXdcIjogXCJlbGxpcHRpY0A2LjQuMFwiLFxuICAgIFwibmFtZVwiOiBcImVsbGlwdGljXCIsXG4gICAgXCJlc2NhcGVkTmFtZVwiOiBcImVsbGlwdGljXCIsXG4gICAgXCJyYXdTcGVjXCI6IFwiNi40LjBcIixcbiAgICBcInNhdmVTcGVjXCI6IG51bGwsXG4gICAgXCJmZXRjaFNwZWNcIjogXCI2LjQuMFwiXG4gIH0sXG4gIFwiX3JlcXVpcmVkQnlcIjogW1xuICAgIFwiL2Jyb3dzZXJpZnktc2lnblwiLFxuICAgIFwiL2NyZWF0ZS1lY2RoXCJcbiAgXSxcbiAgXCJfcmVzb2x2ZWRcIjogXCJodHRwczovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy9lbGxpcHRpYy8tL2VsbGlwdGljLTYuNC4wLnRnelwiLFxuICBcIl9zcGVjXCI6IFwiNi40LjBcIixcbiAgXCJfd2hlcmVcIjogXCIvVXNlcnMvd2lsbGNsYXJrL0RvY3VtZW50cy9yZXBvcy9wcm9tZXRoLXdlYnNpdGVcIixcbiAgXCJhdXRob3JcIjoge1xuICAgIFwibmFtZVwiOiBcIkZlZG9yIEluZHV0bnlcIixcbiAgICBcImVtYWlsXCI6IFwiZmVkb3JAaW5kdXRueS5jb21cIlxuICB9LFxuICBcImJ1Z3NcIjoge1xuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2luZHV0bnkvZWxsaXB0aWMvaXNzdWVzXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiYm4uanNcIjogXCJeNC40LjBcIixcbiAgICBcImJyb3JhbmRcIjogXCJeMS4wLjFcIixcbiAgICBcImhhc2guanNcIjogXCJeMS4wLjBcIixcbiAgICBcImhtYWMtZHJiZ1wiOiBcIl4xLjAuMFwiLFxuICAgIFwiaW5oZXJpdHNcIjogXCJeMi4wLjFcIixcbiAgICBcIm1pbmltYWxpc3RpYy1hc3NlcnRcIjogXCJeMS4wLjBcIixcbiAgICBcIm1pbmltYWxpc3RpYy1jcnlwdG8tdXRpbHNcIjogXCJeMS4wLjBcIlxuICB9LFxuICBcImRlc2NyaXB0aW9uXCI6IFwiRUMgY3J5cHRvZ3JhcGh5XCIsXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcImJyZnNcIjogXCJeMS40LjNcIixcbiAgICBcImNvdmVyYWxsc1wiOiBcIl4yLjExLjNcIixcbiAgICBcImdydW50XCI6IFwiXjAuNC41XCIsXG4gICAgXCJncnVudC1icm93c2VyaWZ5XCI6IFwiXjUuMC4wXCIsXG4gICAgXCJncnVudC1jbGlcIjogXCJeMS4yLjBcIixcbiAgICBcImdydW50LWNvbnRyaWItY29ubmVjdFwiOiBcIl4xLjAuMFwiLFxuICAgIFwiZ3J1bnQtY29udHJpYi1jb3B5XCI6IFwiXjEuMC4wXCIsXG4gICAgXCJncnVudC1jb250cmliLXVnbGlmeVwiOiBcIl4xLjAuMVwiLFxuICAgIFwiZ3J1bnQtbW9jaGEtaXN0YW5idWxcIjogXCJeMy4wLjFcIixcbiAgICBcImdydW50LXNhdWNlbGFic1wiOiBcIl44LjYuMlwiLFxuICAgIFwiaXN0YW5idWxcIjogXCJeMC40LjJcIixcbiAgICBcImpzY3NcIjogXCJeMi45LjBcIixcbiAgICBcImpzaGludFwiOiBcIl4yLjYuMFwiLFxuICAgIFwibW9jaGFcIjogXCJeMi4xLjBcIlxuICB9LFxuICBcImZpbGVzXCI6IFtcbiAgICBcImxpYlwiXG4gIF0sXG4gIFwiaG9tZXBhZ2VcIjogXCJodHRwczovL2dpdGh1Yi5jb20vaW5kdXRueS9lbGxpcHRpY1wiLFxuICBcImtleXdvcmRzXCI6IFtcbiAgICBcIkVDXCIsXG4gICAgXCJFbGxpcHRpY1wiLFxuICAgIFwiY3VydmVcIixcbiAgICBcIkNyeXB0b2dyYXBoeVwiXG4gIF0sXG4gIFwibGljZW5zZVwiOiBcIk1JVFwiLFxuICBcIm1haW5cIjogXCJsaWIvZWxsaXB0aWMuanNcIixcbiAgXCJuYW1lXCI6IFwiZWxsaXB0aWNcIixcbiAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICBcInVybFwiOiBcImdpdCtzc2g6Ly9naXRAZ2l0aHViLmNvbS9pbmR1dG55L2VsbGlwdGljLmdpdFwiXG4gIH0sXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJqc2NzXCI6IFwianNjcyBiZW5jaG1hcmtzLyouanMgbGliLyouanMgbGliLyoqLyouanMgbGliLyoqLyoqLyouanMgdGVzdC9pbmRleC5qc1wiLFxuICAgIFwianNoaW50XCI6IFwianNjcyBiZW5jaG1hcmtzLyouanMgbGliLyouanMgbGliLyoqLyouanMgbGliLyoqLyoqLyouanMgdGVzdC9pbmRleC5qc1wiLFxuICAgIFwibGludFwiOiBcIm5wbSBydW4ganNjcyAmJiBucG0gcnVuIGpzaGludFwiLFxuICAgIFwidGVzdFwiOiBcIm5wbSBydW4gbGludCAmJiBucG0gcnVuIHVuaXRcIixcbiAgICBcInVuaXRcIjogXCJpc3RhbmJ1bCB0ZXN0IF9tb2NoYSAtLXJlcG9ydGVyPXNwZWMgdGVzdC9pbmRleC5qc1wiLFxuICAgIFwidmVyc2lvblwiOiBcImdydW50IGRpc3QgJiYgZ2l0IGFkZCBkaXN0L1wiXG4gIH0sXG4gIFwidmVyc2lvblwiOiBcIjYuNC4wXCJcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5mdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gIHRoaXMuX2V2ZW50cyA9IHRoaXMuX2V2ZW50cyB8fCB7fTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxuRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikge1xuICBpZiAoIWlzTnVtYmVyKG4pIHx8IG4gPCAwIHx8IGlzTmFOKG4pKVxuICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fFxuICAgICAgICAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHtcbiAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuICgnICsgZXIgKyAnKScpO1xuICAgICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAoaXNVbmRlZmluZWQoaGFuZGxlcikpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAvLyBmYXN0IGNhc2VzXG4gICAgICBjYXNlIDE6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBzbG93ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChoYW5kbGVyKSkge1xuICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIGxpc3RlbmVycyA9IGhhbmRsZXIuc2xpY2UoKTtcbiAgICBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBtO1xuXG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgIGlzRnVuY3Rpb24obGlzdGVuZXIubGlzdGVuZXIpID9cbiAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gIGVsc2UgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpXG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTtcbiAgZWxzZVxuICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTtcblxuICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5fbWF4TGlzdGVuZXJzKSkge1xuICAgICAgbSA9IHRoaXMuX21heExpc3RlbmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICAgIH1cblxuICAgIGlmIChtICYmIG0gPiAwICYmIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGggPiBtKSB7XG4gICAgICB0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJyhub2RlKSB3YXJuaW5nOiBwb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5ICcgK1xuICAgICAgICAgICAgICAgICAgICAnbGVhayBkZXRlY3RlZC4gJWQgbGlzdGVuZXJzIGFkZGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvIGluY3JlYXNlIGxpbWl0LicsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGgpO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnRyYWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTBcbiAgICAgICAgY29uc29sZS50cmFjZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICB2YXIgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgdGhpcy5vbih0eXBlLCBnKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGxpc3QsIHBvc2l0aW9uLCBsZW5ndGgsIGk7XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuXG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobGlzdCkpIHtcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSA+IDA7KSB7XG4gICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAobGlzdFtpXS5saXN0ZW5lciAmJiBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHtcbiAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBrZXksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gIGlmICghdGhpcy5fZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICBlbHNlIGlmICh0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7XG4gICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbGlzdGVuZXJzID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSBpZiAobGlzdGVuZXJzKSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKGlzRnVuY3Rpb24odGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSBbdGhpcy5fZXZlbnRzW3R5cGVdXTtcbiAgZWxzZVxuICAgIHJldCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5zbGljZSgpO1xuICByZXR1cm4gcmV0O1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24odHlwZSkge1xuICBpZiAodGhpcy5fZXZlbnRzKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgICBpZiAoaXNGdW5jdGlvbihldmxpc3RlbmVyKSlcbiAgICAgIHJldHVybiAxO1xuICAgIGVsc2UgaWYgKGV2bGlzdGVuZXIpXG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIDA7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbn07XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbiIsInZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIE1ENSA9IHJlcXVpcmUoJ21kNS5qcycpXG5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuZnVuY3Rpb24gRVZQX0J5dGVzVG9LZXkgKHBhc3N3b3JkLCBzYWx0LCBrZXlCaXRzLCBpdkxlbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQsICdiaW5hcnknKVxuICBpZiAoc2FsdCkge1xuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSBzYWx0ID0gQnVmZmVyLmZyb20oc2FsdCwgJ2JpbmFyeScpXG4gICAgaWYgKHNhbHQubGVuZ3RoICE9PSA4KSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc2FsdCBzaG91bGQgYmUgQnVmZmVyIHdpdGggOCBieXRlIGxlbmd0aCcpXG4gIH1cblxuICB2YXIga2V5TGVuID0ga2V5Qml0cyAvIDhcbiAgdmFyIGtleSA9IEJ1ZmZlci5hbGxvYyhrZXlMZW4pXG4gIHZhciBpdiA9IEJ1ZmZlci5hbGxvYyhpdkxlbiB8fCAwKVxuICB2YXIgdG1wID0gQnVmZmVyLmFsbG9jKDApXG5cbiAgd2hpbGUgKGtleUxlbiA+IDAgfHwgaXZMZW4gPiAwKSB7XG4gICAgdmFyIGhhc2ggPSBuZXcgTUQ1KClcbiAgICBoYXNoLnVwZGF0ZSh0bXApXG4gICAgaGFzaC51cGRhdGUocGFzc3dvcmQpXG4gICAgaWYgKHNhbHQpIGhhc2gudXBkYXRlKHNhbHQpXG4gICAgdG1wID0gaGFzaC5kaWdlc3QoKVxuXG4gICAgdmFyIHVzZWQgPSAwXG5cbiAgICBpZiAoa2V5TGVuID4gMCkge1xuICAgICAgdmFyIGtleVN0YXJ0ID0ga2V5Lmxlbmd0aCAtIGtleUxlblxuICAgICAgdXNlZCA9IE1hdGgubWluKGtleUxlbiwgdG1wLmxlbmd0aClcbiAgICAgIHRtcC5jb3B5KGtleSwga2V5U3RhcnQsIDAsIHVzZWQpXG4gICAgICBrZXlMZW4gLT0gdXNlZFxuICAgIH1cblxuICAgIGlmICh1c2VkIDwgdG1wLmxlbmd0aCAmJiBpdkxlbiA+IDApIHtcbiAgICAgIHZhciBpdlN0YXJ0ID0gaXYubGVuZ3RoIC0gaXZMZW5cbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbihpdkxlbiwgdG1wLmxlbmd0aCAtIHVzZWQpXG4gICAgICB0bXAuY29weShpdiwgaXZTdGFydCwgdXNlZCwgdXNlZCArIGxlbmd0aClcbiAgICAgIGl2TGVuIC09IGxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHRtcC5maWxsKDApXG4gIHJldHVybiB7IGtleToga2V5LCBpdjogaXYgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVWUF9CeXRlc1RvS2V5XG4iLCIndXNlIHN0cmljdCdcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdzdHJlYW0nKS5UcmFuc2Zvcm1cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxuZnVuY3Rpb24gSGFzaEJhc2UgKGJsb2NrU2l6ZSkge1xuICBUcmFuc2Zvcm0uY2FsbCh0aGlzKVxuXG4gIHRoaXMuX2Jsb2NrID0gbmV3IEJ1ZmZlcihibG9ja1NpemUpXG4gIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgdGhpcy5fbGVuZ3RoID0gWzAsIDAsIDAsIDBdXG5cbiAgdGhpcy5fZmluYWxpemVkID0gZmFsc2Vcbn1cblxuaW5oZXJpdHMoSGFzaEJhc2UsIFRyYW5zZm9ybSlcblxuSGFzaEJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICB2YXIgZXJyb3IgPSBudWxsXG4gIHRyeSB7XG4gICAgaWYgKGVuY29kaW5nICE9PSAnYnVmZmVyJykgY2h1bmsgPSBuZXcgQnVmZmVyKGNodW5rLCBlbmNvZGluZylcbiAgICB0aGlzLnVwZGF0ZShjaHVuaylcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBlcnJvciA9IG51bGxcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5fZGlnZXN0KCkpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGVycm9yID0gZXJyXG4gIH1cblxuICBjYWxsYmFjayhlcnJvcilcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmNvZGluZykge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihkYXRhKSAmJiB0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0RhdGEgbXVzdCBiZSBhIHN0cmluZyBvciBhIGJ1ZmZlcicpXG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIGRhdGEgPSBuZXcgQnVmZmVyKGRhdGEsIGVuY29kaW5nIHx8ICdiaW5hcnknKVxuXG4gIC8vIGNvbnN1bWUgZGF0YVxuICB2YXIgYmxvY2sgPSB0aGlzLl9ibG9ja1xuICB2YXIgb2Zmc2V0ID0gMFxuICB3aGlsZSAodGhpcy5fYmxvY2tPZmZzZXQgKyBkYXRhLmxlbmd0aCAtIG9mZnNldCA+PSB0aGlzLl9ibG9ja1NpemUpIHtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5fYmxvY2tPZmZzZXQ7IGkgPCB0aGlzLl9ibG9ja1NpemU7KSBibG9ja1tpKytdID0gZGF0YVtvZmZzZXQrK11cbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG4gIHdoaWxlIChvZmZzZXQgPCBkYXRhLmxlbmd0aCkgYmxvY2tbdGhpcy5fYmxvY2tPZmZzZXQrK10gPSBkYXRhW29mZnNldCsrXVxuXG4gIC8vIHVwZGF0ZSBsZW5ndGhcbiAgZm9yICh2YXIgaiA9IDAsIGNhcnJ5ID0gZGF0YS5sZW5ndGggKiA4OyBjYXJyeSA+IDA7ICsraikge1xuICAgIHRoaXMuX2xlbmd0aFtqXSArPSBjYXJyeVxuICAgIGNhcnJ5ID0gKHRoaXMuX2xlbmd0aFtqXSAvIDB4MDEwMDAwMDAwMCkgfCAwXG4gICAgaWYgKGNhcnJ5ID4gMCkgdGhpcy5fbGVuZ3RoW2pdIC09IDB4MDEwMDAwMDAwMCAqIGNhcnJ5XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBpcyBub3QgaW1wbGVtZW50ZWQnKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgdGhpcy5fZmluYWxpemVkID0gdHJ1ZVxuXG4gIHZhciBkaWdlc3QgPSB0aGlzLl9kaWdlc3QoKVxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkgZGlnZXN0ID0gZGlnZXN0LnRvU3RyaW5nKGVuY29kaW5nKVxuICByZXR1cm4gZGlnZXN0XG59XG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ19kaWdlc3QgaXMgbm90IGltcGxlbWVudGVkJylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBIYXNoQmFzZVxuIiwidmFyIGhhc2ggPSBleHBvcnRzO1xuXG5oYXNoLnV0aWxzID0gcmVxdWlyZSgnLi9oYXNoL3V0aWxzJyk7XG5oYXNoLmNvbW1vbiA9IHJlcXVpcmUoJy4vaGFzaC9jb21tb24nKTtcbmhhc2guc2hhID0gcmVxdWlyZSgnLi9oYXNoL3NoYScpO1xuaGFzaC5yaXBlbWQgPSByZXF1aXJlKCcuL2hhc2gvcmlwZW1kJyk7XG5oYXNoLmhtYWMgPSByZXF1aXJlKCcuL2hhc2gvaG1hYycpO1xuXG4vLyBQcm94eSBoYXNoIGZ1bmN0aW9ucyB0byB0aGUgbWFpbiBvYmplY3Rcbmhhc2guc2hhMSA9IGhhc2guc2hhLnNoYTE7XG5oYXNoLnNoYTI1NiA9IGhhc2guc2hhLnNoYTI1Njtcbmhhc2guc2hhMjI0ID0gaGFzaC5zaGEuc2hhMjI0O1xuaGFzaC5zaGEzODQgPSBoYXNoLnNoYS5zaGEzODQ7XG5oYXNoLnNoYTUxMiA9IGhhc2guc2hhLnNoYTUxMjtcbmhhc2gucmlwZW1kMTYwID0gaGFzaC5yaXBlbWQucmlwZW1kMTYwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWFzc2VydCcpO1xuXG5mdW5jdGlvbiBCbG9ja0hhc2goKSB7XG4gIHRoaXMucGVuZGluZyA9IG51bGw7XG4gIHRoaXMucGVuZGluZ1RvdGFsID0gMDtcbiAgdGhpcy5ibG9ja1NpemUgPSB0aGlzLmNvbnN0cnVjdG9yLmJsb2NrU2l6ZTtcbiAgdGhpcy5vdXRTaXplID0gdGhpcy5jb25zdHJ1Y3Rvci5vdXRTaXplO1xuICB0aGlzLmhtYWNTdHJlbmd0aCA9IHRoaXMuY29uc3RydWN0b3IuaG1hY1N0cmVuZ3RoO1xuICB0aGlzLnBhZExlbmd0aCA9IHRoaXMuY29uc3RydWN0b3IucGFkTGVuZ3RoIC8gODtcbiAgdGhpcy5lbmRpYW4gPSAnYmlnJztcblxuICB0aGlzLl9kZWx0YTggPSB0aGlzLmJsb2NrU2l6ZSAvIDg7XG4gIHRoaXMuX2RlbHRhMzIgPSB0aGlzLmJsb2NrU2l6ZSAvIDMyO1xufVxuZXhwb3J0cy5CbG9ja0hhc2ggPSBCbG9ja0hhc2g7XG5cbkJsb2NrSGFzaC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKG1zZywgZW5jKSB7XG4gIC8vIENvbnZlcnQgbWVzc2FnZSB0byBhcnJheSwgcGFkIGl0LCBhbmQgam9pbiBpbnRvIDMyYml0IGJsb2Nrc1xuICBtc2cgPSB1dGlscy50b0FycmF5KG1zZywgZW5jKTtcbiAgaWYgKCF0aGlzLnBlbmRpbmcpXG4gICAgdGhpcy5wZW5kaW5nID0gbXNnO1xuICBlbHNlXG4gICAgdGhpcy5wZW5kaW5nID0gdGhpcy5wZW5kaW5nLmNvbmNhdChtc2cpO1xuICB0aGlzLnBlbmRpbmdUb3RhbCArPSBtc2cubGVuZ3RoO1xuXG4gIC8vIEVub3VnaCBkYXRhLCB0cnkgdXBkYXRpbmdcbiAgaWYgKHRoaXMucGVuZGluZy5sZW5ndGggPj0gdGhpcy5fZGVsdGE4KSB7XG4gICAgbXNnID0gdGhpcy5wZW5kaW5nO1xuXG4gICAgLy8gUHJvY2VzcyBwZW5kaW5nIGRhdGEgaW4gYmxvY2tzXG4gICAgdmFyIHIgPSBtc2cubGVuZ3RoICUgdGhpcy5fZGVsdGE4O1xuICAgIHRoaXMucGVuZGluZyA9IG1zZy5zbGljZShtc2cubGVuZ3RoIC0gciwgbXNnLmxlbmd0aCk7XG4gICAgaWYgKHRoaXMucGVuZGluZy5sZW5ndGggPT09IDApXG4gICAgICB0aGlzLnBlbmRpbmcgPSBudWxsO1xuXG4gICAgbXNnID0gdXRpbHMuam9pbjMyKG1zZywgMCwgbXNnLmxlbmd0aCAtIHIsIHRoaXMuZW5kaWFuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkgKz0gdGhpcy5fZGVsdGEzMilcbiAgICAgIHRoaXMuX3VwZGF0ZShtc2csIGksIGkgKyB0aGlzLl9kZWx0YTMyKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuQmxvY2tIYXNoLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIHRoaXMudXBkYXRlKHRoaXMuX3BhZCgpKTtcbiAgYXNzZXJ0KHRoaXMucGVuZGluZyA9PT0gbnVsbCk7XG5cbiAgcmV0dXJuIHRoaXMuX2RpZ2VzdChlbmMpO1xufTtcblxuQmxvY2tIYXNoLnByb3RvdHlwZS5fcGFkID0gZnVuY3Rpb24gcGFkKCkge1xuICB2YXIgbGVuID0gdGhpcy5wZW5kaW5nVG90YWw7XG4gIHZhciBieXRlcyA9IHRoaXMuX2RlbHRhODtcbiAgdmFyIGsgPSBieXRlcyAtICgobGVuICsgdGhpcy5wYWRMZW5ndGgpICUgYnl0ZXMpO1xuICB2YXIgcmVzID0gbmV3IEFycmF5KGsgKyB0aGlzLnBhZExlbmd0aCk7XG4gIHJlc1swXSA9IDB4ODA7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgazsgaSsrKVxuICAgIHJlc1tpXSA9IDA7XG5cbiAgLy8gQXBwZW5kIGxlbmd0aFxuICBsZW4gPDw9IDM7XG4gIGlmICh0aGlzLmVuZGlhbiA9PT0gJ2JpZycpIHtcbiAgICBmb3IgKHZhciB0ID0gODsgdCA8IHRoaXMucGFkTGVuZ3RoOyB0KyspXG4gICAgICByZXNbaSsrXSA9IDA7XG5cbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAobGVuID4+PiAyNCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMTYpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDgpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IGxlbiAmIDB4ZmY7XG4gIH0gZWxzZSB7XG4gICAgcmVzW2krK10gPSBsZW4gJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gOCkgJiAweGZmO1xuICAgIHJlc1tpKytdID0gKGxlbiA+Pj4gMTYpICYgMHhmZjtcbiAgICByZXNbaSsrXSA9IChsZW4gPj4+IDI0KSAmIDB4ZmY7XG4gICAgcmVzW2krK10gPSAwO1xuICAgIHJlc1tpKytdID0gMDtcbiAgICByZXNbaSsrXSA9IDA7XG4gICAgcmVzW2krK10gPSAwO1xuXG4gICAgZm9yICh0ID0gODsgdCA8IHRoaXMucGFkTGVuZ3RoOyB0KyspXG4gICAgICByZXNbaSsrXSA9IDA7XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gSG1hYyhoYXNoLCBrZXksIGVuYykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hYykpXG4gICAgcmV0dXJuIG5ldyBIbWFjKGhhc2gsIGtleSwgZW5jKTtcbiAgdGhpcy5IYXNoID0gaGFzaDtcbiAgdGhpcy5ibG9ja1NpemUgPSBoYXNoLmJsb2NrU2l6ZSAvIDg7XG4gIHRoaXMub3V0U2l6ZSA9IGhhc2gub3V0U2l6ZSAvIDg7XG4gIHRoaXMuaW5uZXIgPSBudWxsO1xuICB0aGlzLm91dGVyID0gbnVsbDtcblxuICB0aGlzLl9pbml0KHV0aWxzLnRvQXJyYXkoa2V5LCBlbmMpKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gSG1hYztcblxuSG1hYy5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGtleSkge1xuICAvLyBTaG9ydGVuIGtleSwgaWYgbmVlZGVkXG4gIGlmIChrZXkubGVuZ3RoID4gdGhpcy5ibG9ja1NpemUpXG4gICAga2V5ID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpLmRpZ2VzdCgpO1xuICBhc3NlcnQoa2V5Lmxlbmd0aCA8PSB0aGlzLmJsb2NrU2l6ZSk7XG5cbiAgLy8gQWRkIHBhZGRpbmcgdG8ga2V5XG4gIGZvciAodmFyIGkgPSBrZXkubGVuZ3RoOyBpIDwgdGhpcy5ibG9ja1NpemU7IGkrKylcbiAgICBrZXkucHVzaCgwKTtcblxuICBmb3IgKGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgaSsrKVxuICAgIGtleVtpXSBePSAweDM2O1xuICB0aGlzLmlubmVyID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpO1xuXG4gIC8vIDB4MzYgXiAweDVjID0gMHg2YVxuICBmb3IgKGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgaSsrKVxuICAgIGtleVtpXSBePSAweDZhO1xuICB0aGlzLm91dGVyID0gbmV3IHRoaXMuSGFzaCgpLnVwZGF0ZShrZXkpO1xufTtcblxuSG1hYy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKG1zZywgZW5jKSB7XG4gIHRoaXMuaW5uZXIudXBkYXRlKG1zZywgZW5jKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5IbWFjLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIHRoaXMub3V0ZXIudXBkYXRlKHRoaXMuaW5uZXIuZGlnZXN0KCkpO1xuICByZXR1cm4gdGhpcy5vdXRlci5kaWdlc3QoZW5jKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xuXG52YXIgcm90bDMyID0gdXRpbHMucm90bDMyO1xudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfMyA9IHV0aWxzLnN1bTMyXzM7XG52YXIgc3VtMzJfNCA9IHV0aWxzLnN1bTMyXzQ7XG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxuZnVuY3Rpb24gUklQRU1EMTYwKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUklQRU1EMTYwKSlcbiAgICByZXR1cm4gbmV3IFJJUEVNRDE2MCgpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuXG4gIHRoaXMuaCA9IFsgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMCBdO1xuICB0aGlzLmVuZGlhbiA9ICdsaXR0bGUnO1xufVxudXRpbHMuaW5oZXJpdHMoUklQRU1EMTYwLCBCbG9ja0hhc2gpO1xuZXhwb3J0cy5yaXBlbWQxNjAgPSBSSVBFTUQxNjA7XG5cblJJUEVNRDE2MC5ibG9ja1NpemUgPSA1MTI7XG5SSVBFTUQxNjAub3V0U2l6ZSA9IDE2MDtcblJJUEVNRDE2MC5obWFjU3RyZW5ndGggPSAxOTI7XG5SSVBFTUQxNjAucGFkTGVuZ3RoID0gNjQ7XG5cblJJUEVNRDE2MC5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHZhciBBID0gdGhpcy5oWzBdO1xuICB2YXIgQiA9IHRoaXMuaFsxXTtcbiAgdmFyIEMgPSB0aGlzLmhbMl07XG4gIHZhciBEID0gdGhpcy5oWzNdO1xuICB2YXIgRSA9IHRoaXMuaFs0XTtcbiAgdmFyIEFoID0gQTtcbiAgdmFyIEJoID0gQjtcbiAgdmFyIENoID0gQztcbiAgdmFyIERoID0gRDtcbiAgdmFyIEVoID0gRTtcbiAgZm9yICh2YXIgaiA9IDA7IGogPCA4MDsgaisrKSB7XG4gICAgdmFyIFQgPSBzdW0zMihcbiAgICAgIHJvdGwzMihcbiAgICAgICAgc3VtMzJfNChBLCBmKGosIEIsIEMsIEQpLCBtc2dbcltqXSArIHN0YXJ0XSwgSyhqKSksXG4gICAgICAgIHNbal0pLFxuICAgICAgRSk7XG4gICAgQSA9IEU7XG4gICAgRSA9IEQ7XG4gICAgRCA9IHJvdGwzMihDLCAxMCk7XG4gICAgQyA9IEI7XG4gICAgQiA9IFQ7XG4gICAgVCA9IHN1bTMyKFxuICAgICAgcm90bDMyKFxuICAgICAgICBzdW0zMl80KEFoLCBmKDc5IC0gaiwgQmgsIENoLCBEaCksIG1zZ1tyaFtqXSArIHN0YXJ0XSwgS2goaikpLFxuICAgICAgICBzaFtqXSksXG4gICAgICBFaCk7XG4gICAgQWggPSBFaDtcbiAgICBFaCA9IERoO1xuICAgIERoID0gcm90bDMyKENoLCAxMCk7XG4gICAgQ2ggPSBCaDtcbiAgICBCaCA9IFQ7XG4gIH1cbiAgVCA9IHN1bTMyXzModGhpcy5oWzFdLCBDLCBEaCk7XG4gIHRoaXMuaFsxXSA9IHN1bTMyXzModGhpcy5oWzJdLCBELCBFaCk7XG4gIHRoaXMuaFsyXSA9IHN1bTMyXzModGhpcy5oWzNdLCBFLCBBaCk7XG4gIHRoaXMuaFszXSA9IHN1bTMyXzModGhpcy5oWzRdLCBBLCBCaCk7XG4gIHRoaXMuaFs0XSA9IHN1bTMyXzModGhpcy5oWzBdLCBCLCBDaCk7XG4gIHRoaXMuaFswXSA9IFQ7XG59O1xuXG5SSVBFTUQxNjAucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2xpdHRsZScpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnbGl0dGxlJyk7XG59O1xuXG5mdW5jdGlvbiBmKGosIHgsIHksIHopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIHggXiB5IF4gejtcbiAgZWxzZSBpZiAoaiA8PSAzMSlcbiAgICByZXR1cm4gKHggJiB5KSB8ICgofngpICYgeik7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuICh4IHwgKH55KSkgXiB6O1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAoeCAmIHopIHwgKHkgJiAofnopKTtcbiAgZWxzZVxuICAgIHJldHVybiB4IF4gKHkgfCAofnopKTtcbn1cblxuZnVuY3Rpb24gSyhqKSB7XG4gIGlmIChqIDw9IDE1KVxuICAgIHJldHVybiAweDAwMDAwMDAwO1xuICBlbHNlIGlmIChqIDw9IDMxKVxuICAgIHJldHVybiAweDVhODI3OTk5O1xuICBlbHNlIGlmIChqIDw9IDQ3KVxuICAgIHJldHVybiAweDZlZDllYmExO1xuICBlbHNlIGlmIChqIDw9IDYzKVxuICAgIHJldHVybiAweDhmMWJiY2RjO1xuICBlbHNlXG4gICAgcmV0dXJuIDB4YTk1M2ZkNGU7XG59XG5cbmZ1bmN0aW9uIEtoKGopIHtcbiAgaWYgKGogPD0gMTUpXG4gICAgcmV0dXJuIDB4NTBhMjhiZTY7XG4gIGVsc2UgaWYgKGogPD0gMzEpXG4gICAgcmV0dXJuIDB4NWM0ZGQxMjQ7XG4gIGVsc2UgaWYgKGogPD0gNDcpXG4gICAgcmV0dXJuIDB4NmQ3MDNlZjM7XG4gIGVsc2UgaWYgKGogPD0gNjMpXG4gICAgcmV0dXJuIDB4N2E2ZDc2ZTk7XG4gIGVsc2VcbiAgICByZXR1cm4gMHgwMDAwMDAwMDtcbn1cblxudmFyIHIgPSBbXG4gIDAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsXG4gIDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDgsXG4gIDMsIDEwLCAxNCwgNCwgOSwgMTUsIDgsIDEsIDIsIDcsIDAsIDYsIDEzLCAxMSwgNSwgMTIsXG4gIDEsIDksIDExLCAxMCwgMCwgOCwgMTIsIDQsIDEzLCAzLCA3LCAxNSwgMTQsIDUsIDYsIDIsXG4gIDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNcbl07XG5cbnZhciByaCA9IFtcbiAgNSwgMTQsIDcsIDAsIDksIDIsIDExLCA0LCAxMywgNiwgMTUsIDgsIDEsIDEwLCAzLCAxMixcbiAgNiwgMTEsIDMsIDcsIDAsIDEzLCA1LCAxMCwgMTQsIDE1LCA4LCAxMiwgNCwgOSwgMSwgMixcbiAgMTUsIDUsIDEsIDMsIDcsIDE0LCA2LCA5LCAxMSwgOCwgMTIsIDIsIDEwLCAwLCA0LCAxMyxcbiAgOCwgNiwgNCwgMSwgMywgMTEsIDE1LCAwLCA1LCAxMiwgMiwgMTMsIDksIDcsIDEwLCAxNCxcbiAgMTIsIDE1LCAxMCwgNCwgMSwgNSwgOCwgNywgNiwgMiwgMTMsIDE0LCAwLCAzLCA5LCAxMVxuXTtcblxudmFyIHMgPSBbXG4gIDExLCAxNCwgMTUsIDEyLCA1LCA4LCA3LCA5LCAxMSwgMTMsIDE0LCAxNSwgNiwgNywgOSwgOCxcbiAgNywgNiwgOCwgMTMsIDExLCA5LCA3LCAxNSwgNywgMTIsIDE1LCA5LCAxMSwgNywgMTMsIDEyLFxuICAxMSwgMTMsIDYsIDcsIDE0LCA5LCAxMywgMTUsIDE0LCA4LCAxMywgNiwgNSwgMTIsIDcsIDUsXG4gIDExLCAxMiwgMTQsIDE1LCAxNCwgMTUsIDksIDgsIDksIDE0LCA1LCA2LCA4LCA2LCA1LCAxMixcbiAgOSwgMTUsIDUsIDExLCA2LCA4LCAxMywgMTIsIDUsIDEyLCAxMywgMTQsIDExLCA4LCA1LCA2XG5dO1xuXG52YXIgc2ggPSBbXG4gIDgsIDksIDksIDExLCAxMywgMTUsIDE1LCA1LCA3LCA3LCA4LCAxMSwgMTQsIDE0LCAxMiwgNixcbiAgOSwgMTMsIDE1LCA3LCAxMiwgOCwgOSwgMTEsIDcsIDcsIDEyLCA3LCA2LCAxNSwgMTMsIDExLFxuICA5LCA3LCAxNSwgMTEsIDgsIDYsIDYsIDE0LCAxMiwgMTMsIDUsIDE0LCAxMywgMTMsIDcsIDUsXG4gIDE1LCA1LCA4LCAxMSwgMTQsIDE0LCA2LCAxNCwgNiwgOSwgMTIsIDksIDEyLCA1LCAxNSwgOCxcbiAgOCwgNSwgMTIsIDksIDEyLCA1LCAxNCwgNiwgOCwgMTMsIDYsIDUsIDE1LCAxMywgMTEsIDExXG5dO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnNoYTEgPSByZXF1aXJlKCcuL3NoYS8xJyk7XG5leHBvcnRzLnNoYTIyNCA9IHJlcXVpcmUoJy4vc2hhLzIyNCcpO1xuZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcuL3NoYS8yNTYnKTtcbmV4cG9ydHMuc2hhMzg0ID0gcmVxdWlyZSgnLi9zaGEvMzg0Jyk7XG5leHBvcnRzLnNoYTUxMiA9IHJlcXVpcmUoJy4vc2hhLzUxMicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4uL2NvbW1vbicpO1xudmFyIHNoYUNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cbnZhciByb3RsMzIgPSB1dGlscy5yb3RsMzI7XG52YXIgc3VtMzIgPSB1dGlscy5zdW0zMjtcbnZhciBzdW0zMl81ID0gdXRpbHMuc3VtMzJfNTtcbnZhciBmdF8xID0gc2hhQ29tbW9uLmZ0XzE7XG52YXIgQmxvY2tIYXNoID0gY29tbW9uLkJsb2NrSGFzaDtcblxudmFyIHNoYTFfSyA9IFtcbiAgMHg1QTgyNzk5OSwgMHg2RUQ5RUJBMSxcbiAgMHg4RjFCQkNEQywgMHhDQTYyQzFENlxuXTtcblxuZnVuY3Rpb24gU0hBMSgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTEpKVxuICAgIHJldHVybiBuZXcgU0hBMSgpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwgMHg5OGJhZGNmZSxcbiAgICAweDEwMzI1NDc2LCAweGMzZDJlMWYwIF07XG4gIHRoaXMuVyA9IG5ldyBBcnJheSg4MCk7XG59XG5cbnV0aWxzLmluaGVyaXRzKFNIQTEsIEJsb2NrSGFzaCk7XG5tb2R1bGUuZXhwb3J0cyA9IFNIQTE7XG5cblNIQTEuYmxvY2tTaXplID0gNTEyO1xuU0hBMS5vdXRTaXplID0gMTYwO1xuU0hBMS5obWFjU3RyZW5ndGggPSA4MDtcblNIQTEucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTEucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcblxuICBmb3IoOyBpIDwgVy5sZW5ndGg7IGkrKylcbiAgICBXW2ldID0gcm90bDMyKFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl0sIDEpO1xuXG4gIHZhciBhID0gdGhpcy5oWzBdO1xuICB2YXIgYiA9IHRoaXMuaFsxXTtcbiAgdmFyIGMgPSB0aGlzLmhbMl07XG4gIHZhciBkID0gdGhpcy5oWzNdO1xuICB2YXIgZSA9IHRoaXMuaFs0XTtcblxuICBmb3IgKGkgPSAwOyBpIDwgVy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzID0gfn4oaSAvIDIwKTtcbiAgICB2YXIgdCA9IHN1bTMyXzUocm90bDMyKGEsIDUpLCBmdF8xKHMsIGIsIGMsIGQpLCBlLCBXW2ldLCBzaGExX0tbc10pO1xuICAgIGUgPSBkO1xuICAgIGQgPSBjO1xuICAgIGMgPSByb3RsMzIoYiwgMzApO1xuICAgIGIgPSBhO1xuICAgIGEgPSB0O1xuICB9XG5cbiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTtcbiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTtcbiAgdGhpcy5oWzJdID0gc3VtMzIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTtcbiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTtcbn07XG5cblNIQTEucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiBkaWdlc3QoZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB1dGlscy50b0hleDMyKHRoaXMuaCwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLCAnYmlnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIFNIQTI1NiA9IHJlcXVpcmUoJy4vMjU2Jyk7XG5cbmZ1bmN0aW9uIFNIQTIyNCgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTIyNCkpXG4gICAgcmV0dXJuIG5ldyBTSEEyMjQoKTtcblxuICBTSEEyNTYuY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4YzEwNTllZDgsIDB4MzY3Y2Q1MDcsIDB4MzA3MGRkMTcsIDB4ZjcwZTU5MzksXG4gICAgMHhmZmMwMGIzMSwgMHg2ODU4MTUxMSwgMHg2NGY5OGZhNywgMHhiZWZhNGZhNCBdO1xufVxudXRpbHMuaW5oZXJpdHMoU0hBMjI0LCBTSEEyNTYpO1xubW9kdWxlLmV4cG9ydHMgPSBTSEEyMjQ7XG5cblNIQTIyNC5ibG9ja1NpemUgPSA1MTI7XG5TSEEyMjQub3V0U2l6ZSA9IDIyNDtcblNIQTIyNC5obWFjU3RyZW5ndGggPSAxOTI7XG5TSEEyMjQucGFkTGVuZ3RoID0gNjQ7XG5cblNIQTIyNC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgLy8gSnVzdCB0cnVuY2F0ZSBvdXRwdXRcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLnNsaWNlKDAsIDcpLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmguc2xpY2UoMCwgNyksICdiaWcnKTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBzaGFDb21tb24gPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxudmFyIHN1bTMyID0gdXRpbHMuc3VtMzI7XG52YXIgc3VtMzJfNCA9IHV0aWxzLnN1bTMyXzQ7XG52YXIgc3VtMzJfNSA9IHV0aWxzLnN1bTMyXzU7XG52YXIgY2gzMiA9IHNoYUNvbW1vbi5jaDMyO1xudmFyIG1hajMyID0gc2hhQ29tbW9uLm1hajMyO1xudmFyIHMwXzI1NiA9IHNoYUNvbW1vbi5zMF8yNTY7XG52YXIgczFfMjU2ID0gc2hhQ29tbW9uLnMxXzI1NjtcbnZhciBnMF8yNTYgPSBzaGFDb21tb24uZzBfMjU2O1xudmFyIGcxXzI1NiA9IHNoYUNvbW1vbi5nMV8yNTY7XG5cbnZhciBCbG9ja0hhc2ggPSBjb21tb24uQmxvY2tIYXNoO1xuXG52YXIgc2hhMjU2X0sgPSBbXG4gIDB4NDI4YTJmOTgsIDB4NzEzNzQ0OTEsIDB4YjVjMGZiY2YsIDB4ZTliNWRiYTUsXG4gIDB4Mzk1NmMyNWIsIDB4NTlmMTExZjEsIDB4OTIzZjgyYTQsIDB4YWIxYzVlZDUsXG4gIDB4ZDgwN2FhOTgsIDB4MTI4MzViMDEsIDB4MjQzMTg1YmUsIDB4NTUwYzdkYzMsXG4gIDB4NzJiZTVkNzQsIDB4ODBkZWIxZmUsIDB4OWJkYzA2YTcsIDB4YzE5YmYxNzQsXG4gIDB4ZTQ5YjY5YzEsIDB4ZWZiZTQ3ODYsIDB4MGZjMTlkYzYsIDB4MjQwY2ExY2MsXG4gIDB4MmRlOTJjNmYsIDB4NGE3NDg0YWEsIDB4NWNiMGE5ZGMsIDB4NzZmOTg4ZGEsXG4gIDB4OTgzZTUxNTIsIDB4YTgzMWM2NmQsIDB4YjAwMzI3YzgsIDB4YmY1OTdmYzcsXG4gIDB4YzZlMDBiZjMsIDB4ZDVhNzkxNDcsIDB4MDZjYTYzNTEsIDB4MTQyOTI5NjcsXG4gIDB4MjdiNzBhODUsIDB4MmUxYjIxMzgsIDB4NGQyYzZkZmMsIDB4NTMzODBkMTMsXG4gIDB4NjUwYTczNTQsIDB4NzY2YTBhYmIsIDB4ODFjMmM5MmUsIDB4OTI3MjJjODUsXG4gIDB4YTJiZmU4YTEsIDB4YTgxYTY2NGIsIDB4YzI0YjhiNzAsIDB4Yzc2YzUxYTMsXG4gIDB4ZDE5MmU4MTksIDB4ZDY5OTA2MjQsIDB4ZjQwZTM1ODUsIDB4MTA2YWEwNzAsXG4gIDB4MTlhNGMxMTYsIDB4MWUzNzZjMDgsIDB4Mjc0ODc3NGMsIDB4MzRiMGJjYjUsXG4gIDB4MzkxYzBjYjMsIDB4NGVkOGFhNGEsIDB4NWI5Y2NhNGYsIDB4NjgyZTZmZjMsXG4gIDB4NzQ4ZjgyZWUsIDB4NzhhNTYzNmYsIDB4ODRjODc4MTQsIDB4OGNjNzAyMDgsXG4gIDB4OTBiZWZmZmEsIDB4YTQ1MDZjZWIsIDB4YmVmOWEzZjcsIDB4YzY3MTc4ZjJcbl07XG5cbmZ1bmN0aW9uIFNIQTI1NigpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNIQTI1NikpXG4gICAgcmV0dXJuIG5ldyBTSEEyNTYoKTtcblxuICBCbG9ja0hhc2guY2FsbCh0aGlzKTtcbiAgdGhpcy5oID0gW1xuICAgIDB4NmEwOWU2NjcsIDB4YmI2N2FlODUsIDB4M2M2ZWYzNzIsIDB4YTU0ZmY1M2EsXG4gICAgMHg1MTBlNTI3ZiwgMHg5YjA1Njg4YywgMHgxZjgzZDlhYiwgMHg1YmUwY2QxOVxuICBdO1xuICB0aGlzLmsgPSBzaGEyNTZfSztcbiAgdGhpcy5XID0gbmV3IEFycmF5KDY0KTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTI1NiwgQmxvY2tIYXNoKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMjU2O1xuXG5TSEEyNTYuYmxvY2tTaXplID0gNTEyO1xuU0hBMjU2Lm91dFNpemUgPSAyNTY7XG5TSEEyNTYuaG1hY1N0cmVuZ3RoID0gMTkyO1xuU0hBMjU2LnBhZExlbmd0aCA9IDY0O1xuXG5TSEEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiBfdXBkYXRlKG1zZywgc3RhcnQpIHtcbiAgdmFyIFcgPSB0aGlzLlc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIFdbaV0gPSBtc2dbc3RhcnQgKyBpXTtcbiAgZm9yICg7IGkgPCBXLmxlbmd0aDsgaSsrKVxuICAgIFdbaV0gPSBzdW0zMl80KGcxXzI1NihXW2kgLSAyXSksIFdbaSAtIDddLCBnMF8yNTYoV1tpIC0gMTVdKSwgV1tpIC0gMTZdKTtcblxuICB2YXIgYSA9IHRoaXMuaFswXTtcbiAgdmFyIGIgPSB0aGlzLmhbMV07XG4gIHZhciBjID0gdGhpcy5oWzJdO1xuICB2YXIgZCA9IHRoaXMuaFszXTtcbiAgdmFyIGUgPSB0aGlzLmhbNF07XG4gIHZhciBmID0gdGhpcy5oWzVdO1xuICB2YXIgZyA9IHRoaXMuaFs2XTtcbiAgdmFyIGggPSB0aGlzLmhbN107XG5cbiAgYXNzZXJ0KHRoaXMuay5sZW5ndGggPT09IFcubGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgaSA8IFcubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgVDEgPSBzdW0zMl81KGgsIHMxXzI1NihlKSwgY2gzMihlLCBmLCBnKSwgdGhpcy5rW2ldLCBXW2ldKTtcbiAgICB2YXIgVDIgPSBzdW0zMihzMF8yNTYoYSksIG1hajMyKGEsIGIsIGMpKTtcbiAgICBoID0gZztcbiAgICBnID0gZjtcbiAgICBmID0gZTtcbiAgICBlID0gc3VtMzIoZCwgVDEpO1xuICAgIGQgPSBjO1xuICAgIGMgPSBiO1xuICAgIGIgPSBhO1xuICAgIGEgPSBzdW0zMihUMSwgVDIpO1xuICB9XG5cbiAgdGhpcy5oWzBdID0gc3VtMzIodGhpcy5oWzBdLCBhKTtcbiAgdGhpcy5oWzFdID0gc3VtMzIodGhpcy5oWzFdLCBiKTtcbiAgdGhpcy5oWzJdID0gc3VtMzIodGhpcy5oWzJdLCBjKTtcbiAgdGhpcy5oWzNdID0gc3VtMzIodGhpcy5oWzNdLCBkKTtcbiAgdGhpcy5oWzRdID0gc3VtMzIodGhpcy5oWzRdLCBlKTtcbiAgdGhpcy5oWzVdID0gc3VtMzIodGhpcy5oWzVdLCBmKTtcbiAgdGhpcy5oWzZdID0gc3VtMzIodGhpcy5oWzZdLCBnKTtcbiAgdGhpcy5oWzddID0gc3VtMzIodGhpcy5oWzddLCBoKTtcbn07XG5cblNIQTI1Ni5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLCAnYmlnJyk7XG4gIGVsc2VcbiAgICByZXR1cm4gdXRpbHMuc3BsaXQzMih0aGlzLmgsICdiaWcnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBTSEE1MTIgPSByZXF1aXJlKCcuLzUxMicpO1xuXG5mdW5jdGlvbiBTSEEzODQoKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTSEEzODQpKVxuICAgIHJldHVybiBuZXcgU0hBMzg0KCk7XG5cbiAgU0hBNTEyLmNhbGwodGhpcyk7XG4gIHRoaXMuaCA9IFtcbiAgICAweGNiYmI5ZDVkLCAweGMxMDU5ZWQ4LFxuICAgIDB4NjI5YTI5MmEsIDB4MzY3Y2Q1MDcsXG4gICAgMHg5MTU5MDE1YSwgMHgzMDcwZGQxNyxcbiAgICAweDE1MmZlY2Q4LCAweGY3MGU1OTM5LFxuICAgIDB4NjczMzI2NjcsIDB4ZmZjMDBiMzEsXG4gICAgMHg4ZWI0NGE4NywgMHg2ODU4MTUxMSxcbiAgICAweGRiMGMyZTBkLCAweDY0Zjk4ZmE3LFxuICAgIDB4NDdiNTQ4MWQsIDB4YmVmYTRmYTQgXTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTM4NCwgU0hBNTEyKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBMzg0O1xuXG5TSEEzODQuYmxvY2tTaXplID0gMTAyNDtcblNIQTM4NC5vdXRTaXplID0gMzg0O1xuU0hBMzg0LmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTM4NC5wYWRMZW5ndGggPSAxMjg7XG5cblNIQTM4NC5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uIGRpZ2VzdChlbmMpIHtcbiAgaWYgKGVuYyA9PT0gJ2hleCcpXG4gICAgcmV0dXJuIHV0aWxzLnRvSGV4MzIodGhpcy5oLnNsaWNlKDAsIDEyKSwgJ2JpZycpO1xuICBlbHNlXG4gICAgcmV0dXJuIHV0aWxzLnNwbGl0MzIodGhpcy5oLnNsaWNlKDAsIDEyKSwgJ2JpZycpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG5cbnZhciByb3RyNjRfaGkgPSB1dGlscy5yb3RyNjRfaGk7XG52YXIgcm90cjY0X2xvID0gdXRpbHMucm90cjY0X2xvO1xudmFyIHNocjY0X2hpID0gdXRpbHMuc2hyNjRfaGk7XG52YXIgc2hyNjRfbG8gPSB1dGlscy5zaHI2NF9sbztcbnZhciBzdW02NCA9IHV0aWxzLnN1bTY0O1xudmFyIHN1bTY0X2hpID0gdXRpbHMuc3VtNjRfaGk7XG52YXIgc3VtNjRfbG8gPSB1dGlscy5zdW02NF9sbztcbnZhciBzdW02NF80X2hpID0gdXRpbHMuc3VtNjRfNF9oaTtcbnZhciBzdW02NF80X2xvID0gdXRpbHMuc3VtNjRfNF9sbztcbnZhciBzdW02NF81X2hpID0gdXRpbHMuc3VtNjRfNV9oaTtcbnZhciBzdW02NF81X2xvID0gdXRpbHMuc3VtNjRfNV9sbztcblxudmFyIEJsb2NrSGFzaCA9IGNvbW1vbi5CbG9ja0hhc2g7XG5cbnZhciBzaGE1MTJfSyA9IFtcbiAgMHg0MjhhMmY5OCwgMHhkNzI4YWUyMiwgMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCxcbiAgMHhiNWMwZmJjZiwgMHhlYzRkM2IyZiwgMHhlOWI1ZGJhNSwgMHg4MTg5ZGJiYyxcbiAgMHgzOTU2YzI1YiwgMHhmMzQ4YjUzOCwgMHg1OWYxMTFmMSwgMHhiNjA1ZDAxOSxcbiAgMHg5MjNmODJhNCwgMHhhZjE5NGY5YiwgMHhhYjFjNWVkNSwgMHhkYTZkODExOCxcbiAgMHhkODA3YWE5OCwgMHhhMzAzMDI0MiwgMHgxMjgzNWIwMSwgMHg0NTcwNmZiZSxcbiAgMHgyNDMxODViZSwgMHg0ZWU0YjI4YywgMHg1NTBjN2RjMywgMHhkNWZmYjRlMixcbiAgMHg3MmJlNWQ3NCwgMHhmMjdiODk2ZiwgMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSxcbiAgMHg5YmRjMDZhNywgMHgyNWM3MTIzNSwgMHhjMTliZjE3NCwgMHhjZjY5MjY5NCxcbiAgMHhlNDliNjljMSwgMHg5ZWYxNGFkMiwgMHhlZmJlNDc4NiwgMHgzODRmMjVlMyxcbiAgMHgwZmMxOWRjNiwgMHg4YjhjZDViNSwgMHgyNDBjYTFjYywgMHg3N2FjOWM2NSxcbiAgMHgyZGU5MmM2ZiwgMHg1OTJiMDI3NSwgMHg0YTc0ODRhYSwgMHg2ZWE2ZTQ4MyxcbiAgMHg1Y2IwYTlkYywgMHhiZDQxZmJkNCwgMHg3NmY5ODhkYSwgMHg4MzExNTNiNSxcbiAgMHg5ODNlNTE1MiwgMHhlZTY2ZGZhYiwgMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCxcbiAgMHhiMDAzMjdjOCwgMHg5OGZiMjEzZiwgMHhiZjU5N2ZjNywgMHhiZWVmMGVlNCxcbiAgMHhjNmUwMGJmMywgMHgzZGE4OGZjMiwgMHhkNWE3OTE0NywgMHg5MzBhYTcyNSxcbiAgMHgwNmNhNjM1MSwgMHhlMDAzODI2ZiwgMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCxcbiAgMHgyN2I3MGE4NSwgMHg0NmQyMmZmYywgMHgyZTFiMjEzOCwgMHg1YzI2YzkyNixcbiAgMHg0ZDJjNmRmYywgMHg1YWM0MmFlZCwgMHg1MzM4MGQxMywgMHg5ZDk1YjNkZixcbiAgMHg2NTBhNzM1NCwgMHg4YmFmNjNkZSwgMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCxcbiAgMHg4MWMyYzkyZSwgMHg0N2VkYWVlNiwgMHg5MjcyMmM4NSwgMHgxNDgyMzUzYixcbiAgMHhhMmJmZThhMSwgMHg0Y2YxMDM2NCwgMHhhODFhNjY0YiwgMHhiYzQyMzAwMSxcbiAgMHhjMjRiOGI3MCwgMHhkMGY4OTc5MSwgMHhjNzZjNTFhMywgMHgwNjU0YmUzMCxcbiAgMHhkMTkyZTgxOSwgMHhkNmVmNTIxOCwgMHhkNjk5MDYyNCwgMHg1NTY1YTkxMCxcbiAgMHhmNDBlMzU4NSwgMHg1NzcxMjAyYSwgMHgxMDZhYTA3MCwgMHgzMmJiZDFiOCxcbiAgMHgxOWE0YzExNiwgMHhiOGQyZDBjOCwgMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyxcbiAgMHgyNzQ4Nzc0YywgMHhkZjhlZWI5OSwgMHgzNGIwYmNiNSwgMHhlMTliNDhhOCxcbiAgMHgzOTFjMGNiMywgMHhjNWM5NWE2MywgMHg0ZWQ4YWE0YSwgMHhlMzQxOGFjYixcbiAgMHg1YjljY2E0ZiwgMHg3NzYzZTM3MywgMHg2ODJlNmZmMywgMHhkNmIyYjhhMyxcbiAgMHg3NDhmODJlZSwgMHg1ZGVmYjJmYywgMHg3OGE1NjM2ZiwgMHg0MzE3MmY2MCxcbiAgMHg4NGM4NzgxNCwgMHhhMWYwYWI3MiwgMHg4Y2M3MDIwOCwgMHgxYTY0MzllYyxcbiAgMHg5MGJlZmZmYSwgMHgyMzYzMWUyOCwgMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSxcbiAgMHhiZWY5YTNmNywgMHhiMmM2NzkxNSwgMHhjNjcxNzhmMiwgMHhlMzcyNTMyYixcbiAgMHhjYTI3M2VjZSwgMHhlYTI2NjE5YywgMHhkMTg2YjhjNywgMHgyMWMwYzIwNyxcbiAgMHhlYWRhN2RkNiwgMHhjZGUwZWIxZSwgMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCxcbiAgMHgwNmYwNjdhYSwgMHg3MjE3NmZiYSwgMHgwYTYzN2RjNSwgMHhhMmM4OThhNixcbiAgMHgxMTNmOTgwNCwgMHhiZWY5MGRhZSwgMHgxYjcxMGIzNSwgMHgxMzFjNDcxYixcbiAgMHgyOGRiNzdmNSwgMHgyMzA0N2Q4NCwgMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyxcbiAgMHgzYzllYmUwYSwgMHgxNWM5YmViYywgMHg0MzFkNjdjNCwgMHg5YzEwMGQ0YyxcbiAgMHg0Y2M1ZDRiZSwgMHhjYjNlNDJiNiwgMHg1OTdmMjk5YywgMHhmYzY1N2UyYSxcbiAgMHg1ZmNiNmZhYiwgMHgzYWQ2ZmFlYywgMHg2YzQ0MTk4YywgMHg0YTQ3NTgxN1xuXTtcblxuZnVuY3Rpb24gU0hBNTEyKCkge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU0hBNTEyKSlcbiAgICByZXR1cm4gbmV3IFNIQTUxMigpO1xuXG4gIEJsb2NrSGFzaC5jYWxsKHRoaXMpO1xuICB0aGlzLmggPSBbXG4gICAgMHg2YTA5ZTY2NywgMHhmM2JjYzkwOCxcbiAgICAweGJiNjdhZTg1LCAweDg0Y2FhNzNiLFxuICAgIDB4M2M2ZWYzNzIsIDB4ZmU5NGY4MmIsXG4gICAgMHhhNTRmZjUzYSwgMHg1ZjFkMzZmMSxcbiAgICAweDUxMGU1MjdmLCAweGFkZTY4MmQxLFxuICAgIDB4OWIwNTY4OGMsIDB4MmIzZTZjMWYsXG4gICAgMHgxZjgzZDlhYiwgMHhmYjQxYmQ2YixcbiAgICAweDViZTBjZDE5LCAweDEzN2UyMTc5IF07XG4gIHRoaXMuayA9IHNoYTUxMl9LO1xuICB0aGlzLlcgPSBuZXcgQXJyYXkoMTYwKTtcbn1cbnV0aWxzLmluaGVyaXRzKFNIQTUxMiwgQmxvY2tIYXNoKTtcbm1vZHVsZS5leHBvcnRzID0gU0hBNTEyO1xuXG5TSEE1MTIuYmxvY2tTaXplID0gMTAyNDtcblNIQTUxMi5vdXRTaXplID0gNTEyO1xuU0hBNTEyLmhtYWNTdHJlbmd0aCA9IDE5MjtcblNIQTUxMi5wYWRMZW5ndGggPSAxMjg7XG5cblNIQTUxMi5wcm90b3R5cGUuX3ByZXBhcmVCbG9jayA9IGZ1bmN0aW9uIF9wcmVwYXJlQmxvY2sobXNnLCBzdGFydCkge1xuICB2YXIgVyA9IHRoaXMuVztcblxuICAvLyAzMiB4IDMyYml0IHdvcmRzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKylcbiAgICBXW2ldID0gbXNnW3N0YXJ0ICsgaV07XG4gIGZvciAoOyBpIDwgVy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBjMF9oaSA9IGcxXzUxMl9oaShXW2kgLSA0XSwgV1tpIC0gM10pOyAgLy8gaSAtIDJcbiAgICB2YXIgYzBfbG8gPSBnMV81MTJfbG8oV1tpIC0gNF0sIFdbaSAtIDNdKTtcbiAgICB2YXIgYzFfaGkgPSBXW2kgLSAxNF07ICAvLyBpIC0gN1xuICAgIHZhciBjMV9sbyA9IFdbaSAtIDEzXTtcbiAgICB2YXIgYzJfaGkgPSBnMF81MTJfaGkoV1tpIC0gMzBdLCBXW2kgLSAyOV0pOyAgLy8gaSAtIDE1XG4gICAgdmFyIGMyX2xvID0gZzBfNTEyX2xvKFdbaSAtIDMwXSwgV1tpIC0gMjldKTtcbiAgICB2YXIgYzNfaGkgPSBXW2kgLSAzMl07ICAvLyBpIC0gMTZcbiAgICB2YXIgYzNfbG8gPSBXW2kgLSAzMV07XG5cbiAgICBXW2ldID0gc3VtNjRfNF9oaShcbiAgICAgIGMwX2hpLCBjMF9sbyxcbiAgICAgIGMxX2hpLCBjMV9sbyxcbiAgICAgIGMyX2hpLCBjMl9sbyxcbiAgICAgIGMzX2hpLCBjM19sbyk7XG4gICAgV1tpICsgMV0gPSBzdW02NF80X2xvKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvKTtcbiAgfVxufTtcblxuU0hBNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gX3VwZGF0ZShtc2csIHN0YXJ0KSB7XG4gIHRoaXMuX3ByZXBhcmVCbG9jayhtc2csIHN0YXJ0KTtcblxuICB2YXIgVyA9IHRoaXMuVztcblxuICB2YXIgYWggPSB0aGlzLmhbMF07XG4gIHZhciBhbCA9IHRoaXMuaFsxXTtcbiAgdmFyIGJoID0gdGhpcy5oWzJdO1xuICB2YXIgYmwgPSB0aGlzLmhbM107XG4gIHZhciBjaCA9IHRoaXMuaFs0XTtcbiAgdmFyIGNsID0gdGhpcy5oWzVdO1xuICB2YXIgZGggPSB0aGlzLmhbNl07XG4gIHZhciBkbCA9IHRoaXMuaFs3XTtcbiAgdmFyIGVoID0gdGhpcy5oWzhdO1xuICB2YXIgZWwgPSB0aGlzLmhbOV07XG4gIHZhciBmaCA9IHRoaXMuaFsxMF07XG4gIHZhciBmbCA9IHRoaXMuaFsxMV07XG4gIHZhciBnaCA9IHRoaXMuaFsxMl07XG4gIHZhciBnbCA9IHRoaXMuaFsxM107XG4gIHZhciBoaCA9IHRoaXMuaFsxNF07XG4gIHZhciBobCA9IHRoaXMuaFsxNV07XG5cbiAgYXNzZXJ0KHRoaXMuay5sZW5ndGggPT09IFcubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBXLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGMwX2hpID0gaGg7XG4gICAgdmFyIGMwX2xvID0gaGw7XG4gICAgdmFyIGMxX2hpID0gczFfNTEyX2hpKGVoLCBlbCk7XG4gICAgdmFyIGMxX2xvID0gczFfNTEyX2xvKGVoLCBlbCk7XG4gICAgdmFyIGMyX2hpID0gY2g2NF9oaShlaCwgZWwsIGZoLCBmbCwgZ2gsIGdsKTtcbiAgICB2YXIgYzJfbG8gPSBjaDY0X2xvKGVoLCBlbCwgZmgsIGZsLCBnaCwgZ2wpO1xuICAgIHZhciBjM19oaSA9IHRoaXMua1tpXTtcbiAgICB2YXIgYzNfbG8gPSB0aGlzLmtbaSArIDFdO1xuICAgIHZhciBjNF9oaSA9IFdbaV07XG4gICAgdmFyIGM0X2xvID0gV1tpICsgMV07XG5cbiAgICB2YXIgVDFfaGkgPSBzdW02NF81X2hpKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvLFxuICAgICAgYzRfaGksIGM0X2xvKTtcbiAgICB2YXIgVDFfbG8gPSBzdW02NF81X2xvKFxuICAgICAgYzBfaGksIGMwX2xvLFxuICAgICAgYzFfaGksIGMxX2xvLFxuICAgICAgYzJfaGksIGMyX2xvLFxuICAgICAgYzNfaGksIGMzX2xvLFxuICAgICAgYzRfaGksIGM0X2xvKTtcblxuICAgIGMwX2hpID0gczBfNTEyX2hpKGFoLCBhbCk7XG4gICAgYzBfbG8gPSBzMF81MTJfbG8oYWgsIGFsKTtcbiAgICBjMV9oaSA9IG1hajY0X2hpKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wpO1xuICAgIGMxX2xvID0gbWFqNjRfbG8oYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCk7XG5cbiAgICB2YXIgVDJfaGkgPSBzdW02NF9oaShjMF9oaSwgYzBfbG8sIGMxX2hpLCBjMV9sbyk7XG4gICAgdmFyIFQyX2xvID0gc3VtNjRfbG8oYzBfaGksIGMwX2xvLCBjMV9oaSwgYzFfbG8pO1xuXG4gICAgaGggPSBnaDtcbiAgICBobCA9IGdsO1xuXG4gICAgZ2ggPSBmaDtcbiAgICBnbCA9IGZsO1xuXG4gICAgZmggPSBlaDtcbiAgICBmbCA9IGVsO1xuXG4gICAgZWggPSBzdW02NF9oaShkaCwgZGwsIFQxX2hpLCBUMV9sbyk7XG4gICAgZWwgPSBzdW02NF9sbyhkbCwgZGwsIFQxX2hpLCBUMV9sbyk7XG5cbiAgICBkaCA9IGNoO1xuICAgIGRsID0gY2w7XG5cbiAgICBjaCA9IGJoO1xuICAgIGNsID0gYmw7XG5cbiAgICBiaCA9IGFoO1xuICAgIGJsID0gYWw7XG5cbiAgICBhaCA9IHN1bTY0X2hpKFQxX2hpLCBUMV9sbywgVDJfaGksIFQyX2xvKTtcbiAgICBhbCA9IHN1bTY0X2xvKFQxX2hpLCBUMV9sbywgVDJfaGksIFQyX2xvKTtcbiAgfVxuXG4gIHN1bTY0KHRoaXMuaCwgMCwgYWgsIGFsKTtcbiAgc3VtNjQodGhpcy5oLCAyLCBiaCwgYmwpO1xuICBzdW02NCh0aGlzLmgsIDQsIGNoLCBjbCk7XG4gIHN1bTY0KHRoaXMuaCwgNiwgZGgsIGRsKTtcbiAgc3VtNjQodGhpcy5oLCA4LCBlaCwgZWwpO1xuICBzdW02NCh0aGlzLmgsIDEwLCBmaCwgZmwpO1xuICBzdW02NCh0aGlzLmgsIDEyLCBnaCwgZ2wpO1xuICBzdW02NCh0aGlzLmgsIDE0LCBoaCwgaGwpO1xufTtcblxuU0hBNTEyLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gZGlnZXN0KGVuYykge1xuICBpZiAoZW5jID09PSAnaGV4JylcbiAgICByZXR1cm4gdXRpbHMudG9IZXgzMih0aGlzLmgsICdiaWcnKTtcbiAgZWxzZVxuICAgIHJldHVybiB1dGlscy5zcGxpdDMyKHRoaXMuaCwgJ2JpZycpO1xufTtcblxuZnVuY3Rpb24gY2g2NF9oaSh4aCwgeGwsIHloLCB5bCwgemgpIHtcbiAgdmFyIHIgPSAoeGggJiB5aCkgXiAoKH54aCkgJiB6aCk7XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gY2g2NF9sbyh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7XG4gIHZhciByID0gKHhsICYgeWwpIF4gKCh+eGwpICYgemwpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIG1hajY0X2hpKHhoLCB4bCwgeWgsIHlsLCB6aCkge1xuICB2YXIgciA9ICh4aCAmIHloKSBeICh4aCAmIHpoKSBeICh5aCAmIHpoKTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYWo2NF9sbyh4aCwgeGwsIHloLCB5bCwgemgsIHpsKSB7XG4gIHZhciByID0gKHhsICYgeWwpIF4gKHhsICYgemwpIF4gKHlsICYgemwpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMwXzUxMl9oaSh4aCwgeGwpIHtcbiAgdmFyIGMwX2hpID0gcm90cjY0X2hpKHhoLCB4bCwgMjgpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGwsIHhoLCAyKTsgIC8vIDM0XG4gIHZhciBjMl9oaSA9IHJvdHI2NF9oaSh4bCwgeGgsIDcpOyAgLy8gMzlcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBzMF81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDI4KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgMik7ICAvLyAzNFxuICB2YXIgYzJfbG8gPSByb3RyNjRfbG8oeGwsIHhoLCA3KTsgIC8vIDM5XG5cbiAgdmFyIHIgPSBjMF9sbyBeIGMxX2xvIF4gYzJfbG87XG4gIGlmIChyIDwgMClcbiAgICByICs9IDB4MTAwMDAwMDAwO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gczFfNTEyX2hpKHhoLCB4bCkge1xuICB2YXIgYzBfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCAxNCk7XG4gIHZhciBjMV9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE4KTtcbiAgdmFyIGMyX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgOSk7ICAvLyA0MVxuXG4gIHZhciByID0gYzBfaGkgXiBjMV9oaSBeIGMyX2hpO1xuICBpZiAociA8IDApXG4gICAgciArPSAweDEwMDAwMDAwMDtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHMxXzUxMl9sbyh4aCwgeGwpIHtcbiAgdmFyIGMwX2xvID0gcm90cjY0X2xvKHhoLCB4bCwgMTQpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCAxOCk7XG4gIHZhciBjMl9sbyA9IHJvdHI2NF9sbyh4bCwgeGgsIDkpOyAgLy8gNDFcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMF81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDEpO1xuICB2YXIgYzFfaGkgPSByb3RyNjRfaGkoeGgsIHhsLCA4KTtcbiAgdmFyIGMyX2hpID0gc2hyNjRfaGkoeGgsIHhsLCA3KTtcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMF81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDEpO1xuICB2YXIgYzFfbG8gPSByb3RyNjRfbG8oeGgsIHhsLCA4KTtcbiAgdmFyIGMyX2xvID0gc2hyNjRfbG8oeGgsIHhsLCA3KTtcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMV81MTJfaGkoeGgsIHhsKSB7XG4gIHZhciBjMF9oaSA9IHJvdHI2NF9oaSh4aCwgeGwsIDE5KTtcbiAgdmFyIGMxX2hpID0gcm90cjY0X2hpKHhsLCB4aCwgMjkpOyAgLy8gNjFcbiAgdmFyIGMyX2hpID0gc2hyNjRfaGkoeGgsIHhsLCA2KTtcblxuICB2YXIgciA9IGMwX2hpIF4gYzFfaGkgXiBjMl9oaTtcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBnMV81MTJfbG8oeGgsIHhsKSB7XG4gIHZhciBjMF9sbyA9IHJvdHI2NF9sbyh4aCwgeGwsIDE5KTtcbiAgdmFyIGMxX2xvID0gcm90cjY0X2xvKHhsLCB4aCwgMjkpOyAgLy8gNjFcbiAgdmFyIGMyX2xvID0gc2hyNjRfbG8oeGgsIHhsLCA2KTtcblxuICB2YXIgciA9IGMwX2xvIF4gYzFfbG8gXiBjMl9sbztcbiAgaWYgKHIgPCAwKVxuICAgIHIgKz0gMHgxMDAwMDAwMDA7XG4gIHJldHVybiByO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIHJvdHIzMiA9IHV0aWxzLnJvdHIzMjtcblxuZnVuY3Rpb24gZnRfMShzLCB4LCB5LCB6KSB7XG4gIGlmIChzID09PSAwKVxuICAgIHJldHVybiBjaDMyKHgsIHksIHopO1xuICBpZiAocyA9PT0gMSB8fCBzID09PSAzKVxuICAgIHJldHVybiBwMzIoeCwgeSwgeik7XG4gIGlmIChzID09PSAyKVxuICAgIHJldHVybiBtYWozMih4LCB5LCB6KTtcbn1cbmV4cG9ydHMuZnRfMSA9IGZ0XzE7XG5cbmZ1bmN0aW9uIGNoMzIoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSBeICgofngpICYgeik7XG59XG5leHBvcnRzLmNoMzIgPSBjaDMyO1xuXG5mdW5jdGlvbiBtYWozMih4LCB5LCB6KSB7XG4gIHJldHVybiAoeCAmIHkpIF4gKHggJiB6KSBeICh5ICYgeik7XG59XG5leHBvcnRzLm1hajMyID0gbWFqMzI7XG5cbmZ1bmN0aW9uIHAzMih4LCB5LCB6KSB7XG4gIHJldHVybiB4IF4geSBeIHo7XG59XG5leHBvcnRzLnAzMiA9IHAzMjtcblxuZnVuY3Rpb24gczBfMjU2KHgpIHtcbiAgcmV0dXJuIHJvdHIzMih4LCAyKSBeIHJvdHIzMih4LCAxMykgXiByb3RyMzIoeCwgMjIpO1xufVxuZXhwb3J0cy5zMF8yNTYgPSBzMF8yNTY7XG5cbmZ1bmN0aW9uIHMxXzI1Nih4KSB7XG4gIHJldHVybiByb3RyMzIoeCwgNikgXiByb3RyMzIoeCwgMTEpIF4gcm90cjMyKHgsIDI1KTtcbn1cbmV4cG9ydHMuczFfMjU2ID0gczFfMjU2O1xuXG5mdW5jdGlvbiBnMF8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDcpIF4gcm90cjMyKHgsIDE4KSBeICh4ID4+PiAzKTtcbn1cbmV4cG9ydHMuZzBfMjU2ID0gZzBfMjU2O1xuXG5mdW5jdGlvbiBnMV8yNTYoeCkge1xuICByZXR1cm4gcm90cjMyKHgsIDE3KSBeIHJvdHIzMih4LCAxOSkgXiAoeCA+Pj4gMTApO1xufVxuZXhwb3J0cy5nMV8yNTYgPSBnMV8yNTY7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdtaW5pbWFsaXN0aWMtYXNzZXJ0Jyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5leHBvcnRzLmluaGVyaXRzID0gaW5oZXJpdHM7XG5cbmZ1bmN0aW9uIHRvQXJyYXkobXNnLCBlbmMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobXNnKSlcbiAgICByZXR1cm4gbXNnLnNsaWNlKCk7XG4gIGlmICghbXNnKVxuICAgIHJldHVybiBbXTtcbiAgdmFyIHJlcyA9IFtdO1xuICBpZiAodHlwZW9mIG1zZyA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoIWVuYykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGMgPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICAgICAgdmFyIGhpID0gYyA+PiA4O1xuICAgICAgICB2YXIgbG8gPSBjICYgMHhmZjtcbiAgICAgICAgaWYgKGhpKVxuICAgICAgICAgIHJlcy5wdXNoKGhpLCBsbyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXMucHVzaChsbyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmMgPT09ICdoZXgnKSB7XG4gICAgICBtc2cgPSBtc2cucmVwbGFjZSgvW15hLXowLTldKy9pZywgJycpO1xuICAgICAgaWYgKG1zZy5sZW5ndGggJSAyICE9PSAwKVxuICAgICAgICBtc2cgPSAnMCcgKyBtc2c7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSArPSAyKVxuICAgICAgICByZXMucHVzaChwYXJzZUludChtc2dbaV0gKyBtc2dbaSArIDFdLCAxNikpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgICAgcmVzW2ldID0gbXNnW2ldIHwgMDtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0FycmF5ID0gdG9BcnJheTtcblxuZnVuY3Rpb24gdG9IZXgobXNnKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO1xuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy50b0hleCA9IHRvSGV4O1xuXG5mdW5jdGlvbiBodG9ubCh3KSB7XG4gIHZhciByZXMgPSAodyA+Pj4gMjQpIHxcbiAgICAgICAgICAgICgodyA+Pj4gOCkgJiAweGZmMDApIHxcbiAgICAgICAgICAgICgodyA8PCA4KSAmIDB4ZmYwMDAwKSB8XG4gICAgICAgICAgICAoKHcgJiAweGZmKSA8PCAyNCk7XG4gIHJldHVybiByZXMgPj4+IDA7XG59XG5leHBvcnRzLmh0b25sID0gaHRvbmw7XG5cbmZ1bmN0aW9uIHRvSGV4MzIobXNnLCBlbmRpYW4pIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB3ID0gbXNnW2ldO1xuICAgIGlmIChlbmRpYW4gPT09ICdsaXR0bGUnKVxuICAgICAgdyA9IGh0b25sKHcpO1xuICAgIHJlcyArPSB6ZXJvOCh3LnRvU3RyaW5nKDE2KSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMudG9IZXgzMiA9IHRvSGV4MzI7XG5cbmZ1bmN0aW9uIHplcm8yKHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG5leHBvcnRzLnplcm8yID0gemVybzI7XG5cbmZ1bmN0aW9uIHplcm84KHdvcmQpIHtcbiAgaWYgKHdvcmQubGVuZ3RoID09PSA3KVxuICAgIHJldHVybiAnMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gNilcbiAgICByZXR1cm4gJzAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA1KVxuICAgIHJldHVybiAnMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSA0KVxuICAgIHJldHVybiAnMDAwMCcgKyB3b3JkO1xuICBlbHNlIGlmICh3b3JkLmxlbmd0aCA9PT0gMylcbiAgICByZXR1cm4gJzAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAyKVxuICAgIHJldHVybiAnMDAwMDAwJyArIHdvcmQ7XG4gIGVsc2UgaWYgKHdvcmQubGVuZ3RoID09PSAxKVxuICAgIHJldHVybiAnMDAwMDAwMCcgKyB3b3JkO1xuICBlbHNlXG4gICAgcmV0dXJuIHdvcmQ7XG59XG5leHBvcnRzLnplcm84ID0gemVybzg7XG5cbmZ1bmN0aW9uIGpvaW4zMihtc2csIHN0YXJ0LCBlbmQsIGVuZGlhbikge1xuICB2YXIgbGVuID0gZW5kIC0gc3RhcnQ7XG4gIGFzc2VydChsZW4gJSA0ID09PSAwKTtcbiAgdmFyIHJlcyA9IG5ldyBBcnJheShsZW4gLyA0KTtcbiAgZm9yICh2YXIgaSA9IDAsIGsgPSBzdGFydDsgaSA8IHJlcy5sZW5ndGg7IGkrKywgayArPSA0KSB7XG4gICAgdmFyIHc7XG4gICAgaWYgKGVuZGlhbiA9PT0gJ2JpZycpXG4gICAgICB3ID0gKG1zZ1trXSA8PCAyNCkgfCAobXNnW2sgKyAxXSA8PCAxNikgfCAobXNnW2sgKyAyXSA8PCA4KSB8IG1zZ1trICsgM107XG4gICAgZWxzZVxuICAgICAgdyA9IChtc2dbayArIDNdIDw8IDI0KSB8IChtc2dbayArIDJdIDw8IDE2KSB8IChtc2dbayArIDFdIDw8IDgpIHwgbXNnW2tdO1xuICAgIHJlc1tpXSA9IHcgPj4+IDA7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuam9pbjMyID0gam9pbjMyO1xuXG5mdW5jdGlvbiBzcGxpdDMyKG1zZywgZW5kaWFuKSB7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobXNnLmxlbmd0aCAqIDQpO1xuICBmb3IgKHZhciBpID0gMCwgayA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyssIGsgKz0gNCkge1xuICAgIHZhciBtID0gbXNnW2ldO1xuICAgIGlmIChlbmRpYW4gPT09ICdiaWcnKSB7XG4gICAgICByZXNba10gPSBtID4+PiAyNDtcbiAgICAgIHJlc1trICsgMV0gPSAobSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgIHJlc1trICsgMl0gPSAobSA+Pj4gOCkgJiAweGZmO1xuICAgICAgcmVzW2sgKyAzXSA9IG0gJiAweGZmO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbayArIDNdID0gbSA+Pj4gMjQ7XG4gICAgICByZXNbayArIDJdID0gKG0gPj4+IDE2KSAmIDB4ZmY7XG4gICAgICByZXNbayArIDFdID0gKG0gPj4+IDgpICYgMHhmZjtcbiAgICAgIHJlc1trXSA9IG0gJiAweGZmO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5zcGxpdDMyID0gc3BsaXQzMjtcblxuZnVuY3Rpb24gcm90cjMyKHcsIGIpIHtcbiAgcmV0dXJuICh3ID4+PiBiKSB8ICh3IDw8ICgzMiAtIGIpKTtcbn1cbmV4cG9ydHMucm90cjMyID0gcm90cjMyO1xuXG5mdW5jdGlvbiByb3RsMzIodywgYikge1xuICByZXR1cm4gKHcgPDwgYikgfCAodyA+Pj4gKDMyIC0gYikpO1xufVxuZXhwb3J0cy5yb3RsMzIgPSByb3RsMzI7XG5cbmZ1bmN0aW9uIHN1bTMyKGEsIGIpIHtcbiAgcmV0dXJuIChhICsgYikgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyID0gc3VtMzI7XG5cbmZ1bmN0aW9uIHN1bTMyXzMoYSwgYiwgYykge1xuICByZXR1cm4gKGEgKyBiICsgYykgPj4+IDA7XG59XG5leHBvcnRzLnN1bTMyXzMgPSBzdW0zMl8zO1xuXG5mdW5jdGlvbiBzdW0zMl80KGEsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIChhICsgYiArIGMgKyBkKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfNCA9IHN1bTMyXzQ7XG5cbmZ1bmN0aW9uIHN1bTMyXzUoYSwgYiwgYywgZCwgZSkge1xuICByZXR1cm4gKGEgKyBiICsgYyArIGQgKyBlKSA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtMzJfNSA9IHN1bTMyXzU7XG5cbmZ1bmN0aW9uIHN1bTY0KGJ1ZiwgcG9zLCBhaCwgYWwpIHtcbiAgdmFyIGJoID0gYnVmW3Bvc107XG4gIHZhciBibCA9IGJ1Zltwb3MgKyAxXTtcblxuICB2YXIgbG8gPSAoYWwgKyBibCkgPj4+IDA7XG4gIHZhciBoaSA9IChsbyA8IGFsID8gMSA6IDApICsgYWggKyBiaDtcbiAgYnVmW3Bvc10gPSBoaSA+Pj4gMDtcbiAgYnVmW3BvcyArIDFdID0gbG87XG59XG5leHBvcnRzLnN1bTY0ID0gc3VtNjQ7XG5cbmZ1bmN0aW9uIHN1bTY0X2hpKGFoLCBhbCwgYmgsIGJsKSB7XG4gIHZhciBsbyA9IChhbCArIGJsKSA+Pj4gMDtcbiAgdmFyIGhpID0gKGxvIDwgYWwgPyAxIDogMCkgKyBhaCArIGJoO1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0X2hpID0gc3VtNjRfaGk7XG5cbmZ1bmN0aW9uIHN1bTY0X2xvKGFoLCBhbCwgYmgsIGJsKSB7XG4gIHZhciBsbyA9IGFsICsgYmw7XG4gIHJldHVybiBsbyA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfbG8gPSBzdW02NF9sbztcblxuZnVuY3Rpb24gc3VtNjRfNF9oaShhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwpIHtcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGxvID0gYWw7XG4gIGxvID0gKGxvICsgYmwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGFsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgY2wpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZGwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7XG5cbiAgdmFyIGhpID0gYWggKyBiaCArIGNoICsgZGggKyBjYXJyeTtcbiAgcmV0dXJuIGhpID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF80X2hpID0gc3VtNjRfNF9oaTtcblxuZnVuY3Rpb24gc3VtNjRfNF9sbyhhaCwgYWwsIGJoLCBibCwgY2gsIGNsLCBkaCwgZGwpIHtcbiAgdmFyIGxvID0gYWwgKyBibCArIGNsICsgZGw7XG4gIHJldHVybiBsbyA+Pj4gMDtcbn1cbmV4cG9ydHMuc3VtNjRfNF9sbyA9IHN1bTY0XzRfbG87XG5cbmZ1bmN0aW9uIHN1bTY0XzVfaGkoYWgsIGFsLCBiaCwgYmwsIGNoLCBjbCwgZGgsIGRsLCBlaCwgZWwpIHtcbiAgdmFyIGNhcnJ5ID0gMDtcbiAgdmFyIGxvID0gYWw7XG4gIGxvID0gKGxvICsgYmwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGFsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgY2wpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGNsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZGwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGRsID8gMSA6IDA7XG4gIGxvID0gKGxvICsgZWwpID4+PiAwO1xuICBjYXJyeSArPSBsbyA8IGVsID8gMSA6IDA7XG5cbiAgdmFyIGhpID0gYWggKyBiaCArIGNoICsgZGggKyBlaCArIGNhcnJ5O1xuICByZXR1cm4gaGkgPj4+IDA7XG59XG5leHBvcnRzLnN1bTY0XzVfaGkgPSBzdW02NF81X2hpO1xuXG5mdW5jdGlvbiBzdW02NF81X2xvKGFoLCBhbCwgYmgsIGJsLCBjaCwgY2wsIGRoLCBkbCwgZWgsIGVsKSB7XG4gIHZhciBsbyA9IGFsICsgYmwgKyBjbCArIGRsICsgZWw7XG5cbiAgcmV0dXJuIGxvID4+PiAwO1xufVxuZXhwb3J0cy5zdW02NF81X2xvID0gc3VtNjRfNV9sbztcblxuZnVuY3Rpb24gcm90cjY0X2hpKGFoLCBhbCwgbnVtKSB7XG4gIHZhciByID0gKGFsIDw8ICgzMiAtIG51bSkpIHwgKGFoID4+PiBudW0pO1xuICByZXR1cm4gciA+Pj4gMDtcbn1cbmV4cG9ydHMucm90cjY0X2hpID0gcm90cjY0X2hpO1xuXG5mdW5jdGlvbiByb3RyNjRfbG8oYWgsIGFsLCBudW0pIHtcbiAgdmFyIHIgPSAoYWggPDwgKDMyIC0gbnVtKSkgfCAoYWwgPj4+IG51bSk7XG4gIHJldHVybiByID4+PiAwO1xufVxuZXhwb3J0cy5yb3RyNjRfbG8gPSByb3RyNjRfbG87XG5cbmZ1bmN0aW9uIHNocjY0X2hpKGFoLCBhbCwgbnVtKSB7XG4gIHJldHVybiBhaCA+Pj4gbnVtO1xufVxuZXhwb3J0cy5zaHI2NF9oaSA9IHNocjY0X2hpO1xuXG5mdW5jdGlvbiBzaHI2NF9sbyhhaCwgYWwsIG51bSkge1xuICB2YXIgciA9IChhaCA8PCAoMzIgLSBudW0pKSB8IChhbCA+Pj4gbnVtKTtcbiAgcmV0dXJuIHIgPj4+IDA7XG59XG5leHBvcnRzLnNocjY0X2xvID0gc2hyNjRfbG87XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNoID0gcmVxdWlyZSgnaGFzaC5qcycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnbWluaW1hbGlzdGljLWNyeXB0by11dGlscycpO1xudmFyIGFzc2VydCA9IHJlcXVpcmUoJ21pbmltYWxpc3RpYy1hc3NlcnQnKTtcblxuZnVuY3Rpb24gSG1hY0RSQkcob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSG1hY0RSQkcpKVxuICAgIHJldHVybiBuZXcgSG1hY0RSQkcob3B0aW9ucyk7XG4gIHRoaXMuaGFzaCA9IG9wdGlvbnMuaGFzaDtcbiAgdGhpcy5wcmVkUmVzaXN0ID0gISFvcHRpb25zLnByZWRSZXNpc3Q7XG5cbiAgdGhpcy5vdXRMZW4gPSB0aGlzLmhhc2gub3V0U2l6ZTtcbiAgdGhpcy5taW5FbnRyb3B5ID0gb3B0aW9ucy5taW5FbnRyb3B5IHx8IHRoaXMuaGFzaC5obWFjU3RyZW5ndGg7XG5cbiAgdGhpcy5fcmVzZWVkID0gbnVsbDtcbiAgdGhpcy5yZXNlZWRJbnRlcnZhbCA9IG51bGw7XG4gIHRoaXMuSyA9IG51bGw7XG4gIHRoaXMuViA9IG51bGw7XG5cbiAgdmFyIGVudHJvcHkgPSB1dGlscy50b0FycmF5KG9wdGlvbnMuZW50cm9weSwgb3B0aW9ucy5lbnRyb3B5RW5jIHx8ICdoZXgnKTtcbiAgdmFyIG5vbmNlID0gdXRpbHMudG9BcnJheShvcHRpb25zLm5vbmNlLCBvcHRpb25zLm5vbmNlRW5jIHx8ICdoZXgnKTtcbiAgdmFyIHBlcnMgPSB1dGlscy50b0FycmF5KG9wdGlvbnMucGVycywgb3B0aW9ucy5wZXJzRW5jIHx8ICdoZXgnKTtcbiAgYXNzZXJ0KGVudHJvcHkubGVuZ3RoID49ICh0aGlzLm1pbkVudHJvcHkgLyA4KSxcbiAgICAgICAgICdOb3QgZW5vdWdoIGVudHJvcHkuIE1pbmltdW0gaXM6ICcgKyB0aGlzLm1pbkVudHJvcHkgKyAnIGJpdHMnKTtcbiAgdGhpcy5faW5pdChlbnRyb3B5LCBub25jZSwgcGVycyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEhtYWNEUkJHO1xuXG5IbWFjRFJCRy5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KGVudHJvcHksIG5vbmNlLCBwZXJzKSB7XG4gIHZhciBzZWVkID0gZW50cm9weS5jb25jYXQobm9uY2UpLmNvbmNhdChwZXJzKTtcblxuICB0aGlzLksgPSBuZXcgQXJyYXkodGhpcy5vdXRMZW4gLyA4KTtcbiAgdGhpcy5WID0gbmV3IEFycmF5KHRoaXMub3V0TGVuIC8gOCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5WLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5LW2ldID0gMHgwMDtcbiAgICB0aGlzLlZbaV0gPSAweDAxO1xuICB9XG5cbiAgdGhpcy5fdXBkYXRlKHNlZWQpO1xuICB0aGlzLl9yZXNlZWQgPSAxO1xuICB0aGlzLnJlc2VlZEludGVydmFsID0gMHgxMDAwMDAwMDAwMDAwOyAgLy8gMl40OFxufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLl9obWFjID0gZnVuY3Rpb24gaG1hYygpIHtcbiAgcmV0dXJuIG5ldyBoYXNoLmhtYWModGhpcy5oYXNoLCB0aGlzLkspO1xufTtcblxuSG1hY0RSQkcucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoc2VlZCkge1xuICB2YXIga21hYyA9IHRoaXMuX2htYWMoKVxuICAgICAgICAgICAgICAgICAudXBkYXRlKHRoaXMuVilcbiAgICAgICAgICAgICAgICAgLnVwZGF0ZShbIDB4MDAgXSk7XG4gIGlmIChzZWVkKVxuICAgIGttYWMgPSBrbWFjLnVwZGF0ZShzZWVkKTtcbiAgdGhpcy5LID0ga21hYy5kaWdlc3QoKTtcbiAgdGhpcy5WID0gdGhpcy5faG1hYygpLnVwZGF0ZSh0aGlzLlYpLmRpZ2VzdCgpO1xuICBpZiAoIXNlZWQpXG4gICAgcmV0dXJuO1xuXG4gIHRoaXMuSyA9IHRoaXMuX2htYWMoKVxuICAgICAgICAgICAgICAgLnVwZGF0ZSh0aGlzLlYpXG4gICAgICAgICAgICAgICAudXBkYXRlKFsgMHgwMSBdKVxuICAgICAgICAgICAgICAgLnVwZGF0ZShzZWVkKVxuICAgICAgICAgICAgICAgLmRpZ2VzdCgpO1xuICB0aGlzLlYgPSB0aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7XG59O1xuXG5IbWFjRFJCRy5wcm90b3R5cGUucmVzZWVkID0gZnVuY3Rpb24gcmVzZWVkKGVudHJvcHksIGVudHJvcHlFbmMsIGFkZCwgYWRkRW5jKSB7XG4gIC8vIE9wdGlvbmFsIGVudHJvcHkgZW5jXG4gIGlmICh0eXBlb2YgZW50cm9weUVuYyAhPT0gJ3N0cmluZycpIHtcbiAgICBhZGRFbmMgPSBhZGQ7XG4gICAgYWRkID0gZW50cm9weUVuYztcbiAgICBlbnRyb3B5RW5jID0gbnVsbDtcbiAgfVxuXG4gIGVudHJvcHkgPSB1dGlscy50b0FycmF5KGVudHJvcHksIGVudHJvcHlFbmMpO1xuICBhZGQgPSB1dGlscy50b0FycmF5KGFkZCwgYWRkRW5jKTtcblxuICBhc3NlcnQoZW50cm9weS5sZW5ndGggPj0gKHRoaXMubWluRW50cm9weSAvIDgpLFxuICAgICAgICAgJ05vdCBlbm91Z2ggZW50cm9weS4gTWluaW11bSBpczogJyArIHRoaXMubWluRW50cm9weSArICcgYml0cycpO1xuXG4gIHRoaXMuX3VwZGF0ZShlbnRyb3B5LmNvbmNhdChhZGQgfHwgW10pKTtcbiAgdGhpcy5fcmVzZWVkID0gMTtcbn07XG5cbkhtYWNEUkJHLnByb3RvdHlwZS5nZW5lcmF0ZSA9IGZ1bmN0aW9uIGdlbmVyYXRlKGxlbiwgZW5jLCBhZGQsIGFkZEVuYykge1xuICBpZiAodGhpcy5fcmVzZWVkID4gdGhpcy5yZXNlZWRJbnRlcnZhbClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Jlc2VlZCBpcyByZXF1aXJlZCcpO1xuXG4gIC8vIE9wdGlvbmFsIGVuY29kaW5nXG4gIGlmICh0eXBlb2YgZW5jICE9PSAnc3RyaW5nJykge1xuICAgIGFkZEVuYyA9IGFkZDtcbiAgICBhZGQgPSBlbmM7XG4gICAgZW5jID0gbnVsbDtcbiAgfVxuXG4gIC8vIE9wdGlvbmFsIGFkZGl0aW9uYWwgZGF0YVxuICBpZiAoYWRkKSB7XG4gICAgYWRkID0gdXRpbHMudG9BcnJheShhZGQsIGFkZEVuYyB8fCAnaGV4Jyk7XG4gICAgdGhpcy5fdXBkYXRlKGFkZCk7XG4gIH1cblxuICB2YXIgdGVtcCA9IFtdO1xuICB3aGlsZSAodGVtcC5sZW5ndGggPCBsZW4pIHtcbiAgICB0aGlzLlYgPSB0aGlzLl9obWFjKCkudXBkYXRlKHRoaXMuVikuZGlnZXN0KCk7XG4gICAgdGVtcCA9IHRlbXAuY29uY2F0KHRoaXMuVik7XG4gIH1cblxuICB2YXIgcmVzID0gdGVtcC5zbGljZSgwLCBsZW4pO1xuICB0aGlzLl91cGRhdGUoYWRkKTtcbiAgdGhpcy5fcmVzZWVkKys7XG4gIHJldHVybiB1dGlscy5lbmNvZGUocmVzLCBlbmMpO1xufTtcbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiXG52YXIgaW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBvYmope1xuICBpZiAoaW5kZXhPZikgcmV0dXJuIGFyci5pbmRleE9mKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGFycltpXSA9PT0gb2JqKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59OyIsImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG5cbnZhciBBUlJBWTE2ID0gbmV3IEFycmF5KDE2KVxuXG5mdW5jdGlvbiBNRDUgKCkge1xuICBIYXNoQmFzZS5jYWxsKHRoaXMsIDY0KVxuXG4gIC8vIHN0YXRlXG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG59XG5cbmluaGVyaXRzKE1ENSwgSGFzaEJhc2UpXG5cbk1ENS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIE0gPSBBUlJBWTE2XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgTVtpXSA9IHRoaXMuX2Jsb2NrLnJlYWRJbnQzMkxFKGkgKiA0KVxuXG4gIHZhciBhID0gdGhpcy5fYVxuICB2YXIgYiA9IHRoaXMuX2JcbiAgdmFyIGMgPSB0aGlzLl9jXG4gIHZhciBkID0gdGhpcy5fZFxuXG4gIGEgPSBmbkYoYSwgYiwgYywgZCwgTVswXSwgMHhkNzZhYTQ3OCwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzFdLCAweGU4YzdiNzU2LCAxMilcbiAgYyA9IGZuRihjLCBkLCBhLCBiLCBNWzJdLCAweDI0MjA3MGRiLCAxNylcbiAgYiA9IGZuRihiLCBjLCBkLCBhLCBNWzNdLCAweGMxYmRjZWVlLCAyMilcbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzRdLCAweGY1N2MwZmFmLCA3KVxuICBkID0gZm5GKGQsIGEsIGIsIGMsIE1bNV0sIDB4NDc4N2M2MmEsIDEyKVxuICBjID0gZm5GKGMsIGQsIGEsIGIsIE1bNl0sIDB4YTgzMDQ2MTMsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bN10sIDB4ZmQ0Njk1MDEsIDIyKVxuICBhID0gZm5GKGEsIGIsIGMsIGQsIE1bOF0sIDB4Njk4MDk4ZDgsIDcpXG4gIGQgPSBmbkYoZCwgYSwgYiwgYywgTVs5XSwgMHg4YjQ0ZjdhZiwgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVsxMF0sIDB4ZmZmZjViYjEsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bMTFdLCAweDg5NWNkN2JlLCAyMilcbiAgYSA9IGZuRihhLCBiLCBjLCBkLCBNWzEyXSwgMHg2YjkwMTEyMiwgNylcbiAgZCA9IGZuRihkLCBhLCBiLCBjLCBNWzEzXSwgMHhmZDk4NzE5MywgMTIpXG4gIGMgPSBmbkYoYywgZCwgYSwgYiwgTVsxNF0sIDB4YTY3OTQzOGUsIDE3KVxuICBiID0gZm5GKGIsIGMsIGQsIGEsIE1bMTVdLCAweDQ5YjQwODIxLCAyMilcblxuICBhID0gZm5HKGEsIGIsIGMsIGQsIE1bMV0sIDB4ZjYxZTI1NjIsIDUpXG4gIGQgPSBmbkcoZCwgYSwgYiwgYywgTVs2XSwgMHhjMDQwYjM0MCwgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzExXSwgMHgyNjVlNWE1MSwgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVswXSwgMHhlOWI2YzdhYSwgMjApXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVs1XSwgMHhkNjJmMTA1ZCwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzEwXSwgMHgwMjQ0MTQ1MywgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzE1XSwgMHhkOGExZTY4MSwgMTQpXG4gIGIgPSBmbkcoYiwgYywgZCwgYSwgTVs0XSwgMHhlN2QzZmJjOCwgMjApXG4gIGEgPSBmbkcoYSwgYiwgYywgZCwgTVs5XSwgMHgyMWUxY2RlNiwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzE0XSwgMHhjMzM3MDdkNiwgOSlcbiAgYyA9IGZuRyhjLCBkLCBhLCBiLCBNWzNdLCAweGY0ZDUwZDg3LCAxNClcbiAgYiA9IGZuRyhiLCBjLCBkLCBhLCBNWzhdLCAweDQ1NWExNGVkLCAyMClcbiAgYSA9IGZuRyhhLCBiLCBjLCBkLCBNWzEzXSwgMHhhOWUzZTkwNSwgNSlcbiAgZCA9IGZuRyhkLCBhLCBiLCBjLCBNWzJdLCAweGZjZWZhM2Y4LCA5KVxuICBjID0gZm5HKGMsIGQsIGEsIGIsIE1bN10sIDB4Njc2ZjAyZDksIDE0KVxuICBiID0gZm5HKGIsIGMsIGQsIGEsIE1bMTJdLCAweDhkMmE0YzhhLCAyMClcblxuICBhID0gZm5IKGEsIGIsIGMsIGQsIE1bNV0sIDB4ZmZmYTM5NDIsIDQpXG4gIGQgPSBmbkgoZCwgYSwgYiwgYywgTVs4XSwgMHg4NzcxZjY4MSwgMTEpXG4gIGMgPSBmbkgoYywgZCwgYSwgYiwgTVsxMV0sIDB4NmQ5ZDYxMjIsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMTRdLCAweGZkZTUzODBjLCAyMylcbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzFdLCAweGE0YmVlYTQ0LCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bNF0sIDB4NGJkZWNmYTksIDExKVxuICBjID0gZm5IKGMsIGQsIGEsIGIsIE1bN10sIDB4ZjZiYjRiNjAsIDE2KVxuICBiID0gZm5IKGIsIGMsIGQsIGEsIE1bMTBdLCAweGJlYmZiYzcwLCAyMylcbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzEzXSwgMHgyODliN2VjNiwgNClcbiAgZCA9IGZuSChkLCBhLCBiLCBjLCBNWzBdLCAweGVhYTEyN2ZhLCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzNdLCAweGQ0ZWYzMDg1LCAxNilcbiAgYiA9IGZuSChiLCBjLCBkLCBhLCBNWzZdLCAweDA0ODgxZDA1LCAyMylcbiAgYSA9IGZuSChhLCBiLCBjLCBkLCBNWzldLCAweGQ5ZDRkMDM5LCA0KVxuICBkID0gZm5IKGQsIGEsIGIsIGMsIE1bMTJdLCAweGU2ZGI5OWU1LCAxMSlcbiAgYyA9IGZuSChjLCBkLCBhLCBiLCBNWzE1XSwgMHgxZmEyN2NmOCwgMTYpXG4gIGIgPSBmbkgoYiwgYywgZCwgYSwgTVsyXSwgMHhjNGFjNTY2NSwgMjMpXG5cbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzBdLCAweGY0MjkyMjQ0LCA2KVxuICBkID0gZm5JKGQsIGEsIGIsIGMsIE1bN10sIDB4NDMyYWZmOTcsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bMTRdLCAweGFiOTQyM2E3LCAxNSlcbiAgYiA9IGZuSShiLCBjLCBkLCBhLCBNWzVdLCAweGZjOTNhMDM5LCAyMSlcbiAgYSA9IGZuSShhLCBiLCBjLCBkLCBNWzEyXSwgMHg2NTViNTljMywgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzNdLCAweDhmMGNjYzkyLCAxMClcbiAgYyA9IGZuSShjLCBkLCBhLCBiLCBNWzEwXSwgMHhmZmVmZjQ3ZCwgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVsxXSwgMHg4NTg0NWRkMSwgMjEpXG4gIGEgPSBmbkkoYSwgYiwgYywgZCwgTVs4XSwgMHg2ZmE4N2U0ZiwgNilcbiAgZCA9IGZuSShkLCBhLCBiLCBjLCBNWzE1XSwgMHhmZTJjZTZlMCwgMTApXG4gIGMgPSBmbkkoYywgZCwgYSwgYiwgTVs2XSwgMHhhMzAxNDMxNCwgMTUpXG4gIGIgPSBmbkkoYiwgYywgZCwgYSwgTVsxM10sIDB4NGUwODExYTEsIDIxKVxuICBhID0gZm5JKGEsIGIsIGMsIGQsIE1bNF0sIDB4Zjc1MzdlODIsIDYpXG4gIGQgPSBmbkkoZCwgYSwgYiwgYywgTVsxMV0sIDB4YmQzYWYyMzUsIDEwKVxuICBjID0gZm5JKGMsIGQsIGEsIGIsIE1bMl0sIDB4MmFkN2QyYmIsIDE1KVxuICBiID0gZm5JKGIsIGMsIGQsIGEsIE1bOV0sIDB4ZWI4NmQzOTEsIDIxKVxuXG4gIHRoaXMuX2EgPSAodGhpcy5fYSArIGEpIHwgMFxuICB0aGlzLl9iID0gKHRoaXMuX2IgKyBiKSB8IDBcbiAgdGhpcy5fYyA9ICh0aGlzLl9jICsgYykgfCAwXG4gIHRoaXMuX2QgPSAodGhpcy5fZCArIGQpIHwgMFxufVxuXG5NRDUucHJvdG90eXBlLl9kaWdlc3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGNyZWF0ZSBwYWRkaW5nIGFuZCBoYW5kbGUgYmxvY2tzXG4gIHRoaXMuX2Jsb2NrW3RoaXMuX2Jsb2NrT2Zmc2V0KytdID0gMHg4MFxuICBpZiAodGhpcy5fYmxvY2tPZmZzZXQgPiA1Nikge1xuICAgIHRoaXMuX2Jsb2NrLmZpbGwoMCwgdGhpcy5fYmxvY2tPZmZzZXQsIDY0KVxuICAgIHRoaXMuX3VwZGF0ZSgpXG4gICAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIH1cblxuICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMF0sIDU2KVxuICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkxFKHRoaXMuX2xlbmd0aFsxXSwgNjApXG4gIHRoaXMuX3VwZGF0ZSgpXG5cbiAgLy8gcHJvZHVjZSByZXN1bHRcbiAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIoMTYpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYSwgMClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9iLCA0KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2MsIDgpXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fZCwgMTIpXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gcm90bCAoeCwgbikge1xuICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXG59XG5cbmZ1bmN0aW9uIGZuRiAoYSwgYiwgYywgZCwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgJiBjKSB8ICgofmIpICYgZCkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxuZnVuY3Rpb24gZm5HIChhLCBiLCBjLCBkLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGQpIHwgKGMgJiAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkggKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKGIgXiBjIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGIpIHwgMFxufVxuXG5mdW5jdGlvbiBmbkkgKGEsIGIsIGMsIGQsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChjIF4gKGIgfCAofmQpKSkpICsgbSArIGspIHwgMCwgcykgKyBiKSB8IDBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNRDVcbiIsIid1c2Ugc3RyaWN0J1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnc3RyZWFtJykuVHJhbnNmb3JtXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG5cbmZ1bmN0aW9uIHRocm93SWZOb3RTdHJpbmdPckJ1ZmZlciAodmFsLCBwcmVmaXgpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodmFsKSAmJiB0eXBlb2YgdmFsICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocHJlZml4ICsgJyBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgYnVmZmVyJylcbiAgfVxufVxuXG5mdW5jdGlvbiBIYXNoQmFzZSAoYmxvY2tTaXplKSB7XG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMpXG5cbiAgdGhpcy5fYmxvY2sgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYmxvY2tTaXplKVxuICB0aGlzLl9ibG9ja1NpemUgPSBibG9ja1NpemVcbiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIHRoaXMuX2xlbmd0aCA9IFswLCAwLCAwLCAwXVxuXG4gIHRoaXMuX2ZpbmFsaXplZCA9IGZhbHNlXG59XG5cbmluaGVyaXRzKEhhc2hCYXNlLCBUcmFuc2Zvcm0pXG5cbkhhc2hCYXNlLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgdmFyIGVycm9yID0gbnVsbFxuICB0cnkge1xuICAgIHRoaXMudXBkYXRlKGNodW5rLCBlbmNvZGluZylcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHZhciBlcnJvciA9IG51bGxcbiAgdHJ5IHtcbiAgICB0aGlzLnB1c2godGhpcy5kaWdlc3QoKSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGNhbGxiYWNrKGVycm9yKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEsIGVuY29kaW5nKSB7XG4gIHRocm93SWZOb3RTdHJpbmdPckJ1ZmZlcihkYXRhLCAnRGF0YScpXG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhLCBlbmNvZGluZylcblxuICAvLyBjb25zdW1lIGRhdGFcbiAgdmFyIGJsb2NrID0gdGhpcy5fYmxvY2tcbiAgdmFyIG9mZnNldCA9IDBcbiAgd2hpbGUgKHRoaXMuX2Jsb2NrT2Zmc2V0ICsgZGF0YS5sZW5ndGggLSBvZmZzZXQgPj0gdGhpcy5fYmxvY2tTaXplKSB7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMuX2Jsb2NrT2Zmc2V0OyBpIDwgdGhpcy5fYmxvY2tTaXplOykgYmxvY2tbaSsrXSA9IGRhdGFbb2Zmc2V0KytdXG4gICAgdGhpcy5fdXBkYXRlKClcbiAgICB0aGlzLl9ibG9ja09mZnNldCA9IDBcbiAgfVxuICB3aGlsZSAob2Zmc2V0IDwgZGF0YS5sZW5ndGgpIGJsb2NrW3RoaXMuX2Jsb2NrT2Zmc2V0KytdID0gZGF0YVtvZmZzZXQrK11cblxuICAvLyB1cGRhdGUgbGVuZ3RoXG4gIGZvciAodmFyIGogPSAwLCBjYXJyeSA9IGRhdGEubGVuZ3RoICogODsgY2FycnkgPiAwOyArK2opIHtcbiAgICB0aGlzLl9sZW5ndGhbal0gKz0gY2FycnlcbiAgICBjYXJyeSA9ICh0aGlzLl9sZW5ndGhbal0gLyAweDAxMDAwMDAwMDApIHwgMFxuICAgIGlmIChjYXJyeSA+IDApIHRoaXMuX2xlbmd0aFtqXSAtPSAweDAxMDAwMDAwMDAgKiBjYXJyeVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuSGFzaEJhc2UucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3VwZGF0ZSBpcyBub3QgaW1wbGVtZW50ZWQnKVxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGlmICh0aGlzLl9maW5hbGl6ZWQpIHRocm93IG5ldyBFcnJvcignRGlnZXN0IGFscmVhZHkgY2FsbGVkJylcbiAgdGhpcy5fZmluYWxpemVkID0gdHJ1ZVxuXG4gIHZhciBkaWdlc3QgPSB0aGlzLl9kaWdlc3QoKVxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkgZGlnZXN0ID0gZGlnZXN0LnRvU3RyaW5nKGVuY29kaW5nKVxuXG4gIC8vIHJlc2V0IHN0YXRlXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMClcbiAgdGhpcy5fYmxvY2tPZmZzZXQgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB0aGlzLl9sZW5ndGhbaV0gPSAwXG5cbiAgcmV0dXJuIGRpZ2VzdFxufVxuXG5IYXNoQmFzZS5wcm90b3R5cGUuX2RpZ2VzdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfZGlnZXN0IGlzIG5vdCBpbXBsZW1lbnRlZCcpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaEJhc2VcbiIsInZhciBibiA9IHJlcXVpcmUoJ2JuLmpzJyk7XG52YXIgYnJvcmFuZCA9IHJlcXVpcmUoJ2Jyb3JhbmQnKTtcblxuZnVuY3Rpb24gTWlsbGVyUmFiaW4ocmFuZCkge1xuICB0aGlzLnJhbmQgPSByYW5kIHx8IG5ldyBicm9yYW5kLlJhbmQoKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gTWlsbGVyUmFiaW47XG5cbk1pbGxlclJhYmluLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShyYW5kKSB7XG4gIHJldHVybiBuZXcgTWlsbGVyUmFiaW4ocmFuZCk7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUuX3JhbmRiZWxvdyA9IGZ1bmN0aW9uIF9yYW5kYmVsb3cobikge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIG1pbl9ieXRlcyA9IE1hdGguY2VpbChsZW4gLyA4KTtcblxuICAvLyBHZW5lcmFnZSByYW5kb20gYnl0ZXMgdW50aWwgYSBudW1iZXIgbGVzcyB0aGFuIG4gaXMgZm91bmQuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IDAuLm4tMSBoYXZlIGFuIGVxdWFsIHByb2JhYmlsaXR5IG9mIGJlaW5nIHNlbGVjdGVkLlxuICBkb1xuICAgIHZhciBhID0gbmV3IGJuKHRoaXMucmFuZC5nZW5lcmF0ZShtaW5fYnl0ZXMpKTtcbiAgd2hpbGUgKGEuY21wKG4pID49IDApO1xuXG4gIHJldHVybiBhO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLl9yYW5kcmFuZ2UgPSBmdW5jdGlvbiBfcmFuZHJhbmdlKHN0YXJ0LCBzdG9wKSB7XG4gIC8vIEdlbmVyYXRlIGEgcmFuZG9tIG51bWJlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gc3RhcnQgYW5kIGxlc3MgdGhhbiBzdG9wLlxuICB2YXIgc2l6ZSA9IHN0b3Auc3ViKHN0YXJ0KTtcbiAgcmV0dXJuIHN0YXJ0LmFkZCh0aGlzLl9yYW5kYmVsb3coc2l6ZSkpO1xufTtcblxuTWlsbGVyUmFiaW4ucHJvdG90eXBlLnRlc3QgPSBmdW5jdGlvbiB0ZXN0KG4sIGssIGNiKSB7XG4gIHZhciBsZW4gPSBuLmJpdExlbmd0aCgpO1xuICB2YXIgcmVkID0gYm4ubW9udChuKTtcbiAgdmFyIHJvbmUgPSBuZXcgYm4oMSkudG9SZWQocmVkKTtcblxuICBpZiAoIWspXG4gICAgayA9IE1hdGgubWF4KDEsIChsZW4gLyA0OCkgfCAwKTtcblxuICAvLyBGaW5kIGQgYW5kIHMsIChuIC0gMSkgPSAoMiBeIHMpICogZDtcbiAgdmFyIG4xID0gbi5zdWJuKDEpO1xuICBmb3IgKHZhciBzID0gMDsgIW4xLnRlc3RuKHMpOyBzKyspIHt9XG4gIHZhciBkID0gbi5zaHJuKHMpO1xuXG4gIHZhciBybjEgPSBuMS50b1JlZChyZWQpO1xuXG4gIHZhciBwcmltZSA9IHRydWU7XG4gIGZvciAoOyBrID4gMDsgay0tKSB7XG4gICAgdmFyIGEgPSB0aGlzLl9yYW5kcmFuZ2UobmV3IGJuKDIpLCBuMSk7XG4gICAgaWYgKGNiKVxuICAgICAgY2IoYSk7XG5cbiAgICB2YXIgeCA9IGEudG9SZWQocmVkKS5yZWRQb3coZCk7XG4gICAgaWYgKHguY21wKHJvbmUpID09PSAwIHx8IHguY21wKHJuMSkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgczsgaSsrKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcblxuICAgICAgaWYgKHguY21wKHJvbmUpID09PSAwKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoeC5jbXAocm4xKSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IHMpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gcHJpbWU7XG59O1xuXG5NaWxsZXJSYWJpbi5wcm90b3R5cGUuZ2V0RGl2aXNvciA9IGZ1bmN0aW9uIGdldERpdmlzb3Iobiwgaykge1xuICB2YXIgbGVuID0gbi5iaXRMZW5ndGgoKTtcbiAgdmFyIHJlZCA9IGJuLm1vbnQobik7XG4gIHZhciByb25lID0gbmV3IGJuKDEpLnRvUmVkKHJlZCk7XG5cbiAgaWYgKCFrKVxuICAgIGsgPSBNYXRoLm1heCgxLCAobGVuIC8gNDgpIHwgMCk7XG5cbiAgLy8gRmluZCBkIGFuZCBzLCAobiAtIDEpID0gKDIgXiBzKSAqIGQ7XG4gIHZhciBuMSA9IG4uc3VibigxKTtcbiAgZm9yICh2YXIgcyA9IDA7ICFuMS50ZXN0bihzKTsgcysrKSB7fVxuICB2YXIgZCA9IG4uc2hybihzKTtcblxuICB2YXIgcm4xID0gbjEudG9SZWQocmVkKTtcblxuICBmb3IgKDsgayA+IDA7IGstLSkge1xuICAgIHZhciBhID0gdGhpcy5fcmFuZHJhbmdlKG5ldyBibigyKSwgbjEpO1xuXG4gICAgdmFyIGcgPSBuLmdjZChhKTtcbiAgICBpZiAoZy5jbXBuKDEpICE9PSAwKVxuICAgICAgcmV0dXJuIGc7XG5cbiAgICB2YXIgeCA9IGEudG9SZWQocmVkKS5yZWRQb3coZCk7XG4gICAgaWYgKHguY21wKHJvbmUpID09PSAwIHx8IHguY21wKHJuMSkgPT09IDApXG4gICAgICBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgczsgaSsrKSB7XG4gICAgICB4ID0geC5yZWRTcXIoKTtcblxuICAgICAgaWYgKHguY21wKHJvbmUpID09PSAwKVxuICAgICAgICByZXR1cm4geC5mcm9tUmVkKCkuc3VibigxKS5nY2Qobik7XG4gICAgICBpZiAoeC5jbXAocm4xKSA9PT0gMClcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IHMpIHtcbiAgICAgIHggPSB4LnJlZFNxcigpO1xuICAgICAgcmV0dXJuIHguZnJvbVJlZCgpLnN1Ym4oMSkuZ2NkKG4pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGFzc2VydDtcblxuZnVuY3Rpb24gYXNzZXJ0KHZhbCwgbXNnKSB7XG4gIGlmICghdmFsKVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbn1cblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gYXNzZXJ0RXF1YWwobCwgciwgbXNnKSB7XG4gIGlmIChsICE9IHIpXG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAoJ0Fzc2VydGlvbiBmYWlsZWQ6ICcgKyBsICsgJyAhPSAnICsgcikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gZXhwb3J0cztcblxuZnVuY3Rpb24gdG9BcnJheShtc2csIGVuYykge1xuICBpZiAoQXJyYXkuaXNBcnJheShtc2cpKVxuICAgIHJldHVybiBtc2cuc2xpY2UoKTtcbiAgaWYgKCFtc2cpXG4gICAgcmV0dXJuIFtdO1xuICB2YXIgcmVzID0gW107XG4gIGlmICh0eXBlb2YgbXNnICE9PSAnc3RyaW5nJykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKVxuICAgICAgcmVzW2ldID0gbXNnW2ldIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGlmIChlbmMgPT09ICdoZXgnKSB7XG4gICAgbXNnID0gbXNnLnJlcGxhY2UoL1teYS16MC05XSsvaWcsICcnKTtcbiAgICBpZiAobXNnLmxlbmd0aCAlIDIgIT09IDApXG4gICAgICBtc2cgPSAnMCcgKyBtc2c7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpICs9IDIpXG4gICAgICByZXMucHVzaChwYXJzZUludChtc2dbaV0gKyBtc2dbaSArIDFdLCAxNikpO1xuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgdmFyIGhpID0gYyA+PiA4O1xuICAgICAgdmFyIGxvID0gYyAmIDB4ZmY7XG4gICAgICBpZiAoaGkpXG4gICAgICAgIHJlcy5wdXNoKGhpLCBsbyk7XG4gICAgICBlbHNlXG4gICAgICAgIHJlcy5wdXNoKGxvKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbnV0aWxzLnRvQXJyYXkgPSB0b0FycmF5O1xuXG5mdW5jdGlvbiB6ZXJvMih3b3JkKSB7XG4gIGlmICh3b3JkLmxlbmd0aCA9PT0gMSlcbiAgICByZXR1cm4gJzAnICsgd29yZDtcbiAgZWxzZVxuICAgIHJldHVybiB3b3JkO1xufVxudXRpbHMuemVybzIgPSB6ZXJvMjtcblxuZnVuY3Rpb24gdG9IZXgobXNnKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspXG4gICAgcmVzICs9IHplcm8yKG1zZ1tpXS50b1N0cmluZygxNikpO1xuICByZXR1cm4gcmVzO1xufVxudXRpbHMudG9IZXggPSB0b0hleDtcblxudXRpbHMuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKGFyciwgZW5jKSB7XG4gIGlmIChlbmMgPT09ICdoZXgnKVxuICAgIHJldHVybiB0b0hleChhcnIpO1xuICBlbHNlXG4gICAgcmV0dXJuIGFycjtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cz17XCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS4xXCI6IFwiYWVzLTEyOC1lY2JcIixcblwiMi4xNi44NDAuMS4xMDEuMy40LjEuMlwiOiBcImFlcy0xMjgtY2JjXCIsXG5cIjIuMTYuODQwLjEuMTAxLjMuNC4xLjNcIjogXCJhZXMtMTI4LW9mYlwiLFxuXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS40XCI6IFwiYWVzLTEyOC1jZmJcIixcblwiMi4xNi44NDAuMS4xMDEuMy40LjEuMjFcIjogXCJhZXMtMTkyLWVjYlwiLFxuXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS4yMlwiOiBcImFlcy0xOTItY2JjXCIsXG5cIjIuMTYuODQwLjEuMTAxLjMuNC4xLjIzXCI6IFwiYWVzLTE5Mi1vZmJcIixcblwiMi4xNi44NDAuMS4xMDEuMy40LjEuMjRcIjogXCJhZXMtMTkyLWNmYlwiLFxuXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS40MVwiOiBcImFlcy0yNTYtZWNiXCIsXG5cIjIuMTYuODQwLjEuMTAxLjMuNC4xLjQyXCI6IFwiYWVzLTI1Ni1jYmNcIixcblwiMi4xNi44NDAuMS4xMDEuMy40LjEuNDNcIjogXCJhZXMtMjU2LW9mYlwiLFxuXCIyLjE2Ljg0MC4xLjEwMS4zLjQuMS40NFwiOiBcImFlcy0yNTYtY2ZiXCJcbn0iLCIvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L3NlbGYtc2lnbmVkL2Jsb2IvZ2gtcGFnZXMvbGliL2FzbjEuanNcbi8vIEZlZG9yLCB5b3UgYXJlIGFtYXppbmcuXG4ndXNlIHN0cmljdCdcblxudmFyIGFzbjEgPSByZXF1aXJlKCdhc24xLmpzJylcblxuZXhwb3J0cy5jZXJ0aWZpY2F0ZSA9IHJlcXVpcmUoJy4vY2VydGlmaWNhdGUnKVxuXG52YXIgUlNBUHJpdmF0ZUtleSA9IGFzbjEuZGVmaW5lKCdSU0FQcml2YXRlS2V5JywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmludCgpLFxuICAgIHRoaXMua2V5KCdtb2R1bHVzJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1YmxpY0V4cG9uZW50JykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3ByaXZhdGVFeHBvbmVudCcpLmludCgpLFxuICAgIHRoaXMua2V5KCdwcmltZTEnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpbWUyJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2V4cG9uZW50MScpLmludCgpLFxuICAgIHRoaXMua2V5KCdleHBvbmVudDInKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnY29lZmZpY2llbnQnKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5SU0FQcml2YXRlS2V5ID0gUlNBUHJpdmF0ZUtleVxuXG52YXIgUlNBUHVibGljS2V5ID0gYXNuMS5kZWZpbmUoJ1JTQVB1YmxpY0tleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ21vZHVsdXMnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHVibGljRXhwb25lbnQnKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5SU0FQdWJsaWNLZXkgPSBSU0FQdWJsaWNLZXlcblxudmFyIFB1YmxpY0tleSA9IGFzbjEuZGVmaW5lKCdTdWJqZWN0UHVibGljS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleScpLmJpdHN0cigpXG4gIClcbn0pXG5leHBvcnRzLlB1YmxpY0tleSA9IFB1YmxpY0tleVxuXG52YXIgQWxnb3JpdGhtSWRlbnRpZmllciA9IGFzbjEuZGVmaW5lKCdBbGdvcml0aG1JZGVudGlmaWVyJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykub2JqaWQoKSxcbiAgICB0aGlzLmtleSgnbm9uZScpLm51bGxfKCkub3B0aW9uYWwoKSxcbiAgICB0aGlzLmtleSgnY3VydmUnKS5vYmppZCgpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ3BhcmFtcycpLnNlcSgpLm9iaihcbiAgICAgIHRoaXMua2V5KCdwJykuaW50KCksXG4gICAgICB0aGlzLmtleSgncScpLmludCgpLFxuICAgICAgdGhpcy5rZXkoJ2cnKS5pbnQoKVxuICAgICkub3B0aW9uYWwoKVxuICApXG59KVxuXG52YXIgUHJpdmF0ZUtleUluZm8gPSBhc24xLmRlZmluZSgnUHJpdmF0ZUtleUluZm8nLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnVzZShBbGdvcml0aG1JZGVudGlmaWVyKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFByaXZhdGVLZXknKS5vY3RzdHIoKVxuICApXG59KVxuZXhwb3J0cy5Qcml2YXRlS2V5ID0gUHJpdmF0ZUtleUluZm9cbnZhciBFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbyA9IGFzbjEuZGVmaW5lKCdFbmNyeXB0ZWRQcml2YXRlS2V5SW5mbycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLnNlcSgpLm9iaihcbiAgICAgIHRoaXMua2V5KCdpZCcpLm9iamlkKCksXG4gICAgICB0aGlzLmtleSgnZGVjcnlwdCcpLnNlcSgpLm9iaihcbiAgICAgICAgdGhpcy5rZXkoJ2tkZScpLnNlcSgpLm9iaihcbiAgICAgICAgICB0aGlzLmtleSgnaWQnKS5vYmppZCgpLFxuICAgICAgICAgIHRoaXMua2V5KCdrZGVwYXJhbXMnKS5zZXEoKS5vYmooXG4gICAgICAgICAgICB0aGlzLmtleSgnc2FsdCcpLm9jdHN0cigpLFxuICAgICAgICAgICAgdGhpcy5rZXkoJ2l0ZXJzJykuaW50KClcbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIHRoaXMua2V5KCdjaXBoZXInKS5zZXEoKS5vYmooXG4gICAgICAgICAgdGhpcy5rZXkoJ2FsZ28nKS5vYmppZCgpLFxuICAgICAgICAgIHRoaXMua2V5KCdpdicpLm9jdHN0cigpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHJpdmF0ZUtleScpLm9jdHN0cigpXG4gIClcbn0pXG5cbmV4cG9ydHMuRW5jcnlwdGVkUHJpdmF0ZUtleSA9IEVuY3J5cHRlZFByaXZhdGVLZXlJbmZvXG5cbnZhciBEU0FQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ0RTQVByaXZhdGVLZXknLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuc2VxKCkub2JqKFxuICAgIHRoaXMua2V5KCd2ZXJzaW9uJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3AnKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncScpLmludCgpLFxuICAgIHRoaXMua2V5KCdnJykuaW50KCksXG4gICAgdGhpcy5rZXkoJ3B1Yl9rZXknKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdl9rZXknKS5pbnQoKVxuICApXG59KVxuZXhwb3J0cy5EU0FQcml2YXRlS2V5ID0gRFNBUHJpdmF0ZUtleVxuXG5leHBvcnRzLkRTQXBhcmFtID0gYXNuMS5kZWZpbmUoJ0RTQXBhcmFtJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLmludCgpXG59KVxuXG52YXIgRUNQcml2YXRlS2V5ID0gYXNuMS5kZWZpbmUoJ0VDUHJpdmF0ZUtleScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3ZlcnNpb24nKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncHJpdmF0ZUtleScpLm9jdHN0cigpLFxuICAgIHRoaXMua2V5KCdwYXJhbWV0ZXJzJykub3B0aW9uYWwoKS5leHBsaWNpdCgwKS51c2UoRUNQYXJhbWV0ZXJzKSxcbiAgICB0aGlzLmtleSgncHVibGljS2V5Jykub3B0aW9uYWwoKS5leHBsaWNpdCgxKS5iaXRzdHIoKVxuICApXG59KVxuZXhwb3J0cy5FQ1ByaXZhdGVLZXkgPSBFQ1ByaXZhdGVLZXlcblxudmFyIEVDUGFyYW1ldGVycyA9IGFzbjEuZGVmaW5lKCdFQ1BhcmFtZXRlcnMnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICBuYW1lZEN1cnZlOiB0aGlzLm9iamlkKClcbiAgfSlcbn0pXG5cbmV4cG9ydHMuc2lnbmF0dXJlID0gYXNuMS5kZWZpbmUoJ3NpZ25hdHVyZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3InKS5pbnQoKSxcbiAgICB0aGlzLmtleSgncycpLmludCgpXG4gIClcbn0pXG4iLCIvLyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9SYW50YW5lbi9ub2RlLWR0bHMvYmxvYi8yNWE3ZGM4NjFiZGEzOGNmZWFjOTNhNzIzNTAwZWVhNGYwYWMyZTg2L0NlcnRpZmljYXRlLmpzXG4vLyB0aGFua3MgdG8gQFJhbnRhbmVuXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYXNuID0gcmVxdWlyZSgnYXNuMS5qcycpXG5cbnZhciBUaW1lID0gYXNuLmRlZmluZSgnVGltZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5jaG9pY2Uoe1xuICAgIHV0Y1RpbWU6IHRoaXMudXRjdGltZSgpLFxuICAgIGdlbmVyYWxUaW1lOiB0aGlzLmdlbnRpbWUoKVxuICB9KVxufSlcblxudmFyIEF0dHJpYnV0ZVR5cGVWYWx1ZSA9IGFzbi5kZWZpbmUoJ0F0dHJpYnV0ZVR5cGVWYWx1ZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3R5cGUnKS5vYmppZCgpLFxuICAgIHRoaXMua2V5KCd2YWx1ZScpLmFueSgpXG4gIClcbn0pXG5cbnZhciBBbGdvcml0aG1JZGVudGlmaWVyID0gYXNuLmRlZmluZSgnQWxnb3JpdGhtSWRlbnRpZmllcicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2FsZ29yaXRobScpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ3BhcmFtZXRlcnMnKS5vcHRpb25hbCgpXG4gIClcbn0pXG5cbnZhciBTdWJqZWN0UHVibGljS2V5SW5mbyA9IGFzbi5kZWZpbmUoJ1N1YmplY3RQdWJsaWNLZXlJbmZvJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgnYWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzdWJqZWN0UHVibGljS2V5JykuYml0c3RyKClcbiAgKVxufSlcblxudmFyIFJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUgPSBhc24uZGVmaW5lKCdSZWxhdGl2ZURpc3Rpbmd1aXNoZWROYW1lJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNldG9mKEF0dHJpYnV0ZVR5cGVWYWx1ZSlcbn0pXG5cbnZhciBSRE5TZXF1ZW5jZSA9IGFzbi5kZWZpbmUoJ1JETlNlcXVlbmNlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcW9mKFJlbGF0aXZlRGlzdGluZ3Vpc2hlZE5hbWUpXG59KVxuXG52YXIgTmFtZSA9IGFzbi5kZWZpbmUoJ05hbWUnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2hvaWNlKHtcbiAgICByZG5TZXF1ZW5jZTogdGhpcy51c2UoUkROU2VxdWVuY2UpXG4gIH0pXG59KVxuXG52YXIgVmFsaWRpdHkgPSBhc24uZGVmaW5lKCdWYWxpZGl0eScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ25vdEJlZm9yZScpLnVzZShUaW1lKSxcbiAgICB0aGlzLmtleSgnbm90QWZ0ZXInKS51c2UoVGltZSlcbiAgKVxufSlcblxudmFyIEV4dGVuc2lvbiA9IGFzbi5kZWZpbmUoJ0V4dGVuc2lvbicsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ2V4dG5JRCcpLm9iamlkKCksXG4gICAgdGhpcy5rZXkoJ2NyaXRpY2FsJykuYm9vbCgpLmRlZihmYWxzZSksXG4gICAgdGhpcy5rZXkoJ2V4dG5WYWx1ZScpLm9jdHN0cigpXG4gIClcbn0pXG5cbnZhciBUQlNDZXJ0aWZpY2F0ZSA9IGFzbi5kZWZpbmUoJ1RCU0NlcnRpZmljYXRlJywgZnVuY3Rpb24gKCkge1xuICB0aGlzLnNlcSgpLm9iaihcbiAgICB0aGlzLmtleSgndmVyc2lvbicpLmV4cGxpY2l0KDApLmludCgpLFxuICAgIHRoaXMua2V5KCdzZXJpYWxOdW1iZXInKS5pbnQoKSxcbiAgICB0aGlzLmtleSgnc2lnbmF0dXJlJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdpc3N1ZXInKS51c2UoTmFtZSksXG4gICAgdGhpcy5rZXkoJ3ZhbGlkaXR5JykudXNlKFZhbGlkaXR5KSxcbiAgICB0aGlzLmtleSgnc3ViamVjdCcpLnVzZShOYW1lKSxcbiAgICB0aGlzLmtleSgnc3ViamVjdFB1YmxpY0tleUluZm8nKS51c2UoU3ViamVjdFB1YmxpY0tleUluZm8pLFxuICAgIHRoaXMua2V5KCdpc3N1ZXJVbmlxdWVJRCcpLmltcGxpY2l0KDEpLmJpdHN0cigpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ3N1YmplY3RVbmlxdWVJRCcpLmltcGxpY2l0KDIpLmJpdHN0cigpLm9wdGlvbmFsKCksXG4gICAgdGhpcy5rZXkoJ2V4dGVuc2lvbnMnKS5leHBsaWNpdCgzKS5zZXFvZihFeHRlbnNpb24pLm9wdGlvbmFsKClcbiAgKVxufSlcblxudmFyIFg1MDlDZXJ0aWZpY2F0ZSA9IGFzbi5kZWZpbmUoJ1g1MDlDZXJ0aWZpY2F0ZScsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5zZXEoKS5vYmooXG4gICAgdGhpcy5rZXkoJ3Ric0NlcnRpZmljYXRlJykudXNlKFRCU0NlcnRpZmljYXRlKSxcbiAgICB0aGlzLmtleSgnc2lnbmF0dXJlQWxnb3JpdGhtJykudXNlKEFsZ29yaXRobUlkZW50aWZpZXIpLFxuICAgIHRoaXMua2V5KCdzaWduYXR1cmVWYWx1ZScpLmJpdHN0cigpXG4gIClcbn0pXG5cbm1vZHVsZS5leHBvcnRzID0gWDUwOUNlcnRpZmljYXRlXG4iLCIvLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FwYXRpbC9wZW1zdHJpcFxudmFyIGZpbmRQcm9jID0gL1Byb2MtVHlwZTogNCxFTkNSWVBURURcXG5cXHI/REVLLUluZm86IEFFUy0oKD86MTI4KXwoPzoxOTIpfCg/OjI1NikpLUNCQywoWzAtOUEtSF0rKVxcblxccj9cXG5cXHI/KFswLTlBLXpcXG5cXHJcXCtcXC9cXD1dKylcXG5cXHI/L21cbnZhciBzdGFydFJlZ2V4ID0gL14tLS0tLUJFR0lOICgoPzouKiBLRVkpfENFUlRJRklDQVRFKS0tLS0tXFxuL21cbnZhciBmdWxsUmVnZXggPSAvXi0tLS0tQkVHSU4gKCg/Oi4qIEtFWSl8Q0VSVElGSUNBVEUpLS0tLS1cXG5cXHI/KFswLTlBLXpcXG5cXHJcXCtcXC9cXD1dKylcXG5cXHI/LS0tLS1FTkQgXFwxLS0tLS0kL21cbnZhciBldnAgPSByZXF1aXJlKCdldnBfYnl0ZXN0b2tleScpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9rZXksIHBhc3N3b3JkKSB7XG4gIHZhciBrZXkgPSBva2V5LnRvU3RyaW5nKClcbiAgdmFyIG1hdGNoID0ga2V5Lm1hdGNoKGZpbmRQcm9jKVxuICB2YXIgZGVjcnlwdGVkXG4gIGlmICghbWF0Y2gpIHtcbiAgICB2YXIgbWF0Y2gyID0ga2V5Lm1hdGNoKGZ1bGxSZWdleClcbiAgICBkZWNyeXB0ZWQgPSBuZXcgQnVmZmVyKG1hdGNoMlsyXS5yZXBsYWNlKC9cXHI/XFxuL2csICcnKSwgJ2Jhc2U2NCcpXG4gIH0gZWxzZSB7XG4gICAgdmFyIHN1aXRlID0gJ2FlcycgKyBtYXRjaFsxXVxuICAgIHZhciBpdiA9IG5ldyBCdWZmZXIobWF0Y2hbMl0sICdoZXgnKVxuICAgIHZhciBjaXBoZXJUZXh0ID0gbmV3IEJ1ZmZlcihtYXRjaFszXS5yZXBsYWNlKC9cXHI/XFxuL2csICcnKSwgJ2Jhc2U2NCcpXG4gICAgdmFyIGNpcGhlcktleSA9IGV2cChwYXNzd29yZCwgaXYuc2xpY2UoMCwgOCksIHBhcnNlSW50KG1hdGNoWzFdLCAxMCkpLmtleVxuICAgIHZhciBvdXQgPSBbXVxuICAgIHZhciBjaXBoZXIgPSBjaXBoZXJzLmNyZWF0ZURlY2lwaGVyaXYoc3VpdGUsIGNpcGhlcktleSwgaXYpXG4gICAgb3V0LnB1c2goY2lwaGVyLnVwZGF0ZShjaXBoZXJUZXh0KSlcbiAgICBvdXQucHVzaChjaXBoZXIuZmluYWwoKSlcbiAgICBkZWNyeXB0ZWQgPSBCdWZmZXIuY29uY2F0KG91dClcbiAgfVxuICB2YXIgdGFnID0ga2V5Lm1hdGNoKHN0YXJ0UmVnZXgpWzFdXG4gIHJldHVybiB7XG4gICAgdGFnOiB0YWcsXG4gICAgZGF0YTogZGVjcnlwdGVkXG4gIH1cbn1cbiIsInZhciBhc24xID0gcmVxdWlyZSgnLi9hc24xJylcbnZhciBhZXNpZCA9IHJlcXVpcmUoJy4vYWVzaWQuanNvbicpXG52YXIgZml4UHJvYyA9IHJlcXVpcmUoJy4vZml4UHJvYycpXG52YXIgY2lwaGVycyA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktYWVzJylcbnZhciBjb21wYXQgPSByZXF1aXJlKCdwYmtkZjInKVxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZUtleXNcblxuZnVuY3Rpb24gcGFyc2VLZXlzIChidWZmZXIpIHtcbiAgdmFyIHBhc3N3b3JkXG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnb2JqZWN0JyAmJiAhQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcikpIHtcbiAgICBwYXNzd29yZCA9IGJ1ZmZlci5wYXNzcGhyYXNlXG4gICAgYnVmZmVyID0gYnVmZmVyLmtleVxuICB9XG4gIGlmICh0eXBlb2YgYnVmZmVyID09PSAnc3RyaW5nJykge1xuICAgIGJ1ZmZlciA9IG5ldyBCdWZmZXIoYnVmZmVyKVxuICB9XG5cbiAgdmFyIHN0cmlwcGVkID0gZml4UHJvYyhidWZmZXIsIHBhc3N3b3JkKVxuXG4gIHZhciB0eXBlID0gc3RyaXBwZWQudGFnXG4gIHZhciBkYXRhID0gc3RyaXBwZWQuZGF0YVxuICB2YXIgc3VidHlwZSwgbmRhdGFcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnQ0VSVElGSUNBVEUnOlxuICAgICAgbmRhdGEgPSBhc24xLmNlcnRpZmljYXRlLmRlY29kZShkYXRhLCAnZGVyJykudGJzQ2VydGlmaWNhdGUuc3ViamVjdFB1YmxpY0tleUluZm9cbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICBjYXNlICdQVUJMSUMgS0VZJzpcbiAgICAgIGlmICghbmRhdGEpIHtcbiAgICAgICAgbmRhdGEgPSBhc24xLlB1YmxpY0tleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICB9XG4gICAgICBzdWJ0eXBlID0gbmRhdGEuYWxnb3JpdGhtLmFsZ29yaXRobS5qb2luKCcuJylcbiAgICAgIHN3aXRjaCAoc3VidHlwZSkge1xuICAgICAgICBjYXNlICcxLjIuODQwLjExMzU0OS4xLjEuMSc6XG4gICAgICAgICAgcmV0dXJuIGFzbjEuUlNBUHVibGljS2V5LmRlY29kZShuZGF0YS5zdWJqZWN0UHVibGljS2V5LmRhdGEsICdkZXInKVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQ1LjIuMSc6XG4gICAgICAgICAgbmRhdGEuc3ViamVjdFByaXZhdGVLZXkgPSBuZGF0YS5zdWJqZWN0UHVibGljS2V5XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdlYycsXG4gICAgICAgICAgICBkYXRhOiBuZGF0YVxuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSAnMS4yLjg0MC4xMDA0MC40LjEnOlxuICAgICAgICAgIG5kYXRhLmFsZ29yaXRobS5wYXJhbXMucHViX2tleSA9IGFzbjEuRFNBcGFyYW0uZGVjb2RlKG5kYXRhLnN1YmplY3RQdWJsaWNLZXkuZGF0YSwgJ2RlcicpXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICAgICAgZGF0YTogbmRhdGEuYWxnb3JpdGhtLnBhcmFtc1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGtleSBpZCAnICsgc3VidHlwZSlcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgICBjYXNlICdFTkNSWVBURUQgUFJJVkFURSBLRVknOlxuICAgICAgZGF0YSA9IGFzbjEuRW5jcnlwdGVkUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICBkYXRhID0gZGVjcnlwdChkYXRhLCBwYXNzd29yZClcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICBjYXNlICdQUklWQVRFIEtFWSc6XG4gICAgICBuZGF0YSA9IGFzbjEuUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICBzdWJ0eXBlID0gbmRhdGEuYWxnb3JpdGhtLmFsZ29yaXRobS5qb2luKCcuJylcbiAgICAgIHN3aXRjaCAoc3VidHlwZSkge1xuICAgICAgICBjYXNlICcxLjIuODQwLjExMzU0OS4xLjEuMSc6XG4gICAgICAgICAgcmV0dXJuIGFzbjEuUlNBUHJpdmF0ZUtleS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQ1LjIuMSc6XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGN1cnZlOiBuZGF0YS5hbGdvcml0aG0uY3VydmUsXG4gICAgICAgICAgICBwcml2YXRlS2V5OiBhc24xLkVDUHJpdmF0ZUtleS5kZWNvZGUobmRhdGEuc3ViamVjdFByaXZhdGVLZXksICdkZXInKS5wcml2YXRlS2V5XG4gICAgICAgICAgfVxuICAgICAgICBjYXNlICcxLjIuODQwLjEwMDQwLjQuMSc6XG4gICAgICAgICAgbmRhdGEuYWxnb3JpdGhtLnBhcmFtcy5wcml2X2tleSA9IGFzbjEuRFNBcGFyYW0uZGVjb2RlKG5kYXRhLnN1YmplY3RQcml2YXRlS2V5LCAnZGVyJylcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2RzYScsXG4gICAgICAgICAgICBwYXJhbXM6IG5kYXRhLmFsZ29yaXRobS5wYXJhbXNcbiAgICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgaWQgJyArIHN1YnR5cGUpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24ga2V5IHR5cGUgJyArIHR5cGUpXG4gICAgY2FzZSAnUlNBIFBVQkxJQyBLRVknOlxuICAgICAgcmV0dXJuIGFzbjEuUlNBUHVibGljS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICBjYXNlICdSU0EgUFJJVkFURSBLRVknOlxuICAgICAgcmV0dXJuIGFzbjEuUlNBUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgY2FzZSAnRFNBIFBSSVZBVEUgS0VZJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdkc2EnLFxuICAgICAgICBwYXJhbXM6IGFzbjEuRFNBUHJpdmF0ZUtleS5kZWNvZGUoZGF0YSwgJ2RlcicpXG4gICAgICB9XG4gICAgY2FzZSAnRUMgUFJJVkFURSBLRVknOlxuICAgICAgZGF0YSA9IGFzbjEuRUNQcml2YXRlS2V5LmRlY29kZShkYXRhLCAnZGVyJylcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGN1cnZlOiBkYXRhLnBhcmFtZXRlcnMudmFsdWUsXG4gICAgICAgIHByaXZhdGVLZXk6IGRhdGEucHJpdmF0ZUtleVxuICAgICAgfVxuICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcigndW5rbm93biBrZXkgdHlwZSAnICsgdHlwZSlcbiAgfVxufVxucGFyc2VLZXlzLnNpZ25hdHVyZSA9IGFzbjEuc2lnbmF0dXJlXG5mdW5jdGlvbiBkZWNyeXB0IChkYXRhLCBwYXNzd29yZCkge1xuICB2YXIgc2FsdCA9IGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQua2RlLmtkZXBhcmFtcy5zYWx0XG4gIHZhciBpdGVycyA9IHBhcnNlSW50KGRhdGEuYWxnb3JpdGhtLmRlY3J5cHQua2RlLmtkZXBhcmFtcy5pdGVycy50b1N0cmluZygpLCAxMClcbiAgdmFyIGFsZ28gPSBhZXNpZFtkYXRhLmFsZ29yaXRobS5kZWNyeXB0LmNpcGhlci5hbGdvLmpvaW4oJy4nKV1cbiAgdmFyIGl2ID0gZGF0YS5hbGdvcml0aG0uZGVjcnlwdC5jaXBoZXIuaXZcbiAgdmFyIGNpcGhlclRleHQgPSBkYXRhLnN1YmplY3RQcml2YXRlS2V5XG4gIHZhciBrZXlsZW4gPSBwYXJzZUludChhbGdvLnNwbGl0KCctJylbMV0sIDEwKSAvIDhcbiAgdmFyIGtleSA9IGNvbXBhdC5wYmtkZjJTeW5jKHBhc3N3b3JkLCBzYWx0LCBpdGVycywga2V5bGVuKVxuICB2YXIgY2lwaGVyID0gY2lwaGVycy5jcmVhdGVEZWNpcGhlcml2KGFsZ28sIGtleSwgaXYpXG4gIHZhciBvdXQgPSBbXVxuICBvdXQucHVzaChjaXBoZXIudXBkYXRlKGNpcGhlclRleHQpKVxuICBvdXQucHVzaChjaXBoZXIuZmluYWwoKSlcbiAgcmV0dXJuIEJ1ZmZlci5jb25jYXQob3V0KVxufVxuIiwiXG5leHBvcnRzLnBia2RmMiA9IHJlcXVpcmUoJy4vbGliL2FzeW5jJylcblxuZXhwb3J0cy5wYmtkZjJTeW5jID0gcmVxdWlyZSgnLi9saWIvc3luYycpXG4iLCJ2YXIgY2hlY2tQYXJhbWV0ZXJzID0gcmVxdWlyZSgnLi9wcmVjb25kaXRpb24nKVxudmFyIGRlZmF1bHRFbmNvZGluZyA9IHJlcXVpcmUoJy4vZGVmYXVsdC1lbmNvZGluZycpXG52YXIgc3luYyA9IHJlcXVpcmUoJy4vc3luYycpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIFpFUk9fQlVGXG52YXIgc3VidGxlID0gZ2xvYmFsLmNyeXB0byAmJiBnbG9iYWwuY3J5cHRvLnN1YnRsZVxudmFyIHRvQnJvd3NlciA9IHtcbiAgJ3NoYSc6ICdTSEEtMScsXG4gICdzaGEtMSc6ICdTSEEtMScsXG4gICdzaGExJzogJ1NIQS0xJyxcbiAgJ3NoYTI1Nic6ICdTSEEtMjU2JyxcbiAgJ3NoYS0yNTYnOiAnU0hBLTI1NicsXG4gICdzaGEzODQnOiAnU0hBLTM4NCcsXG4gICdzaGEtMzg0JzogJ1NIQS0zODQnLFxuICAnc2hhLTUxMic6ICdTSEEtNTEyJyxcbiAgJ3NoYTUxMic6ICdTSEEtNTEyJ1xufVxudmFyIGNoZWNrcyA9IFtdXG5mdW5jdGlvbiBjaGVja05hdGl2ZSAoYWxnbykge1xuICBpZiAoZ2xvYmFsLnByb2Nlc3MgJiYgIWdsb2JhbC5wcm9jZXNzLmJyb3dzZXIpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKVxuICB9XG4gIGlmICghc3VidGxlIHx8ICFzdWJ0bGUuaW1wb3J0S2V5IHx8ICFzdWJ0bGUuZGVyaXZlQml0cykge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpXG4gIH1cbiAgaWYgKGNoZWNrc1thbGdvXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNoZWNrc1thbGdvXVxuICB9XG4gIFpFUk9fQlVGID0gWkVST19CVUYgfHwgQnVmZmVyLmFsbG9jKDgpXG4gIHZhciBwcm9tID0gYnJvd3NlclBia2RmMihaRVJPX0JVRiwgWkVST19CVUYsIDEwLCAxMjgsIGFsZ28pXG4gICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9KVxuICBjaGVja3NbYWxnb10gPSBwcm9tXG4gIHJldHVybiBwcm9tXG59XG5mdW5jdGlvbiBicm93c2VyUGJrZGYyIChwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywgbGVuZ3RoLCBhbGdvKSB7XG4gIHJldHVybiBzdWJ0bGUuaW1wb3J0S2V5KFxuICAgICdyYXcnLCBwYXNzd29yZCwge25hbWU6ICdQQktERjInfSwgZmFsc2UsIFsnZGVyaXZlQml0cyddXG4gICkudGhlbihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHN1YnRsZS5kZXJpdmVCaXRzKHtcbiAgICAgIG5hbWU6ICdQQktERjInLFxuICAgICAgc2FsdDogc2FsdCxcbiAgICAgIGl0ZXJhdGlvbnM6IGl0ZXJhdGlvbnMsXG4gICAgICBoYXNoOiB7XG4gICAgICAgIG5hbWU6IGFsZ29cbiAgICAgIH1cbiAgICB9LCBrZXksIGxlbmd0aCA8PCAzKVxuICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20ocmVzKVxuICB9KVxufVxuZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UgKHByb21pc2UsIGNhbGxiYWNrKSB7XG4gIHByb21pc2UudGhlbihmdW5jdGlvbiAob3V0KSB7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjayhudWxsLCBvdXQpXG4gICAgfSlcbiAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrKGUpXG4gICAgfSlcbiAgfSlcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdCwgY2FsbGJhY2spIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIocGFzc3dvcmQpKSBwYXNzd29yZCA9IEJ1ZmZlci5mcm9tKHBhc3N3b3JkLCBkZWZhdWx0RW5jb2RpbmcpXG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHNhbHQpKSBzYWx0ID0gQnVmZmVyLmZyb20oc2FsdCwgZGVmYXVsdEVuY29kaW5nKVxuXG4gIGNoZWNrUGFyYW1ldGVycyhpdGVyYXRpb25zLCBrZXlsZW4pXG4gIGlmICh0eXBlb2YgZGlnZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBkaWdlc3RcbiAgICBkaWdlc3QgPSB1bmRlZmluZWRcbiAgfVxuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRXJyb3IoJ05vIGNhbGxiYWNrIHByb3ZpZGVkIHRvIHBia2RmMicpXG5cbiAgZGlnZXN0ID0gZGlnZXN0IHx8ICdzaGExJ1xuICB2YXIgYWxnbyA9IHRvQnJvd3NlcltkaWdlc3QudG9Mb3dlckNhc2UoKV1cbiAgaWYgKCFhbGdvIHx8IHR5cGVvZiBnbG9iYWwuUHJvbWlzZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBvdXRcbiAgICAgIHRyeSB7XG4gICAgICAgIG91dCA9IHN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZSlcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKG51bGwsIG91dClcbiAgICB9KVxuICB9XG4gIHJlc29sdmVQcm9taXNlKGNoZWNrTmF0aXZlKGFsZ28pLnRoZW4oZnVuY3Rpb24gKHJlc3ApIHtcbiAgICBpZiAocmVzcCkge1xuICAgICAgcmV0dXJuIGJyb3dzZXJQYmtkZjIocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgYWxnbylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN5bmMocGFzc3dvcmQsIHNhbHQsIGl0ZXJhdGlvbnMsIGtleWxlbiwgZGlnZXN0KVxuICAgIH1cbiAgfSksIGNhbGxiYWNrKVxufVxuIiwidmFyIGRlZmF1bHRFbmNvZGluZ1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChwcm9jZXNzLmJyb3dzZXIpIHtcbiAgZGVmYXVsdEVuY29kaW5nID0gJ3V0Zi04J1xufSBlbHNlIHtcbiAgdmFyIHBWZXJzaW9uTWFqb3IgPSBwYXJzZUludChwcm9jZXNzLnZlcnNpb24uc3BsaXQoJy4nKVswXS5zbGljZSgxKSwgMTApXG5cbiAgZGVmYXVsdEVuY29kaW5nID0gcFZlcnNpb25NYWpvciA+PSA2ID8gJ3V0Zi04JyA6ICdiaW5hcnknXG59XG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRFbmNvZGluZ1xuIiwidmFyIE1BWF9BTExPQyA9IE1hdGgucG93KDIsIDMwKSAtIDEgLy8gZGVmYXVsdCBpbiBpb2pzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRpb25zLCBrZXlsZW4pIHtcbiAgaWYgKHR5cGVvZiBpdGVyYXRpb25zICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0l0ZXJhdGlvbnMgbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChpdGVyYXRpb25zIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JhZCBpdGVyYXRpb25zJylcbiAgfVxuXG4gIGlmICh0eXBlb2Yga2V5bGVuICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0tleSBsZW5ndGggbm90IGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChrZXlsZW4gPCAwIHx8IGtleWxlbiA+IE1BWF9BTExPQyB8fCBrZXlsZW4gIT09IGtleWxlbikgeyAvKiBlc2xpbnQgbm8tc2VsZi1jb21wYXJlOiAwICovXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQmFkIGtleSBsZW5ndGgnKVxuICB9XG59XG4iLCJ2YXIgbWQ1ID0gcmVxdWlyZSgnY3JlYXRlLWhhc2gvbWQ1JylcbnZhciBybWQxNjAgPSByZXF1aXJlKCdyaXBlbWQxNjAnKVxudmFyIHNoYSA9IHJlcXVpcmUoJ3NoYS5qcycpXG5cbnZhciBjaGVja1BhcmFtZXRlcnMgPSByZXF1aXJlKCcuL3ByZWNvbmRpdGlvbicpXG52YXIgZGVmYXVsdEVuY29kaW5nID0gcmVxdWlyZSgnLi9kZWZhdWx0LWVuY29kaW5nJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxudmFyIFpFUk9TID0gQnVmZmVyLmFsbG9jKDEyOClcbnZhciBzaXplcyA9IHtcbiAgbWQ1OiAxNixcbiAgc2hhMTogMjAsXG4gIHNoYTIyNDogMjgsXG4gIHNoYTI1NjogMzIsXG4gIHNoYTM4NDogNDgsXG4gIHNoYTUxMjogNjQsXG4gIHJtZDE2MDogMjAsXG4gIHJpcGVtZDE2MDogMjBcbn1cblxuZnVuY3Rpb24gSG1hYyAoYWxnLCBrZXksIHNhbHRMZW4pIHtcbiAgdmFyIGhhc2ggPSBnZXREaWdlc3QoYWxnKVxuICB2YXIgYmxvY2tzaXplID0gKGFsZyA9PT0gJ3NoYTUxMicgfHwgYWxnID09PSAnc2hhMzg0JykgPyAxMjggOiA2NFxuXG4gIGlmIChrZXkubGVuZ3RoID4gYmxvY2tzaXplKSB7XG4gICAga2V5ID0gaGFzaChrZXkpXG4gIH0gZWxzZSBpZiAoa2V5Lmxlbmd0aCA8IGJsb2Nrc2l6ZSkge1xuICAgIGtleSA9IEJ1ZmZlci5jb25jYXQoW2tleSwgWkVST1NdLCBibG9ja3NpemUpXG4gIH1cblxuICB2YXIgaXBhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUgKyBzaXplc1thbGddKVxuICB2YXIgb3BhZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShibG9ja3NpemUgKyBzaXplc1thbGddKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2Nrc2l6ZTsgaSsrKSB7XG4gICAgaXBhZFtpXSA9IGtleVtpXSBeIDB4MzZcbiAgICBvcGFkW2ldID0ga2V5W2ldIF4gMHg1Q1xuICB9XG5cbiAgdmFyIGlwYWQxID0gQnVmZmVyLmFsbG9jVW5zYWZlKGJsb2Nrc2l6ZSArIHNhbHRMZW4gKyA0KVxuICBpcGFkLmNvcHkoaXBhZDEsIDAsIDAsIGJsb2Nrc2l6ZSlcbiAgdGhpcy5pcGFkMSA9IGlwYWQxXG4gIHRoaXMuaXBhZDIgPSBpcGFkXG4gIHRoaXMub3BhZCA9IG9wYWRcbiAgdGhpcy5hbGcgPSBhbGdcbiAgdGhpcy5ibG9ja3NpemUgPSBibG9ja3NpemVcbiAgdGhpcy5oYXNoID0gaGFzaFxuICB0aGlzLnNpemUgPSBzaXplc1thbGddXG59XG5cbkhtYWMucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChkYXRhLCBpcGFkKSB7XG4gIGRhdGEuY29weShpcGFkLCB0aGlzLmJsb2Nrc2l6ZSlcbiAgdmFyIGggPSB0aGlzLmhhc2goaXBhZClcbiAgaC5jb3B5KHRoaXMub3BhZCwgdGhpcy5ibG9ja3NpemUpXG4gIHJldHVybiB0aGlzLmhhc2godGhpcy5vcGFkKVxufVxuXG5mdW5jdGlvbiBnZXREaWdlc3QgKGFsZykge1xuICBmdW5jdGlvbiBzaGFGdW5jIChkYXRhKSB7XG4gICAgcmV0dXJuIHNoYShhbGcpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKVxuICB9XG5cbiAgaWYgKGFsZyA9PT0gJ3JtZDE2MCcgfHwgYWxnID09PSAncmlwZW1kMTYwJykgcmV0dXJuIHJtZDE2MFxuICBpZiAoYWxnID09PSAnbWQ1JykgcmV0dXJuIG1kNVxuICByZXR1cm4gc2hhRnVuY1xufVxuXG5mdW5jdGlvbiBwYmtkZjIgKHBhc3N3b3JkLCBzYWx0LCBpdGVyYXRpb25zLCBrZXlsZW4sIGRpZ2VzdCkge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihwYXNzd29yZCkpIHBhc3N3b3JkID0gQnVmZmVyLmZyb20ocGFzc3dvcmQsIGRlZmF1bHRFbmNvZGluZylcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoc2FsdCkpIHNhbHQgPSBCdWZmZXIuZnJvbShzYWx0LCBkZWZhdWx0RW5jb2RpbmcpXG5cbiAgY2hlY2tQYXJhbWV0ZXJzKGl0ZXJhdGlvbnMsIGtleWxlbilcblxuICBkaWdlc3QgPSBkaWdlc3QgfHwgJ3NoYTEnXG5cbiAgdmFyIGhtYWMgPSBuZXcgSG1hYyhkaWdlc3QsIHBhc3N3b3JkLCBzYWx0Lmxlbmd0aClcblxuICB2YXIgREsgPSBCdWZmZXIuYWxsb2NVbnNhZmUoa2V5bGVuKVxuICB2YXIgYmxvY2sxID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNhbHQubGVuZ3RoICsgNClcbiAgc2FsdC5jb3B5KGJsb2NrMSwgMCwgMCwgc2FsdC5sZW5ndGgpXG5cbiAgdmFyIGRlc3RQb3MgPSAwXG4gIHZhciBoTGVuID0gc2l6ZXNbZGlnZXN0XVxuICB2YXIgbCA9IE1hdGguY2VpbChrZXlsZW4gLyBoTGVuKVxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IGw7IGkrKykge1xuICAgIGJsb2NrMS53cml0ZVVJbnQzMkJFKGksIHNhbHQubGVuZ3RoKVxuXG4gICAgdmFyIFQgPSBobWFjLnJ1bihibG9jazEsIGhtYWMuaXBhZDEpXG4gICAgdmFyIFUgPSBUXG5cbiAgICBmb3IgKHZhciBqID0gMTsgaiA8IGl0ZXJhdGlvbnM7IGorKykge1xuICAgICAgVSA9IGhtYWMucnVuKFUsIGhtYWMuaXBhZDIpXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGhMZW47IGsrKykgVFtrXSBePSBVW2tdXG4gICAgfVxuXG4gICAgVC5jb3B5KERLLCBkZXN0UG9zKVxuICAgIGRlc3RQb3MgKz0gaExlblxuICB9XG5cbiAgcmV0dXJuIERLXG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGJrZGYyXG4iLCIndXNlIHN0cmljdCc7XG5cbmlmICghcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gbmV4dFRpY2s7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3MubmV4dFRpY2s7XG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrKGZuLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNhbGxiYWNrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBhcmdzLCBpO1xuICBzd2l0Y2ggKGxlbikge1xuICBjYXNlIDA6XG4gIGNhc2UgMTpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbik7XG4gIGNhc2UgMjpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tPbmUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEpO1xuICAgIH0pO1xuICBjYXNlIDM6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVHdvKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyKTtcbiAgICB9KTtcbiAgY2FzZSA0OlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1RocmVlKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB9KTtcbiAgZGVmYXVsdDpcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgIGFyZ3NbaSsrXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrKCkge1xuICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSk7XG4gIH1cbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJleHBvcnRzLnB1YmxpY0VuY3J5cHQgPSByZXF1aXJlKCcuL3B1YmxpY0VuY3J5cHQnKTtcbmV4cG9ydHMucHJpdmF0ZURlY3J5cHQgPSByZXF1aXJlKCcuL3ByaXZhdGVEZWNyeXB0Jyk7XG5cbmV4cG9ydHMucHJpdmF0ZUVuY3J5cHQgPSBmdW5jdGlvbiBwcml2YXRlRW5jcnlwdChrZXksIGJ1Zikge1xuICByZXR1cm4gZXhwb3J0cy5wdWJsaWNFbmNyeXB0KGtleSwgYnVmLCB0cnVlKTtcbn07XG5cbmV4cG9ydHMucHVibGljRGVjcnlwdCA9IGZ1bmN0aW9uIHB1YmxpY0RlY3J5cHQoa2V5LCBidWYpIHtcbiAgcmV0dXJuIGV4cG9ydHMucHJpdmF0ZURlY3J5cHQoa2V5LCBidWYsIHRydWUpO1xufTsiLCJ2YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzZWVkLCBsZW4pIHtcbiAgdmFyIHQgPSBuZXcgQnVmZmVyKCcnKTtcbiAgdmFyICBpID0gMCwgYztcbiAgd2hpbGUgKHQubGVuZ3RoIDwgbGVuKSB7XG4gICAgYyA9IGkyb3BzKGkrKyk7XG4gICAgdCA9IEJ1ZmZlci5jb25jYXQoW3QsIGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUoc2VlZCkudXBkYXRlKGMpLmRpZ2VzdCgpXSk7XG4gIH1cbiAgcmV0dXJuIHQuc2xpY2UoMCwgbGVuKTtcbn07XG5cbmZ1bmN0aW9uIGkyb3BzKGMpIHtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIoNCk7XG4gIG91dC53cml0ZVVJbnQzMkJFKGMsMCk7XG4gIHJldHVybiBvdXQ7XG59IiwidmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKTtcbnZhciBtZ2YgPSByZXF1aXJlKCcuL21nZicpO1xudmFyIHhvciA9IHJlcXVpcmUoJy4veG9yJyk7XG52YXIgYm4gPSByZXF1aXJlKCdibi5qcycpO1xudmFyIGNydCA9IHJlcXVpcmUoJ2Jyb3dzZXJpZnktcnNhJyk7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgd2l0aFB1YmxpYyA9IHJlcXVpcmUoJy4vd2l0aFB1YmxpYycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwcml2YXRlRGVjcnlwdChwcml2YXRlX2tleSwgZW5jLCByZXZlcnNlKSB7XG4gIHZhciBwYWRkaW5nO1xuICBpZiAocHJpdmF0ZV9rZXkucGFkZGluZykge1xuICAgIHBhZGRpbmcgPSBwcml2YXRlX2tleS5wYWRkaW5nO1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICBwYWRkaW5nID0gMTtcbiAgfSBlbHNlIHtcbiAgICBwYWRkaW5nID0gNDtcbiAgfVxuICBcbiAgdmFyIGtleSA9IHBhcnNlS2V5cyhwcml2YXRlX2tleSk7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICBpZiAoZW5jLmxlbmd0aCA+IGsgfHwgbmV3IGJuKGVuYykuY21wKGtleS5tb2R1bHVzKSA+PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdkZWNyeXB0aW9uIGVycm9yJyk7XG4gIH1cbiAgdmFyIG1zZztcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBtc2cgPSB3aXRoUHVibGljKG5ldyBibihlbmMpLCBrZXkpO1xuICB9IGVsc2Uge1xuICAgIG1zZyA9IGNydChlbmMsIGtleSk7XG4gIH1cbiAgdmFyIHpCdWZmZXIgPSBuZXcgQnVmZmVyKGsgLSBtc2cubGVuZ3RoKTtcbiAgekJ1ZmZlci5maWxsKDApO1xuICBtc2cgPSBCdWZmZXIuY29uY2F0KFt6QnVmZmVyLCBtc2ddLCBrKTtcbiAgaWYgKHBhZGRpbmcgPT09IDQpIHtcbiAgICByZXR1cm4gb2FlcChrZXksIG1zZyk7XG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMSkge1xuICAgIHJldHVybiBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSk7XG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMykge1xuICAgIHJldHVybiBtc2c7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHBhZGRpbmcnKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gb2FlcChrZXksIG1zZyl7XG4gIHZhciBuID0ga2V5Lm1vZHVsdXM7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGg7XG4gIHZhciBpSGFzaCA9IGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUobmV3IEJ1ZmZlcignJykpLmRpZ2VzdCgpO1xuICB2YXIgaExlbiA9IGlIYXNoLmxlbmd0aDtcbiAgdmFyIGhMZW4yID0gMiAqIGhMZW47XG4gIGlmIChtc2dbMF0gIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICB2YXIgbWFza2VkU2VlZCA9IG1zZy5zbGljZSgxLCBoTGVuICsgMSk7XG4gIHZhciBtYXNrZWREYiA9ICBtc2cuc2xpY2UoaExlbiArIDEpO1xuICB2YXIgc2VlZCA9IHhvcihtYXNrZWRTZWVkLCBtZ2YobWFza2VkRGIsIGhMZW4pKTtcbiAgdmFyIGRiID0geG9yKG1hc2tlZERiLCBtZ2Yoc2VlZCwgayAtIGhMZW4gLSAxKSk7XG4gIGlmIChjb21wYXJlKGlIYXNoLCBkYi5zbGljZSgwLCBoTGVuKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICB2YXIgaSA9IGhMZW47XG4gIHdoaWxlIChkYltpXSA9PT0gMCkge1xuICAgIGkrKztcbiAgfVxuICBpZiAoZGJbaSsrXSAhPT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZGVjcnlwdGlvbiBlcnJvcicpO1xuICB9XG4gIHJldHVybiBkYi5zbGljZShpKTtcbn1cblxuZnVuY3Rpb24gcGtjczEoa2V5LCBtc2csIHJldmVyc2Upe1xuICB2YXIgcDEgPSBtc2cuc2xpY2UoMCwgMik7XG4gIHZhciBpID0gMjtcbiAgdmFyIHN0YXR1cyA9IDA7XG4gIHdoaWxlIChtc2dbaSsrXSAhPT0gMCkge1xuICAgIGlmIChpID49IG1zZy5sZW5ndGgpIHtcbiAgICAgIHN0YXR1cysrO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHZhciBwcyA9IG1zZy5zbGljZSgyLCBpIC0gMSk7XG4gIHZhciBwMiA9IG1zZy5zbGljZShpIC0gMSwgaSk7XG5cbiAgaWYgKChwMS50b1N0cmluZygnaGV4JykgIT09ICcwMDAyJyAmJiAhcmV2ZXJzZSkgfHwgKHAxLnRvU3RyaW5nKCdoZXgnKSAhPT0gJzAwMDEnICYmIHJldmVyc2UpKXtcbiAgICBzdGF0dXMrKztcbiAgfVxuICBpZiAocHMubGVuZ3RoIDwgOCkge1xuICAgIHN0YXR1cysrO1xuICB9XG4gIGlmIChzdGF0dXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlY3J5cHRpb24gZXJyb3InKTtcbiAgfVxuICByZXR1cm4gIG1zZy5zbGljZShpKTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmUoYSwgYil7XG4gIGEgPSBuZXcgQnVmZmVyKGEpO1xuICBiID0gbmV3IEJ1ZmZlcihiKTtcbiAgdmFyIGRpZiA9IDA7XG4gIHZhciBsZW4gPSBhLmxlbmd0aDtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIGRpZisrO1xuICAgIGxlbiA9IE1hdGgubWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XG4gIH1cbiAgdmFyIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IGxlbikge1xuICAgIGRpZiArPSAoYVtpXSBeIGJbaV0pO1xuICB9XG4gIHJldHVybiBkaWY7XG59IiwidmFyIHBhcnNlS2V5cyA9IHJlcXVpcmUoJ3BhcnNlLWFzbjEnKTtcbnZhciByYW5kb21CeXRlcyA9IHJlcXVpcmUoJ3JhbmRvbWJ5dGVzJyk7XG52YXIgY3JlYXRlSGFzaCA9IHJlcXVpcmUoJ2NyZWF0ZS1oYXNoJyk7XG52YXIgbWdmID0gcmVxdWlyZSgnLi9tZ2YnKTtcbnZhciB4b3IgPSByZXF1aXJlKCcuL3hvcicpO1xudmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbnZhciB3aXRoUHVibGljID0gcmVxdWlyZSgnLi93aXRoUHVibGljJyk7XG52YXIgY3J0ID0gcmVxdWlyZSgnYnJvd3NlcmlmeS1yc2EnKTtcblxudmFyIGNvbnN0YW50cyA9IHtcbiAgUlNBX1BLQ1MxX09BRVBfUEFERElORzogNCxcbiAgUlNBX1BLQ1MxX1BBRERJTjogMSxcbiAgUlNBX05PX1BBRERJTkc6IDNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHVibGljRW5jcnlwdChwdWJsaWNfa2V5LCBtc2csIHJldmVyc2UpIHtcbiAgdmFyIHBhZGRpbmc7XG4gIGlmIChwdWJsaWNfa2V5LnBhZGRpbmcpIHtcbiAgICBwYWRkaW5nID0gcHVibGljX2tleS5wYWRkaW5nO1xuICB9IGVsc2UgaWYgKHJldmVyc2UpIHtcbiAgICBwYWRkaW5nID0gMTtcbiAgfSBlbHNlIHtcbiAgICBwYWRkaW5nID0gNDtcbiAgfVxuICB2YXIga2V5ID0gcGFyc2VLZXlzKHB1YmxpY19rZXkpO1xuICB2YXIgcGFkZGVkTXNnO1xuICBpZiAocGFkZGluZyA9PT0gNCkge1xuICAgIHBhZGRlZE1zZyA9IG9hZXAoa2V5LCBtc2cpO1xuICB9IGVsc2UgaWYgKHBhZGRpbmcgPT09IDEpIHtcbiAgICBwYWRkZWRNc2cgPSBwa2NzMShrZXksIG1zZywgcmV2ZXJzZSk7XG4gIH0gZWxzZSBpZiAocGFkZGluZyA9PT0gMykge1xuICAgIHBhZGRlZE1zZyA9IG5ldyBibihtc2cpO1xuICAgIGlmIChwYWRkZWRNc2cuY21wKGtleS5tb2R1bHVzKSA+PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGEgdG9vIGxvbmcgZm9yIG1vZHVsdXMnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1bmtub3duIHBhZGRpbmcnKTtcbiAgfVxuICBpZiAocmV2ZXJzZSkge1xuICAgIHJldHVybiBjcnQocGFkZGVkTXNnLCBrZXkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB3aXRoUHVibGljKHBhZGRlZE1zZywga2V5KTtcbiAgfVxufTtcblxuZnVuY3Rpb24gb2FlcChrZXksIG1zZyl7XG4gIHZhciBrID0ga2V5Lm1vZHVsdXMuYnl0ZUxlbmd0aCgpO1xuICB2YXIgbUxlbiA9IG1zZy5sZW5ndGg7XG4gIHZhciBpSGFzaCA9IGNyZWF0ZUhhc2goJ3NoYTEnKS51cGRhdGUobmV3IEJ1ZmZlcignJykpLmRpZ2VzdCgpO1xuICB2YXIgaExlbiA9IGlIYXNoLmxlbmd0aDtcbiAgdmFyIGhMZW4yID0gMiAqIGhMZW47XG4gIGlmIChtTGVuID4gayAtIGhMZW4yIC0gMikge1xuICAgIHRocm93IG5ldyBFcnJvcignbWVzc2FnZSB0b28gbG9uZycpO1xuICB9XG4gIHZhciBwcyA9IG5ldyBCdWZmZXIoayAtIG1MZW4gLSBoTGVuMiAtIDIpO1xuICBwcy5maWxsKDApO1xuICB2YXIgZGJsZW4gPSBrIC0gaExlbiAtIDE7XG4gIHZhciBzZWVkID0gcmFuZG9tQnl0ZXMoaExlbik7XG4gIHZhciBtYXNrZWREYiA9IHhvcihCdWZmZXIuY29uY2F0KFtpSGFzaCwgcHMsIG5ldyBCdWZmZXIoWzFdKSwgbXNnXSwgZGJsZW4pLCBtZ2Yoc2VlZCwgZGJsZW4pKTtcbiAgdmFyIG1hc2tlZFNlZWQgPSB4b3Ioc2VlZCwgbWdmKG1hc2tlZERiLCBoTGVuKSk7XG4gIHJldHVybiBuZXcgYm4oQnVmZmVyLmNvbmNhdChbbmV3IEJ1ZmZlcihbMF0pLCBtYXNrZWRTZWVkLCBtYXNrZWREYl0sIGspKTtcbn1cbmZ1bmN0aW9uIHBrY3MxKGtleSwgbXNnLCByZXZlcnNlKXtcbiAgdmFyIG1MZW4gPSBtc2cubGVuZ3RoO1xuICB2YXIgayA9IGtleS5tb2R1bHVzLmJ5dGVMZW5ndGgoKTtcbiAgaWYgKG1MZW4gPiBrIC0gMTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UgdG9vIGxvbmcnKTtcbiAgfVxuICB2YXIgcHM7XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgcHMgPSBuZXcgQnVmZmVyKGsgLSBtTGVuIC0gMyk7XG4gICAgcHMuZmlsbCgweGZmKTtcbiAgfSBlbHNlIHtcbiAgICBwcyA9IG5vblplcm8oayAtIG1MZW4gLSAzKTtcbiAgfVxuICByZXR1cm4gbmV3IGJuKEJ1ZmZlci5jb25jYXQoW25ldyBCdWZmZXIoWzAsIHJldmVyc2U/MToyXSksIHBzLCBuZXcgQnVmZmVyKFswXSksIG1zZ10sIGspKTtcbn1cbmZ1bmN0aW9uIG5vblplcm8obGVuLCBjcnlwdG8pIHtcbiAgdmFyIG91dCA9IG5ldyBCdWZmZXIobGVuKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgY2FjaGUgPSByYW5kb21CeXRlcyhsZW4qMik7XG4gIHZhciBjdXIgPSAwO1xuICB2YXIgbnVtO1xuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIGlmIChjdXIgPT09IGNhY2hlLmxlbmd0aCkge1xuICAgICAgY2FjaGUgPSByYW5kb21CeXRlcyhsZW4qMik7XG4gICAgICBjdXIgPSAwO1xuICAgIH1cbiAgICBudW0gPSBjYWNoZVtjdXIrK107XG4gICAgaWYgKG51bSkge1xuICAgICAgb3V0W2krK10gPSBudW07XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXQ7XG59IiwidmFyIGJuID0gcmVxdWlyZSgnYm4uanMnKTtcbmZ1bmN0aW9uIHdpdGhQdWJsaWMocGFkZGVkTXNnLCBrZXkpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIocGFkZGVkTXNnXG4gICAgLnRvUmVkKGJuLm1vbnQoa2V5Lm1vZHVsdXMpKVxuICAgIC5yZWRQb3cobmV3IGJuKGtleS5wdWJsaWNFeHBvbmVudCkpXG4gICAgLmZyb21SZWQoKVxuICAgIC50b0FycmF5KCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdpdGhQdWJsaWM7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4b3IoYSwgYikge1xuICB2YXIgbGVuID0gYS5sZW5ndGg7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICBhW2ldIF49IGJbaV07XG4gIH1cbiAgcmV0dXJuIGFcbn07IiwiJ3VzZSBzdHJpY3QnXG5cbmZ1bmN0aW9uIG9sZEJyb3dzZXIgKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3NlY3VyZSByYW5kb20gbnVtYmVyIGdlbmVyYXRpb24gbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcXG51c2UgY2hyb21lLCBGaXJlRm94IG9yIEludGVybmV0IEV4cGxvcmVyIDExJylcbn1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG52YXIgY3J5cHRvID0gZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG9cblxuaWYgKGNyeXB0byAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmFuZG9tQnl0ZXNcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gb2xkQnJvd3NlclxufVxuXG5mdW5jdGlvbiByYW5kb21CeXRlcyAoc2l6ZSwgY2IpIHtcbiAgLy8gcGhhbnRvbWpzIG5lZWRzIHRvIHRocm93XG4gIGlmIChzaXplID4gNjU1MzYpIHRocm93IG5ldyBFcnJvcigncmVxdWVzdGVkIHRvbyBtYW55IHJhbmRvbSBieXRlcycpXG4gIC8vIGluIGNhc2UgYnJvd3NlcmlmeSAgaXNuJ3QgdXNpbmcgdGhlIFVpbnQ4QXJyYXkgdmVyc2lvblxuICB2YXIgcmF3Qnl0ZXMgPSBuZXcgZ2xvYmFsLlVpbnQ4QXJyYXkoc2l6ZSlcblxuICAvLyBUaGlzIHdpbGwgbm90IHdvcmsgaW4gb2xkZXIgYnJvd3NlcnMuXG4gIC8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXNcbiAgaWYgKHNpemUgPiAwKSB7ICAvLyBnZXRSYW5kb21WYWx1ZXMgZmFpbHMgb24gSUUgaWYgc2l6ZSA9PSAwXG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhyYXdCeXRlcylcbiAgfVxuXG4gIC8vIFhYWDogcGhhbnRvbWpzIGRvZXNuJ3QgbGlrZSBhIGJ1ZmZlciBiZWluZyBwYXNzZWQgaGVyZVxuICB2YXIgYnl0ZXMgPSBCdWZmZXIuZnJvbShyYXdCeXRlcy5idWZmZXIpXG5cbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNiKG51bGwsIGJ5dGVzKVxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIGR1cGxleCBzdHJlYW0gaXMganVzdCBhIHN0cmVhbSB0aGF0IGlzIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLlxuLy8gU2luY2UgSlMgZG9lc24ndCBoYXZlIG11bHRpcGxlIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UsIHRoaXMgY2xhc3Ncbi8vIHByb3RvdHlwYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwcm9jZXNzTmV4dFRpY2sgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGtleXMucHVzaChrZXkpO1xuICB9cmV0dXJuIGtleXM7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBSZWFkYWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV9yZWFkYWJsZScpO1xudmFyIFdyaXRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3dyaXRhYmxlJyk7XG5cbnV0aWwuaW5oZXJpdHMoRHVwbGV4LCBSZWFkYWJsZSk7XG5cbnZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7XG4gIHZhciBtZXRob2QgPSBrZXlzW3ZdO1xuICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG59XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcblxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy53cml0YWJsZSA9PT0gZmFsc2UpIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKSB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbn1cblxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG4gIC8vIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCkgcmV0dXJuO1xuXG4gIC8vIG5vIG1vcmUgZGF0YSBjYW4gYmUgd3JpdHRlbi5cbiAgLy8gQnV0IGFsbG93IG1vcmUgd3JpdGVzIHRvIGhhcHBlbiBpbiB0aGlzIHRpY2suXG4gIHByb2Nlc3NOZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShEdXBsZXgucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbkR1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIHRoaXMuZW5kKCk7XG5cbiAgcHJvY2Vzc05leHRUaWNrKGNiLCBlcnIpO1xufTtcblxuZnVuY3Rpb24gZm9yRWFjaCh4cywgZikge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGYoeHNbaV0sIGkpO1xuICB9XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHByb2Nlc3NOZXh0VGljayA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLy8gVE9ETyhibWV1cmVyKTogQ2hhbmdlIHRoaXMgYmFjayB0byBjb25zdCBvbmNlIGhvbGUgY2hlY2tzIGFyZVxuLy8gcHJvcGVybHkgb3B0aW1pemVkIGF3YXkgZWFybHkgaW4gSWduaXRpb24rVHVyYm9GYW4uXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSB2b2lkIDA7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QnKTtcbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG52YXIgU3RyaW5nRGVjb2RlcjtcblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pO1xuICB9IGVsc2Uge1xuICAgIC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnlcbiAgICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlXG4gICAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLlxuICAgIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod20gfHwgaHdtID09PSAwID8gaHdtIDogZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVhZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcmVhZCA9IG9wdGlvbnMucmVhZDtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICBjYihlcnIpO1xufTtcblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICAgIH1cbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBudWxsLCB0cnVlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBlcjtcbiAgICBpZiAoIXNraXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuICAgIGlmIChlcikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50JykpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0aCAhPT0gMCkgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtlbHNlIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblxuICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9XG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIHJldHVybiBlcjtcbn1cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fCBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59O1xuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gOE1CXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47XG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cblxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfVxuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAgIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cbiAgICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO1xuICB9XG5cbiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xufVxuXG4vLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIGlmIChzdGF0ZS5zeW5jKSBwcm9jZXNzTmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG4vLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHByb2Nlc3NOZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7ZWxzZSBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdfcmVhZCgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuXG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG5cbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHByb2Nlc3NOZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG4gIC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGRlYnVnKCdjbGVhbnVwJyk7XG4gICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB1bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwdXNoZXMgbW9yZSBkYXRhIHdoaWxlIHdlJ3JlIHdyaXRpbmcgdG8gZGVzdCB0aGVuIHdlJ2xsIGVuZCB1cFxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxuICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLlxuICAvLyA9PiBJbnRyb2R1Y2UgYSBndWFyZCBvbiBpbmNyZWFzaW5nIGF3YWl0RHJhaW4uXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdW5waXBlSW5mbyA9IHsgaGFzVW5waXBlZDogZmFsc2UgfTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICB9cmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG5cbiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblxuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7XG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHByb2Nlc3NOZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufVxuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7XG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwcm9jZXNzTmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgc2VsZi5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBzZWxmLnB1c2gobnVsbCk7XG4gIH0pO1xuXG4gIHN0cmVhbS5vbignZGF0YScsIGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGRlYnVnKCd3cmFwcGVkIGRhdGEnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjtcblxuICAgIHZhciByZXQgPSBzZWxmLnB1c2goY2h1bmspO1xuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwga1Byb3h5RXZlbnRzLmxlbmd0aDsgbisrKSB7XG4gICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgc2VsZi5lbWl0LmJpbmQoc2VsZiwga1Byb3h5RXZlbnRzW25dKSk7XG4gIH1cblxuICAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuICBzZWxmLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gc2VsZjtcbn07XG5cbi8vIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS5cblJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0O1xuXG4vLyBQbHVjayBvZmYgbiBieXRlcyBmcm9tIGFuIGFycmF5IG9mIGJ1ZmZlcnMuXG4vLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuXG4gIHZhciByZXQ7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdFxuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTtcbiAgICBzdGF0ZS5idWZmZXIuY2xlYXIoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdFxuICAgIHJldCA9IGZyb21MaXN0UGFydGlhbChuLCBzdGF0ZS5idWZmZXIsIHN0YXRlLmRlY29kZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gRXh0cmFjdHMgb25seSBlbm91Z2ggYnVmZmVyZWQgZGF0YSB0byBzYXRpc2Z5IHRoZSBhbW91bnQgcmVxdWVzdGVkLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdFBhcnRpYWwobiwgbGlzdCwgaGFzU3RyaW5ncykge1xuICB2YXIgcmV0O1xuICBpZiAobiA8IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIHNsaWNlIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzXG4gICAgcmV0ID0gbGlzdC5oZWFkLmRhdGEuc2xpY2UoMCwgbik7XG4gICAgbGlzdC5oZWFkLmRhdGEgPSBsaXN0LmhlYWQuZGF0YS5zbGljZShuKTtcbiAgfSBlbHNlIGlmIChuID09PSBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBmaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2hcbiAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyXG4gICAgcmV0ID0gaGFzU3RyaW5ncyA/IGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIDogY29weUZyb21CdWZmZXIobiwgbGlzdCk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YVxuLy8gY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSB7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHZhciByZXQgPSBwLmRhdGE7XG4gIG4gLT0gcmV0Lmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47XG4gICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSByZXQgKz0gc3RyO2Vsc2UgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGEgY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KSB7XG4gIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHAuZGF0YS5jb3B5KHJldCk7XG4gIG4gLT0gcC5kYXRhLmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMCkgdGhyb3cgbmV3IEVycm9yKCdcImVuZFJlYWRhYmxlKClcIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO1xuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwcm9jZXNzTmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvckVhY2goeHMsIGYpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmKHhzW2ldLCBpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgdHJhbnNmb3JtIHN0cmVhbSBpcyBhIHJlYWRhYmxlL3dyaXRhYmxlIHN0cmVhbSB3aGVyZSB5b3UgZG9cbi8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgXCJmaWx0ZXJcIixcbi8vIGJ1dCB0aGF0J3Mgbm90IGEgZ3JlYXQgbmFtZSBmb3IgaXQsIHNpbmNlIHRoYXQgaW1wbGllcyBhIHRoaW5nIHdoZXJlXG4vLyBzb21lIGJpdHMgcGFzcyB0aHJvdWdoLCBhbmQgb3RoZXJzIGFyZSBzaW1wbHkgaWdub3JlZC4gIChUaGF0IHdvdWxkXG4vLyBiZSBhIHZhbGlkIGV4YW1wbGUgb2YgYSB0cmFuc2Zvcm0sIG9mIGNvdXJzZS4pXG4vL1xuLy8gV2hpbGUgdGhlIG91dHB1dCBpcyBjYXVzYWxseSByZWxhdGVkIHRvIHRoZSBpbnB1dCwgaXQncyBub3QgYVxuLy8gbmVjZXNzYXJpbHkgc3ltbWV0cmljIG9yIHN5bmNocm9ub3VzIHRyYW5zZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsXG4vLyBhIHpsaWIgc3RyZWFtIG1pZ2h0IHRha2UgbXVsdGlwbGUgcGxhaW4tdGV4dCB3cml0ZXMoKSwgYW5kIHRoZW5cbi8vIGVtaXQgYSBzaW5nbGUgY29tcHJlc3NlZCBjaHVuayBzb21lIHRpbWUgaW4gdGhlIGZ1dHVyZS5cbi8vXG4vLyBIZXJlJ3MgaG93IHRoaXMgd29ya3M6XG4vL1xuLy8gVGhlIFRyYW5zZm9ybSBzdHJlYW0gaGFzIGFsbCB0aGUgYXNwZWN0cyBvZiB0aGUgcmVhZGFibGUgYW5kIHdyaXRhYmxlXG4vLyBzdHJlYW0gY2xhc3Nlcy4gIFdoZW4geW91IHdyaXRlKGNodW5rKSwgdGhhdCBjYWxscyBfd3JpdGUoY2h1bmssY2IpXG4vLyBpbnRlcm5hbGx5LCBhbmQgcmV0dXJucyBmYWxzZSBpZiB0aGVyZSdzIGEgbG90IG9mIHBlbmRpbmcgd3JpdGVzXG4vLyBidWZmZXJlZCB1cC4gIFdoZW4geW91IGNhbGwgcmVhZCgpLCB0aGF0IGNhbGxzIF9yZWFkKG4pIHVudGlsXG4vLyB0aGVyZSdzIGVub3VnaCBwZW5kaW5nIHJlYWRhYmxlIGRhdGEgYnVmZmVyZWQgdXAuXG4vL1xuLy8gSW4gYSB0cmFuc2Zvcm0gc3RyZWFtLCB0aGUgd3JpdHRlbiBkYXRhIGlzIHBsYWNlZCBpbiBhIGJ1ZmZlci4gIFdoZW5cbi8vIF9yZWFkKG4pIGlzIGNhbGxlZCwgaXQgdHJhbnNmb3JtcyB0aGUgcXVldWVkIHVwIGRhdGEsIGNhbGxpbmcgdGhlXG4vLyBidWZmZXJlZCBfd3JpdGUgY2IncyBhcyBpdCBjb25zdW1lcyBjaHVua3MuICBJZiBjb25zdW1pbmcgYSBzaW5nbGVcbi8vIHdyaXR0ZW4gY2h1bmsgd291bGQgcmVzdWx0IGluIG11bHRpcGxlIG91dHB1dCBjaHVua3MsIHRoZW4gdGhlIGZpcnN0XG4vLyBvdXRwdXR0ZWQgYml0IGNhbGxzIHRoZSByZWFkY2IsIGFuZCBzdWJzZXF1ZW50IGNodW5rcyBqdXN0IGdvIGludG9cbi8vIHRoZSByZWFkIGJ1ZmZlciwgYW5kIHdpbGwgY2F1c2UgaXQgdG8gZW1pdCAncmVhZGFibGUnIGlmIG5lY2Vzc2FyeS5cbi8vXG4vLyBUaGlzIHdheSwgYmFjay1wcmVzc3VyZSBpcyBhY3R1YWxseSBkZXRlcm1pbmVkIGJ5IHRoZSByZWFkaW5nIHNpZGUsXG4vLyBzaW5jZSBfcmVhZCBoYXMgdG8gYmUgY2FsbGVkIHRvIHN0YXJ0IHByb2Nlc3NpbmcgYSBuZXcgY2h1bmsuICBIb3dldmVyLFxuLy8gYSBwYXRob2xvZ2ljYWwgaW5mbGF0ZSB0eXBlIG9mIHRyYW5zZm9ybSBjYW4gY2F1c2UgZXhjZXNzaXZlIGJ1ZmZlcmluZ1xuLy8gaGVyZS4gIEZvciBleGFtcGxlLCBpbWFnaW5lIGEgc3RyZWFtIHdoZXJlIGV2ZXJ5IGJ5dGUgb2YgaW5wdXQgaXNcbi8vIGludGVycHJldGVkIGFzIGFuIGludGVnZXIgZnJvbSAwLTI1NSwgYW5kIHRoZW4gcmVzdWx0cyBpbiB0aGF0IG1hbnlcbi8vIGJ5dGVzIG9mIG91dHB1dC4gIFdyaXRpbmcgdGhlIDQgYnl0ZXMge2ZmLGZmLGZmLGZmfSB3b3VsZCByZXN1bHQgaW5cbi8vIDFrYiBvZiBkYXRhIGJlaW5nIG91dHB1dC4gIEluIHRoaXMgY2FzZSwgeW91IGNvdWxkIHdyaXRlIGEgdmVyeSBzbWFsbFxuLy8gYW1vdW50IG9mIGlucHV0LCBhbmQgZW5kIHVwIHdpdGggYSB2ZXJ5IGxhcmdlIGFtb3VudCBvZiBvdXRwdXQuICBJblxuLy8gc3VjaCBhIHBhdGhvbG9naWNhbCBpbmZsYXRpbmcgbWVjaGFuaXNtLCB0aGVyZSdkIGJlIG5vIHdheSB0byB0ZWxsXG4vLyB0aGUgc3lzdGVtIHRvIHN0b3AgZG9pbmcgdGhlIHRyYW5zZm9ybS4gIEEgc2luZ2xlIDRNQiB3cml0ZSBjb3VsZFxuLy8gY2F1c2UgdGhlIHN5c3RlbSB0byBydW4gb3V0IG9mIG1lbW9yeS5cbi8vXG4vLyBIb3dldmVyLCBldmVuIGluIHN1Y2ggYSBwYXRob2xvZ2ljYWwgY2FzZSwgb25seSBhIHNpbmdsZSB3cml0dGVuIGNodW5rXG4vLyB3b3VsZCBiZSBjb25zdW1lZCwgYW5kIHRoZW4gdGhlIHJlc3Qgd291bGQgd2FpdCAodW4tdHJhbnNmb3JtZWQpIHVudGlsXG4vLyB0aGUgcmVzdWx0cyBvZiB0aGUgcHJldmlvdXMgdHJhbnNmb3JtZWQgY2h1bmsgd2VyZSBjb25zdW1lZC5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTtcblxuZnVuY3Rpb24gVHJhbnNmb3JtU3RhdGUoc3RyZWFtKSB7XG4gIHRoaXMuYWZ0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICByZXR1cm4gYWZ0ZXJUcmFuc2Zvcm0oc3RyZWFtLCBlciwgZGF0YSk7XG4gIH07XG5cbiAgdGhpcy5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHRoaXMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG4gIHRoaXMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRoaXMud3JpdGVlbmNvZGluZyA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSB7XG4gICAgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignd3JpdGUgY2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzJykpO1xuICB9XG5cbiAgdHMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRzLndyaXRlY2IgPSBudWxsO1xuXG4gIGlmIChkYXRhICE9PSBudWxsICYmIGRhdGEgIT09IHVuZGVmaW5lZCkgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgcnMucmVhZGluZyA9IGZhbHNlO1xuICBpZiAocnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHtcbiAgICBzdHJlYW0uX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpIHJldHVybiBuZXcgVHJhbnNmb3JtKG9wdGlvbnMpO1xuXG4gIER1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlID0gbmV3IFRyYW5zZm9ybVN0YXRlKHRoaXMpO1xuXG4gIHZhciBzdHJlYW0gPSB0aGlzO1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHRoaXMub25jZSgncHJlZmluaXNoJywgZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmx1c2ggPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uIChlciwgZGF0YSkge1xuICAgICAgZG9uZShzdHJlYW0sIGVyLCBkYXRhKTtcbiAgICB9KTtlbHNlIGRvbmUoc3RyZWFtKTtcbiAgfSk7XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ190cmFuc2Zvcm0oKSBpcyBub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTtcblxuLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIER1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kuY2FsbCh0aGlzLCBlcnIsIGZ1bmN0aW9uIChlcnIyKSB7XG4gICAgY2IoZXJyMik7XG4gICAgX3RoaXMuZW1pdCgnY2xvc2UnKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9PSBudWxsICYmIGRhdGEgIT09IHVuZGVmaW5lZCkgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgdmFyIHdzID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgdHMgPSBzdHJlYW0uX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh3cy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7XG5cbiAgaWYgKHRzLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHByb2Nlc3NOZXh0VGljayA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyogPHJlcGxhY2VtZW50PiAqL1xuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xuICB0aGlzLm5leHQgPSBudWxsO1xufVxuXG4vLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3Rcbi8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbVxuZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuICB0aGlzLmZpbmlzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICBvbkNvcmtlZEZpbmlzaChfdGhpcywgc3RhdGUpO1xuICB9O1xufVxuLyogPC9yZXBsYWNlbWVudD4gKi9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBhc3luY1dyaXRlID0gIXByb2Nlc3MuYnJvd3NlciAmJiBbJ3YwLjEwJywgJ3YwLjkuJ10uaW5kZXhPZihwcm9jZXNzLnZlcnNpb24uc2xpY2UoMCwgNSkpID4gLTEgPyBzZXRJbW1lZGlhdGUgOiBwcm9jZXNzTmV4dFRpY2s7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBEdXBsZXg7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpbnRlcm5hbFV0aWwgPSB7XG4gIGRlcHJlY2F0ZTogcmVxdWlyZSgndXRpbC1kZXByZWNhdGUnKVxufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIFN0cmVhbSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9zdHJlYW0nKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bSB8fCBod20gPT09IDAgPyBod20gOiBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIGlmIF9maW5hbCBoYXMgYmVlbiBjYWxsZWRcbiAgdGhpcy5maW5hbENhbGxlZCA9IGZhbHNlO1xuXG4gIC8vIGRyYWluIGV2ZW50IGZsYWcuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIGhhcyBpdCBiZWVuIGRlc3Ryb3llZFxuICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyB3aGVuIHRydWUgYWxsIHdyaXRlcyB3aWxsIGJlIGJ1ZmZlcmVkIHVudGlsIC51bmNvcmsoKSBjYWxsXG4gIHRoaXMuY29ya2VkID0gMDtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uIChlcikge1xuICAgIG9ud3JpdGUoc3RyZWFtLCBlcik7XG4gIH07XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQgdGhlIHVzZXIgc3VwcGxpZXMgdG8gd3JpdGUoY2h1bmssZW5jb2RpbmcsY2IpXG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG5cbiAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLlxuICB0aGlzLndyaXRlbGVuID0gMDtcblxuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIHRoaXMubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cbiAgLy8gbnVtYmVyIG9mIHBlbmRpbmcgdXNlci1zdXBwbGllZCB3cml0ZSBjYWxsYmFja3NcbiAgLy8gdGhpcyBtdXN0IGJlIDAgYmVmb3JlICdmaW5pc2gnIGNhbiBiZSBlbWl0dGVkXG4gIHRoaXMucGVuZGluZ2NiID0gMDtcblxuICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzXG4gIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zXG4gIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xuXG4gIC8vIGNvdW50IGJ1ZmZlcmVkIHJlcXVlc3RzXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuXG4gIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXNcbiAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3b1xuICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpO1xufVxuXG5Xcml0YWJsZVN0YXRlLnByb3RvdHlwZS5nZXRCdWZmZXIgPSBmdW5jdGlvbiBnZXRCdWZmZXIoKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5idWZmZXJlZFJlcXVlc3Q7XG4gIHZhciBvdXQgPSBbXTtcbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBvdXQucHVzaChjdXJyZW50KTtcbiAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICB9XG4gIHJldHVybiBvdXQ7XG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0YXRlLnByb3RvdHlwZSwgJ2J1ZmZlcicsIHtcbiAgICAgIGdldDogaW50ZXJuYWxVdGlsLmRlcHJlY2F0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgICAgfSwgJ193cml0YWJsZVN0YXRlLmJ1ZmZlciBpcyBkZXByZWNhdGVkLiBVc2UgX3dyaXRhYmxlU3RhdGUuZ2V0QnVmZmVyICcgKyAnaW5zdGVhZC4nLCAnREVQMDAwMycpXG4gICAgfSk7XG4gIH0gY2F0Y2ggKF8pIHt9XG59KSgpO1xuXG4vLyBUZXN0IF93cml0YWJsZVN0YXRlIGZvciBpbmhlcml0YW5jZSB0byBhY2NvdW50IGZvciBEdXBsZXggc3RyZWFtcyxcbi8vIHdob3NlIHByb3RvdHlwZSBjaGFpbiBvbmx5IHBvaW50cyB0byBSZWFkYWJsZS5cbnZhciByZWFsSGFzSW5zdGFuY2U7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaGFzSW5zdGFuY2UgJiYgdHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdID09PSAnZnVuY3Rpb24nKSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IEZ1bmN0aW9uLnByb3RvdHlwZVtTeW1ib2wuaGFzSW5zdGFuY2VdO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUsIFN5bWJvbC5oYXNJbnN0YW5jZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICBpZiAocmVhbEhhc0luc3RhbmNlLmNhbGwodGhpcywgb2JqZWN0KSkgcmV0dXJuIHRydWU7XG5cbiAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0Ll93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgV3JpdGFibGVTdGF0ZTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB0aGlzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG5cbiAgLy8gVHJ5aW5nIHRvIHVzZSB0aGUgY3VzdG9tIGBpbnN0YW5jZW9mYCBmb3IgV3JpdGFibGUgaGVyZSB3aWxsIGFsc28gYnJlYWsgdGhlXG4gIC8vIE5vZGUuanMgTGF6eVRyYW5zZm9ybSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaGFzIGEgbm9uLXRyaXZpYWwgZ2V0dGVyIGZvclxuICAvLyBgX3dyaXRhYmxlU3RhdGVgIHRoYXQgd291bGQgbGVhZCB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gIGlmICghcmVhbEhhc0luc3RhbmNlLmNhbGwoV3JpdGFibGUsIHRoaXMpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHtcbiAgICByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeS5cbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGUgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRlID0gb3B0aW9ucy53cml0ZTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZXYgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRldiA9IG9wdGlvbnMud3JpdGV2O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmluYWwgPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZpbmFsID0gb3B0aW9ucy5maW5hbDtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG4vLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuXG5Xcml0YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZScpKTtcbn07XG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikge1xuICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpO1xuICAvLyBUT0RPOiBkZWZlciBlcnJvciBldmVudHMgY29uc2lzdGVudGx5IGV2ZXJ5d2hlcmUsIG5vdCBqdXN0IHRoZSBjYlxuICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIHByb2Nlc3NOZXh0VGljayhjYiwgZXIpO1xufVxuXG4vLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyXG4vLyBtb2RlIHRoZSBzdHJlYW0gaXMgaW4uIEN1cnJlbnRseSB0aGlzIG1lYW5zIHRoYXQgYG51bGxgIGlzIG5ldmVyIGFjY2VwdGVkXG4vLyBhbmQgdW5kZWZpbmVkL25vbi1zdHJpbmcgdmFsdWVzIGFyZSBvbmx5IGFsbG93ZWQgaW4gb2JqZWN0IG1vZGUuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgdmFsaWQgPSB0cnVlO1xuICB2YXIgZXIgPSBmYWxzZTtcblxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIHByb2Nlc3NOZXh0VGljayhjYiwgZXIpO1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICB2YXIgcmV0ID0gZmFsc2U7XG4gIHZhciBpc0J1ZiA9IF9pc1VpbnQ4QXJyYXkoY2h1bmspICYmICFzdGF0ZS5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0J1ZiAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSBjYiA9IG5vcDtcblxuICBpZiAoc3RhdGUuZW5kZWQpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgc3RhdGUuY29ya2VkKys7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcblxuICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTtcbiAgfVxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykge1xuICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCEoWydoZXgnLCAndXRmOCcsICd1dGYtOCcsICdhc2NpaScsICdiaW5hcnknLCAnYmFzZTY0JywgJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZScsICdyYXcnXS5pbmRleE9mKChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICB9XG4gIHJldHVybiBjaHVuaztcbn1cblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgaWYgKCFpc0J1Zikge1xuICAgIHZhciBuZXdDaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuICAgIGlmIChjaHVuayAhPT0gbmV3Q2h1bmspIHtcbiAgICAgIGlzQnVmID0gdHJ1ZTtcbiAgICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gICAgICBjaHVuayA9IG5ld0NodW5rO1xuICAgIH1cbiAgfVxuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0ge1xuICAgICAgY2h1bms6IGNodW5rLFxuICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLFxuICAgICAgaXNCdWY6IGlzQnVmLFxuICAgICAgY2FsbGJhY2s6IGNiLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIGxhc3QubmV4dCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ICs9IDE7XG4gIH0gZWxzZSB7XG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICAtLXN0YXRlLnBlbmRpbmdjYjtcblxuICBpZiAoc3luYykge1xuICAgIC8vIGRlZmVyIHRoZSBjYWxsYmFjayBpZiB3ZSBhcmUgYmVpbmcgY2FsbGVkIHN5bmNocm9ub3VzbHlcbiAgICAvLyB0byBhdm9pZCBwaWxpbmcgdXAgdGhpbmdzIG9uIHRoZSBzdGFja1xuICAgIHByb2Nlc3NOZXh0VGljayhjYiwgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBhbmQgaXQgd2lsbCBhbHdheXMgaGFwcGVuXG4gICAgLy8gYWZ0ZXIgZXJyb3JcbiAgICBwcm9jZXNzTmV4dFRpY2soZmluaXNoTWF5YmUsIHN0cmVhbSwgc3RhdGUpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY2FsbGVyIGV4cGVjdCB0aGlzIHRvIGhhcHBlbiBiZWZvcmUgaWZcbiAgICAvLyBpdCBpcyBhc3luY1xuICAgIGNiKGVyKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGJ1dCBmaW5pc2ggbXVzdFxuICAgIC8vIGFsd2F5cyBmb2xsb3cgZXJyb3JcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcikgb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYik7ZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcblxuICAgIGlmICghZmluaXNoZWQgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIHtcbiAgICAgIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChzeW5jKSB7XG4gICAgICAvKjxyZXBsYWNlbWVudD4qL1xuICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgLyo8L3JlcGxhY2VtZW50PiovXG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbi8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufVxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuXG4gIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTtcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuXG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgYWxsQnVmZmVycyA9IHRydWU7XG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICBidWZmZXJbY291bnRdID0gZW50cnk7XG4gICAgICBpZiAoIWVudHJ5LmlzQnVmKSBhbGxCdWZmZXJzID0gZmFsc2U7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cbiAgICBidWZmZXIuYWxsQnVmZmVycyA9IGFsbEJ1ZmZlcnM7XG5cbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHRydWUsIHN0YXRlLmxlbmd0aCwgYnVmZmVyLCAnJywgaG9sZGVyLmZpbmlzaCk7XG5cbiAgICAvLyBkb1dyaXRlIGlzIGFsbW9zdCBhbHdheXMgYXN5bmMsIGRlZmVyIHRoZXNlIHRvIHNhdmUgYSBiaXQgb2YgdGltZVxuICAgIC8vIGFzIHRoZSBob3QgcGF0aCBlbmRzIHdpdGggZG9Xcml0ZVxuICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICAgIGlmIChob2xkZXIubmV4dCkge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gaG9sZGVyLm5leHQ7XG4gICAgICBob2xkZXIubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gU2xvdyBjYXNlLCB3cml0ZSBjaHVua3Mgb25lLWJ5LW9uZVxuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbnRyeSA9PT0gbnVsbCkgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIH1cblxuICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG4gIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9IGVudHJ5O1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihuZXcgRXJyb3IoJ193cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGV2ID0gbnVsbDtcblxuV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gY2h1bms7XG4gICAgY2h1bmsgPSBudWxsO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaHVuayAhPT0gbnVsbCAmJiBjaHVuayAhPT0gdW5kZWZpbmVkKSB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG5cbiAgLy8gLmVuZCgpIGZ1bGx5IHVuY29ya3NcbiAgaWYgKHN0YXRlLmNvcmtlZCkge1xuICAgIHN0YXRlLmNvcmtlZCA9IDE7XG4gICAgdGhpcy51bmNvcmsoKTtcbiAgfVxuXG4gIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpO1xufTtcblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGUuZW5kaW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPT09IG51bGwgJiYgIXN0YXRlLmZpbmlzaGVkICYmICFzdGF0ZS53cml0aW5nO1xufVxuZnVuY3Rpb24gY2FsbEZpbmFsKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RyZWFtLl9maW5hbChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgaWYgKGVycikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9XG4gICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnByZWZpbmlzaGVkICYmICFzdGF0ZS5maW5hbENhbGxlZCkge1xuICAgIGlmICh0eXBlb2Ygc3RyZWFtLl9maW5hbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgICBzdGF0ZS5maW5hbENhbGxlZCA9IHRydWU7XG4gICAgICBwcm9jZXNzTmV4dFRpY2soY2FsbEZpbmFsLCBzdHJlYW0sIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUucHJlZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG4gIGlmIChuZWVkKSB7XG4gICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5lZWQ7XG59XG5cbmZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHN0YXRlLmVuZGluZyA9IHRydWU7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICBpZiAoY2IpIHtcbiAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHByb2Nlc3NOZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpO1xuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9uQ29ya2VkRmluaXNoKGNvcmtSZXEsIHN0YXRlLCBlcnIpIHtcbiAgdmFyIGVudHJ5ID0gY29ya1JlcS5lbnRyeTtcbiAgY29ya1JlcS5lbnRyeSA9IG51bGw7XG4gIHdoaWxlIChlbnRyeSkge1xuICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGNiKGVycik7XG4gICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICB9XG4gIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IGNvcmtSZXE7XG4gIH0gZWxzZSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gY29ya1JlcTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGUucHJvdG90eXBlLCAnZGVzdHJveWVkJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAvLyB3ZSBpZ25vcmUgdGhlIHZhbHVlIGlmIHRoZSBzdHJlYW1cbiAgICAvLyBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XG4gICAgaWYgKCF0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgIC8vIG1hbmFnaW5nIGRlc3Ryb3llZFxuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX3VuZGVzdHJveSA9IGRlc3Ryb3lJbXBsLnVuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHRoaXMuZW5kKCk7XG4gIGNiKGVycik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbmZ1bmN0aW9uIGNvcHlCdWZmZXIoc3JjLCB0YXJnZXQsIG9mZnNldCkge1xuICBzcmMuY29weSh0YXJnZXQsIG9mZnNldCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCdWZmZXJMaXN0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCdWZmZXJMaXN0KTtcblxuICAgIHRoaXMuaGVhZCA9IG51bGw7XG4gICAgdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH1cblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uIHVuc2hpZnQodikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogdGhpcy5oZWFkIH07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gc2hpZnQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtlbHNlIHRoaXMuaGVhZCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIC0tdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbiBqb2luKHMpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgcmV0ID0gJycgKyBwLmRhdGE7XG4gICAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICAgIHJldCArPSBzICsgcC5kYXRhO1xuICAgIH1yZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdChuKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gQnVmZmVyLmFsbG9jKDApO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgcmV0dXJuIHRoaXMuaGVhZC5kYXRhO1xuICAgIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChwKSB7XG4gICAgICBjb3B5QnVmZmVyKHAuZGF0YSwgcmV0LCBpKTtcbiAgICAgIGkgKz0gcC5kYXRhLmxlbmd0aDtcbiAgICAgIHAgPSBwLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgcmV0dXJuIEJ1ZmZlckxpc3Q7XG59KCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcHJvY2Vzc05leHRUaWNrID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXG5mdW5jdGlvbiBkZXN0cm95KGVyciwgY2IpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgcmVhZGFibGVEZXN0cm95ZWQgPSB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB2YXIgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuXG4gIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkge1xuICAgIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2UgaWYgKGVyciAmJiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUgfHwgIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSkge1xuICAgICAgcHJvY2Vzc05leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBwcm9jZXNzTmV4dFRpY2soZW1pdEVycm9yTlQsIF90aGlzLCBlcnIpO1xuICAgICAgaWYgKF90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhZGFibGUnKS5QYXNzVGhyb3VnaFxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBleHBvcnRzO1xuZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG5leHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuZXhwb3J0cy5EdXBsZXggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX2R1cGxleC5qcycpO1xuZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9yZWFkYWJsZScpLlRyYW5zZm9ybVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG4iLCIndXNlIHN0cmljdCdcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoQmFzZSA9IHJlcXVpcmUoJ2hhc2gtYmFzZScpXG5cbmZ1bmN0aW9uIFJJUEVNRDE2MCAoKSB7XG4gIEhhc2hCYXNlLmNhbGwodGhpcywgNjQpXG5cbiAgLy8gc3RhdGVcbiAgdGhpcy5fYSA9IDB4Njc0NTIzMDFcbiAgdGhpcy5fYiA9IDB4ZWZjZGFiODlcbiAgdGhpcy5fYyA9IDB4OThiYWRjZmVcbiAgdGhpcy5fZCA9IDB4MTAzMjU0NzZcbiAgdGhpcy5fZSA9IDB4YzNkMmUxZjBcbn1cblxuaW5oZXJpdHMoUklQRU1EMTYwLCBIYXNoQmFzZSlcblxuUklQRU1EMTYwLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbSA9IG5ldyBBcnJheSgxNilcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBtW2ldID0gdGhpcy5fYmxvY2sucmVhZEludDMyTEUoaSAqIDQpXG5cbiAgdmFyIGFsID0gdGhpcy5fYVxuICB2YXIgYmwgPSB0aGlzLl9iXG4gIHZhciBjbCA9IHRoaXMuX2NcbiAgdmFyIGRsID0gdGhpcy5fZFxuICB2YXIgZWwgPSB0aGlzLl9lXG5cbiAgLy8gTWogPSAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1XG4gIC8vIEsgPSAweDAwMDAwMDAwXG4gIC8vIFNqID0gMTEsIDE0LCAxNSwgMTIsIDUsIDgsIDcsIDksIDExLCAxMywgMTQsIDE1LCA2LCA3LCA5LCA4XG4gIGFsID0gZm4xKGFsLCBibCwgY2wsIGRsLCBlbCwgbVswXSwgMHgwMDAwMDAwMCwgMTEpOyBjbCA9IHJvdGwoY2wsIDEwKVxuICBlbCA9IGZuMShlbCwgYWwsIGJsLCBjbCwgZGwsIG1bMV0sIDB4MDAwMDAwMDAsIDE0KTsgYmwgPSByb3RsKGJsLCAxMClcbiAgZGwgPSBmbjEoZGwsIGVsLCBhbCwgYmwsIGNsLCBtWzJdLCAweDAwMDAwMDAwLCAxNSk7IGFsID0gcm90bChhbCwgMTApXG4gIGNsID0gZm4xKGNsLCBkbCwgZWwsIGFsLCBibCwgbVszXSwgMHgwMDAwMDAwMCwgMTIpOyBlbCA9IHJvdGwoZWwsIDEwKVxuICBibCA9IGZuMShibCwgY2wsIGRsLCBlbCwgYWwsIG1bNF0sIDB4MDAwMDAwMDAsIDUpOyBkbCA9IHJvdGwoZGwsIDEwKVxuICBhbCA9IGZuMShhbCwgYmwsIGNsLCBkbCwgZWwsIG1bNV0sIDB4MDAwMDAwMDAsIDgpOyBjbCA9IHJvdGwoY2wsIDEwKVxuICBlbCA9IGZuMShlbCwgYWwsIGJsLCBjbCwgZGwsIG1bNl0sIDB4MDAwMDAwMDAsIDcpOyBibCA9IHJvdGwoYmwsIDEwKVxuICBkbCA9IGZuMShkbCwgZWwsIGFsLCBibCwgY2wsIG1bN10sIDB4MDAwMDAwMDAsIDkpOyBhbCA9IHJvdGwoYWwsIDEwKVxuICBjbCA9IGZuMShjbCwgZGwsIGVsLCBhbCwgYmwsIG1bOF0sIDB4MDAwMDAwMDAsIDExKTsgZWwgPSByb3RsKGVsLCAxMClcbiAgYmwgPSBmbjEoYmwsIGNsLCBkbCwgZWwsIGFsLCBtWzldLCAweDAwMDAwMDAwLCAxMyk7IGRsID0gcm90bChkbCwgMTApXG4gIGFsID0gZm4xKGFsLCBibCwgY2wsIGRsLCBlbCwgbVsxMF0sIDB4MDAwMDAwMDAsIDE0KTsgY2wgPSByb3RsKGNsLCAxMClcbiAgZWwgPSBmbjEoZWwsIGFsLCBibCwgY2wsIGRsLCBtWzExXSwgMHgwMDAwMDAwMCwgMTUpOyBibCA9IHJvdGwoYmwsIDEwKVxuICBkbCA9IGZuMShkbCwgZWwsIGFsLCBibCwgY2wsIG1bMTJdLCAweDAwMDAwMDAwLCA2KTsgYWwgPSByb3RsKGFsLCAxMClcbiAgY2wgPSBmbjEoY2wsIGRsLCBlbCwgYWwsIGJsLCBtWzEzXSwgMHgwMDAwMDAwMCwgNyk7IGVsID0gcm90bChlbCwgMTApXG4gIGJsID0gZm4xKGJsLCBjbCwgZGwsIGVsLCBhbCwgbVsxNF0sIDB4MDAwMDAwMDAsIDkpOyBkbCA9IHJvdGwoZGwsIDEwKVxuICBhbCA9IGZuMShhbCwgYmwsIGNsLCBkbCwgZWwsIG1bMTVdLCAweDAwMDAwMDAwLCA4KTsgY2wgPSByb3RsKGNsLCAxMClcblxuICAvLyBNaiA9IDcsIDQsIDEzLCAxLCAxMCwgNiwgMTUsIDMsIDEyLCAwLCA5LCA1LCAyLCAxNCwgMTEsIDhcbiAgLy8gSyA9IDB4NWE4Mjc5OTlcbiAgLy8gU2ogPSA3LCA2LCA4LCAxMywgMTEsIDksIDcsIDE1LCA3LCAxMiwgMTUsIDksIDExLCA3LCAxMywgMTJcbiAgZWwgPSBmbjIoZWwsIGFsLCBibCwgY2wsIGRsLCBtWzddLCAweDVhODI3OTk5LCA3KTsgYmwgPSByb3RsKGJsLCAxMClcbiAgZGwgPSBmbjIoZGwsIGVsLCBhbCwgYmwsIGNsLCBtWzRdLCAweDVhODI3OTk5LCA2KTsgYWwgPSByb3RsKGFsLCAxMClcbiAgY2wgPSBmbjIoY2wsIGRsLCBlbCwgYWwsIGJsLCBtWzEzXSwgMHg1YTgyNzk5OSwgOCk7IGVsID0gcm90bChlbCwgMTApXG4gIGJsID0gZm4yKGJsLCBjbCwgZGwsIGVsLCBhbCwgbVsxXSwgMHg1YTgyNzk5OSwgMTMpOyBkbCA9IHJvdGwoZGwsIDEwKVxuICBhbCA9IGZuMihhbCwgYmwsIGNsLCBkbCwgZWwsIG1bMTBdLCAweDVhODI3OTk5LCAxMSk7IGNsID0gcm90bChjbCwgMTApXG4gIGVsID0gZm4yKGVsLCBhbCwgYmwsIGNsLCBkbCwgbVs2XSwgMHg1YTgyNzk5OSwgOSk7IGJsID0gcm90bChibCwgMTApXG4gIGRsID0gZm4yKGRsLCBlbCwgYWwsIGJsLCBjbCwgbVsxNV0sIDB4NWE4Mjc5OTksIDcpOyBhbCA9IHJvdGwoYWwsIDEwKVxuICBjbCA9IGZuMihjbCwgZGwsIGVsLCBhbCwgYmwsIG1bM10sIDB4NWE4Mjc5OTksIDE1KTsgZWwgPSByb3RsKGVsLCAxMClcbiAgYmwgPSBmbjIoYmwsIGNsLCBkbCwgZWwsIGFsLCBtWzEyXSwgMHg1YTgyNzk5OSwgNyk7IGRsID0gcm90bChkbCwgMTApXG4gIGFsID0gZm4yKGFsLCBibCwgY2wsIGRsLCBlbCwgbVswXSwgMHg1YTgyNzk5OSwgMTIpOyBjbCA9IHJvdGwoY2wsIDEwKVxuICBlbCA9IGZuMihlbCwgYWwsIGJsLCBjbCwgZGwsIG1bOV0sIDB4NWE4Mjc5OTksIDE1KTsgYmwgPSByb3RsKGJsLCAxMClcbiAgZGwgPSBmbjIoZGwsIGVsLCBhbCwgYmwsIGNsLCBtWzVdLCAweDVhODI3OTk5LCA5KTsgYWwgPSByb3RsKGFsLCAxMClcbiAgY2wgPSBmbjIoY2wsIGRsLCBlbCwgYWwsIGJsLCBtWzJdLCAweDVhODI3OTk5LCAxMSk7IGVsID0gcm90bChlbCwgMTApXG4gIGJsID0gZm4yKGJsLCBjbCwgZGwsIGVsLCBhbCwgbVsxNF0sIDB4NWE4Mjc5OTksIDcpOyBkbCA9IHJvdGwoZGwsIDEwKVxuICBhbCA9IGZuMihhbCwgYmwsIGNsLCBkbCwgZWwsIG1bMTFdLCAweDVhODI3OTk5LCAxMyk7IGNsID0gcm90bChjbCwgMTApXG4gIGVsID0gZm4yKGVsLCBhbCwgYmwsIGNsLCBkbCwgbVs4XSwgMHg1YTgyNzk5OSwgMTIpOyBibCA9IHJvdGwoYmwsIDEwKVxuXG4gIC8vIE1qID0gMywgMTAsIDE0LCA0LCA5LCAxNSwgOCwgMSwgMiwgNywgMCwgNiwgMTMsIDExLCA1LCAxMlxuICAvLyBLID0gMHg2ZWQ5ZWJhMVxuICAvLyBTaiA9IDExLCAxMywgNiwgNywgMTQsIDksIDEzLCAxNSwgMTQsIDgsIDEzLCA2LCA1LCAxMiwgNywgNVxuICBkbCA9IGZuMyhkbCwgZWwsIGFsLCBibCwgY2wsIG1bM10sIDB4NmVkOWViYTEsIDExKTsgYWwgPSByb3RsKGFsLCAxMClcbiAgY2wgPSBmbjMoY2wsIGRsLCBlbCwgYWwsIGJsLCBtWzEwXSwgMHg2ZWQ5ZWJhMSwgMTMpOyBlbCA9IHJvdGwoZWwsIDEwKVxuICBibCA9IGZuMyhibCwgY2wsIGRsLCBlbCwgYWwsIG1bMTRdLCAweDZlZDllYmExLCA2KTsgZGwgPSByb3RsKGRsLCAxMClcbiAgYWwgPSBmbjMoYWwsIGJsLCBjbCwgZGwsIGVsLCBtWzRdLCAweDZlZDllYmExLCA3KTsgY2wgPSByb3RsKGNsLCAxMClcbiAgZWwgPSBmbjMoZWwsIGFsLCBibCwgY2wsIGRsLCBtWzldLCAweDZlZDllYmExLCAxNCk7IGJsID0gcm90bChibCwgMTApXG4gIGRsID0gZm4zKGRsLCBlbCwgYWwsIGJsLCBjbCwgbVsxNV0sIDB4NmVkOWViYTEsIDkpOyBhbCA9IHJvdGwoYWwsIDEwKVxuICBjbCA9IGZuMyhjbCwgZGwsIGVsLCBhbCwgYmwsIG1bOF0sIDB4NmVkOWViYTEsIDEzKTsgZWwgPSByb3RsKGVsLCAxMClcbiAgYmwgPSBmbjMoYmwsIGNsLCBkbCwgZWwsIGFsLCBtWzFdLCAweDZlZDllYmExLCAxNSk7IGRsID0gcm90bChkbCwgMTApXG4gIGFsID0gZm4zKGFsLCBibCwgY2wsIGRsLCBlbCwgbVsyXSwgMHg2ZWQ5ZWJhMSwgMTQpOyBjbCA9IHJvdGwoY2wsIDEwKVxuICBlbCA9IGZuMyhlbCwgYWwsIGJsLCBjbCwgZGwsIG1bN10sIDB4NmVkOWViYTEsIDgpOyBibCA9IHJvdGwoYmwsIDEwKVxuICBkbCA9IGZuMyhkbCwgZWwsIGFsLCBibCwgY2wsIG1bMF0sIDB4NmVkOWViYTEsIDEzKTsgYWwgPSByb3RsKGFsLCAxMClcbiAgY2wgPSBmbjMoY2wsIGRsLCBlbCwgYWwsIGJsLCBtWzZdLCAweDZlZDllYmExLCA2KTsgZWwgPSByb3RsKGVsLCAxMClcbiAgYmwgPSBmbjMoYmwsIGNsLCBkbCwgZWwsIGFsLCBtWzEzXSwgMHg2ZWQ5ZWJhMSwgNSk7IGRsID0gcm90bChkbCwgMTApXG4gIGFsID0gZm4zKGFsLCBibCwgY2wsIGRsLCBlbCwgbVsxMV0sIDB4NmVkOWViYTEsIDEyKTsgY2wgPSByb3RsKGNsLCAxMClcbiAgZWwgPSBmbjMoZWwsIGFsLCBibCwgY2wsIGRsLCBtWzVdLCAweDZlZDllYmExLCA3KTsgYmwgPSByb3RsKGJsLCAxMClcbiAgZGwgPSBmbjMoZGwsIGVsLCBhbCwgYmwsIGNsLCBtWzEyXSwgMHg2ZWQ5ZWJhMSwgNSk7IGFsID0gcm90bChhbCwgMTApXG5cbiAgLy8gTWogPSAxLCA5LCAxMSwgMTAsIDAsIDgsIDEyLCA0LCAxMywgMywgNywgMTUsIDE0LCA1LCA2LCAyXG4gIC8vIEsgPSAweDhmMWJiY2RjXG4gIC8vIFNqID0gMTEsIDEyLCAxNCwgMTUsIDE0LCAxNSwgOSwgOCwgOSwgMTQsIDUsIDYsIDgsIDYsIDUsIDEyXG4gIGNsID0gZm40KGNsLCBkbCwgZWwsIGFsLCBibCwgbVsxXSwgMHg4ZjFiYmNkYywgMTEpOyBlbCA9IHJvdGwoZWwsIDEwKVxuICBibCA9IGZuNChibCwgY2wsIGRsLCBlbCwgYWwsIG1bOV0sIDB4OGYxYmJjZGMsIDEyKTsgZGwgPSByb3RsKGRsLCAxMClcbiAgYWwgPSBmbjQoYWwsIGJsLCBjbCwgZGwsIGVsLCBtWzExXSwgMHg4ZjFiYmNkYywgMTQpOyBjbCA9IHJvdGwoY2wsIDEwKVxuICBlbCA9IGZuNChlbCwgYWwsIGJsLCBjbCwgZGwsIG1bMTBdLCAweDhmMWJiY2RjLCAxNSk7IGJsID0gcm90bChibCwgMTApXG4gIGRsID0gZm40KGRsLCBlbCwgYWwsIGJsLCBjbCwgbVswXSwgMHg4ZjFiYmNkYywgMTQpOyBhbCA9IHJvdGwoYWwsIDEwKVxuICBjbCA9IGZuNChjbCwgZGwsIGVsLCBhbCwgYmwsIG1bOF0sIDB4OGYxYmJjZGMsIDE1KTsgZWwgPSByb3RsKGVsLCAxMClcbiAgYmwgPSBmbjQoYmwsIGNsLCBkbCwgZWwsIGFsLCBtWzEyXSwgMHg4ZjFiYmNkYywgOSk7IGRsID0gcm90bChkbCwgMTApXG4gIGFsID0gZm40KGFsLCBibCwgY2wsIGRsLCBlbCwgbVs0XSwgMHg4ZjFiYmNkYywgOCk7IGNsID0gcm90bChjbCwgMTApXG4gIGVsID0gZm40KGVsLCBhbCwgYmwsIGNsLCBkbCwgbVsxM10sIDB4OGYxYmJjZGMsIDkpOyBibCA9IHJvdGwoYmwsIDEwKVxuICBkbCA9IGZuNChkbCwgZWwsIGFsLCBibCwgY2wsIG1bM10sIDB4OGYxYmJjZGMsIDE0KTsgYWwgPSByb3RsKGFsLCAxMClcbiAgY2wgPSBmbjQoY2wsIGRsLCBlbCwgYWwsIGJsLCBtWzddLCAweDhmMWJiY2RjLCA1KTsgZWwgPSByb3RsKGVsLCAxMClcbiAgYmwgPSBmbjQoYmwsIGNsLCBkbCwgZWwsIGFsLCBtWzE1XSwgMHg4ZjFiYmNkYywgNik7IGRsID0gcm90bChkbCwgMTApXG4gIGFsID0gZm40KGFsLCBibCwgY2wsIGRsLCBlbCwgbVsxNF0sIDB4OGYxYmJjZGMsIDgpOyBjbCA9IHJvdGwoY2wsIDEwKVxuICBlbCA9IGZuNChlbCwgYWwsIGJsLCBjbCwgZGwsIG1bNV0sIDB4OGYxYmJjZGMsIDYpOyBibCA9IHJvdGwoYmwsIDEwKVxuICBkbCA9IGZuNChkbCwgZWwsIGFsLCBibCwgY2wsIG1bNl0sIDB4OGYxYmJjZGMsIDUpOyBhbCA9IHJvdGwoYWwsIDEwKVxuICBjbCA9IGZuNChjbCwgZGwsIGVsLCBhbCwgYmwsIG1bMl0sIDB4OGYxYmJjZGMsIDEyKTsgZWwgPSByb3RsKGVsLCAxMClcblxuICAvLyBNaiA9IDQsIDAsIDUsIDksIDcsIDEyLCAyLCAxMCwgMTQsIDEsIDMsIDgsIDExLCA2LCAxNSwgMTNcbiAgLy8gSyA9IDB4YTk1M2ZkNGVcbiAgLy8gU2ogPSA5LCAxNSwgNSwgMTEsIDYsIDgsIDEzLCAxMiwgNSwgMTIsIDEzLCAxNCwgMTEsIDgsIDUsIDZcbiAgYmwgPSBmbjUoYmwsIGNsLCBkbCwgZWwsIGFsLCBtWzRdLCAweGE5NTNmZDRlLCA5KTsgZGwgPSByb3RsKGRsLCAxMClcbiAgYWwgPSBmbjUoYWwsIGJsLCBjbCwgZGwsIGVsLCBtWzBdLCAweGE5NTNmZDRlLCAxNSk7IGNsID0gcm90bChjbCwgMTApXG4gIGVsID0gZm41KGVsLCBhbCwgYmwsIGNsLCBkbCwgbVs1XSwgMHhhOTUzZmQ0ZSwgNSk7IGJsID0gcm90bChibCwgMTApXG4gIGRsID0gZm41KGRsLCBlbCwgYWwsIGJsLCBjbCwgbVs5XSwgMHhhOTUzZmQ0ZSwgMTEpOyBhbCA9IHJvdGwoYWwsIDEwKVxuICBjbCA9IGZuNShjbCwgZGwsIGVsLCBhbCwgYmwsIG1bN10sIDB4YTk1M2ZkNGUsIDYpOyBlbCA9IHJvdGwoZWwsIDEwKVxuICBibCA9IGZuNShibCwgY2wsIGRsLCBlbCwgYWwsIG1bMTJdLCAweGE5NTNmZDRlLCA4KTsgZGwgPSByb3RsKGRsLCAxMClcbiAgYWwgPSBmbjUoYWwsIGJsLCBjbCwgZGwsIGVsLCBtWzJdLCAweGE5NTNmZDRlLCAxMyk7IGNsID0gcm90bChjbCwgMTApXG4gIGVsID0gZm41KGVsLCBhbCwgYmwsIGNsLCBkbCwgbVsxMF0sIDB4YTk1M2ZkNGUsIDEyKTsgYmwgPSByb3RsKGJsLCAxMClcbiAgZGwgPSBmbjUoZGwsIGVsLCBhbCwgYmwsIGNsLCBtWzE0XSwgMHhhOTUzZmQ0ZSwgNSk7IGFsID0gcm90bChhbCwgMTApXG4gIGNsID0gZm41KGNsLCBkbCwgZWwsIGFsLCBibCwgbVsxXSwgMHhhOTUzZmQ0ZSwgMTIpOyBlbCA9IHJvdGwoZWwsIDEwKVxuICBibCA9IGZuNShibCwgY2wsIGRsLCBlbCwgYWwsIG1bM10sIDB4YTk1M2ZkNGUsIDEzKTsgZGwgPSByb3RsKGRsLCAxMClcbiAgYWwgPSBmbjUoYWwsIGJsLCBjbCwgZGwsIGVsLCBtWzhdLCAweGE5NTNmZDRlLCAxNCk7IGNsID0gcm90bChjbCwgMTApXG4gIGVsID0gZm41KGVsLCBhbCwgYmwsIGNsLCBkbCwgbVsxMV0sIDB4YTk1M2ZkNGUsIDExKTsgYmwgPSByb3RsKGJsLCAxMClcbiAgZGwgPSBmbjUoZGwsIGVsLCBhbCwgYmwsIGNsLCBtWzZdLCAweGE5NTNmZDRlLCA4KTsgYWwgPSByb3RsKGFsLCAxMClcbiAgY2wgPSBmbjUoY2wsIGRsLCBlbCwgYWwsIGJsLCBtWzE1XSwgMHhhOTUzZmQ0ZSwgNSk7IGVsID0gcm90bChlbCwgMTApXG4gIGJsID0gZm41KGJsLCBjbCwgZGwsIGVsLCBhbCwgbVsxM10sIDB4YTk1M2ZkNGUsIDYpOyBkbCA9IHJvdGwoZGwsIDEwKVxuXG4gIHZhciBhciA9IHRoaXMuX2FcbiAgdmFyIGJyID0gdGhpcy5fYlxuICB2YXIgY3IgPSB0aGlzLl9jXG4gIHZhciBkciA9IHRoaXMuX2RcbiAgdmFyIGVyID0gdGhpcy5fZVxuXG4gIC8vIE0naiA9IDUsIDE0LCA3LCAwLCA5LCAyLCAxMSwgNCwgMTMsIDYsIDE1LCA4LCAxLCAxMCwgMywgMTJcbiAgLy8gSycgPSAweDUwYTI4YmU2XG4gIC8vIFMnaiA9IDgsIDksIDksIDExLCAxMywgMTUsIDE1LCA1LCA3LCA3LCA4LCAxMSwgMTQsIDE0LCAxMiwgNlxuICBhciA9IGZuNShhciwgYnIsIGNyLCBkciwgZXIsIG1bNV0sIDB4NTBhMjhiZTYsIDgpOyBjciA9IHJvdGwoY3IsIDEwKVxuICBlciA9IGZuNShlciwgYXIsIGJyLCBjciwgZHIsIG1bMTRdLCAweDUwYTI4YmU2LCA5KTsgYnIgPSByb3RsKGJyLCAxMClcbiAgZHIgPSBmbjUoZHIsIGVyLCBhciwgYnIsIGNyLCBtWzddLCAweDUwYTI4YmU2LCA5KTsgYXIgPSByb3RsKGFyLCAxMClcbiAgY3IgPSBmbjUoY3IsIGRyLCBlciwgYXIsIGJyLCBtWzBdLCAweDUwYTI4YmU2LCAxMSk7IGVyID0gcm90bChlciwgMTApXG4gIGJyID0gZm41KGJyLCBjciwgZHIsIGVyLCBhciwgbVs5XSwgMHg1MGEyOGJlNiwgMTMpOyBkciA9IHJvdGwoZHIsIDEwKVxuICBhciA9IGZuNShhciwgYnIsIGNyLCBkciwgZXIsIG1bMl0sIDB4NTBhMjhiZTYsIDE1KTsgY3IgPSByb3RsKGNyLCAxMClcbiAgZXIgPSBmbjUoZXIsIGFyLCBiciwgY3IsIGRyLCBtWzExXSwgMHg1MGEyOGJlNiwgMTUpOyBiciA9IHJvdGwoYnIsIDEwKVxuICBkciA9IGZuNShkciwgZXIsIGFyLCBiciwgY3IsIG1bNF0sIDB4NTBhMjhiZTYsIDUpOyBhciA9IHJvdGwoYXIsIDEwKVxuICBjciA9IGZuNShjciwgZHIsIGVyLCBhciwgYnIsIG1bMTNdLCAweDUwYTI4YmU2LCA3KTsgZXIgPSByb3RsKGVyLCAxMClcbiAgYnIgPSBmbjUoYnIsIGNyLCBkciwgZXIsIGFyLCBtWzZdLCAweDUwYTI4YmU2LCA3KTsgZHIgPSByb3RsKGRyLCAxMClcbiAgYXIgPSBmbjUoYXIsIGJyLCBjciwgZHIsIGVyLCBtWzE1XSwgMHg1MGEyOGJlNiwgOCk7IGNyID0gcm90bChjciwgMTApXG4gIGVyID0gZm41KGVyLCBhciwgYnIsIGNyLCBkciwgbVs4XSwgMHg1MGEyOGJlNiwgMTEpOyBiciA9IHJvdGwoYnIsIDEwKVxuICBkciA9IGZuNShkciwgZXIsIGFyLCBiciwgY3IsIG1bMV0sIDB4NTBhMjhiZTYsIDE0KTsgYXIgPSByb3RsKGFyLCAxMClcbiAgY3IgPSBmbjUoY3IsIGRyLCBlciwgYXIsIGJyLCBtWzEwXSwgMHg1MGEyOGJlNiwgMTQpOyBlciA9IHJvdGwoZXIsIDEwKVxuICBiciA9IGZuNShiciwgY3IsIGRyLCBlciwgYXIsIG1bM10sIDB4NTBhMjhiZTYsIDEyKTsgZHIgPSByb3RsKGRyLCAxMClcbiAgYXIgPSBmbjUoYXIsIGJyLCBjciwgZHIsIGVyLCBtWzEyXSwgMHg1MGEyOGJlNiwgNik7IGNyID0gcm90bChjciwgMTApXG5cbiAgLy8gTSdqID0gNiwgMTEsIDMsIDcsIDAsIDEzLCA1LCAxMCwgMTQsIDE1LCA4LCAxMiwgNCwgOSwgMSwgMlxuICAvLyBLJyA9IDB4NWM0ZGQxMjRcbiAgLy8gUydqID0gOSwgMTMsIDE1LCA3LCAxMiwgOCwgOSwgMTEsIDcsIDcsIDEyLCA3LCA2LCAxNSwgMTMsIDExXG4gIGVyID0gZm40KGVyLCBhciwgYnIsIGNyLCBkciwgbVs2XSwgMHg1YzRkZDEyNCwgOSk7IGJyID0gcm90bChiciwgMTApXG4gIGRyID0gZm40KGRyLCBlciwgYXIsIGJyLCBjciwgbVsxMV0sIDB4NWM0ZGQxMjQsIDEzKTsgYXIgPSByb3RsKGFyLCAxMClcbiAgY3IgPSBmbjQoY3IsIGRyLCBlciwgYXIsIGJyLCBtWzNdLCAweDVjNGRkMTI0LCAxNSk7IGVyID0gcm90bChlciwgMTApXG4gIGJyID0gZm40KGJyLCBjciwgZHIsIGVyLCBhciwgbVs3XSwgMHg1YzRkZDEyNCwgNyk7IGRyID0gcm90bChkciwgMTApXG4gIGFyID0gZm40KGFyLCBiciwgY3IsIGRyLCBlciwgbVswXSwgMHg1YzRkZDEyNCwgMTIpOyBjciA9IHJvdGwoY3IsIDEwKVxuICBlciA9IGZuNChlciwgYXIsIGJyLCBjciwgZHIsIG1bMTNdLCAweDVjNGRkMTI0LCA4KTsgYnIgPSByb3RsKGJyLCAxMClcbiAgZHIgPSBmbjQoZHIsIGVyLCBhciwgYnIsIGNyLCBtWzVdLCAweDVjNGRkMTI0LCA5KTsgYXIgPSByb3RsKGFyLCAxMClcbiAgY3IgPSBmbjQoY3IsIGRyLCBlciwgYXIsIGJyLCBtWzEwXSwgMHg1YzRkZDEyNCwgMTEpOyBlciA9IHJvdGwoZXIsIDEwKVxuICBiciA9IGZuNChiciwgY3IsIGRyLCBlciwgYXIsIG1bMTRdLCAweDVjNGRkMTI0LCA3KTsgZHIgPSByb3RsKGRyLCAxMClcbiAgYXIgPSBmbjQoYXIsIGJyLCBjciwgZHIsIGVyLCBtWzE1XSwgMHg1YzRkZDEyNCwgNyk7IGNyID0gcm90bChjciwgMTApXG4gIGVyID0gZm40KGVyLCBhciwgYnIsIGNyLCBkciwgbVs4XSwgMHg1YzRkZDEyNCwgMTIpOyBiciA9IHJvdGwoYnIsIDEwKVxuICBkciA9IGZuNChkciwgZXIsIGFyLCBiciwgY3IsIG1bMTJdLCAweDVjNGRkMTI0LCA3KTsgYXIgPSByb3RsKGFyLCAxMClcbiAgY3IgPSBmbjQoY3IsIGRyLCBlciwgYXIsIGJyLCBtWzRdLCAweDVjNGRkMTI0LCA2KTsgZXIgPSByb3RsKGVyLCAxMClcbiAgYnIgPSBmbjQoYnIsIGNyLCBkciwgZXIsIGFyLCBtWzldLCAweDVjNGRkMTI0LCAxNSk7IGRyID0gcm90bChkciwgMTApXG4gIGFyID0gZm40KGFyLCBiciwgY3IsIGRyLCBlciwgbVsxXSwgMHg1YzRkZDEyNCwgMTMpOyBjciA9IHJvdGwoY3IsIDEwKVxuICBlciA9IGZuNChlciwgYXIsIGJyLCBjciwgZHIsIG1bMl0sIDB4NWM0ZGQxMjQsIDExKTsgYnIgPSByb3RsKGJyLCAxMClcblxuICAvLyBNJ2ogPSAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzXG4gIC8vIEsnID0gMHg2ZDcwM2VmM1xuICAvLyBTJ2ogPSA5LCA3LCAxNSwgMTEsIDgsIDYsIDYsIDE0LCAxMiwgMTMsIDUsIDE0LCAxMywgMTMsIDcsIDVcbiAgZHIgPSBmbjMoZHIsIGVyLCBhciwgYnIsIGNyLCBtWzE1XSwgMHg2ZDcwM2VmMywgOSk7IGFyID0gcm90bChhciwgMTApXG4gIGNyID0gZm4zKGNyLCBkciwgZXIsIGFyLCBiciwgbVs1XSwgMHg2ZDcwM2VmMywgNyk7IGVyID0gcm90bChlciwgMTApXG4gIGJyID0gZm4zKGJyLCBjciwgZHIsIGVyLCBhciwgbVsxXSwgMHg2ZDcwM2VmMywgMTUpOyBkciA9IHJvdGwoZHIsIDEwKVxuICBhciA9IGZuMyhhciwgYnIsIGNyLCBkciwgZXIsIG1bM10sIDB4NmQ3MDNlZjMsIDExKTsgY3IgPSByb3RsKGNyLCAxMClcbiAgZXIgPSBmbjMoZXIsIGFyLCBiciwgY3IsIGRyLCBtWzddLCAweDZkNzAzZWYzLCA4KTsgYnIgPSByb3RsKGJyLCAxMClcbiAgZHIgPSBmbjMoZHIsIGVyLCBhciwgYnIsIGNyLCBtWzE0XSwgMHg2ZDcwM2VmMywgNik7IGFyID0gcm90bChhciwgMTApXG4gIGNyID0gZm4zKGNyLCBkciwgZXIsIGFyLCBiciwgbVs2XSwgMHg2ZDcwM2VmMywgNik7IGVyID0gcm90bChlciwgMTApXG4gIGJyID0gZm4zKGJyLCBjciwgZHIsIGVyLCBhciwgbVs5XSwgMHg2ZDcwM2VmMywgMTQpOyBkciA9IHJvdGwoZHIsIDEwKVxuICBhciA9IGZuMyhhciwgYnIsIGNyLCBkciwgZXIsIG1bMTFdLCAweDZkNzAzZWYzLCAxMik7IGNyID0gcm90bChjciwgMTApXG4gIGVyID0gZm4zKGVyLCBhciwgYnIsIGNyLCBkciwgbVs4XSwgMHg2ZDcwM2VmMywgMTMpOyBiciA9IHJvdGwoYnIsIDEwKVxuICBkciA9IGZuMyhkciwgZXIsIGFyLCBiciwgY3IsIG1bMTJdLCAweDZkNzAzZWYzLCA1KTsgYXIgPSByb3RsKGFyLCAxMClcbiAgY3IgPSBmbjMoY3IsIGRyLCBlciwgYXIsIGJyLCBtWzJdLCAweDZkNzAzZWYzLCAxNCk7IGVyID0gcm90bChlciwgMTApXG4gIGJyID0gZm4zKGJyLCBjciwgZHIsIGVyLCBhciwgbVsxMF0sIDB4NmQ3MDNlZjMsIDEzKTsgZHIgPSByb3RsKGRyLCAxMClcbiAgYXIgPSBmbjMoYXIsIGJyLCBjciwgZHIsIGVyLCBtWzBdLCAweDZkNzAzZWYzLCAxMyk7IGNyID0gcm90bChjciwgMTApXG4gIGVyID0gZm4zKGVyLCBhciwgYnIsIGNyLCBkciwgbVs0XSwgMHg2ZDcwM2VmMywgNyk7IGJyID0gcm90bChiciwgMTApXG4gIGRyID0gZm4zKGRyLCBlciwgYXIsIGJyLCBjciwgbVsxM10sIDB4NmQ3MDNlZjMsIDUpOyBhciA9IHJvdGwoYXIsIDEwKVxuXG4gIC8vIE0naiA9IDgsIDYsIDQsIDEsIDMsIDExLCAxNSwgMCwgNSwgMTIsIDIsIDEzLCA5LCA3LCAxMCwgMTRcbiAgLy8gSycgPSAweDdhNmQ3NmU5XG4gIC8vIFMnaiA9IDE1LCA1LCA4LCAxMSwgMTQsIDE0LCA2LCAxNCwgNiwgOSwgMTIsIDksIDEyLCA1LCAxNSwgOFxuICBjciA9IGZuMihjciwgZHIsIGVyLCBhciwgYnIsIG1bOF0sIDB4N2E2ZDc2ZTksIDE1KTsgZXIgPSByb3RsKGVyLCAxMClcbiAgYnIgPSBmbjIoYnIsIGNyLCBkciwgZXIsIGFyLCBtWzZdLCAweDdhNmQ3NmU5LCA1KTsgZHIgPSByb3RsKGRyLCAxMClcbiAgYXIgPSBmbjIoYXIsIGJyLCBjciwgZHIsIGVyLCBtWzRdLCAweDdhNmQ3NmU5LCA4KTsgY3IgPSByb3RsKGNyLCAxMClcbiAgZXIgPSBmbjIoZXIsIGFyLCBiciwgY3IsIGRyLCBtWzFdLCAweDdhNmQ3NmU5LCAxMSk7IGJyID0gcm90bChiciwgMTApXG4gIGRyID0gZm4yKGRyLCBlciwgYXIsIGJyLCBjciwgbVszXSwgMHg3YTZkNzZlOSwgMTQpOyBhciA9IHJvdGwoYXIsIDEwKVxuICBjciA9IGZuMihjciwgZHIsIGVyLCBhciwgYnIsIG1bMTFdLCAweDdhNmQ3NmU5LCAxNCk7IGVyID0gcm90bChlciwgMTApXG4gIGJyID0gZm4yKGJyLCBjciwgZHIsIGVyLCBhciwgbVsxNV0sIDB4N2E2ZDc2ZTksIDYpOyBkciA9IHJvdGwoZHIsIDEwKVxuICBhciA9IGZuMihhciwgYnIsIGNyLCBkciwgZXIsIG1bMF0sIDB4N2E2ZDc2ZTksIDE0KTsgY3IgPSByb3RsKGNyLCAxMClcbiAgZXIgPSBmbjIoZXIsIGFyLCBiciwgY3IsIGRyLCBtWzVdLCAweDdhNmQ3NmU5LCA2KTsgYnIgPSByb3RsKGJyLCAxMClcbiAgZHIgPSBmbjIoZHIsIGVyLCBhciwgYnIsIGNyLCBtWzEyXSwgMHg3YTZkNzZlOSwgOSk7IGFyID0gcm90bChhciwgMTApXG4gIGNyID0gZm4yKGNyLCBkciwgZXIsIGFyLCBiciwgbVsyXSwgMHg3YTZkNzZlOSwgMTIpOyBlciA9IHJvdGwoZXIsIDEwKVxuICBiciA9IGZuMihiciwgY3IsIGRyLCBlciwgYXIsIG1bMTNdLCAweDdhNmQ3NmU5LCA5KTsgZHIgPSByb3RsKGRyLCAxMClcbiAgYXIgPSBmbjIoYXIsIGJyLCBjciwgZHIsIGVyLCBtWzldLCAweDdhNmQ3NmU5LCAxMik7IGNyID0gcm90bChjciwgMTApXG4gIGVyID0gZm4yKGVyLCBhciwgYnIsIGNyLCBkciwgbVs3XSwgMHg3YTZkNzZlOSwgNSk7IGJyID0gcm90bChiciwgMTApXG4gIGRyID0gZm4yKGRyLCBlciwgYXIsIGJyLCBjciwgbVsxMF0sIDB4N2E2ZDc2ZTksIDE1KTsgYXIgPSByb3RsKGFyLCAxMClcbiAgY3IgPSBmbjIoY3IsIGRyLCBlciwgYXIsIGJyLCBtWzE0XSwgMHg3YTZkNzZlOSwgOCk7IGVyID0gcm90bChlciwgMTApXG5cbiAgLy8gTSdqID0gMTIsIDE1LCAxMCwgNCwgMSwgNSwgOCwgNywgNiwgMiwgMTMsIDE0LCAwLCAzLCA5LCAxMVxuICAvLyBLJyA9IDB4MDAwMDAwMDBcbiAgLy8gUydqID0gOCwgNSwgMTIsIDksIDEyLCA1LCAxNCwgNiwgOCwgMTMsIDYsIDUsIDE1LCAxMywgMTEsIDExXG4gIGJyID0gZm4xKGJyLCBjciwgZHIsIGVyLCBhciwgbVsxMl0sIDB4MDAwMDAwMDAsIDgpOyBkciA9IHJvdGwoZHIsIDEwKVxuICBhciA9IGZuMShhciwgYnIsIGNyLCBkciwgZXIsIG1bMTVdLCAweDAwMDAwMDAwLCA1KTsgY3IgPSByb3RsKGNyLCAxMClcbiAgZXIgPSBmbjEoZXIsIGFyLCBiciwgY3IsIGRyLCBtWzEwXSwgMHgwMDAwMDAwMCwgMTIpOyBiciA9IHJvdGwoYnIsIDEwKVxuICBkciA9IGZuMShkciwgZXIsIGFyLCBiciwgY3IsIG1bNF0sIDB4MDAwMDAwMDAsIDkpOyBhciA9IHJvdGwoYXIsIDEwKVxuICBjciA9IGZuMShjciwgZHIsIGVyLCBhciwgYnIsIG1bMV0sIDB4MDAwMDAwMDAsIDEyKTsgZXIgPSByb3RsKGVyLCAxMClcbiAgYnIgPSBmbjEoYnIsIGNyLCBkciwgZXIsIGFyLCBtWzVdLCAweDAwMDAwMDAwLCA1KTsgZHIgPSByb3RsKGRyLCAxMClcbiAgYXIgPSBmbjEoYXIsIGJyLCBjciwgZHIsIGVyLCBtWzhdLCAweDAwMDAwMDAwLCAxNCk7IGNyID0gcm90bChjciwgMTApXG4gIGVyID0gZm4xKGVyLCBhciwgYnIsIGNyLCBkciwgbVs3XSwgMHgwMDAwMDAwMCwgNik7IGJyID0gcm90bChiciwgMTApXG4gIGRyID0gZm4xKGRyLCBlciwgYXIsIGJyLCBjciwgbVs2XSwgMHgwMDAwMDAwMCwgOCk7IGFyID0gcm90bChhciwgMTApXG4gIGNyID0gZm4xKGNyLCBkciwgZXIsIGFyLCBiciwgbVsyXSwgMHgwMDAwMDAwMCwgMTMpOyBlciA9IHJvdGwoZXIsIDEwKVxuICBiciA9IGZuMShiciwgY3IsIGRyLCBlciwgYXIsIG1bMTNdLCAweDAwMDAwMDAwLCA2KTsgZHIgPSByb3RsKGRyLCAxMClcbiAgYXIgPSBmbjEoYXIsIGJyLCBjciwgZHIsIGVyLCBtWzE0XSwgMHgwMDAwMDAwMCwgNSk7IGNyID0gcm90bChjciwgMTApXG4gIGVyID0gZm4xKGVyLCBhciwgYnIsIGNyLCBkciwgbVswXSwgMHgwMDAwMDAwMCwgMTUpOyBiciA9IHJvdGwoYnIsIDEwKVxuICBkciA9IGZuMShkciwgZXIsIGFyLCBiciwgY3IsIG1bM10sIDB4MDAwMDAwMDAsIDEzKTsgYXIgPSByb3RsKGFyLCAxMClcbiAgY3IgPSBmbjEoY3IsIGRyLCBlciwgYXIsIGJyLCBtWzldLCAweDAwMDAwMDAwLCAxMSk7IGVyID0gcm90bChlciwgMTApXG4gIGJyID0gZm4xKGJyLCBjciwgZHIsIGVyLCBhciwgbVsxMV0sIDB4MDAwMDAwMDAsIDExKTsgZHIgPSByb3RsKGRyLCAxMClcblxuICAvLyBjaGFuZ2Ugc3RhdGVcbiAgdmFyIHQgPSAodGhpcy5fYiArIGNsICsgZHIpIHwgMFxuICB0aGlzLl9iID0gKHRoaXMuX2MgKyBkbCArIGVyKSB8IDBcbiAgdGhpcy5fYyA9ICh0aGlzLl9kICsgZWwgKyBhcikgfCAwXG4gIHRoaXMuX2QgPSAodGhpcy5fZSArIGFsICsgYnIpIHwgMFxuICB0aGlzLl9lID0gKHRoaXMuX2EgKyBibCArIGNyKSB8IDBcbiAgdGhpcy5fYSA9IHRcbn1cblxuUklQRU1EMTYwLnByb3RvdHlwZS5fZGlnZXN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBjcmVhdGUgcGFkZGluZyBhbmQgaGFuZGxlIGJsb2Nrc1xuICB0aGlzLl9ibG9ja1t0aGlzLl9ibG9ja09mZnNldCsrXSA9IDB4ODBcbiAgaWYgKHRoaXMuX2Jsb2NrT2Zmc2V0ID4gNTYpIHtcbiAgICB0aGlzLl9ibG9jay5maWxsKDAsIHRoaXMuX2Jsb2NrT2Zmc2V0LCA2NClcbiAgICB0aGlzLl91cGRhdGUoKVxuICAgIHRoaXMuX2Jsb2NrT2Zmc2V0ID0gMFxuICB9XG5cbiAgdGhpcy5fYmxvY2suZmlsbCgwLCB0aGlzLl9ibG9ja09mZnNldCwgNTYpXG4gIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyTEUodGhpcy5fbGVuZ3RoWzBdLCA1NilcbiAgdGhpcy5fYmxvY2sud3JpdGVVSW50MzJMRSh0aGlzLl9sZW5ndGhbMV0sIDYwKVxuICB0aGlzLl91cGRhdGUoKVxuXG4gIC8vIHByb2R1Y2UgcmVzdWx0XG4gIHZhciBidWZmZXIgPSBuZXcgQnVmZmVyKDIwKVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2EsIDApXG4gIGJ1ZmZlci53cml0ZUludDMyTEUodGhpcy5fYiwgNClcbiAgYnVmZmVyLndyaXRlSW50MzJMRSh0aGlzLl9jLCA4KVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2QsIDEyKVxuICBidWZmZXIud3JpdGVJbnQzMkxFKHRoaXMuX2UsIDE2KVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIHJvdGwgKHgsIG4pIHtcbiAgcmV0dXJuICh4IDw8IG4pIHwgKHggPj4+ICgzMiAtIG4pKVxufVxuXG5mdW5jdGlvbiBmbjEgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKGIgXiBjIF4gZCkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjIgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKChiICYgYykgfCAoKH5iKSAmIGQpKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbmZ1bmN0aW9uIGZuMyAoYSwgYiwgYywgZCwgZSwgbSwgaywgcykge1xuICByZXR1cm4gKHJvdGwoKGEgKyAoKGIgfCAofmMpKSBeIGQpICsgbSArIGspIHwgMCwgcykgKyBlKSB8IDBcbn1cblxuZnVuY3Rpb24gZm40IChhLCBiLCBjLCBkLCBlLCBtLCBrLCBzKSB7XG4gIHJldHVybiAocm90bCgoYSArICgoYiAmIGQpIHwgKGMgJiAofmQpKSkgKyBtICsgaykgfCAwLCBzKSArIGUpIHwgMFxufVxuXG5mdW5jdGlvbiBmbjUgKGEsIGIsIGMsIGQsIGUsIG0sIGssIHMpIHtcbiAgcmV0dXJuIChyb3RsKChhICsgKGIgXiAoYyB8ICh+ZCkpKSArIG0gKyBrKSB8IDAsIHMpICsgZSkgfCAwXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUklQRU1EMTYwXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuIiwidmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbi8vIHByb3RvdHlwZSBjbGFzcyBmb3IgaGFzaCBmdW5jdGlvbnNcbmZ1bmN0aW9uIEhhc2ggKGJsb2NrU2l6ZSwgZmluYWxTaXplKSB7XG4gIHRoaXMuX2Jsb2NrID0gQnVmZmVyLmFsbG9jKGJsb2NrU2l6ZSlcbiAgdGhpcy5fZmluYWxTaXplID0gZmluYWxTaXplXG4gIHRoaXMuX2Jsb2NrU2l6ZSA9IGJsb2NrU2l6ZVxuICB0aGlzLl9sZW4gPSAwXG59XG5cbkhhc2gucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCBlbmMpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIGVuYyA9IGVuYyB8fCAndXRmOCdcbiAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSwgZW5jKVxuICB9XG5cbiAgdmFyIGJsb2NrID0gdGhpcy5fYmxvY2tcbiAgdmFyIGJsb2NrU2l6ZSA9IHRoaXMuX2Jsb2NrU2l6ZVxuICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGhcbiAgdmFyIGFjY3VtID0gdGhpcy5fbGVuXG5cbiAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbGVuZ3RoOykge1xuICAgIHZhciBhc3NpZ25lZCA9IGFjY3VtICUgYmxvY2tTaXplXG4gICAgdmFyIHJlbWFpbmRlciA9IE1hdGgubWluKGxlbmd0aCAtIG9mZnNldCwgYmxvY2tTaXplIC0gYXNzaWduZWQpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlbWFpbmRlcjsgaSsrKSB7XG4gICAgICBibG9ja1thc3NpZ25lZCArIGldID0gZGF0YVtvZmZzZXQgKyBpXVxuICAgIH1cblxuICAgIGFjY3VtICs9IHJlbWFpbmRlclxuICAgIG9mZnNldCArPSByZW1haW5kZXJcblxuICAgIGlmICgoYWNjdW0gJSBibG9ja1NpemUpID09PSAwKSB7XG4gICAgICB0aGlzLl91cGRhdGUoYmxvY2spXG4gICAgfVxuICB9XG5cbiAgdGhpcy5fbGVuICs9IGxlbmd0aFxuICByZXR1cm4gdGhpc1xufVxuXG5IYXNoLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbiAoZW5jKSB7XG4gIHZhciByZW0gPSB0aGlzLl9sZW4gJSB0aGlzLl9ibG9ja1NpemVcblxuICB0aGlzLl9ibG9ja1tyZW1dID0gMHg4MFxuXG4gIC8vIHplcm8gKHJlbSArIDEpIHRyYWlsaW5nIGJpdHMsIHdoZXJlIChyZW0gKyAxKSBpcyB0aGUgc21hbGxlc3RcbiAgLy8gbm9uLW5lZ2F0aXZlIHNvbHV0aW9uIHRvIHRoZSBlcXVhdGlvbiAobGVuZ3RoICsgMSArIChyZW0gKyAxKSkgPT09IGZpbmFsU2l6ZSBtb2QgYmxvY2tTaXplXG4gIHRoaXMuX2Jsb2NrLmZpbGwoMCwgcmVtICsgMSlcblxuICBpZiAocmVtID49IHRoaXMuX2ZpbmFsU2l6ZSkge1xuICAgIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgICB0aGlzLl9ibG9jay5maWxsKDApXG4gIH1cblxuICB2YXIgYml0cyA9IHRoaXMuX2xlbiAqIDhcblxuICAvLyB1aW50MzJcbiAgaWYgKGJpdHMgPD0gMHhmZmZmZmZmZikge1xuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUoYml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcblxuICAvLyB1aW50NjRcbiAgfSBlbHNlIHtcbiAgICB2YXIgbG93Qml0cyA9IGJpdHMgJiAweGZmZmZmZmZmXG4gICAgdmFyIGhpZ2hCaXRzID0gKGJpdHMgLSBsb3dCaXRzKSAvIDB4MTAwMDAwMDAwXG5cbiAgICB0aGlzLl9ibG9jay53cml0ZVVJbnQzMkJFKGhpZ2hCaXRzLCB0aGlzLl9ibG9ja1NpemUgLSA4KVxuICAgIHRoaXMuX2Jsb2NrLndyaXRlVUludDMyQkUobG93Qml0cywgdGhpcy5fYmxvY2tTaXplIC0gNClcbiAgfVxuXG4gIHRoaXMuX3VwZGF0ZSh0aGlzLl9ibG9jaylcbiAgdmFyIGhhc2ggPSB0aGlzLl9oYXNoKClcblxuICByZXR1cm4gZW5jID8gaGFzaC50b1N0cmluZyhlbmMpIDogaGFzaFxufVxuXG5IYXNoLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ191cGRhdGUgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBzdWJjbGFzcycpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaFxuIiwidmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFNIQSAoYWxnb3JpdGhtKSB7XG4gIGFsZ29yaXRobSA9IGFsZ29yaXRobS50b0xvd2VyQ2FzZSgpXG5cbiAgdmFyIEFsZ29yaXRobSA9IGV4cG9ydHNbYWxnb3JpdGhtXVxuICBpZiAoIUFsZ29yaXRobSkgdGhyb3cgbmV3IEVycm9yKGFsZ29yaXRobSArICcgaXMgbm90IHN1cHBvcnRlZCAod2UgYWNjZXB0IHB1bGwgcmVxdWVzdHMpJylcblxuICByZXR1cm4gbmV3IEFsZ29yaXRobSgpXG59XG5cbmV4cG9ydHMuc2hhID0gcmVxdWlyZSgnLi9zaGEnKVxuZXhwb3J0cy5zaGExID0gcmVxdWlyZSgnLi9zaGExJylcbmV4cG9ydHMuc2hhMjI0ID0gcmVxdWlyZSgnLi9zaGEyMjQnKVxuZXhwb3J0cy5zaGEyNTYgPSByZXF1aXJlKCcuL3NoYTI1NicpXG5leHBvcnRzLnNoYTM4NCA9IHJlcXVpcmUoJy4vc2hhMzg0JylcbmV4cG9ydHMuc2hhNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMCwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgZGVyaXZlZCBmcm9tIHNoYTEuanMgb2YgdGhlIHNhbWUgcmVwb3NpdG9yeS5cbiAqIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gU0hBLTAgYW5kIFNIQS0xIGlzIGp1c3QgYSBiaXR3aXNlIHJvdGF0ZSBsZWZ0XG4gKiBvcGVyYXRpb24gd2FzIGFkZGVkLlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYyB8IDAsIDB4Y2E2MmMxZDYgfCAwXG5dXG5cbnZhciBXID0gbmV3IEFycmF5KDgwKVxuXG5mdW5jdGlvbiBTaGEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYSwgSGFzaClcblxuU2hhLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9hID0gMHg2NzQ1MjMwMVxuICB0aGlzLl9iID0gMHhlZmNkYWI4OVxuICB0aGlzLl9jID0gMHg5OGJhZGNmZVxuICB0aGlzLl9kID0gMHgxMDMyNTQ3NlxuICB0aGlzLl9lID0gMHhjM2QyZTFmMFxuXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIHJvdGw1IChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgNSkgfCAobnVtID4+PiAyNylcbn1cblxuZnVuY3Rpb24gcm90bDMwIChudW0pIHtcbiAgcmV0dXJuIChudW0gPDwgMzApIHwgKG51bSA+Pj4gMilcbn1cblxuZnVuY3Rpb24gZnQgKHMsIGIsIGMsIGQpIHtcbiAgaWYgKHMgPT09IDApIHJldHVybiAoYiAmIGMpIHwgKCh+YikgJiBkKVxuICBpZiAocyA9PT0gMikgcmV0dXJuIChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKVxuICByZXR1cm4gYiBeIGMgXiBkXG59XG5cblNoYS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uIChNKSB7XG4gIHZhciBXID0gdGhpcy5fd1xuXG4gIHZhciBhID0gdGhpcy5fYSB8IDBcbiAgdmFyIGIgPSB0aGlzLl9iIHwgMFxuICB2YXIgYyA9IHRoaXMuX2MgfCAwXG4gIHZhciBkID0gdGhpcy5fZCB8IDBcbiAgdmFyIGUgPSB0aGlzLl9lIHwgMFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkgV1tpXSA9IE0ucmVhZEludDMyQkUoaSAqIDQpXG4gIGZvciAoOyBpIDwgODA7ICsraSkgV1tpXSA9IFdbaSAtIDNdIF4gV1tpIC0gOF0gXiBXW2kgLSAxNF0gXiBXW2kgLSAxNl1cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHtcbiAgICB2YXIgcyA9IH5+KGogLyAyMClcbiAgICB2YXIgdCA9IChyb3RsNShhKSArIGZ0KHMsIGIsIGMsIGQpICsgZSArIFdbal0gKyBLW3NdKSB8IDBcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm90bDMwKGIpXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGEucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyMClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hIHwgMCwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiB8IDAsIDQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2MgfCAwLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kIHwgMCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UgfCAwLCAxNilcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYVxuIiwiLypcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMSwgYXMgZGVmaW5lZFxuICogaW4gRklQUyBQVUIgMTgwLTFcbiAqIFZlcnNpb24gMi4xYSBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwMi5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBLID0gW1xuICAweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjIHwgMCwgMHhjYTYyYzFkNiB8IDBcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoODApXG5cbmZ1bmN0aW9uIFNoYTEgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCA2NCwgNTYpXG59XG5cbmluaGVyaXRzKFNoYTEsIEhhc2gpXG5cblNoYTEucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDY3NDUyMzAxXG4gIHRoaXMuX2IgPSAweGVmY2RhYjg5XG4gIHRoaXMuX2MgPSAweDk4YmFkY2ZlXG4gIHRoaXMuX2QgPSAweDEwMzI1NDc2XG4gIHRoaXMuX2UgPSAweGMzZDJlMWYwXG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gcm90bDEgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAxKSB8IChudW0gPj4+IDMxKVxufVxuXG5mdW5jdGlvbiByb3RsNSAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDUpIHwgKG51bSA+Pj4gMjcpXG59XG5cbmZ1bmN0aW9uIHJvdGwzMCAobnVtKSB7XG4gIHJldHVybiAobnVtIDw8IDMwKSB8IChudW0gPj4+IDIpXG59XG5cbmZ1bmN0aW9uIGZ0IChzLCBiLCBjLCBkKSB7XG4gIGlmIChzID09PSAwKSByZXR1cm4gKGIgJiBjKSB8ICgofmIpICYgZClcbiAgaWYgKHMgPT09IDIpIHJldHVybiAoYiAmIGMpIHwgKGIgJiBkKSB8IChjICYgZClcbiAgcmV0dXJuIGIgXiBjIF4gZFxufVxuXG5TaGExLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGEgPSB0aGlzLl9hIHwgMFxuICB2YXIgYiA9IHRoaXMuX2IgfCAwXG4gIHZhciBjID0gdGhpcy5fYyB8IDBcbiAgdmFyIGQgPSB0aGlzLl9kIHwgMFxuICB2YXIgZSA9IHRoaXMuX2UgfCAwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgZm9yICg7IGkgPCA4MDsgKytpKSBXW2ldID0gcm90bDEoV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XSlcblxuICBmb3IgKHZhciBqID0gMDsgaiA8IDgwOyArK2opIHtcbiAgICB2YXIgcyA9IH5+KGogLyAyMClcbiAgICB2YXIgdCA9IChyb3RsNShhKSArIGZ0KHMsIGIsIGMsIGQpICsgZSArIFdbal0gKyBLW3NdKSB8IDBcblxuICAgIGUgPSBkXG4gICAgZCA9IGNcbiAgICBjID0gcm90bDMwKGIpXG4gICAgYiA9IGFcbiAgICBhID0gdFxuICB9XG5cbiAgdGhpcy5fYSA9IChhICsgdGhpcy5fYSkgfCAwXG4gIHRoaXMuX2IgPSAoYiArIHRoaXMuX2IpIHwgMFxuICB0aGlzLl9jID0gKGMgKyB0aGlzLl9jKSB8IDBcbiAgdGhpcy5fZCA9IChkICsgdGhpcy5fZCkgfCAwXG4gIHRoaXMuX2UgPSAoZSArIHRoaXMuX2UpIHwgMFxufVxuXG5TaGExLnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMjApXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSB8IDAsIDApXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2IgfCAwLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jIHwgMCwgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCB8IDAsIDEyKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9lIHwgMCwgMTYpXG5cbiAgcmV0dXJuIEhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTaGExXG4iLCIvKipcbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU2VjdXJlIEhhc2ggQWxnb3JpdGhtLCBTSEEtMjU2LCBhcyBkZWZpbmVkXG4gKiBpbiBGSVBTIDE4MC0yXG4gKiBWZXJzaW9uIDIuMi1iZXRhIENvcHlyaWdodCBBbmdlbCBNYXJpbiwgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqXG4gKi9cblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxudmFyIFNoYTI1NiA9IHJlcXVpcmUoJy4vc2hhMjU2JylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjI0ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjI0LCBTaGEyNTYpXG5cblNoYTIyNC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fYSA9IDB4YzEwNTllZDhcbiAgdGhpcy5fYiA9IDB4MzY3Y2Q1MDdcbiAgdGhpcy5fYyA9IDB4MzA3MGRkMTdcbiAgdGhpcy5fZCA9IDB4ZjcwZTU5MzlcbiAgdGhpcy5fZSA9IDB4ZmZjMDBiMzFcbiAgdGhpcy5fZiA9IDB4Njg1ODE1MTFcbiAgdGhpcy5fZyA9IDB4NjRmOThmYTdcbiAgdGhpcy5faCA9IDB4YmVmYTRmYTRcblxuICByZXR1cm4gdGhpc1xufVxuXG5TaGEyMjQucHJvdG90eXBlLl9oYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgSCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyOClcblxuICBILndyaXRlSW50MzJCRSh0aGlzLl9hLCAwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9iLCA0KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9jLCA4KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9kLCAxMilcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZSwgMTYpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2YsIDIwKVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9nLCAyNClcblxuICByZXR1cm4gSFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYTIyNFxuIiwiLyoqXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTI1NiwgYXMgZGVmaW5lZFxuICogaW4gRklQUyAxODAtMlxuICogVmVyc2lvbiAyLjItYmV0YSBDb3B5cmlnaHQgQW5nZWwgTWFyaW4sIFBhdWwgSm9obnN0b24gMjAwMCAtIDIwMDkuXG4gKiBPdGhlciBjb250cmlidXRvcnM6IEdyZWcgSG9sdCwgQW5kcmV3IEtlcGVydCwgWWRuYXIsIExvc3RpbmV0XG4gKlxuICovXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbnZhciBIYXNoID0gcmVxdWlyZSgnLi9oYXNoJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlclxuXG52YXIgSyA9IFtcbiAgMHg0MjhBMkY5OCwgMHg3MTM3NDQ5MSwgMHhCNUMwRkJDRiwgMHhFOUI1REJBNSxcbiAgMHgzOTU2QzI1QiwgMHg1OUYxMTFGMSwgMHg5MjNGODJBNCwgMHhBQjFDNUVENSxcbiAgMHhEODA3QUE5OCwgMHgxMjgzNUIwMSwgMHgyNDMxODVCRSwgMHg1NTBDN0RDMyxcbiAgMHg3MkJFNUQ3NCwgMHg4MERFQjFGRSwgMHg5QkRDMDZBNywgMHhDMTlCRjE3NCxcbiAgMHhFNDlCNjlDMSwgMHhFRkJFNDc4NiwgMHgwRkMxOURDNiwgMHgyNDBDQTFDQyxcbiAgMHgyREU5MkM2RiwgMHg0QTc0ODRBQSwgMHg1Q0IwQTlEQywgMHg3NkY5ODhEQSxcbiAgMHg5ODNFNTE1MiwgMHhBODMxQzY2RCwgMHhCMDAzMjdDOCwgMHhCRjU5N0ZDNyxcbiAgMHhDNkUwMEJGMywgMHhENUE3OTE0NywgMHgwNkNBNjM1MSwgMHgxNDI5Mjk2NyxcbiAgMHgyN0I3MEE4NSwgMHgyRTFCMjEzOCwgMHg0RDJDNkRGQywgMHg1MzM4MEQxMyxcbiAgMHg2NTBBNzM1NCwgMHg3NjZBMEFCQiwgMHg4MUMyQzkyRSwgMHg5MjcyMkM4NSxcbiAgMHhBMkJGRThBMSwgMHhBODFBNjY0QiwgMHhDMjRCOEI3MCwgMHhDNzZDNTFBMyxcbiAgMHhEMTkyRTgxOSwgMHhENjk5MDYyNCwgMHhGNDBFMzU4NSwgMHgxMDZBQTA3MCxcbiAgMHgxOUE0QzExNiwgMHgxRTM3NkMwOCwgMHgyNzQ4Nzc0QywgMHgzNEIwQkNCNSxcbiAgMHgzOTFDMENCMywgMHg0RUQ4QUE0QSwgMHg1QjlDQ0E0RiwgMHg2ODJFNkZGMyxcbiAgMHg3NDhGODJFRSwgMHg3OEE1NjM2RiwgMHg4NEM4NzgxNCwgMHg4Q0M3MDIwOCxcbiAgMHg5MEJFRkZGQSwgMHhBNDUwNkNFQiwgMHhCRUY5QTNGNywgMHhDNjcxNzhGMlxuXVxuXG52YXIgVyA9IG5ldyBBcnJheSg2NClcblxuZnVuY3Rpb24gU2hhMjU2ICgpIHtcbiAgdGhpcy5pbml0KClcblxuICB0aGlzLl93ID0gVyAvLyBuZXcgQXJyYXkoNjQpXG5cbiAgSGFzaC5jYWxsKHRoaXMsIDY0LCA1Nilcbn1cblxuaW5oZXJpdHMoU2hhMjU2LCBIYXNoKVxuXG5TaGEyNTYucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2EgPSAweDZhMDllNjY3XG4gIHRoaXMuX2IgPSAweGJiNjdhZTg1XG4gIHRoaXMuX2MgPSAweDNjNmVmMzcyXG4gIHRoaXMuX2QgPSAweGE1NGZmNTNhXG4gIHRoaXMuX2UgPSAweDUxMGU1MjdmXG4gIHRoaXMuX2YgPSAweDliMDU2ODhjXG4gIHRoaXMuX2cgPSAweDFmODNkOWFiXG4gIHRoaXMuX2ggPSAweDViZTBjZDE5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gY2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMiB8IHggPDwgMzApIF4gKHggPj4+IDEzIHwgeCA8PCAxOSkgXiAoeCA+Pj4gMjIgfCB4IDw8IDEwKVxufVxuXG5mdW5jdGlvbiBzaWdtYTEgKHgpIHtcbiAgcmV0dXJuICh4ID4+PiA2IHwgeCA8PCAyNikgXiAoeCA+Pj4gMTEgfCB4IDw8IDIxKSBeICh4ID4+PiAyNSB8IHggPDwgNylcbn1cblxuZnVuY3Rpb24gZ2FtbWEwICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gNyB8IHggPDwgMjUpIF4gKHggPj4+IDE4IHwgeCA8PCAxNCkgXiAoeCA+Pj4gMylcbn1cblxuZnVuY3Rpb24gZ2FtbWExICh4KSB7XG4gIHJldHVybiAoeCA+Pj4gMTcgfCB4IDw8IDE1KSBeICh4ID4+PiAxOSB8IHggPDwgMTMpIF4gKHggPj4+IDEwKVxufVxuXG5TaGEyNTYucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAoTSkge1xuICB2YXIgVyA9IHRoaXMuX3dcblxuICB2YXIgYSA9IHRoaXMuX2EgfCAwXG4gIHZhciBiID0gdGhpcy5fYiB8IDBcbiAgdmFyIGMgPSB0aGlzLl9jIHwgMFxuICB2YXIgZCA9IHRoaXMuX2QgfCAwXG4gIHZhciBlID0gdGhpcy5fZSB8IDBcbiAgdmFyIGYgPSB0aGlzLl9mIHwgMFxuICB2YXIgZyA9IHRoaXMuX2cgfCAwXG4gIHZhciBoID0gdGhpcy5faCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIFdbaV0gPSBNLnJlYWRJbnQzMkJFKGkgKiA0KVxuICBmb3IgKDsgaSA8IDY0OyArK2kpIFdbaV0gPSAoZ2FtbWExKFdbaSAtIDJdKSArIFdbaSAtIDddICsgZ2FtbWEwKFdbaSAtIDE1XSkgKyBXW2kgLSAxNl0pIHwgMFxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgNjQ7ICsraikge1xuICAgIHZhciBUMSA9IChoICsgc2lnbWExKGUpICsgY2goZSwgZiwgZykgKyBLW2pdICsgV1tqXSkgfCAwXG4gICAgdmFyIFQyID0gKHNpZ21hMChhKSArIG1haihhLCBiLCBjKSkgfCAwXG5cbiAgICBoID0gZ1xuICAgIGcgPSBmXG4gICAgZiA9IGVcbiAgICBlID0gKGQgKyBUMSkgfCAwXG4gICAgZCA9IGNcbiAgICBjID0gYlxuICAgIGIgPSBhXG4gICAgYSA9IChUMSArIFQyKSB8IDBcbiAgfVxuXG4gIHRoaXMuX2EgPSAoYSArIHRoaXMuX2EpIHwgMFxuICB0aGlzLl9iID0gKGIgKyB0aGlzLl9iKSB8IDBcbiAgdGhpcy5fYyA9IChjICsgdGhpcy5fYykgfCAwXG4gIHRoaXMuX2QgPSAoZCArIHRoaXMuX2QpIHwgMFxuICB0aGlzLl9lID0gKGUgKyB0aGlzLl9lKSB8IDBcbiAgdGhpcy5fZiA9IChmICsgdGhpcy5fZikgfCAwXG4gIHRoaXMuX2cgPSAoZyArIHRoaXMuX2cpIHwgMFxuICB0aGlzLl9oID0gKGggKyB0aGlzLl9oKSB8IDBcbn1cblxuU2hhMjU2LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoMzIpXG5cbiAgSC53cml0ZUludDMyQkUodGhpcy5fYSwgMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYiwgNClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fYywgOClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZCwgMTIpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2UsIDE2KVxuICBILndyaXRlSW50MzJCRSh0aGlzLl9mLCAyMClcbiAgSC53cml0ZUludDMyQkUodGhpcy5fZywgMjQpXG4gIEgud3JpdGVJbnQzMkJFKHRoaXMuX2gsIDI4KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMjU2XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgU0hBNTEyID0gcmVxdWlyZSgnLi9zaGE1MTInKVxudmFyIEhhc2ggPSByZXF1aXJlKCcuL2hhc2gnKVxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyXG5cbnZhciBXID0gbmV3IEFycmF5KDE2MClcblxuZnVuY3Rpb24gU2hhMzg0ICgpIHtcbiAgdGhpcy5pbml0KClcbiAgdGhpcy5fdyA9IFdcblxuICBIYXNoLmNhbGwodGhpcywgMTI4LCAxMTIpXG59XG5cbmluaGVyaXRzKFNoYTM4NCwgU0hBNTEyKVxuXG5TaGEzODQucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2FoID0gMHhjYmJiOWQ1ZFxuICB0aGlzLl9iaCA9IDB4NjI5YTI5MmFcbiAgdGhpcy5fY2ggPSAweDkxNTkwMTVhXG4gIHRoaXMuX2RoID0gMHgxNTJmZWNkOFxuICB0aGlzLl9laCA9IDB4NjczMzI2NjdcbiAgdGhpcy5fZmggPSAweDhlYjQ0YTg3XG4gIHRoaXMuX2doID0gMHhkYjBjMmUwZFxuICB0aGlzLl9oaCA9IDB4NDdiNTQ4MWRcblxuICB0aGlzLl9hbCA9IDB4YzEwNTllZDhcbiAgdGhpcy5fYmwgPSAweDM2N2NkNTA3XG4gIHRoaXMuX2NsID0gMHgzMDcwZGQxN1xuICB0aGlzLl9kbCA9IDB4ZjcwZTU5MzlcbiAgdGhpcy5fZWwgPSAweGZmYzAwYjMxXG4gIHRoaXMuX2ZsID0gMHg2ODU4MTUxMVxuICB0aGlzLl9nbCA9IDB4NjRmOThmYTdcbiAgdGhpcy5faGwgPSAweGJlZmE0ZmE0XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuU2hhMzg0LnByb3RvdHlwZS5faGFzaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEggPSBCdWZmZXIuYWxsb2NVbnNhZmUoNDgpXG5cbiAgZnVuY3Rpb24gd3JpdGVJbnQ2NEJFIChoLCBsLCBvZmZzZXQpIHtcbiAgICBILndyaXRlSW50MzJCRShoLCBvZmZzZXQpXG4gICAgSC53cml0ZUludDMyQkUobCwgb2Zmc2V0ICsgNClcbiAgfVxuXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9haCwgdGhpcy5fYWwsIDApXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9iaCwgdGhpcy5fYmwsIDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9jaCwgdGhpcy5fY2wsIDE2KVxuICB3cml0ZUludDY0QkUodGhpcy5fZGgsIHRoaXMuX2RsLCAyNClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2VoLCB0aGlzLl9lbCwgMzIpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9maCwgdGhpcy5fZmwsIDQwKVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhMzg0XG4iLCJ2YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG52YXIgSGFzaCA9IHJlcXVpcmUoJy4vaGFzaCcpXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXJcblxudmFyIEsgPSBbXG4gIDB4NDI4YTJmOTgsIDB4ZDcyOGFlMjIsIDB4NzEzNzQ0OTEsIDB4MjNlZjY1Y2QsXG4gIDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYsIDB4ZTliNWRiYTUsIDB4ODE4OWRiYmMsXG4gIDB4Mzk1NmMyNWIsIDB4ZjM0OGI1MzgsIDB4NTlmMTExZjEsIDB4YjYwNWQwMTksXG4gIDB4OTIzZjgyYTQsIDB4YWYxOTRmOWIsIDB4YWIxYzVlZDUsIDB4ZGE2ZDgxMTgsXG4gIDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIsIDB4MTI4MzViMDEsIDB4NDU3MDZmYmUsXG4gIDB4MjQzMTg1YmUsIDB4NGVlNGIyOGMsIDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIsXG4gIDB4NzJiZTVkNzQsIDB4ZjI3Yjg5NmYsIDB4ODBkZWIxZmUsIDB4M2IxNjk2YjEsXG4gIDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUsIDB4YzE5YmYxNzQsIDB4Y2Y2OTI2OTQsXG4gIDB4ZTQ5YjY5YzEsIDB4OWVmMTRhZDIsIDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMsXG4gIDB4MGZjMTlkYzYsIDB4OGI4Y2Q1YjUsIDB4MjQwY2ExY2MsIDB4NzdhYzljNjUsXG4gIDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUsIDB4NGE3NDg0YWEsIDB4NmVhNmU0ODMsXG4gIDB4NWNiMGE5ZGMsIDB4YmQ0MWZiZDQsIDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUsXG4gIDB4OTgzZTUxNTIsIDB4ZWU2NmRmYWIsIDB4YTgzMWM2NmQsIDB4MmRiNDMyMTAsXG4gIDB4YjAwMzI3YzgsIDB4OThmYjIxM2YsIDB4YmY1OTdmYzcsIDB4YmVlZjBlZTQsXG4gIDB4YzZlMDBiZjMsIDB4M2RhODhmYzIsIDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUsXG4gIDB4MDZjYTYzNTEsIDB4ZTAwMzgyNmYsIDB4MTQyOTI5NjcsIDB4MGEwZTZlNzAsXG4gIDB4MjdiNzBhODUsIDB4NDZkMjJmZmMsIDB4MmUxYjIxMzgsIDB4NWMyNmM5MjYsXG4gIDB4NGQyYzZkZmMsIDB4NWFjNDJhZWQsIDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYsXG4gIDB4NjUwYTczNTQsIDB4OGJhZjYzZGUsIDB4NzY2YTBhYmIsIDB4M2M3N2IyYTgsXG4gIDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYsIDB4OTI3MjJjODUsIDB4MTQ4MjM1M2IsXG4gIDB4YTJiZmU4YTEsIDB4NGNmMTAzNjQsIDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEsXG4gIDB4YzI0YjhiNzAsIDB4ZDBmODk3OTEsIDB4Yzc2YzUxYTMsIDB4MDY1NGJlMzAsXG4gIDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgsIDB4ZDY5OTA2MjQsIDB4NTU2NWE5MTAsXG4gIDB4ZjQwZTM1ODUsIDB4NTc3MTIwMmEsIDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgsXG4gIDB4MTlhNGMxMTYsIDB4YjhkMmQwYzgsIDB4MWUzNzZjMDgsIDB4NTE0MWFiNTMsXG4gIDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTksIDB4MzRiMGJjYjUsIDB4ZTE5YjQ4YTgsXG4gIDB4MzkxYzBjYjMsIDB4YzVjOTVhNjMsIDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IsXG4gIDB4NWI5Y2NhNGYsIDB4Nzc2M2UzNzMsIDB4NjgyZTZmZjMsIDB4ZDZiMmI4YTMsXG4gIDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMsIDB4NzhhNTYzNmYsIDB4NDMxNzJmNjAsXG4gIDB4ODRjODc4MTQsIDB4YTFmMGFiNzIsIDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMsXG4gIDB4OTBiZWZmZmEsIDB4MjM2MzFlMjgsIDB4YTQ1MDZjZWIsIDB4ZGU4MmJkZTksXG4gIDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUsIDB4YzY3MTc4ZjIsIDB4ZTM3MjUzMmIsXG4gIDB4Y2EyNzNlY2UsIDB4ZWEyNjYxOWMsIDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcsXG4gIDB4ZWFkYTdkZDYsIDB4Y2RlMGViMWUsIDB4ZjU3ZDRmN2YsIDB4ZWU2ZWQxNzgsXG4gIDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEsIDB4MGE2MzdkYzUsIDB4YTJjODk4YTYsXG4gIDB4MTEzZjk4MDQsIDB4YmVmOTBkYWUsIDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIsXG4gIDB4MjhkYjc3ZjUsIDB4MjMwNDdkODQsIDB4MzJjYWFiN2IsIDB4NDBjNzI0OTMsXG4gIDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMsIDB4NDMxZDY3YzQsIDB4OWMxMDBkNGMsXG4gIDB4NGNjNWQ0YmUsIDB4Y2IzZTQyYjYsIDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEsXG4gIDB4NWZjYjZmYWIsIDB4M2FkNmZhZWMsIDB4NmM0NDE5OGMsIDB4NGE0NzU4MTdcbl1cblxudmFyIFcgPSBuZXcgQXJyYXkoMTYwKVxuXG5mdW5jdGlvbiBTaGE1MTIgKCkge1xuICB0aGlzLmluaXQoKVxuICB0aGlzLl93ID0gV1xuXG4gIEhhc2guY2FsbCh0aGlzLCAxMjgsIDExMilcbn1cblxuaW5oZXJpdHMoU2hhNTEyLCBIYXNoKVxuXG5TaGE1MTIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2FoID0gMHg2YTA5ZTY2N1xuICB0aGlzLl9iaCA9IDB4YmI2N2FlODVcbiAgdGhpcy5fY2ggPSAweDNjNmVmMzcyXG4gIHRoaXMuX2RoID0gMHhhNTRmZjUzYVxuICB0aGlzLl9laCA9IDB4NTEwZTUyN2ZcbiAgdGhpcy5fZmggPSAweDliMDU2ODhjXG4gIHRoaXMuX2doID0gMHgxZjgzZDlhYlxuICB0aGlzLl9oaCA9IDB4NWJlMGNkMTlcblxuICB0aGlzLl9hbCA9IDB4ZjNiY2M5MDhcbiAgdGhpcy5fYmwgPSAweDg0Y2FhNzNiXG4gIHRoaXMuX2NsID0gMHhmZTk0ZjgyYlxuICB0aGlzLl9kbCA9IDB4NWYxZDM2ZjFcbiAgdGhpcy5fZWwgPSAweGFkZTY4MmQxXG4gIHRoaXMuX2ZsID0gMHgyYjNlNmMxZlxuICB0aGlzLl9nbCA9IDB4ZmI0MWJkNmJcbiAgdGhpcy5faGwgPSAweDEzN2UyMTc5XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gQ2ggKHgsIHksIHopIHtcbiAgcmV0dXJuIHogXiAoeCAmICh5IF4geikpXG59XG5cbmZ1bmN0aW9uIG1haiAoeCwgeSwgeikge1xuICByZXR1cm4gKHggJiB5KSB8ICh6ICYgKHggfCB5KSlcbn1cblxuZnVuY3Rpb24gc2lnbWEwICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDI4IHwgeGwgPDwgNCkgXiAoeGwgPj4+IDIgfCB4IDw8IDMwKSBeICh4bCA+Pj4gNyB8IHggPDwgMjUpXG59XG5cbmZ1bmN0aW9uIHNpZ21hMSAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxNCB8IHhsIDw8IDE4KSBeICh4ID4+PiAxOCB8IHhsIDw8IDE0KSBeICh4bCA+Pj4gOSB8IHggPDwgMjMpXG59XG5cbmZ1bmN0aW9uIEdhbW1hMCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNylcbn1cblxuZnVuY3Rpb24gR2FtbWEwbCAoeCwgeGwpIHtcbiAgcmV0dXJuICh4ID4+PiAxIHwgeGwgPDwgMzEpIF4gKHggPj4+IDggfCB4bCA8PCAyNCkgXiAoeCA+Pj4gNyB8IHhsIDw8IDI1KVxufVxuXG5mdW5jdGlvbiBHYW1tYTEgKHgsIHhsKSB7XG4gIHJldHVybiAoeCA+Pj4gMTkgfCB4bCA8PCAxMykgXiAoeGwgPj4+IDI5IHwgeCA8PCAzKSBeICh4ID4+PiA2KVxufVxuXG5mdW5jdGlvbiBHYW1tYTFsICh4LCB4bCkge1xuICByZXR1cm4gKHggPj4+IDE5IHwgeGwgPDwgMTMpIF4gKHhsID4+PiAyOSB8IHggPDwgMykgXiAoeCA+Pj4gNiB8IHhsIDw8IDI2KVxufVxuXG5mdW5jdGlvbiBnZXRDYXJyeSAoYSwgYikge1xuICByZXR1cm4gKGEgPj4+IDApIDwgKGIgPj4+IDApID8gMSA6IDBcbn1cblxuU2hhNTEyLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKE0pIHtcbiAgdmFyIFcgPSB0aGlzLl93XG5cbiAgdmFyIGFoID0gdGhpcy5fYWggfCAwXG4gIHZhciBiaCA9IHRoaXMuX2JoIHwgMFxuICB2YXIgY2ggPSB0aGlzLl9jaCB8IDBcbiAgdmFyIGRoID0gdGhpcy5fZGggfCAwXG4gIHZhciBlaCA9IHRoaXMuX2VoIHwgMFxuICB2YXIgZmggPSB0aGlzLl9maCB8IDBcbiAgdmFyIGdoID0gdGhpcy5fZ2ggfCAwXG4gIHZhciBoaCA9IHRoaXMuX2hoIHwgMFxuXG4gIHZhciBhbCA9IHRoaXMuX2FsIHwgMFxuICB2YXIgYmwgPSB0aGlzLl9ibCB8IDBcbiAgdmFyIGNsID0gdGhpcy5fY2wgfCAwXG4gIHZhciBkbCA9IHRoaXMuX2RsIHwgMFxuICB2YXIgZWwgPSB0aGlzLl9lbCB8IDBcbiAgdmFyIGZsID0gdGhpcy5fZmwgfCAwXG4gIHZhciBnbCA9IHRoaXMuX2dsIHwgMFxuICB2YXIgaGwgPSB0aGlzLl9obCB8IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpICs9IDIpIHtcbiAgICBXW2ldID0gTS5yZWFkSW50MzJCRShpICogNClcbiAgICBXW2kgKyAxXSA9IE0ucmVhZEludDMyQkUoaSAqIDQgKyA0KVxuICB9XG4gIGZvciAoOyBpIDwgMTYwOyBpICs9IDIpIHtcbiAgICB2YXIgeGggPSBXW2kgLSAxNSAqIDJdXG4gICAgdmFyIHhsID0gV1tpIC0gMTUgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWEwID0gR2FtbWEwKHhoLCB4bClcbiAgICB2YXIgZ2FtbWEwbCA9IEdhbW1hMGwoeGwsIHhoKVxuXG4gICAgeGggPSBXW2kgLSAyICogMl1cbiAgICB4bCA9IFdbaSAtIDIgKiAyICsgMV1cbiAgICB2YXIgZ2FtbWExID0gR2FtbWExKHhoLCB4bClcbiAgICB2YXIgZ2FtbWExbCA9IEdhbW1hMWwoeGwsIHhoKVxuXG4gICAgLy8gV1tpXSA9IGdhbW1hMCArIFdbaSAtIDddICsgZ2FtbWExICsgV1tpIC0gMTZdXG4gICAgdmFyIFdpN2ggPSBXW2kgLSA3ICogMl1cbiAgICB2YXIgV2k3bCA9IFdbaSAtIDcgKiAyICsgMV1cblxuICAgIHZhciBXaTE2aCA9IFdbaSAtIDE2ICogMl1cbiAgICB2YXIgV2kxNmwgPSBXW2kgLSAxNiAqIDIgKyAxXVxuXG4gICAgdmFyIFdpbCA9IChnYW1tYTBsICsgV2k3bCkgfCAwXG4gICAgdmFyIFdpaCA9IChnYW1tYTAgKyBXaTdoICsgZ2V0Q2FycnkoV2lsLCBnYW1tYTBsKSkgfCAwXG4gICAgV2lsID0gKFdpbCArIGdhbW1hMWwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBnYW1tYTEgKyBnZXRDYXJyeShXaWwsIGdhbW1hMWwpKSB8IDBcbiAgICBXaWwgPSAoV2lsICsgV2kxNmwpIHwgMFxuICAgIFdpaCA9IChXaWggKyBXaTE2aCArIGdldENhcnJ5KFdpbCwgV2kxNmwpKSB8IDBcblxuICAgIFdbaV0gPSBXaWhcbiAgICBXW2kgKyAxXSA9IFdpbFxuICB9XG5cbiAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjA7IGogKz0gMikge1xuICAgIFdpaCA9IFdbal1cbiAgICBXaWwgPSBXW2ogKyAxXVxuXG4gICAgdmFyIG1hamggPSBtYWooYWgsIGJoLCBjaClcbiAgICB2YXIgbWFqbCA9IG1haihhbCwgYmwsIGNsKVxuXG4gICAgdmFyIHNpZ21hMGggPSBzaWdtYTAoYWgsIGFsKVxuICAgIHZhciBzaWdtYTBsID0gc2lnbWEwKGFsLCBhaClcbiAgICB2YXIgc2lnbWExaCA9IHNpZ21hMShlaCwgZWwpXG4gICAgdmFyIHNpZ21hMWwgPSBzaWdtYTEoZWwsIGVoKVxuXG4gICAgLy8gdDEgPSBoICsgc2lnbWExICsgY2ggKyBLW2pdICsgV1tqXVxuICAgIHZhciBLaWggPSBLW2pdXG4gICAgdmFyIEtpbCA9IEtbaiArIDFdXG5cbiAgICB2YXIgY2hoID0gQ2goZWgsIGZoLCBnaClcbiAgICB2YXIgY2hsID0gQ2goZWwsIGZsLCBnbClcblxuICAgIHZhciB0MWwgPSAoaGwgKyBzaWdtYTFsKSB8IDBcbiAgICB2YXIgdDFoID0gKGhoICsgc2lnbWExaCArIGdldENhcnJ5KHQxbCwgaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgY2hsKSB8IDBcbiAgICB0MWggPSAodDFoICsgY2hoICsgZ2V0Q2FycnkodDFsLCBjaGwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgS2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgS2loICsgZ2V0Q2FycnkodDFsLCBLaWwpKSB8IDBcbiAgICB0MWwgPSAodDFsICsgV2lsKSB8IDBcbiAgICB0MWggPSAodDFoICsgV2loICsgZ2V0Q2FycnkodDFsLCBXaWwpKSB8IDBcblxuICAgIC8vIHQyID0gc2lnbWEwICsgbWFqXG4gICAgdmFyIHQybCA9IChzaWdtYTBsICsgbWFqbCkgfCAwXG4gICAgdmFyIHQyaCA9IChzaWdtYTBoICsgbWFqaCArIGdldENhcnJ5KHQybCwgc2lnbWEwbCkpIHwgMFxuXG4gICAgaGggPSBnaFxuICAgIGhsID0gZ2xcbiAgICBnaCA9IGZoXG4gICAgZ2wgPSBmbFxuICAgIGZoID0gZWhcbiAgICBmbCA9IGVsXG4gICAgZWwgPSAoZGwgKyB0MWwpIHwgMFxuICAgIGVoID0gKGRoICsgdDFoICsgZ2V0Q2FycnkoZWwsIGRsKSkgfCAwXG4gICAgZGggPSBjaFxuICAgIGRsID0gY2xcbiAgICBjaCA9IGJoXG4gICAgY2wgPSBibFxuICAgIGJoID0gYWhcbiAgICBibCA9IGFsXG4gICAgYWwgPSAodDFsICsgdDJsKSB8IDBcbiAgICBhaCA9ICh0MWggKyB0MmggKyBnZXRDYXJyeShhbCwgdDFsKSkgfCAwXG4gIH1cblxuICB0aGlzLl9hbCA9ICh0aGlzLl9hbCArIGFsKSB8IDBcbiAgdGhpcy5fYmwgPSAodGhpcy5fYmwgKyBibCkgfCAwXG4gIHRoaXMuX2NsID0gKHRoaXMuX2NsICsgY2wpIHwgMFxuICB0aGlzLl9kbCA9ICh0aGlzLl9kbCArIGRsKSB8IDBcbiAgdGhpcy5fZWwgPSAodGhpcy5fZWwgKyBlbCkgfCAwXG4gIHRoaXMuX2ZsID0gKHRoaXMuX2ZsICsgZmwpIHwgMFxuICB0aGlzLl9nbCA9ICh0aGlzLl9nbCArIGdsKSB8IDBcbiAgdGhpcy5faGwgPSAodGhpcy5faGwgKyBobCkgfCAwXG5cbiAgdGhpcy5fYWggPSAodGhpcy5fYWggKyBhaCArIGdldENhcnJ5KHRoaXMuX2FsLCBhbCkpIHwgMFxuICB0aGlzLl9iaCA9ICh0aGlzLl9iaCArIGJoICsgZ2V0Q2FycnkodGhpcy5fYmwsIGJsKSkgfCAwXG4gIHRoaXMuX2NoID0gKHRoaXMuX2NoICsgY2ggKyBnZXRDYXJyeSh0aGlzLl9jbCwgY2wpKSB8IDBcbiAgdGhpcy5fZGggPSAodGhpcy5fZGggKyBkaCArIGdldENhcnJ5KHRoaXMuX2RsLCBkbCkpIHwgMFxuICB0aGlzLl9laCA9ICh0aGlzLl9laCArIGVoICsgZ2V0Q2FycnkodGhpcy5fZWwsIGVsKSkgfCAwXG4gIHRoaXMuX2ZoID0gKHRoaXMuX2ZoICsgZmggKyBnZXRDYXJyeSh0aGlzLl9mbCwgZmwpKSB8IDBcbiAgdGhpcy5fZ2ggPSAodGhpcy5fZ2ggKyBnaCArIGdldENhcnJ5KHRoaXMuX2dsLCBnbCkpIHwgMFxuICB0aGlzLl9oaCA9ICh0aGlzLl9oaCArIGhoICsgZ2V0Q2FycnkodGhpcy5faGwsIGhsKSkgfCAwXG59XG5cblNoYTUxMi5wcm90b3R5cGUuX2hhc2ggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBIID0gQnVmZmVyLmFsbG9jVW5zYWZlKDY0KVxuXG4gIGZ1bmN0aW9uIHdyaXRlSW50NjRCRSAoaCwgbCwgb2Zmc2V0KSB7XG4gICAgSC53cml0ZUludDMyQkUoaCwgb2Zmc2V0KVxuICAgIEgud3JpdGVJbnQzMkJFKGwsIG9mZnNldCArIDQpXG4gIH1cblxuICB3cml0ZUludDY0QkUodGhpcy5fYWgsIHRoaXMuX2FsLCAwKVxuICB3cml0ZUludDY0QkUodGhpcy5fYmgsIHRoaXMuX2JsLCA4KVxuICB3cml0ZUludDY0QkUodGhpcy5fY2gsIHRoaXMuX2NsLCAxNilcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2RoLCB0aGlzLl9kbCwgMjQpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9laCwgdGhpcy5fZWwsIDMyKVxuICB3cml0ZUludDY0QkUodGhpcy5fZmgsIHRoaXMuX2ZsLCA0MClcbiAgd3JpdGVJbnQ2NEJFKHRoaXMuX2doLCB0aGlzLl9nbCwgNDgpXG4gIHdyaXRlSW50NjRCRSh0aGlzLl9oaCwgdGhpcy5faGwsIDU2KVxuXG4gIHJldHVybiBIXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hhNTEyXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmluaGVyaXRzKFN0cmVhbSwgRUUpO1xuU3RyZWFtLlJlYWRhYmxlID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzJyk7XG5TdHJlYW0uV3JpdGFibGUgPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vd3JpdGFibGUuanMnKTtcblN0cmVhbS5EdXBsZXggPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzJyk7XG5TdHJlYW0uVHJhbnNmb3JtID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcycpO1xuU3RyZWFtLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgncmVhZGFibGUtc3RyZWFtL3Bhc3N0aHJvdWdoLmpzJyk7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuNC54XG5TdHJlYW0uU3RyZWFtID0gU3RyZWFtO1xuXG5cblxuLy8gb2xkLXN0eWxlIHN0cmVhbXMuICBOb3RlIHRoYXQgdGhlIHBpcGUgbWV0aG9kICh0aGUgb25seSByZWxldmFudFxuLy8gcGFydCBvZiB0aGlzIGNsYXNzKSBpcyBvdmVycmlkZGVuIGluIHRoZSBSZWFkYWJsZSBjbGFzcy5cblxuZnVuY3Rpb24gU3RyZWFtKCkge1xuICBFRS5jYWxsKHRoaXMpO1xufVxuXG5TdHJlYW0ucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBvcHRpb25zKSB7XG4gIHZhciBzb3VyY2UgPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGlmIChkZXN0LndyaXRhYmxlKSB7XG4gICAgICBpZiAoZmFsc2UgPT09IGRlc3Qud3JpdGUoY2h1bmspICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgICBzb3VyY2UucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpO1xuXG4gIGZ1bmN0aW9uIG9uZHJhaW4oKSB7XG4gICAgaWYgKHNvdXJjZS5yZWFkYWJsZSAmJiBzb3VyY2UucmVzdW1lKSB7XG4gICAgICBzb3VyY2UucmVzdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLlxuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTtcbiAgICBzb3VyY2Uub24oJ2Nsb3NlJywgb25jbG9zZSk7XG4gIH1cblxuICB2YXIgZGlkT25FbmQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBpZiAoZGlkT25FbmQpIHJldHVybjtcbiAgICBkaWRPbkVuZCA9IHRydWU7XG5cbiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KCk7XG4gIH1cblxuICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuXG4gIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHtcbiAgICBjbGVhbnVwKCk7XG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgc3RyZWFtIGVycm9yIGluIHBpcGUuXG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIHJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKTtcblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG4gIH1cblxuICBzb3VyY2Uub24oJ2VuZCcsIGNsZWFudXApO1xuICBzb3VyY2Uub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5vbignY2xvc2UnLCBjbGVhbnVwKTtcblxuICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpO1xuXG4gIC8vIEFsbG93IGZvciB1bml4LWxpa2UgdXNhZ2U6IEEucGlwZShCKS5waXBlKEMpXG4gIHJldHVybiBkZXN0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgaXNFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nIHx8IGZ1bmN0aW9uIChlbmNvZGluZykge1xuICBlbmNvZGluZyA9ICcnICsgZW5jb2Rpbmc7XG4gIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6Y2FzZSAndXRmOCc6Y2FzZSAndXRmLTgnOmNhc2UgJ2FzY2lpJzpjYXNlICdiaW5hcnknOmNhc2UgJ2Jhc2U2NCc6Y2FzZSAndWNzMic6Y2FzZSAndWNzLTInOmNhc2UgJ3V0ZjE2bGUnOmNhc2UgJ3V0Zi0xNmxlJzpjYXNlICdyYXcnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gX25vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICBpZiAoIWVuYykgcmV0dXJuICd1dGY4JztcbiAgdmFyIHJldHJpZWQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gJ3V0ZjgnO1xuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuICd1dGYxNmxlJztcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gJ2xhdGluMSc7XG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGVuYztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChyZXRyaWVkKSByZXR1cm47IC8vIHVuZGVmaW5lZFxuICAgICAgICBlbmMgPSAoJycgKyBlbmMpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHJpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLy8gRG8gbm90IGNhY2hlIGBCdWZmZXIuaXNFbmNvZGluZ2Agd2hlbiBjaGVja2luZyBlbmNvZGluZyBuYW1lcyBhcyBzb21lXG4vLyBtb2R1bGVzIG1vbmtleS1wYXRjaCBpdCB0byBzdXBwb3J0IGFkZGl0aW9uYWwgZW5jb2RpbmdzXG5mdW5jdGlvbiBub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgdmFyIG5lbmMgPSBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKTtcbiAgaWYgKHR5cGVvZiBuZW5jICE9PSAnc3RyaW5nJyAmJiAoQnVmZmVyLmlzRW5jb2RpbmcgPT09IGlzRW5jb2RpbmcgfHwgIWlzRW5jb2RpbmcoZW5jKSkpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuYyk7XG4gIHJldHVybiBuZW5jIHx8IGVuYztcbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLlxuZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gU3RyaW5nRGVjb2RlcjtcbmZ1bmN0aW9uIFN0cmluZ0RlY29kZXIoZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKTtcbiAgdmFyIG5iO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIHRoaXMudGV4dCA9IHV0ZjE2VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gdXRmMTZFbmQ7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIHRoaXMuZmlsbExhc3QgPSB1dGY4RmlsbExhc3Q7XG4gICAgICBuYiA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgdGhpcy50ZXh0ID0gYmFzZTY0VGV4dDtcbiAgICAgIHRoaXMuZW5kID0gYmFzZTY0RW5kO1xuICAgICAgbmIgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBzaW1wbGVXcml0ZTtcbiAgICAgIHRoaXMuZW5kID0gc2ltcGxlRW5kO1xuICAgICAgcmV0dXJuO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAwO1xuICB0aGlzLmxhc3RUb3RhbCA9IDA7XG4gIHRoaXMubGFzdENoYXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmIpO1xufVxuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHJldHVybiAnJztcbiAgdmFyIHI7XG4gIHZhciBpO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHIgPSB0aGlzLmZpbGxMYXN0KGJ1Zik7XG4gICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xuICAgIGkgPSB0aGlzLmxhc3ROZWVkO1xuICAgIHRoaXMubGFzdE5lZWQgPSAwO1xuICB9IGVsc2Uge1xuICAgIGkgPSAwO1xuICB9XG4gIGlmIChpIDwgYnVmLmxlbmd0aCkgcmV0dXJuIHIgPyByICsgdGhpcy50ZXh0KGJ1ZiwgaSkgOiB0aGlzLnRleHQoYnVmLCBpKTtcbiAgcmV0dXJuIHIgfHwgJyc7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSB1dGY4RW5kO1xuXG4vLyBSZXR1cm5zIG9ubHkgY29tcGxldGUgY2hhcmFjdGVycyBpbiBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUudGV4dCA9IHV0ZjhUZXh0O1xuXG4vLyBBdHRlbXB0cyB0byBjb21wbGV0ZSBhIHBhcnRpYWwgbm9uLVVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5maWxsTGFzdCA9IGZ1bmN0aW9uIChidWYpIHtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZCwgMCwgYnVmLmxlbmd0aCk7XG4gIHRoaXMubGFzdE5lZWQgLT0gYnVmLmxlbmd0aDtcbn07XG5cbi8vIENoZWNrcyB0aGUgdHlwZSBvZiBhIFVURi04IGJ5dGUsIHdoZXRoZXIgaXQncyBBU0NJSSwgYSBsZWFkaW5nIGJ5dGUsIG9yIGFcbi8vIGNvbnRpbnVhdGlvbiBieXRlLlxuZnVuY3Rpb24gdXRmOENoZWNrQnl0ZShieXRlKSB7XG4gIGlmIChieXRlIDw9IDB4N0YpIHJldHVybiAwO2Vsc2UgaWYgKGJ5dGUgPj4gNSA9PT0gMHgwNikgcmV0dXJuIDI7ZWxzZSBpZiAoYnl0ZSA+PiA0ID09PSAweDBFKSByZXR1cm4gMztlbHNlIGlmIChieXRlID4+IDMgPT09IDB4MUUpIHJldHVybiA0O1xuICByZXR1cm4gLTE7XG59XG5cbi8vIENoZWNrcyBhdCBtb3N0IDMgYnl0ZXMgYXQgdGhlIGVuZCBvZiBhIEJ1ZmZlciBpbiBvcmRlciB0byBkZXRlY3QgYW5cbi8vIGluY29tcGxldGUgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIuIFRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgKDIsIDMsIG9yIDQpXG4vLyBuZWVkZWQgdG8gY29tcGxldGUgdGhlIFVURi04IGNoYXJhY3RlciAoaWYgYXBwbGljYWJsZSkgYXJlIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrSW5jb21wbGV0ZShzZWxmLCBidWYsIGkpIHtcbiAgdmFyIGogPSBidWYubGVuZ3RoIC0gMTtcbiAgaWYgKGogPCBpKSByZXR1cm4gMDtcbiAgdmFyIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDE7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpKSByZXR1cm4gMDtcbiAgbmIgPSB1dGY4Q2hlY2tCeXRlKGJ1ZltqXSk7XG4gIGlmIChuYiA+PSAwKSB7XG4gICAgaWYgKG5iID4gMCkgc2VsZi5sYXN0TmVlZCA9IG5iIC0gMjtcbiAgICByZXR1cm4gbmI7XG4gIH1cbiAgaWYgKC0taiA8IGkpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSB7XG4gICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgfVxuICAgIHJldHVybiBuYjtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxuLy8gb25lLCB3ZSBcInJlcGxhY2VcIiB0aGUgdmFsaWRhdGVkIGNvbnRpbnVhdGlvbiBieXRlcyB3ZSd2ZSBzZWVuIHNvIGZhciB3aXRoXG4vLyBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXJzICgnXFx1ZmZmZCcpLCB0byBtYXRjaCB2OCdzIFVURi04IGRlY29kaW5nXG4vLyBiZWhhdmlvci4gVGhlIGNvbnRpbnVhdGlvbiBieXRlIGNoZWNrIGlzIGluY2x1ZGVkIHRocmVlIHRpbWVzIGluIHRoZSBjYXNlXG4vLyB3aGVyZSBhbGwgb2YgdGhlIGNvbnRpbnVhdGlvbiBieXRlcyBmb3IgYSBjaGFyYWN0ZXIgZXhpc3QgaW4gdGhlIHNhbWUgYnVmZmVyLlxuLy8gSXQgaXMgYWxzbyBkb25lIHRoaXMgd2F5IGFzIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGluY3JlYXNlIGluc3RlYWQgb2YgdXNpbmcgYVxuLy8gbG9vcC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0V4dHJhQnl0ZXMoc2VsZiwgYnVmLCBwKSB7XG4gIGlmICgoYnVmWzBdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICBzZWxmLmxhc3ROZWVkID0gMDtcbiAgICByZXR1cm4gJ1xcdWZmZmQnLnJlcGVhdChwKTtcbiAgfVxuICBpZiAoc2VsZi5sYXN0TmVlZCA+IDEgJiYgYnVmLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoKGJ1ZlsxXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICBzZWxmLmxhc3ROZWVkID0gMTtcbiAgICAgIHJldHVybiAnXFx1ZmZmZCcucmVwZWF0KHAgKyAxKTtcbiAgICB9XG4gICAgaWYgKHNlbGYubGFzdE5lZWQgPiAyICYmIGJ1Zi5sZW5ndGggPiAyKSB7XG4gICAgICBpZiAoKGJ1ZlsyXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICAgIHNlbGYubGFzdE5lZWQgPSAyO1xuICAgICAgICByZXR1cm4gJ1xcdWZmZmQnLnJlcGVhdChwICsgMik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci5cbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gIHZhciByID0gdXRmOENoZWNrRXh0cmFCeXRlcyh0aGlzLCBidWYsIHApO1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufVxuXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcbi8vIHBhcnRpYWwgY2hhcmFjdGVyLCB0aGUgY2hhcmFjdGVyJ3MgYnl0ZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSByZXF1aXJlZFxuLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICBpZiAoIXRoaXMubGFzdE5lZWQpIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpKTtcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgMCwgZW5kKTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XG59XG5cbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgZm9yIGVhY2ggYnVmZmVyZWQgYnl0ZSBvZiBhIChwYXJ0aWFsKVxuLy8gY2hhcmFjdGVyIG5lZWRzIHRvIGJlIGFkZGVkIHRvIHRoZSBvdXRwdXQuXG5mdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArICdcXHVmZmZkJy5yZXBlYXQodGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFVURi0xNkxFIHR5cGljYWxseSBuZWVkcyB0d28gYnl0ZXMgcGVyIGNoYXJhY3RlciwgYnV0IGV2ZW4gaWYgd2UgaGF2ZSBhbiBldmVuXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxuLy8gc3Vycm9nYXRlLiBJbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIG5leHQgdHdvIGJ5dGVzIGluIG9yZGVyIHRvXG4vLyBkZWNvZGUgdGhlIGxhc3QgY2hhcmFjdGVyIHByb3Blcmx5LlxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICB2YXIgYyA9IHIuY2hhckNvZGVBdChyLmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKGMgPj0gMHhEODAwICYmIGMgPD0gMHhEQkZGKSB7XG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xuICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbn1cblxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2Vcbi8vIGVuZCBvbiBhIHBhcnRpYWwgY2hhcmFjdGVyLCB3ZSBzaW1wbHkgbGV0IHY4IGhhbmRsZSB0aGF0LlxuZnVuY3Rpb24gdXRmMTZFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRleHQoYnVmLCBpKSB7XG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gIGlmIChuID09PSAwKSByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpKTtcbiAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICB0aGlzLmxhc3RUb3RhbCA9IDM7XG4gIGlmIChuID09PSAxKSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSwgYnVmLmxlbmd0aCAtIG4pO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KVxuZnVuY3Rpb24gc2ltcGxlV3JpdGUoYnVmKSB7XG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgcmV0dXJuIGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG59IiwiLyohIGh0dHBzOi8vbXRocy5iZS91dGY4anMgdjIuMS4yIGJ5IEBtYXRoaWFzICovXG47KGZ1bmN0aW9uKHJvb3QpIHtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZXMgYGV4cG9ydHNgXG5cdHZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHM7XG5cblx0Ly8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWBcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdG1vZHVsZS5leHBvcnRzID09IGZyZWVFeHBvcnRzICYmIG1vZHVsZTtcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCwgZnJvbSBOb2RlLmpzIG9yIEJyb3dzZXJpZmllZCBjb2RlLFxuXHQvLyBhbmQgdXNlIGl0IGFzIGByb290YFxuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbC53aW5kb3cgPT09IGZyZWVHbG9iYWwpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdO1xuXHRcdHZhciBjb3VudGVyID0gMDtcblx0XHR2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblx0XHR2YXIgdmFsdWU7XG5cdFx0dmFyIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5cdGZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciBpbmRleCA9IC0xO1xuXHRcdHZhciB2YWx1ZTtcblx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXHRcdFx0aWYgKHZhbHVlID4gMHhGRkZGKSB7XG5cdFx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApO1xuXHRcdFx0XHR2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdGZ1bmN0aW9uIGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50KSB7XG5cdFx0aWYgKGNvZGVQb2ludCA+PSAweEQ4MDAgJiYgY29kZVBvaW50IDw9IDB4REZGRikge1xuXHRcdFx0dGhyb3cgRXJyb3IoXG5cdFx0XHRcdCdMb25lIHN1cnJvZ2F0ZSBVKycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHQnIGlzIG5vdCBhIHNjYWxhciB2YWx1ZSdcblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZUJ5dGUoY29kZVBvaW50LCBzaGlmdCkge1xuXHRcdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gc2hpZnQpICYgMHgzRikgfCAweDgwKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGVuY29kZUNvZGVQb2ludChjb2RlUG9pbnQpIHtcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkZGODApID09IDApIHsgLy8gMS1ieXRlIHNlcXVlbmNlXG5cdFx0XHRyZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG5cdFx0fVxuXHRcdHZhciBzeW1ib2wgPSAnJztcblx0XHRpZiAoKGNvZGVQb2ludCAmIDB4RkZGRkY4MDApID09IDApIHsgLy8gMi1ieXRlIHNlcXVlbmNlXG5cdFx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gNikgJiAweDFGKSB8IDB4QzApO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkZGMDAwMCkgPT0gMCkgeyAvLyAzLWJ5dGUgc2VxdWVuY2Vcblx0XHRcdGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50KTtcblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxMikgJiAweDBGKSB8IDB4RTApO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoKGNvZGVQb2ludCAmIDB4RkZFMDAwMDApID09IDApIHsgLy8gNC1ieXRlIHNlcXVlbmNlXG5cdFx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTgpICYgMHgwNykgfCAweEYwKTtcblx0XHRcdHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgMTIpO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0XHR9XG5cdFx0c3ltYm9sICs9IHN0cmluZ0Zyb21DaGFyQ29kZSgoY29kZVBvaW50ICYgMHgzRikgfCAweDgwKTtcblx0XHRyZXR1cm4gc3ltYm9sO1xuXHR9XG5cblx0ZnVuY3Rpb24gdXRmOGVuY29kZShzdHJpbmcpIHtcblx0XHR2YXIgY29kZVBvaW50cyA9IHVjczJkZWNvZGUoc3RyaW5nKTtcblx0XHR2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG5cdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0dmFyIGNvZGVQb2ludDtcblx0XHR2YXIgYnl0ZVN0cmluZyA9ICcnO1xuXHRcdHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG5cdFx0XHRjb2RlUG9pbnQgPSBjb2RlUG9pbnRzW2luZGV4XTtcblx0XHRcdGJ5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCk7XG5cdFx0fVxuXHRcdHJldHVybiBieXRlU3RyaW5nO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0ZnVuY3Rpb24gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKSB7XG5cdFx0aWYgKGJ5dGVJbmRleCA+PSBieXRlQ291bnQpIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0XHR9XG5cblx0XHR2YXIgY29udGludWF0aW9uQnl0ZSA9IGJ5dGVBcnJheVtieXRlSW5kZXhdICYgMHhGRjtcblx0XHRieXRlSW5kZXgrKztcblxuXHRcdGlmICgoY29udGludWF0aW9uQnl0ZSAmIDB4QzApID09IDB4ODApIHtcblx0XHRcdHJldHVybiBjb250aW51YXRpb25CeXRlICYgMHgzRjtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBlbmQgdXAgaGVyZSwgaXTigJlzIG5vdCBhIGNvbnRpbnVhdGlvbiBieXRlXG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRlY29kZVN5bWJvbCgpIHtcblx0XHR2YXIgYnl0ZTE7XG5cdFx0dmFyIGJ5dGUyO1xuXHRcdHZhciBieXRlMztcblx0XHR2YXIgYnl0ZTQ7XG5cdFx0dmFyIGNvZGVQb2ludDtcblxuXHRcdGlmIChieXRlSW5kZXggPiBieXRlQ291bnQpIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0XHR9XG5cblx0XHRpZiAoYnl0ZUluZGV4ID09IGJ5dGVDb3VudCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIFJlYWQgZmlyc3QgYnl0ZVxuXHRcdGJ5dGUxID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRcdGJ5dGVJbmRleCsrO1xuXG5cdFx0Ly8gMS1ieXRlIHNlcXVlbmNlIChubyBjb250aW51YXRpb24gYnl0ZXMpXG5cdFx0aWYgKChieXRlMSAmIDB4ODApID09IDApIHtcblx0XHRcdHJldHVybiBieXRlMTtcblx0XHR9XG5cblx0XHQvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0XHRpZiAoKGJ5dGUxICYgMHhFMCkgPT0gMHhDMCkge1xuXHRcdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MUYpIDw8IDYpIHwgYnl0ZTI7XG5cdFx0XHRpZiAoY29kZVBvaW50ID49IDB4ODApIHtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gMy1ieXRlIHNlcXVlbmNlIChtYXkgaW5jbHVkZSB1bnBhaXJlZCBzdXJyb2dhdGVzKVxuXHRcdGlmICgoYnl0ZTEgJiAweEYwKSA9PSAweEUwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwRikgPDwgMTIpIHwgKGJ5dGUyIDw8IDYpIHwgYnl0ZTM7XG5cdFx0XHRpZiAoY29kZVBvaW50ID49IDB4MDgwMCkge1xuXHRcdFx0XHRjaGVja1NjYWxhclZhbHVlKGNvZGVQb2ludCk7XG5cdFx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIDQtYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICgoYnl0ZTEgJiAweEY4KSA9PSAweEYwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRieXRlNCA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwNykgPDwgMHgxMikgfCAoYnl0ZTIgPDwgMHgwQykgfFxuXHRcdFx0XHQoYnl0ZTMgPDwgMHgwNikgfCBieXRlNDtcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwMTAwMDAgJiYgY29kZVBvaW50IDw9IDB4MTBGRkZGKSB7XG5cdFx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgVVRGLTggZGV0ZWN0ZWQnKTtcblx0fVxuXG5cdHZhciBieXRlQXJyYXk7XG5cdHZhciBieXRlQ291bnQ7XG5cdHZhciBieXRlSW5kZXg7XG5cdGZ1bmN0aW9uIHV0ZjhkZWNvZGUoYnl0ZVN0cmluZykge1xuXHRcdGJ5dGVBcnJheSA9IHVjczJkZWNvZGUoYnl0ZVN0cmluZyk7XG5cdFx0Ynl0ZUNvdW50ID0gYnl0ZUFycmF5Lmxlbmd0aDtcblx0XHRieXRlSW5kZXggPSAwO1xuXHRcdHZhciBjb2RlUG9pbnRzID0gW107XG5cdFx0dmFyIHRtcDtcblx0XHR3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbCgpKSAhPT0gZmFsc2UpIHtcblx0XHRcdGNvZGVQb2ludHMucHVzaCh0bXApO1xuXHRcdH1cblx0XHRyZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTtcblx0fVxuXG5cdC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5cdHZhciB1dGY4ID0ge1xuXHRcdCd2ZXJzaW9uJzogJzIuMS4yJyxcblx0XHQnZW5jb2RlJzogdXRmOGVuY29kZSxcblx0XHQnZGVjb2RlJzogdXRmOGRlY29kZVxuXHR9O1xuXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHV0Zjg7XG5cdFx0fSk7XG5cdH1cdGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmICFmcmVlRXhwb3J0cy5ub2RlVHlwZSkge1xuXHRcdGlmIChmcmVlTW9kdWxlKSB7IC8vIGluIE5vZGUuanMgb3IgUmluZ29KUyB2MC44LjArXG5cdFx0XHRmcmVlTW9kdWxlLmV4cG9ydHMgPSB1dGY4O1xuXHRcdH0gZWxzZSB7IC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtXG5cdFx0XHR2YXIgb2JqZWN0ID0ge307XG5cdFx0XHR2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3QuaGFzT3duUHJvcGVydHk7XG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gdXRmOCkge1xuXHRcdFx0XHRoYXNPd25Qcm9wZXJ0eS5jYWxsKHV0ZjgsIGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSB1dGY4W2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHsgLy8gaW4gUmhpbm8gb3IgYSB3ZWIgYnJvd3NlclxuXHRcdHJvb3QudXRmOCA9IHV0Zjg7XG5cdH1cblxufSh0aGlzKSk7XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZXByZWNhdGU7XG5cbi8qKlxuICogTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbiAqIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS5ub0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG4gKlxuICogSWYgYGxvY2FsU3RvcmFnZS50aHJvd0RlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zXG4gKiB3aWxsIHRocm93IGFuIEVycm9yIHdoZW4gaW52b2tlZC5cbiAqXG4gKiBJZiBgbG9jYWxTdG9yYWdlLnRyYWNlRGVwcmVjYXRpb24gPSB0cnVlYCBpcyBzZXQsIHRoZW4gZGVwcmVjYXRlZCBmdW5jdGlvbnNcbiAqIHdpbGwgaW52b2tlIGBjb25zb2xlLnRyYWNlKClgIGluc3RlYWQgb2YgYGNvbnNvbGUuZXJyb3IoKWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgZnVuY3Rpb24gdG8gZGVwcmVjYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gbXNnIC0gdGhlIHN0cmluZyB0byBwcmludCB0byB0aGUgY29uc29sZSB3aGVuIGBmbmAgaXMgaW52b2tlZFxuICogQHJldHVybnMge0Z1bmN0aW9ufSBhIG5ldyBcImRlcHJlY2F0ZWRcIiB2ZXJzaW9uIG9mIGBmbmBcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGVwcmVjYXRlIChmbiwgbXNnKSB7XG4gIGlmIChjb25maWcoJ25vRGVwcmVjYXRpb24nKSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKGNvbmZpZygndGhyb3dEZXByZWNhdGlvbicpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChjb25maWcoJ3RyYWNlRGVwcmVjYXRpb24nKSkge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4obXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGBsb2NhbFN0b3JhZ2VgIGZvciBib29sZWFuIHZhbHVlcyBmb3IgdGhlIGdpdmVuIGBuYW1lYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb25maWcgKG5hbWUpIHtcbiAgLy8gYWNjZXNzaW5nIGdsb2JhbC5sb2NhbFN0b3JhZ2UgY2FuIHRyaWdnZXIgYSBET01FeGNlcHRpb24gaW4gc2FuZGJveGVkIGlmcmFtZXNcbiAgdHJ5IHtcbiAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdmFsID0gZ2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTtcbiAgaWYgKG51bGwgPT0gdmFsKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG59XG4iLCJ2YXIgaW5kZXhPZiA9IHJlcXVpcmUoJ2luZGV4b2YnKTtcblxudmFyIE9iamVjdF9rZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgIGlmIChPYmplY3Qua2V5cykgcmV0dXJuIE9iamVjdC5rZXlzKG9iailcbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSByZXMucHVzaChrZXkpXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxufTtcblxudmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoeHMsIGZuKSB7XG4gICAgaWYgKHhzLmZvckVhY2gpIHJldHVybiB4cy5mb3JFYWNoKGZuKVxuICAgIGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmbih4c1tpXSwgaSwgeHMpO1xuICAgIH1cbn07XG5cbnZhciBkZWZpbmVQcm9wID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ18nLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmosIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgIG9ialtuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9O1xuICAgIH1cbn0oKSk7XG5cbnZhciBnbG9iYWxzID0gWydBcnJheScsICdCb29sZWFuJywgJ0RhdGUnLCAnRXJyb3InLCAnRXZhbEVycm9yJywgJ0Z1bmN0aW9uJyxcbidJbmZpbml0eScsICdKU09OJywgJ01hdGgnLCAnTmFOJywgJ051bWJlcicsICdPYmplY3QnLCAnUmFuZ2VFcnJvcicsXG4nUmVmZXJlbmNlRXJyb3InLCAnUmVnRXhwJywgJ1N0cmluZycsICdTeW50YXhFcnJvcicsICdUeXBlRXJyb3InLCAnVVJJRXJyb3InLFxuJ2RlY29kZVVSSScsICdkZWNvZGVVUklDb21wb25lbnQnLCAnZW5jb2RlVVJJJywgJ2VuY29kZVVSSUNvbXBvbmVudCcsICdlc2NhcGUnLFxuJ2V2YWwnLCAnaXNGaW5pdGUnLCAnaXNOYU4nLCAncGFyc2VGbG9hdCcsICdwYXJzZUludCcsICd1bmRlZmluZWQnLCAndW5lc2NhcGUnXTtcblxuZnVuY3Rpb24gQ29udGV4dCgpIHt9XG5Db250ZXh0LnByb3RvdHlwZSA9IHt9O1xuXG52YXIgU2NyaXB0ID0gZXhwb3J0cy5TY3JpcHQgPSBmdW5jdGlvbiBOb2RlU2NyaXB0IChjb2RlKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNjcmlwdCkpIHJldHVybiBuZXcgU2NyaXB0KGNvZGUpO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG59O1xuXG5TY3JpcHQucHJvdG90eXBlLnJ1bkluQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgaWYgKCEoY29udGV4dCBpbnN0YW5jZW9mIENvbnRleHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJuZWVkcyBhICdjb250ZXh0JyBhcmd1bWVudC5cIik7XG4gICAgfVxuICAgIFxuICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICBpZiAoIWlmcmFtZS5zdHlsZSkgaWZyYW1lLnN0eWxlID0ge307XG4gICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIFxuICAgIHZhciB3aW4gPSBpZnJhbWUuY29udGVudFdpbmRvdztcbiAgICB2YXIgd0V2YWwgPSB3aW4uZXZhbCwgd0V4ZWNTY3JpcHQgPSB3aW4uZXhlY1NjcmlwdDtcblxuICAgIGlmICghd0V2YWwgJiYgd0V4ZWNTY3JpcHQpIHtcbiAgICAgICAgLy8gd2luLmV2YWwoKSBtYWdpY2FsbHkgYXBwZWFycyB3aGVuIHRoaXMgaXMgY2FsbGVkIGluIElFOlxuICAgICAgICB3RXhlY1NjcmlwdC5jYWxsKHdpbiwgJ251bGwnKTtcbiAgICAgICAgd0V2YWwgPSB3aW4uZXZhbDtcbiAgICB9XG4gICAgXG4gICAgZm9yRWFjaChPYmplY3Rfa2V5cyhjb250ZXh0KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB3aW5ba2V5XSA9IGNvbnRleHRba2V5XTtcbiAgICB9KTtcbiAgICBmb3JFYWNoKGdsb2JhbHMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGNvbnRleHRba2V5XSkge1xuICAgICAgICAgICAgd2luW2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICB2YXIgd2luS2V5cyA9IE9iamVjdF9rZXlzKHdpbik7XG5cbiAgICB2YXIgcmVzID0gd0V2YWwuY2FsbCh3aW4sIHRoaXMuY29kZSk7XG4gICAgXG4gICAgZm9yRWFjaChPYmplY3Rfa2V5cyh3aW4pLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8vIEF2b2lkIGNvcHlpbmcgY2lyY3VsYXIgb2JqZWN0cyBsaWtlIGB0b3BgIGFuZCBgd2luZG93YCBieSBvbmx5XG4gICAgICAgIC8vIHVwZGF0aW5nIGV4aXN0aW5nIGNvbnRleHQgcHJvcGVydGllcyBvciBuZXcgcHJvcGVydGllcyBpbiB0aGUgYHdpbmBcbiAgICAgICAgLy8gdGhhdCB3YXMgb25seSBpbnRyb2R1Y2VkIGFmdGVyIHRoZSBldmFsLlxuICAgICAgICBpZiAoa2V5IGluIGNvbnRleHQgfHwgaW5kZXhPZih3aW5LZXlzLCBrZXkpID09PSAtMSkge1xuICAgICAgICAgICAgY29udGV4dFtrZXldID0gd2luW2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZvckVhY2goZ2xvYmFscywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gY29udGV4dCkpIHtcbiAgICAgICAgICAgIGRlZmluZVByb3AoY29udGV4dCwga2V5LCB3aW5ba2V5XSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgXG4gICAgcmV0dXJuIHJlcztcbn07XG5cblNjcmlwdC5wcm90b3R5cGUucnVuSW5UaGlzQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZXZhbCh0aGlzLmNvZGUpOyAvLyBtYXliZS4uLlxufTtcblxuU2NyaXB0LnByb3RvdHlwZS5ydW5Jbk5ld0NvbnRleHQgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBjdHggPSBTY3JpcHQuY3JlYXRlQ29udGV4dChjb250ZXh0KTtcbiAgICB2YXIgcmVzID0gdGhpcy5ydW5JbkNvbnRleHQoY3R4KTtcblxuICAgIGZvckVhY2goT2JqZWN0X2tleXMoY3R4KSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBjb250ZXh0W2tleV0gPSBjdHhba2V5XTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXM7XG59O1xuXG5mb3JFYWNoKE9iamVjdF9rZXlzKFNjcmlwdC5wcm90b3R5cGUpLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIGV4cG9ydHNbbmFtZV0gPSBTY3JpcHRbbmFtZV0gPSBmdW5jdGlvbiAoY29kZSkge1xuICAgICAgICB2YXIgcyA9IFNjcmlwdChjb2RlKTtcbiAgICAgICAgcmV0dXJuIHNbbmFtZV0uYXBwbHkocywgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICB9O1xufSk7XG5cbmV4cG9ydHMuY3JlYXRlU2NyaXB0ID0gZnVuY3Rpb24gKGNvZGUpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5TY3JpcHQoY29kZSk7XG59O1xuXG5leHBvcnRzLmNyZWF0ZUNvbnRleHQgPSBTY3JpcHQuY3JlYXRlQ29udGV4dCA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgdmFyIGNvcHkgPSBuZXcgQ29udGV4dCgpO1xuICAgIGlmKHR5cGVvZiBjb250ZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3JFYWNoKE9iamVjdF9rZXlzKGNvbnRleHQpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBjb3B5W2tleV0gPSBjb250ZXh0W2tleV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbn07XG4iLCJ2YXIgV2ViMyA9IHJlcXVpcmUoJy4vbGliL3dlYjMnKTtcblxuLy8gZG9udCBvdmVycmlkZSBnbG9iYWwgdmFyaWFibGVcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LldlYjMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LldlYjMgPSBXZWIzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYjM7XG4iLCJtb2R1bGUuZXhwb3J0cz1bXG4gIHtcbiAgICBcImNvbnN0YW50XCI6IHRydWUsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJfb3duZXJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJuYW1lXCIsXG4gICAgXCJvdXRwdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwib19uYW1lXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICB9LFxuICB7XG4gICAgXCJjb25zdGFudFwiOiB0cnVlLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiX25hbWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJvd25lclwiLFxuICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICBcInR5cGVcIjogXCJhZGRyZXNzXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgfSxcbiAge1xuICAgIFwiY29uc3RhbnRcIjogdHJ1ZSxcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIl9uYW1lXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJuYW1lXCI6IFwiY29udGVudFwiLFxuICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICBcInR5cGVcIjogXCJieXRlczMyXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgfSxcbiAge1xuICAgIFwiY29uc3RhbnRcIjogdHJ1ZSxcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIl9uYW1lXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJuYW1lXCI6IFwiYWRkclwiLFxuICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICBcInR5cGVcIjogXCJhZGRyZXNzXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgfSxcbiAge1xuICAgIFwiY29uc3RhbnRcIjogZmFsc2UsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJfbmFtZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJieXRlczMyXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwibmFtZVwiOiBcInJlc2VydmVcIixcbiAgICBcIm91dHB1dHNcIjogW10sXG4gICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICB9LFxuICB7XG4gICAgXCJjb25zdGFudFwiOiB0cnVlLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiX25hbWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJzdWJSZWdpc3RyYXJcIixcbiAgICBcIm91dHB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICB9XG4gICAgXSxcbiAgICBcInR5cGVcIjogXCJmdW5jdGlvblwiXG4gIH0sXG4gIHtcbiAgICBcImNvbnN0YW50XCI6IGZhbHNlLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiX25hbWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJfbmV3T3duZXJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJ0cmFuc2ZlclwiLFxuICAgIFwib3V0cHV0c1wiOiBbXSxcbiAgICBcInR5cGVcIjogXCJmdW5jdGlvblwiXG4gIH0sXG4gIHtcbiAgICBcImNvbnN0YW50XCI6IGZhbHNlLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiX25hbWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJfcmVnaXN0cmFyXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImFkZHJlc3NcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJuYW1lXCI6IFwic2V0U3ViUmVnaXN0cmFyXCIsXG4gICAgXCJvdXRwdXRzXCI6IFtdLFxuICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgfSxcbiAge1xuICAgIFwiY29uc3RhbnRcIjogZmFsc2UsXG4gICAgXCJpbnB1dHNcIjogW10sXG4gICAgXCJuYW1lXCI6IFwiUmVnaXN0cmFyXCIsXG4gICAgXCJvdXRwdXRzXCI6IFtdLFxuICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgfSxcbiAge1xuICAgIFwiY29uc3RhbnRcIjogZmFsc2UsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJfbmFtZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJieXRlczMyXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIl9hXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImFkZHJlc3NcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiX3ByaW1hcnlcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbFwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJzZXRBZGRyZXNzXCIsXG4gICAgXCJvdXRwdXRzXCI6IFtdLFxuICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgfSxcbiAge1xuICAgIFwiY29uc3RhbnRcIjogZmFsc2UsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJfbmFtZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJieXRlczMyXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIl9jb250ZW50XCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJuYW1lXCI6IFwic2V0Q29udGVudFwiLFxuICAgIFwib3V0cHV0c1wiOiBbXSxcbiAgICBcInR5cGVcIjogXCJmdW5jdGlvblwiXG4gIH0sXG4gIHtcbiAgICBcImNvbnN0YW50XCI6IGZhbHNlLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiX25hbWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJkaXNvd25cIixcbiAgICBcIm91dHB1dHNcIjogW10sXG4gICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICB9LFxuICB7XG4gICAgXCJhbm9ueW1vdXNcIjogZmFsc2UsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgXCJuYW1lXCI6IFwiX25hbWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImluZGV4ZWRcIjogZmFsc2UsXG4gICAgICAgIFwibmFtZVwiOiBcIl93aW5uZXJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJBdWN0aW9uRW5kZWRcIixcbiAgICBcInR5cGVcIjogXCJldmVudFwiXG4gIH0sXG4gIHtcbiAgICBcImFub255bW91c1wiOiBmYWxzZSxcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICBcIm5hbWVcIjogXCJfbmFtZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJieXRlczMyXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgXCJuYW1lXCI6IFwiX2JpZGRlclwiLFxuICAgICAgICBcInR5cGVcIjogXCJhZGRyZXNzXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgXCJuYW1lXCI6IFwiX3ZhbHVlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJuYW1lXCI6IFwiTmV3QmlkXCIsXG4gICAgXCJ0eXBlXCI6IFwiZXZlbnRcIlxuICB9LFxuICB7XG4gICAgXCJhbm9ueW1vdXNcIjogZmFsc2UsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgXCJuYW1lXCI6IFwibmFtZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJieXRlczMyXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwibmFtZVwiOiBcIkNoYW5nZWRcIixcbiAgICBcInR5cGVcIjogXCJldmVudFwiXG4gIH0sXG4gIHtcbiAgICBcImFub255bW91c1wiOiBmYWxzZSxcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICBcIm5hbWVcIjogXCJuYW1lXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpbmRleGVkXCI6IHRydWUsXG4gICAgICAgIFwibmFtZVwiOiBcImFkZHJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJQcmltYXJ5Q2hhbmdlZFwiLFxuICAgIFwidHlwZVwiOiBcImV2ZW50XCJcbiAgfVxuXVxuIiwibW9kdWxlLmV4cG9ydHM9W1xuICB7XG4gICAgXCJjb25zdGFudFwiOiB0cnVlLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiX25hbWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJvd25lclwiLFxuICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICBcInR5cGVcIjogXCJhZGRyZXNzXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgfSxcbiAge1xuICAgIFwiY29uc3RhbnRcIjogZmFsc2UsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJfbmFtZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJieXRlczMyXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIl9yZWZ1bmRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJkaXNvd25cIixcbiAgICBcIm91dHB1dHNcIjogW10sXG4gICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICB9LFxuICB7XG4gICAgXCJjb25zdGFudFwiOiB0cnVlLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiX25hbWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJhZGRyXCIsXG4gICAgXCJvdXRwdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImFkZHJlc3NcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICB9LFxuICB7XG4gICAgXCJjb25zdGFudFwiOiBmYWxzZSxcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIl9uYW1lXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJuYW1lXCI6IFwicmVzZXJ2ZVwiLFxuICAgIFwib3V0cHV0c1wiOiBbXSxcbiAgICBcInR5cGVcIjogXCJmdW5jdGlvblwiXG4gIH0sXG4gIHtcbiAgICBcImNvbnN0YW50XCI6IGZhbHNlLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiX25hbWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJfbmV3T3duZXJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJ0cmFuc2ZlclwiLFxuICAgIFwib3V0cHV0c1wiOiBbXSxcbiAgICBcInR5cGVcIjogXCJmdW5jdGlvblwiXG4gIH0sXG4gIHtcbiAgICBcImNvbnN0YW50XCI6IGZhbHNlLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiX25hbWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJfYVwiLFxuICAgICAgICBcInR5cGVcIjogXCJhZGRyZXNzXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwibmFtZVwiOiBcInNldEFkZHJcIixcbiAgICBcIm91dHB1dHNcIjogW10sXG4gICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICB9LFxuICB7XG4gICAgXCJhbm9ueW1vdXNcIjogZmFsc2UsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgXCJuYW1lXCI6IFwibmFtZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJieXRlczMyXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwibmFtZVwiOiBcIkNoYW5nZWRcIixcbiAgICBcInR5cGVcIjogXCJldmVudFwiXG4gIH1cbl1cbiIsIm1vZHVsZS5leHBvcnRzPVtcbiAge1xuICAgIFwiY29uc3RhbnRcIjogZmFsc2UsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJmcm9tXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwidG9cIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwibmFtZVwiOiBcInRyYW5zZmVyXCIsXG4gICAgXCJvdXRwdXRzXCI6IFtdLFxuICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgfSxcbiAge1xuICAgIFwiY29uc3RhbnRcIjogZmFsc2UsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJmcm9tXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwidG9cIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIm5hbWVcIjogXCJpbmRpcmVjdElkXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJpY2FwVHJhbnNmZXJcIixcbiAgICBcIm91dHB1dHNcIjogW10sXG4gICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICB9LFxuICB7XG4gICAgXCJjb25zdGFudFwiOiBmYWxzZSxcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcInRvXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJuYW1lXCI6IFwiZGVwb3NpdFwiLFxuICAgIFwib3V0cHV0c1wiOiBbXSxcbiAgICBcInBheWFibGVcIjogdHJ1ZSxcbiAgICBcInR5cGVcIjogXCJmdW5jdGlvblwiXG4gIH0sXG4gIHtcbiAgICBcImFub255bW91c1wiOiBmYWxzZSxcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICBcIm5hbWVcIjogXCJmcm9tXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImFkZHJlc3NcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpbmRleGVkXCI6IGZhbHNlLFxuICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwibmFtZVwiOiBcIkFub255bW91c0RlcG9zaXRcIixcbiAgICBcInR5cGVcIjogXCJldmVudFwiXG4gIH0sXG4gIHtcbiAgICBcImFub255bW91c1wiOiBmYWxzZSxcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICBcIm5hbWVcIjogXCJmcm9tXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImFkZHJlc3NcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpbmRleGVkXCI6IHRydWUsXG4gICAgICAgIFwibmFtZVwiOiBcInRvXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpbmRleGVkXCI6IGZhbHNlLFxuICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwibmFtZVwiOiBcIkRlcG9zaXRcIixcbiAgICBcInR5cGVcIjogXCJldmVudFwiXG4gIH0sXG4gIHtcbiAgICBcImFub255bW91c1wiOiBmYWxzZSxcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICBcIm5hbWVcIjogXCJmcm9tXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpbmRleGVkXCI6IHRydWUsXG4gICAgICAgIFwibmFtZVwiOiBcInRvXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImFkZHJlc3NcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJpbmRleGVkXCI6IGZhbHNlLFxuICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwibmFtZVwiOiBcIlRyYW5zZmVyXCIsXG4gICAgXCJ0eXBlXCI6IFwiZXZlbnRcIlxuICB9LFxuICB7XG4gICAgXCJhbm9ueW1vdXNcIjogZmFsc2UsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgXCJuYW1lXCI6IFwiZnJvbVwiLFxuICAgICAgICBcInR5cGVcIjogXCJieXRlczMyXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICBcIm5hbWVcIjogXCJ0b1wiLFxuICAgICAgICBcInR5cGVcIjogXCJhZGRyZXNzXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgXCJuYW1lXCI6IFwiaW5kaXJlY3RJZFwiLFxuICAgICAgICBcInR5cGVcIjogXCJieXRlczMyXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcIm5hbWVcIjogXCJJY2FwVHJhbnNmZXJcIixcbiAgICBcInR5cGVcIjogXCJldmVudFwiXG4gIH1cbl1cbiIsInZhciBmID0gcmVxdWlyZSgnLi9mb3JtYXR0ZXJzJyk7XG52YXIgU29saWRpdHlUeXBlID0gcmVxdWlyZSgnLi90eXBlJyk7XG5cbi8qKlxuICogU29saWRpdHlUeXBlQWRkcmVzcyBpcyBhIHByb290eXBlIHRoYXQgcmVwcmVzZW50cyBhZGRyZXNzIHR5cGVcbiAqIEl0IG1hdGNoZXM6XG4gKiBhZGRyZXNzXG4gKiBhZGRyZXNzW11cbiAqIGFkZHJlc3NbNF1cbiAqIGFkZHJlc3NbXVtdXG4gKiBhZGRyZXNzWzNdW11cbiAqIGFkZHJlc3NbXVs2XVtdLCAuLi5cbiAqL1xudmFyIFNvbGlkaXR5VHlwZUFkZHJlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5faW5wdXRGb3JtYXR0ZXIgPSBmLmZvcm1hdElucHV0SW50O1xuICAgIHRoaXMuX291dHB1dEZvcm1hdHRlciA9IGYuZm9ybWF0T3V0cHV0QWRkcmVzcztcbn07XG5cblNvbGlkaXR5VHlwZUFkZHJlc3MucHJvdG90eXBlID0gbmV3IFNvbGlkaXR5VHlwZSh7fSk7XG5Tb2xpZGl0eVR5cGVBZGRyZXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNvbGlkaXR5VHlwZUFkZHJlc3M7XG5cblNvbGlkaXR5VHlwZUFkZHJlc3MucHJvdG90eXBlLmlzVHlwZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuICEhbmFtZS5tYXRjaCgvYWRkcmVzcyhcXFsoWzAtOV0qKVxcXSk/Lyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvbGlkaXR5VHlwZUFkZHJlc3M7XG4iLCJ2YXIgZiA9IHJlcXVpcmUoJy4vZm9ybWF0dGVycycpO1xudmFyIFNvbGlkaXR5VHlwZSA9IHJlcXVpcmUoJy4vdHlwZScpO1xuXG4vKipcbiAqIFNvbGlkaXR5VHlwZUJvb2wgaXMgYSBwcm9vdHlwZSB0aGF0IHJlcHJlc2VudHMgYm9vbCB0eXBlXG4gKiBJdCBtYXRjaGVzOlxuICogYm9vbFxuICogYm9vbFtdXG4gKiBib29sWzRdXG4gKiBib29sW11bXVxuICogYm9vbFszXVtdXG4gKiBib29sW11bNl1bXSwgLi4uXG4gKi9cbnZhciBTb2xpZGl0eVR5cGVCb29sID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2lucHV0Rm9ybWF0dGVyID0gZi5mb3JtYXRJbnB1dEJvb2w7XG4gICAgdGhpcy5fb3V0cHV0Rm9ybWF0dGVyID0gZi5mb3JtYXRPdXRwdXRCb29sO1xufTtcblxuU29saWRpdHlUeXBlQm9vbC5wcm90b3R5cGUgPSBuZXcgU29saWRpdHlUeXBlKHt9KTtcblNvbGlkaXR5VHlwZUJvb2wucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU29saWRpdHlUeXBlQm9vbDtcblxuU29saWRpdHlUeXBlQm9vbC5wcm90b3R5cGUuaXNUeXBlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gISFuYW1lLm1hdGNoKC9eYm9vbChcXFsoWzAtOV0qKVxcXSkqJC8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTb2xpZGl0eVR5cGVCb29sO1xuIiwidmFyIGYgPSByZXF1aXJlKCcuL2Zvcm1hdHRlcnMnKTtcbnZhciBTb2xpZGl0eVR5cGUgPSByZXF1aXJlKCcuL3R5cGUnKTtcblxuLyoqXG4gKiBTb2xpZGl0eVR5cGVCeXRlcyBpcyBhIHByb3RvdHlwZSB0aGF0IHJlcHJlc2VudHMgdGhlIGJ5dGVzIHR5cGUuXG4gKiBJdCBtYXRjaGVzOlxuICogYnl0ZXNcbiAqIGJ5dGVzW11cbiAqIGJ5dGVzWzRdXG4gKiBieXRlc1tdW11cbiAqIGJ5dGVzWzNdW11cbiAqIGJ5dGVzW11bNl1bXSwgLi4uXG4gKiBieXRlczMyXG4gKiBieXRlczhbNF1cbiAqIGJ5dGVzWzNdW11cbiAqL1xudmFyIFNvbGlkaXR5VHlwZUJ5dGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2lucHV0Rm9ybWF0dGVyID0gZi5mb3JtYXRJbnB1dEJ5dGVzO1xuICAgIHRoaXMuX291dHB1dEZvcm1hdHRlciA9IGYuZm9ybWF0T3V0cHV0Qnl0ZXM7XG59O1xuXG5Tb2xpZGl0eVR5cGVCeXRlcy5wcm90b3R5cGUgPSBuZXcgU29saWRpdHlUeXBlKHt9KTtcblNvbGlkaXR5VHlwZUJ5dGVzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNvbGlkaXR5VHlwZUJ5dGVzO1xuXG5Tb2xpZGl0eVR5cGVCeXRlcy5wcm90b3R5cGUuaXNUeXBlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gISFuYW1lLm1hdGNoKC9eYnl0ZXMoWzAtOV17MSx9KShcXFsoWzAtOV0qKVxcXSkqJC8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTb2xpZGl0eVR5cGVCeXRlcztcbiIsIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKipcbiAqIEBmaWxlIGNvZGVyLmpzXG4gKiBAYXV0aG9yIE1hcmVrIEtvdGV3aWN6IDxtYXJla0BldGhkZXYuY29tPlxuICogQGRhdGUgMjAxNVxuICovXG5cbnZhciBmID0gcmVxdWlyZSgnLi9mb3JtYXR0ZXJzJyk7XG5cbnZhciBTb2xpZGl0eVR5cGVBZGRyZXNzID0gcmVxdWlyZSgnLi9hZGRyZXNzJyk7XG52YXIgU29saWRpdHlUeXBlQm9vbCA9IHJlcXVpcmUoJy4vYm9vbCcpO1xudmFyIFNvbGlkaXR5VHlwZUludCA9IHJlcXVpcmUoJy4vaW50Jyk7XG52YXIgU29saWRpdHlUeXBlVUludCA9IHJlcXVpcmUoJy4vdWludCcpO1xudmFyIFNvbGlkaXR5VHlwZUR5bmFtaWNCeXRlcyA9IHJlcXVpcmUoJy4vZHluYW1pY2J5dGVzJyk7XG52YXIgU29saWRpdHlUeXBlU3RyaW5nID0gcmVxdWlyZSgnLi9zdHJpbmcnKTtcbnZhciBTb2xpZGl0eVR5cGVSZWFsID0gcmVxdWlyZSgnLi9yZWFsJyk7XG52YXIgU29saWRpdHlUeXBlVVJlYWwgPSByZXF1aXJlKCcuL3VyZWFsJyk7XG52YXIgU29saWRpdHlUeXBlQnl0ZXMgPSByZXF1aXJlKCcuL2J5dGVzJyk7XG5cbnZhciBpc0R5bmFtaWMgPSBmdW5jdGlvbiAoc29saWRpdHlUeXBlLCB0eXBlKSB7XG4gICByZXR1cm4gc29saWRpdHlUeXBlLmlzRHluYW1pY1R5cGUodHlwZSkgfHxcbiAgICAgICAgICBzb2xpZGl0eVR5cGUuaXNEeW5hbWljQXJyYXkodHlwZSk7XG59O1xuXG4vKipcbiAqIFNvbGlkaXR5Q29kZXIgcHJvdG90eXBlIHNob3VsZCBiZSB1c2VkIHRvIGVuY29kZS9kZWNvZGUgc29saWRpdHkgcGFyYW1zIG9mIGFueSB0eXBlXG4gKi9cbnZhciBTb2xpZGl0eUNvZGVyID0gZnVuY3Rpb24gKHR5cGVzKSB7XG4gICAgdGhpcy5fdHlwZXMgPSB0eXBlcztcbn07XG5cbi8qKlxuICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIHVzZWQgdG8gdHJhbnNmb3JtIHR5cGUgdG8gU29saWRpdHlUeXBlXG4gKlxuICogQG1ldGhvZCBfcmVxdWlyZVR5cGVcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJucyB7U29saWRpdHlUeXBlfVxuICogQHRocm93cyB7RXJyb3J9IHRocm93cyBpZiBubyBtYXRjaGluZyB0eXBlIGlzIGZvdW5kXG4gKi9cblNvbGlkaXR5Q29kZXIucHJvdG90eXBlLl9yZXF1aXJlVHlwZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgdmFyIHNvbGlkaXR5VHlwZSA9IHRoaXMuX3R5cGVzLmZpbHRlcihmdW5jdGlvbiAodCkge1xuICAgICAgICByZXR1cm4gdC5pc1R5cGUodHlwZSk7XG4gICAgfSlbMF07XG5cbiAgICBpZiAoIXNvbGlkaXR5VHlwZSkge1xuICAgICAgICB0aHJvdyBFcnJvcignaW52YWxpZCBzb2xpZGl0eSB0eXBlITogJyArIHR5cGUpO1xuICAgIH1cblxuICAgIHJldHVybiBzb2xpZGl0eVR5cGU7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIGVuY29kZSBwbGFpbiBwYXJhbVxuICpcbiAqIEBtZXRob2QgZW5jb2RlUGFyYW1cbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge09iamVjdH0gcGxhaW4gcGFyYW1cbiAqIEByZXR1cm4ge1N0cmluZ30gZW5jb2RlZCBwbGFpbiBwYXJhbVxuICovXG5Tb2xpZGl0eUNvZGVyLnByb3RvdHlwZS5lbmNvZGVQYXJhbSA9IGZ1bmN0aW9uICh0eXBlLCBwYXJhbSkge1xuICAgIHJldHVybiB0aGlzLmVuY29kZVBhcmFtcyhbdHlwZV0sIFtwYXJhbV0pO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBlbmNvZGUgbGlzdCBvZiBwYXJhbXNcbiAqXG4gKiBAbWV0aG9kIGVuY29kZVBhcmFtc1xuICogQHBhcmFtIHtBcnJheX0gdHlwZXNcbiAqIEBwYXJhbSB7QXJyYXl9IHBhcmFtc1xuICogQHJldHVybiB7U3RyaW5nfSBlbmNvZGVkIGxpc3Qgb2YgcGFyYW1zXG4gKi9cblNvbGlkaXR5Q29kZXIucHJvdG90eXBlLmVuY29kZVBhcmFtcyA9IGZ1bmN0aW9uICh0eXBlcywgcGFyYW1zKSB7XG4gICAgdmFyIHNvbGlkaXR5VHlwZXMgPSB0aGlzLmdldFNvbGlkaXR5VHlwZXModHlwZXMpO1xuXG4gICAgdmFyIGVuY29kZWRzID0gc29saWRpdHlUeXBlcy5tYXAoZnVuY3Rpb24gKHNvbGlkaXR5VHlwZSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHNvbGlkaXR5VHlwZS5lbmNvZGUocGFyYW1zW2luZGV4XSwgdHlwZXNbaW5kZXhdKTtcbiAgICB9KTtcblxuICAgIHZhciBkeW5hbWljT2Zmc2V0ID0gc29saWRpdHlUeXBlcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgc29saWRpdHlUeXBlLCBpbmRleCkge1xuICAgICAgICB2YXIgc3RhdGljUGFydExlbmd0aCA9IHNvbGlkaXR5VHlwZS5zdGF0aWNQYXJ0TGVuZ3RoKHR5cGVzW2luZGV4XSk7XG4gICAgICAgIHZhciByb3VuZGVkU3RhdGljUGFydExlbmd0aCA9IE1hdGguZmxvb3IoKHN0YXRpY1BhcnRMZW5ndGggKyAzMSkgLyAzMikgKiAzMjtcblxuICAgICAgICByZXR1cm4gYWNjICsgKGlzRHluYW1pYyhzb2xpZGl0eVR5cGVzW2luZGV4XSwgdHlwZXNbaW5kZXhdKSA/XG4gICAgICAgICAgICAzMiA6XG4gICAgICAgICAgICByb3VuZGVkU3RhdGljUGFydExlbmd0aCk7XG4gICAgfSwgMCk7XG5cbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5lbmNvZGVNdWx0aVdpdGhPZmZzZXQodHlwZXMsIHNvbGlkaXR5VHlwZXMsIGVuY29kZWRzLCBkeW5hbWljT2Zmc2V0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5Tb2xpZGl0eUNvZGVyLnByb3RvdHlwZS5lbmNvZGVNdWx0aVdpdGhPZmZzZXQgPSBmdW5jdGlvbiAodHlwZXMsIHNvbGlkaXR5VHlwZXMsIGVuY29kZWRzLCBkeW5hbWljT2Zmc2V0KSB7XG4gICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgdHlwZXMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSwgaSkge1xuICAgICAgICBpZiAoaXNEeW5hbWljKHNvbGlkaXR5VHlwZXNbaV0sIHR5cGVzW2ldKSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGYuZm9ybWF0SW5wdXRJbnQoZHluYW1pY09mZnNldCkuZW5jb2RlKCk7XG4gICAgICAgICAgICB2YXIgZSA9IHNlbGYuZW5jb2RlV2l0aE9mZnNldCh0eXBlc1tpXSwgc29saWRpdHlUeXBlc1tpXSwgZW5jb2RlZHNbaV0sIGR5bmFtaWNPZmZzZXQpO1xuICAgICAgICAgICAgZHluYW1pY09mZnNldCArPSBlLmxlbmd0aCAvIDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBkb24ndCBhZGQgbGVuZ3RoIHRvIGR5bmFtaWNPZmZzZXQuIGl0J3MgYWxyZWFkeSBjb3VudGVkXG4gICAgICAgICAgICByZXN1bHQgKz0gc2VsZi5lbmNvZGVXaXRoT2Zmc2V0KHR5cGVzW2ldLCBzb2xpZGl0eVR5cGVzW2ldLCBlbmNvZGVkc1tpXSwgZHluYW1pY09mZnNldCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPOiBmaWd1cmUgb3V0IG5lc3RlZCBhcnJheXNcbiAgICB9KTtcblxuICAgIHR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUsIGkpIHtcbiAgICAgICAgaWYgKGlzRHluYW1pYyhzb2xpZGl0eVR5cGVzW2ldLCB0eXBlc1tpXSkpIHtcbiAgICAgICAgICAgIHZhciBlID0gc2VsZi5lbmNvZGVXaXRoT2Zmc2V0KHR5cGVzW2ldLCBzb2xpZGl0eVR5cGVzW2ldLCBlbmNvZGVkc1tpXSwgZHluYW1pY09mZnNldCk7XG4gICAgICAgICAgICBkeW5hbWljT2Zmc2V0ICs9IGUubGVuZ3RoIC8gMjtcbiAgICAgICAgICAgIHJlc3VsdCArPSBlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIFRPRE86IHJlZmFjdG9yIHdob2xlIGVuY29kaW5nIVxuU29saWRpdHlDb2Rlci5wcm90b3R5cGUuZW5jb2RlV2l0aE9mZnNldCA9IGZ1bmN0aW9uICh0eXBlLCBzb2xpZGl0eVR5cGUsIGVuY29kZWQsIG9mZnNldCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAoc29saWRpdHlUeXBlLmlzRHluYW1pY0FycmF5KHR5cGUpKSB7XG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gb2Zmc2V0IHdhcyBhbHJlYWR5IHNldFxuICAgICAgICAgICAgdmFyIG5lc3RlZE5hbWUgPSBzb2xpZGl0eVR5cGUubmVzdGVkTmFtZSh0eXBlKTtcbiAgICAgICAgICAgIHZhciBuZXN0ZWRTdGF0aWNQYXJ0TGVuZ3RoID0gc29saWRpdHlUeXBlLnN0YXRpY1BhcnRMZW5ndGgobmVzdGVkTmFtZSk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZW5jb2RlZFswXTtcblxuICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNMZW5ndGggPSAyOyAvLyBpbiBpbnRcbiAgICAgICAgICAgICAgICBpZiAoc29saWRpdHlUeXBlLmlzRHluYW1pY0FycmF5KG5lc3RlZE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgZW5jb2RlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNMZW5ndGggKz0gKyhlbmNvZGVkW2kgLSAxXSlbMF0gfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBmLmZvcm1hdElucHV0SW50KG9mZnNldCArIGkgKiBuZXN0ZWRTdGF0aWNQYXJ0TGVuZ3RoICsgcHJldmlvdXNMZW5ndGggKiAzMikuZW5jb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSgpO1xuXG4gICAgICAgICAgICAvLyBmaXJzdCBlbGVtZW50IGlzIGxlbmd0aCwgc2tpcCBpdFxuICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kZWQubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhZGRpdGlvbmFsT2Zmc2V0ID0gcmVzdWx0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNlbGYuZW5jb2RlV2l0aE9mZnNldChuZXN0ZWROYW1lLCBzb2xpZGl0eVR5cGUsIGVuY29kZWRbaSArIDFdLCBvZmZzZXQgKyAgYWRkaXRpb25hbE9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSkoKTtcblxuICAgIH0gZWxzZSBpZiAoc29saWRpdHlUeXBlLmlzU3RhdGljQXJyYXkodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbmVzdGVkTmFtZSA9IHNvbGlkaXR5VHlwZS5uZXN0ZWROYW1lKHR5cGUpO1xuICAgICAgICAgICAgdmFyIG5lc3RlZFN0YXRpY1BhcnRMZW5ndGggPSBzb2xpZGl0eVR5cGUuc3RhdGljUGFydExlbmd0aChuZXN0ZWROYW1lKTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuXG5cbiAgICAgICAgICAgIGlmIChzb2xpZGl0eVR5cGUuaXNEeW5hbWljQXJyYXkobmVzdGVkTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNMZW5ndGggPSAwOyAvLyBpbiBpbnRcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgbGVuZ3RoIG9mIHByZXZpb3VzIGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzTGVuZ3RoICs9ICsoZW5jb2RlZFtpIC0gMV0gfHwgW10pWzBdIHx8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gZi5mb3JtYXRJbnB1dEludChvZmZzZXQgKyBpICogbmVzdGVkU3RhdGljUGFydExlbmd0aCArIHByZXZpb3VzTGVuZ3RoICogMzIpLmVuY29kZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkZGl0aW9uYWxPZmZzZXQgPSByZXN1bHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2VsZi5lbmNvZGVXaXRoT2Zmc2V0KG5lc3RlZE5hbWUsIHNvbGlkaXR5VHlwZSwgZW5jb2RlZFtpXSwgb2Zmc2V0ICsgYWRkaXRpb25hbE9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSkoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5jb2RlZDtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZGVjb2RlIGJ5dGVzIHRvIHBsYWluIHBhcmFtXG4gKlxuICogQG1ldGhvZCBkZWNvZGVQYXJhbVxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBieXRlc1xuICogQHJldHVybiB7T2JqZWN0fSBwbGFpbiBwYXJhbVxuICovXG5Tb2xpZGl0eUNvZGVyLnByb3RvdHlwZS5kZWNvZGVQYXJhbSA9IGZ1bmN0aW9uICh0eXBlLCBieXRlcykge1xuICAgIHJldHVybiB0aGlzLmRlY29kZVBhcmFtcyhbdHlwZV0sIGJ5dGVzKVswXTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZGVjb2RlIGxpc3Qgb2YgcGFyYW1zXG4gKlxuICogQG1ldGhvZCBkZWNvZGVQYXJhbVxuICogQHBhcmFtIHtBcnJheX0gdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBieXRlc1xuICogQHJldHVybiB7QXJyYXl9IGFycmF5IG9mIHBsYWluIHBhcmFtc1xuICovXG5Tb2xpZGl0eUNvZGVyLnByb3RvdHlwZS5kZWNvZGVQYXJhbXMgPSBmdW5jdGlvbiAodHlwZXMsIGJ5dGVzKSB7XG4gICAgdmFyIHNvbGlkaXR5VHlwZXMgPSB0aGlzLmdldFNvbGlkaXR5VHlwZXModHlwZXMpO1xuICAgIHZhciBvZmZzZXRzID0gdGhpcy5nZXRPZmZzZXRzKHR5cGVzLCBzb2xpZGl0eVR5cGVzKTtcblxuICAgIHJldHVybiBzb2xpZGl0eVR5cGVzLm1hcChmdW5jdGlvbiAoc29saWRpdHlUeXBlLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gc29saWRpdHlUeXBlLmRlY29kZShieXRlcywgb2Zmc2V0c1tpbmRleF0sICB0eXBlc1tpbmRleF0sIGluZGV4KTtcbiAgICB9KTtcbn07XG5cblNvbGlkaXR5Q29kZXIucHJvdG90eXBlLmdldE9mZnNldHMgPSBmdW5jdGlvbiAodHlwZXMsIHNvbGlkaXR5VHlwZXMpIHtcbiAgICB2YXIgbGVuZ3RocyA9ICBzb2xpZGl0eVR5cGVzLm1hcChmdW5jdGlvbiAoc29saWRpdHlUeXBlLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gc29saWRpdHlUeXBlLnN0YXRpY1BhcnRMZW5ndGgodHlwZXNbaW5kZXhdKTtcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbGVuZ3Rocy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgLy8gc3VtIHdpdGggbGVuZ3RoIG9mIHByZXZpb3VzIGVsZW1lbnRcbiAgICAgICAgbGVuZ3Roc1tpXSArPSBsZW5ndGhzW2kgLSAxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGVuZ3Rocy5tYXAoZnVuY3Rpb24gKGxlbmd0aCwgaW5kZXgpIHtcbiAgICAgICAgLy8gcmVtb3ZlIHRoZSBjdXJyZW50IGxlbmd0aCwgc28gdGhlIGxlbmd0aCBpcyBzdW0gb2YgcHJldmlvdXMgZWxlbWVudHNcbiAgICAgICAgdmFyIHN0YXRpY1BhcnRMZW5ndGggPSBzb2xpZGl0eVR5cGVzW2luZGV4XS5zdGF0aWNQYXJ0TGVuZ3RoKHR5cGVzW2luZGV4XSk7XG4gICAgICAgIHJldHVybiBsZW5ndGggLSBzdGF0aWNQYXJ0TGVuZ3RoO1xuICAgIH0pO1xufTtcblxuU29saWRpdHlDb2Rlci5wcm90b3R5cGUuZ2V0U29saWRpdHlUeXBlcyA9IGZ1bmN0aW9uICh0eXBlcykge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gdHlwZXMubWFwKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHJldHVybiBzZWxmLl9yZXF1aXJlVHlwZSh0eXBlKTtcbiAgICB9KTtcbn07XG5cbnZhciBjb2RlciA9IG5ldyBTb2xpZGl0eUNvZGVyKFtcbiAgICBuZXcgU29saWRpdHlUeXBlQWRkcmVzcygpLFxuICAgIG5ldyBTb2xpZGl0eVR5cGVCb29sKCksXG4gICAgbmV3IFNvbGlkaXR5VHlwZUludCgpLFxuICAgIG5ldyBTb2xpZGl0eVR5cGVVSW50KCksXG4gICAgbmV3IFNvbGlkaXR5VHlwZUR5bmFtaWNCeXRlcygpLFxuICAgIG5ldyBTb2xpZGl0eVR5cGVCeXRlcygpLFxuICAgIG5ldyBTb2xpZGl0eVR5cGVTdHJpbmcoKSxcbiAgICBuZXcgU29saWRpdHlUeXBlUmVhbCgpLFxuICAgIG5ldyBTb2xpZGl0eVR5cGVVUmVhbCgpXG5dKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb2RlcjtcbiIsInZhciBmID0gcmVxdWlyZSgnLi9mb3JtYXR0ZXJzJyk7XG52YXIgU29saWRpdHlUeXBlID0gcmVxdWlyZSgnLi90eXBlJyk7XG5cbnZhciBTb2xpZGl0eVR5cGVEeW5hbWljQnl0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5faW5wdXRGb3JtYXR0ZXIgPSBmLmZvcm1hdElucHV0RHluYW1pY0J5dGVzO1xuICAgIHRoaXMuX291dHB1dEZvcm1hdHRlciA9IGYuZm9ybWF0T3V0cHV0RHluYW1pY0J5dGVzO1xufTtcblxuU29saWRpdHlUeXBlRHluYW1pY0J5dGVzLnByb3RvdHlwZSA9IG5ldyBTb2xpZGl0eVR5cGUoe30pO1xuU29saWRpdHlUeXBlRHluYW1pY0J5dGVzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNvbGlkaXR5VHlwZUR5bmFtaWNCeXRlcztcblxuU29saWRpdHlUeXBlRHluYW1pY0J5dGVzLnByb3RvdHlwZS5pc1R5cGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiAhIW5hbWUubWF0Y2goL15ieXRlcyhcXFsoWzAtOV0qKVxcXSkqJC8pO1xufTtcblxuU29saWRpdHlUeXBlRHluYW1pY0J5dGVzLnByb3RvdHlwZS5pc0R5bmFtaWNUeXBlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0cnVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTb2xpZGl0eVR5cGVEeW5hbWljQnl0ZXM7XG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqXG4gKiBAZmlsZSBmb3JtYXR0ZXJzLmpzXG4gKiBAYXV0aG9yIE1hcmVrIEtvdGV3aWN6IDxtYXJla0BldGhkZXYuY29tPlxuICogQGRhdGUgMjAxNVxuICovXG5cbnZhciBCaWdOdW1iZXIgPSByZXF1aXJlKCdiaWdudW1iZXIuanMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7XG52YXIgYyA9IHJlcXVpcmUoJy4uL3V0aWxzL2NvbmZpZycpO1xudmFyIFNvbGlkaXR5UGFyYW0gPSByZXF1aXJlKCcuL3BhcmFtJyk7XG5cblxuLyoqXG4gKiBGb3JtYXRzIGlucHV0IHZhbHVlIHRvIGJ5dGUgcmVwcmVzZW50YXRpb24gb2YgaW50XG4gKiBJZiB2YWx1ZSBpcyBuZWdhdGl2ZSwgcmV0dXJuIGl0J3MgdHdvJ3MgY29tcGxlbWVudFxuICogSWYgdGhlIHZhbHVlIGlzIGZsb2F0aW5nIHBvaW50LCByb3VuZCBpdCBkb3duXG4gKlxuICogQG1ldGhvZCBmb3JtYXRJbnB1dEludFxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfEJpZ051bWJlcn0gdmFsdWUgdGhhdCBuZWVkcyB0byBiZSBmb3JtYXR0ZWRcbiAqIEByZXR1cm5zIHtTb2xpZGl0eVBhcmFtfVxuICovXG52YXIgZm9ybWF0SW5wdXRJbnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBCaWdOdW1iZXIuY29uZmlnKGMuRVRIX0JJR05VTUJFUl9ST1VORElOR19NT0RFKTtcbiAgICB2YXIgcmVzdWx0ID0gdXRpbHMucGFkTGVmdCh1dGlscy50b1R3b3NDb21wbGVtZW50KHZhbHVlKS50b1N0cmluZygxNiksIDY0KTtcbiAgICByZXR1cm4gbmV3IFNvbGlkaXR5UGFyYW0ocmVzdWx0KTtcbn07XG5cbi8qKlxuICogRm9ybWF0cyBpbnB1dCBieXRlc1xuICpcbiAqIEBtZXRob2QgZm9ybWF0SW5wdXRCeXRlc1xuICogQHBhcmFtIHtTdHJpbmd9XG4gKiBAcmV0dXJucyB7U29saWRpdHlQYXJhbX1cbiAqL1xudmFyIGZvcm1hdElucHV0Qnl0ZXMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gdXRpbHMudG9IZXgodmFsdWUpLnN1YnN0cigyKTtcbiAgICB2YXIgbCA9IE1hdGguZmxvb3IoKHJlc3VsdC5sZW5ndGggKyA2MykgLyA2NCk7XG4gICAgcmVzdWx0ID0gdXRpbHMucGFkUmlnaHQocmVzdWx0LCBsICogNjQpO1xuICAgIHJldHVybiBuZXcgU29saWRpdHlQYXJhbShyZXN1bHQpO1xufTtcblxuLyoqXG4gKiBGb3JtYXRzIGlucHV0IGJ5dGVzXG4gKlxuICogQG1ldGhvZCBmb3JtYXREeW5hbWljSW5wdXRCeXRlc1xuICogQHBhcmFtIHtTdHJpbmd9XG4gKiBAcmV0dXJucyB7U29saWRpdHlQYXJhbX1cbiAqL1xudmFyIGZvcm1hdElucHV0RHluYW1pY0J5dGVzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IHV0aWxzLnRvSGV4KHZhbHVlKS5zdWJzdHIoMik7XG4gICAgdmFyIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGggLyAyO1xuICAgIHZhciBsID0gTWF0aC5mbG9vcigocmVzdWx0Lmxlbmd0aCArIDYzKSAvIDY0KTtcbiAgICByZXN1bHQgPSB1dGlscy5wYWRSaWdodChyZXN1bHQsIGwgKiA2NCk7XG4gICAgcmV0dXJuIG5ldyBTb2xpZGl0eVBhcmFtKGZvcm1hdElucHV0SW50KGxlbmd0aCkudmFsdWUgKyByZXN1bHQpO1xufTtcblxuLyoqXG4gKiBGb3JtYXRzIGlucHV0IHZhbHVlIHRvIGJ5dGUgcmVwcmVzZW50YXRpb24gb2Ygc3RyaW5nXG4gKlxuICogQG1ldGhvZCBmb3JtYXRJbnB1dFN0cmluZ1xuICogQHBhcmFtIHtTdHJpbmd9XG4gKiBAcmV0dXJucyB7U29saWRpdHlQYXJhbX1cbiAqL1xudmFyIGZvcm1hdElucHV0U3RyaW5nID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IHV0aWxzLmZyb21VdGY4KHZhbHVlKS5zdWJzdHIoMik7XG4gICAgdmFyIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGggLyAyO1xuICAgIHZhciBsID0gTWF0aC5mbG9vcigocmVzdWx0Lmxlbmd0aCArIDYzKSAvIDY0KTtcbiAgICByZXN1bHQgPSB1dGlscy5wYWRSaWdodChyZXN1bHQsIGwgKiA2NCk7XG4gICAgcmV0dXJuIG5ldyBTb2xpZGl0eVBhcmFtKGZvcm1hdElucHV0SW50KGxlbmd0aCkudmFsdWUgKyByZXN1bHQpO1xufTtcblxuLyoqXG4gKiBGb3JtYXRzIGlucHV0IHZhbHVlIHRvIGJ5dGUgcmVwcmVzZW50YXRpb24gb2YgYm9vbFxuICpcbiAqIEBtZXRob2QgZm9ybWF0SW5wdXRCb29sXG4gKiBAcGFyYW0ge0Jvb2xlYW59XG4gKiBAcmV0dXJucyB7U29saWRpdHlQYXJhbX1cbiAqL1xudmFyIGZvcm1hdElucHV0Qm9vbCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyArICh2YWx1ZSA/ICAnMScgOiAnMCcpO1xuICAgIHJldHVybiBuZXcgU29saWRpdHlQYXJhbShyZXN1bHQpO1xufTtcblxuLyoqXG4gKiBGb3JtYXRzIGlucHV0IHZhbHVlIHRvIGJ5dGUgcmVwcmVzZW50YXRpb24gb2YgcmVhbFxuICogVmFsdWVzIGFyZSBtdWx0aXBsaWVkIGJ5IDJebSBhbmQgZW5jb2RlZCBhcyBpbnRlZ2Vyc1xuICpcbiAqIEBtZXRob2QgZm9ybWF0SW5wdXRSZWFsXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ8QmlnTnVtYmVyfVxuICogQHJldHVybnMge1NvbGlkaXR5UGFyYW19XG4gKi9cbnZhciBmb3JtYXRJbnB1dFJlYWwgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gZm9ybWF0SW5wdXRJbnQobmV3IEJpZ051bWJlcih2YWx1ZSkudGltZXMobmV3IEJpZ051bWJlcigyKS5wb3coMTI4KSkpO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiBpbnB1dCB2YWx1ZSBpcyBuZWdhdGl2ZVxuICpcbiAqIEBtZXRob2Qgc2lnbmVkSXNOZWdhdGl2ZVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIGlzIGhleCBmb3JtYXRcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIGl0IGlzIG5lZ2F0aXZlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIHNpZ25lZElzTmVnYXRpdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gKG5ldyBCaWdOdW1iZXIodmFsdWUuc3Vic3RyKDAsIDEpLCAxNikudG9TdHJpbmcoMikuc3Vic3RyKDAsIDEpKSA9PT0gJzEnO1xufTtcblxuLyoqXG4gKiBGb3JtYXRzIHJpZ2h0LWFsaWduZWQgb3V0cHV0IGJ5dGVzIHRvIGludFxuICpcbiAqIEBtZXRob2QgZm9ybWF0T3V0cHV0SW50XG4gKiBAcGFyYW0ge1NvbGlkaXR5UGFyYW19IHBhcmFtXG4gKiBAcmV0dXJucyB7QmlnTnVtYmVyfSByaWdodC1hbGlnbmVkIG91dHB1dCBieXRlcyBmb3JtYXR0ZWQgdG8gYmlnIG51bWJlclxuICovXG52YXIgZm9ybWF0T3V0cHV0SW50ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgdmFyIHZhbHVlID0gcGFyYW0uc3RhdGljUGFydCgpIHx8IFwiMFwiO1xuXG4gICAgLy8gY2hlY2sgaWYgaXQncyBuZWdhdGl2ZSBudW1iZXJcbiAgICAvLyBpdCBpdCBpcywgcmV0dXJuIHR3bydzIGNvbXBsZW1lbnRcbiAgICBpZiAoc2lnbmVkSXNOZWdhdGl2ZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIodmFsdWUsIDE2KS5taW51cyhuZXcgQmlnTnVtYmVyKCdmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmJywgMTYpKS5taW51cygxKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIodmFsdWUsIDE2KTtcbn07XG5cbi8qKlxuICogRm9ybWF0cyByaWdodC1hbGlnbmVkIG91dHB1dCBieXRlcyB0byB1aW50XG4gKlxuICogQG1ldGhvZCBmb3JtYXRPdXRwdXRVSW50XG4gKiBAcGFyYW0ge1NvbGlkaXR5UGFyYW19XG4gKiBAcmV0dXJucyB7QmlnTnVtZWJlcn0gcmlnaHQtYWxpZ25lZCBvdXRwdXQgYnl0ZXMgZm9ybWF0dGVkIHRvIHVpbnRcbiAqL1xudmFyIGZvcm1hdE91dHB1dFVJbnQgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICB2YXIgdmFsdWUgPSBwYXJhbS5zdGF0aWNQYXJ0KCkgfHwgXCIwXCI7XG4gICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIodmFsdWUsIDE2KTtcbn07XG5cbi8qKlxuICogRm9ybWF0cyByaWdodC1hbGlnbmVkIG91dHB1dCBieXRlcyB0byByZWFsXG4gKlxuICogQG1ldGhvZCBmb3JtYXRPdXRwdXRSZWFsXG4gKiBAcGFyYW0ge1NvbGlkaXR5UGFyYW19XG4gKiBAcmV0dXJucyB7QmlnTnVtYmVyfSBpbnB1dCBieXRlcyBmb3JtYXR0ZWQgdG8gcmVhbFxuICovXG52YXIgZm9ybWF0T3V0cHV0UmVhbCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBmb3JtYXRPdXRwdXRJbnQocGFyYW0pLmRpdmlkZWRCeShuZXcgQmlnTnVtYmVyKDIpLnBvdygxMjgpKTtcbn07XG5cbi8qKlxuICogRm9ybWF0cyByaWdodC1hbGlnbmVkIG91dHB1dCBieXRlcyB0byB1cmVhbFxuICpcbiAqIEBtZXRob2QgZm9ybWF0T3V0cHV0VVJlYWxcbiAqIEBwYXJhbSB7U29saWRpdHlQYXJhbX1cbiAqIEByZXR1cm5zIHtCaWdOdW1iZXJ9IGlucHV0IGJ5dGVzIGZvcm1hdHRlZCB0byB1cmVhbFxuICovXG52YXIgZm9ybWF0T3V0cHV0VVJlYWwgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICByZXR1cm4gZm9ybWF0T3V0cHV0VUludChwYXJhbSkuZGl2aWRlZEJ5KG5ldyBCaWdOdW1iZXIoMikucG93KDEyOCkpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBmb3JtYXQgb3V0cHV0IGJvb2xcbiAqXG4gKiBAbWV0aG9kIGZvcm1hdE91dHB1dEJvb2xcbiAqIEBwYXJhbSB7U29saWRpdHlQYXJhbX1cbiAqIEByZXR1cm5zIHtCb29sZWFufSByaWdodC1hbGlnbmVkIGlucHV0IGJ5dGVzIGZvcm1hdHRlZCB0byBib29sXG4gKi9cbnZhciBmb3JtYXRPdXRwdXRCb29sID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIHBhcmFtLnN0YXRpY1BhcnQoKSA9PT0gJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEnID8gdHJ1ZSA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBmb3JtYXQgb3V0cHV0IGJ5dGVzXG4gKlxuICogQG1ldGhvZCBmb3JtYXRPdXRwdXRCeXRlc1xuICogQHBhcmFtIHtTb2xpZGl0eVBhcmFtfSBsZWZ0LWFsaWduZWQgaGV4IHJlcHJlc2VudGF0aW9uIG9mIHN0cmluZ1xuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgdHlwZSBuYW1lXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBoZXggc3RyaW5nXG4gKi9cbnZhciBmb3JtYXRPdXRwdXRCeXRlcyA9IGZ1bmN0aW9uIChwYXJhbSwgbmFtZSkge1xuICAgIHZhciBtYXRjaGVzID0gbmFtZS5tYXRjaCgvXmJ5dGVzKFswLTldKikvKTtcbiAgICB2YXIgc2l6ZSA9IHBhcnNlSW50KG1hdGNoZXNbMV0pO1xuICAgIHJldHVybiAnMHgnICsgcGFyYW0uc3RhdGljUGFydCgpLnNsaWNlKDAsIDIgKiBzaXplKTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZm9ybWF0IG91dHB1dCBieXRlc1xuICpcbiAqIEBtZXRob2QgZm9ybWF0T3V0cHV0RHluYW1pY0J5dGVzXG4gKiBAcGFyYW0ge1NvbGlkaXR5UGFyYW19IGxlZnQtYWxpZ25lZCBoZXggcmVwcmVzZW50YXRpb24gb2Ygc3RyaW5nXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBoZXggc3RyaW5nXG4gKi9cbnZhciBmb3JtYXRPdXRwdXREeW5hbWljQnl0ZXMgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICB2YXIgbGVuZ3RoID0gKG5ldyBCaWdOdW1iZXIocGFyYW0uZHluYW1pY1BhcnQoKS5zbGljZSgwLCA2NCksIDE2KSkudG9OdW1iZXIoKSAqIDI7XG4gICAgcmV0dXJuICcweCcgKyBwYXJhbS5keW5hbWljUGFydCgpLnN1YnN0cig2NCwgbGVuZ3RoKTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZm9ybWF0IG91dHB1dCBzdHJpbmdcbiAqXG4gKiBAbWV0aG9kIGZvcm1hdE91dHB1dFN0cmluZ1xuICogQHBhcmFtIHtTb2xpZGl0eVBhcmFtfSBsZWZ0LWFsaWduZWQgaGV4IHJlcHJlc2VudGF0aW9uIG9mIHN0cmluZ1xuICogQHJldHVybnMge1N0cmluZ30gYXNjaWkgc3RyaW5nXG4gKi9cbnZhciBmb3JtYXRPdXRwdXRTdHJpbmcgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICB2YXIgbGVuZ3RoID0gKG5ldyBCaWdOdW1iZXIocGFyYW0uZHluYW1pY1BhcnQoKS5zbGljZSgwLCA2NCksIDE2KSkudG9OdW1iZXIoKSAqIDI7XG4gICAgcmV0dXJuIHV0aWxzLnRvVXRmOChwYXJhbS5keW5hbWljUGFydCgpLnN1YnN0cig2NCwgbGVuZ3RoKSk7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIGZvcm1hdCBvdXRwdXQgYWRkcmVzc1xuICpcbiAqIEBtZXRob2QgZm9ybWF0T3V0cHV0QWRkcmVzc1xuICogQHBhcmFtIHtTb2xpZGl0eVBhcmFtfSByaWdodC1hbGlnbmVkIGlucHV0IGJ5dGVzXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBhZGRyZXNzXG4gKi9cbnZhciBmb3JtYXRPdXRwdXRBZGRyZXNzID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgdmFyIHZhbHVlID0gcGFyYW0uc3RhdGljUGFydCgpO1xuICAgIHJldHVybiBcIjB4XCIgKyB2YWx1ZS5zbGljZSh2YWx1ZS5sZW5ndGggLSA0MCwgdmFsdWUubGVuZ3RoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZvcm1hdElucHV0SW50OiBmb3JtYXRJbnB1dEludCxcbiAgICBmb3JtYXRJbnB1dEJ5dGVzOiBmb3JtYXRJbnB1dEJ5dGVzLFxuICAgIGZvcm1hdElucHV0RHluYW1pY0J5dGVzOiBmb3JtYXRJbnB1dER5bmFtaWNCeXRlcyxcbiAgICBmb3JtYXRJbnB1dFN0cmluZzogZm9ybWF0SW5wdXRTdHJpbmcsXG4gICAgZm9ybWF0SW5wdXRCb29sOiBmb3JtYXRJbnB1dEJvb2wsXG4gICAgZm9ybWF0SW5wdXRSZWFsOiBmb3JtYXRJbnB1dFJlYWwsXG4gICAgZm9ybWF0T3V0cHV0SW50OiBmb3JtYXRPdXRwdXRJbnQsXG4gICAgZm9ybWF0T3V0cHV0VUludDogZm9ybWF0T3V0cHV0VUludCxcbiAgICBmb3JtYXRPdXRwdXRSZWFsOiBmb3JtYXRPdXRwdXRSZWFsLFxuICAgIGZvcm1hdE91dHB1dFVSZWFsOiBmb3JtYXRPdXRwdXRVUmVhbCxcbiAgICBmb3JtYXRPdXRwdXRCb29sOiBmb3JtYXRPdXRwdXRCb29sLFxuICAgIGZvcm1hdE91dHB1dEJ5dGVzOiBmb3JtYXRPdXRwdXRCeXRlcyxcbiAgICBmb3JtYXRPdXRwdXREeW5hbWljQnl0ZXM6IGZvcm1hdE91dHB1dER5bmFtaWNCeXRlcyxcbiAgICBmb3JtYXRPdXRwdXRTdHJpbmc6IGZvcm1hdE91dHB1dFN0cmluZyxcbiAgICBmb3JtYXRPdXRwdXRBZGRyZXNzOiBmb3JtYXRPdXRwdXRBZGRyZXNzXG59O1xuIiwidmFyIGYgPSByZXF1aXJlKCcuL2Zvcm1hdHRlcnMnKTtcbnZhciBTb2xpZGl0eVR5cGUgPSByZXF1aXJlKCcuL3R5cGUnKTtcblxuLyoqXG4gKiBTb2xpZGl0eVR5cGVJbnQgaXMgYSBwcm9vdHlwZSB0aGF0IHJlcHJlc2VudHMgaW50IHR5cGVcbiAqIEl0IG1hdGNoZXM6XG4gKiBpbnRcbiAqIGludFtdXG4gKiBpbnRbNF1cbiAqIGludFtdW11cbiAqIGludFszXVtdXG4gKiBpbnRbXVs2XVtdLCAuLi5cbiAqIGludDMyXG4gKiBpbnQ2NFtdXG4gKiBpbnQ4WzRdXG4gKiBpbnQyNTZbXVtdXG4gKiBpbnRbM11bXVxuICogaW50NjRbXVs2XVtdLCAuLi5cbiAqL1xudmFyIFNvbGlkaXR5VHlwZUludCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9pbnB1dEZvcm1hdHRlciA9IGYuZm9ybWF0SW5wdXRJbnQ7XG4gICAgdGhpcy5fb3V0cHV0Rm9ybWF0dGVyID0gZi5mb3JtYXRPdXRwdXRJbnQ7XG59O1xuXG5Tb2xpZGl0eVR5cGVJbnQucHJvdG90eXBlID0gbmV3IFNvbGlkaXR5VHlwZSh7fSk7XG5Tb2xpZGl0eVR5cGVJbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU29saWRpdHlUeXBlSW50O1xuXG5Tb2xpZGl0eVR5cGVJbnQucHJvdG90eXBlLmlzVHlwZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuICEhbmFtZS5tYXRjaCgvXmludChbMC05XSopPyhcXFsoWzAtOV0qKVxcXSkqJC8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTb2xpZGl0eVR5cGVJbnQ7XG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqIFxuICogQGZpbGUgcGFyYW0uanNcbiAqIEBhdXRob3IgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTtcblxuLyoqXG4gKiBTb2xpZGl0eVBhcmFtIG9iamVjdCBwcm90b3R5cGUuXG4gKiBTaG91bGQgYmUgdXNlZCB3aGVuIGVuY29kaW5nLCBkZWNvZGluZyBzb2xpZGl0eSBieXRlc1xuICovXG52YXIgU29saWRpdHlQYXJhbSA9IGZ1bmN0aW9uICh2YWx1ZSwgb2Zmc2V0KSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlIHx8ICcnO1xuICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0OyAvLyBvZmZzZXQgaW4gYnl0ZXNcbn07XG5cbi8qKlxuICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIHVzZWQgdG8gZ2V0IGxlbmd0aCBvZiBwYXJhbXMncyBkeW5hbWljIHBhcnRcbiAqIFxuICogQG1ldGhvZCBkeW5hbWljUGFydExlbmd0aFxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGR5bmFtaWMgcGFydCAoaW4gYnl0ZXMpXG4gKi9cblNvbGlkaXR5UGFyYW0ucHJvdG90eXBlLmR5bmFtaWNQYXJ0TGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmR5bmFtaWNQYXJ0KCkubGVuZ3RoIC8gMjtcbn07XG5cbi8qKlxuICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIHVzZWQgdG8gY3JlYXRlIGNvcHkgb2Ygc29saWRpdHkgcGFyYW0gd2l0aCBkaWZmZXJlbnQgb2Zmc2V0XG4gKlxuICogQG1ldGhvZCB3aXRoT2Zmc2V0XG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IGxlbmd0aCBpbiBieXRlc1xuICogQHJldHVybnMge1NvbGlkaXR5UGFyYW19IG5ldyBzb2xpZGl0eSBwYXJhbSB3aXRoIGFwcGxpZWQgb2Zmc2V0XG4gKi9cblNvbGlkaXR5UGFyYW0ucHJvdG90eXBlLndpdGhPZmZzZXQgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgcmV0dXJuIG5ldyBTb2xpZGl0eVBhcmFtKHRoaXMudmFsdWUsIG9mZnNldCk7XG59O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSB1c2VkIHRvIGNvbWJpbmUgc29saWRpdHkgcGFyYW1zIHRvZ2V0aGVyXG4gKiBlZy4gd2hlbiBhcHBlbmRpbmcgYW4gYXJyYXlcbiAqXG4gKiBAbWV0aG9kIGNvbWJpbmVcbiAqIEBwYXJhbSB7U29saWRpdHlQYXJhbX0gcGFyYW0gd2l0aCB3aGljaCB3ZSBzaG91bGQgY29tYmluZVxuICogQHBhcmFtIHtTb2xpZGl0eVBhcmFtfSByZXN1bHQgb2YgY29tYmluYXRpb25cbiAqL1xuU29saWRpdHlQYXJhbS5wcm90b3R5cGUuY29tYmluZSA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBuZXcgU29saWRpdHlQYXJhbSh0aGlzLnZhbHVlICsgcGFyYW0udmFsdWUpOyBcbn07XG5cbi8qKlxuICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB0byBjaGVjayBpZiBwYXJhbSBoYXMgZHluYW1pYyBzaXplLlxuICogSWYgaXQgaGFzLCBpdCByZXR1cm5zIHRydWUsIG90aGVyd2lzZSBmYWxzZVxuICpcbiAqIEBtZXRob2QgaXNEeW5hbWljXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuU29saWRpdHlQYXJhbS5wcm90b3R5cGUuaXNEeW5hbWljID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm9mZnNldCAhPT0gdW5kZWZpbmVkO1xufTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHRvIHRyYW5zZm9ybSBvZmZzZXQgdG8gYnl0ZXNcbiAqXG4gKiBAbWV0aG9kIG9mZnNldEFzQnl0ZXNcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGJ5dGVzIHJlcHJlc2VudGF0aW9uIG9mIG9mZnNldFxuICovXG5Tb2xpZGl0eVBhcmFtLnByb3RvdHlwZS5vZmZzZXRBc0J5dGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhdGhpcy5pc0R5bmFtaWMoKSA/ICcnIDogdXRpbHMucGFkTGVmdCh1dGlscy50b1R3b3NDb21wbGVtZW50KHRoaXMub2Zmc2V0KS50b1N0cmluZygxNiksIDY0KTtcbn07XG5cbi8qKlxuICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB0byBnZXQgc3RhdGljIHBhcnQgb2YgcGFyYW1cbiAqXG4gKiBAbWV0aG9kIHN0YXRpY1BhcnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IG9mZnNldCBpZiBpdCBpcyBhIGR5bmFtaWMgcGFyYW0sIG90aGVyd2lzZSB2YWx1ZVxuICovXG5Tb2xpZGl0eVBhcmFtLnByb3RvdHlwZS5zdGF0aWNQYXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5pc0R5bmFtaWMoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTsgXG4gICAgfSBcbiAgICByZXR1cm4gdGhpcy5vZmZzZXRBc0J5dGVzKCk7XG59O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgdG8gZ2V0IGR5bmFtaWMgcGFydCBvZiBwYXJhbVxuICpcbiAqIEBtZXRob2QgZHluYW1pY1BhcnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHJldHVybnMgYSB2YWx1ZSBpZiBpdCBpcyBhIGR5bmFtaWMgcGFyYW0sIG90aGVyd2lzZSBlbXB0eSBzdHJpbmdcbiAqL1xuU29saWRpdHlQYXJhbS5wcm90b3R5cGUuZHluYW1pY1BhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNEeW5hbWljKCkgPyB0aGlzLnZhbHVlIDogJyc7XG59O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgdG8gZW5jb2RlIHBhcmFtXG4gKlxuICogQG1ldGhvZCBlbmNvZGVcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cblNvbGlkaXR5UGFyYW0ucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0aWNQYXJ0KCkgKyB0aGlzLmR5bmFtaWNQYXJ0KCk7XG59O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgdG8gZW5jb2RlIGFycmF5IG9mIHBhcmFtc1xuICpcbiAqIEBtZXRob2QgZW5jb2RlTGlzdFxuICogQHBhcmFtIHtBcnJheVtTb2xpZGl0eVBhcmFtXX0gcGFyYW1zXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5Tb2xpZGl0eVBhcmFtLmVuY29kZUxpc3QgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgXG4gICAgLy8gdXBkYXRpbmcgb2Zmc2V0c1xuICAgIHZhciB0b3RhbE9mZnNldCA9IHBhcmFtcy5sZW5ndGggKiAzMjtcbiAgICB2YXIgb2Zmc2V0UGFyYW1zID0gcGFyYW1zLm1hcChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgaWYgKCFwYXJhbS5pc0R5bmFtaWMoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvZmZzZXQgPSB0b3RhbE9mZnNldDtcbiAgICAgICAgdG90YWxPZmZzZXQgKz0gcGFyYW0uZHluYW1pY1BhcnRMZW5ndGgoKTtcbiAgICAgICAgcmV0dXJuIHBhcmFtLndpdGhPZmZzZXQob2Zmc2V0KTtcbiAgICB9KTtcblxuICAgIC8vIGVuY29kZSBldmVyeXRoaW5nIVxuICAgIHJldHVybiBvZmZzZXRQYXJhbXMucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIHBhcmFtKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBwYXJhbS5keW5hbWljUGFydCgpO1xuICAgIH0sIG9mZnNldFBhcmFtcy5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwgcGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIHBhcmFtLnN0YXRpY1BhcnQoKTtcbiAgICB9LCAnJykpO1xufTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gU29saWRpdHlQYXJhbTtcblxuIiwidmFyIGYgPSByZXF1aXJlKCcuL2Zvcm1hdHRlcnMnKTtcbnZhciBTb2xpZGl0eVR5cGUgPSByZXF1aXJlKCcuL3R5cGUnKTtcblxuLyoqXG4gKiBTb2xpZGl0eVR5cGVSZWFsIGlzIGEgcHJvb3R5cGUgdGhhdCByZXByZXNlbnRzIHJlYWwgdHlwZVxuICogSXQgbWF0Y2hlczpcbiAqIHJlYWxcbiAqIHJlYWxbXVxuICogcmVhbFs0XVxuICogcmVhbFtdW11cbiAqIHJlYWxbM11bXVxuICogcmVhbFtdWzZdW10sIC4uLlxuICogcmVhbDMyXG4gKiByZWFsNjRbXVxuICogcmVhbDhbNF1cbiAqIHJlYWwyNTZbXVtdXG4gKiByZWFsWzNdW11cbiAqIHJlYWw2NFtdWzZdW10sIC4uLlxuICovXG52YXIgU29saWRpdHlUeXBlUmVhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9pbnB1dEZvcm1hdHRlciA9IGYuZm9ybWF0SW5wdXRSZWFsO1xuICAgIHRoaXMuX291dHB1dEZvcm1hdHRlciA9IGYuZm9ybWF0T3V0cHV0UmVhbDtcbn07XG5cblNvbGlkaXR5VHlwZVJlYWwucHJvdG90eXBlID0gbmV3IFNvbGlkaXR5VHlwZSh7fSk7XG5Tb2xpZGl0eVR5cGVSZWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNvbGlkaXR5VHlwZVJlYWw7XG5cblNvbGlkaXR5VHlwZVJlYWwucHJvdG90eXBlLmlzVHlwZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuICEhbmFtZS5tYXRjaCgvcmVhbChbMC05XSopPyhcXFsoWzAtOV0qKVxcXSk/Lyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvbGlkaXR5VHlwZVJlYWw7XG4iLCJ2YXIgZiA9IHJlcXVpcmUoJy4vZm9ybWF0dGVycycpO1xudmFyIFNvbGlkaXR5VHlwZSA9IHJlcXVpcmUoJy4vdHlwZScpO1xuXG52YXIgU29saWRpdHlUeXBlU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2lucHV0Rm9ybWF0dGVyID0gZi5mb3JtYXRJbnB1dFN0cmluZztcbiAgICB0aGlzLl9vdXRwdXRGb3JtYXR0ZXIgPSBmLmZvcm1hdE91dHB1dFN0cmluZztcbn07XG5cblNvbGlkaXR5VHlwZVN0cmluZy5wcm90b3R5cGUgPSBuZXcgU29saWRpdHlUeXBlKHt9KTtcblNvbGlkaXR5VHlwZVN0cmluZy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTb2xpZGl0eVR5cGVTdHJpbmc7XG5cblNvbGlkaXR5VHlwZVN0cmluZy5wcm90b3R5cGUuaXNUeXBlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gISFuYW1lLm1hdGNoKC9ec3RyaW5nKFxcWyhbMC05XSopXFxdKSokLyk7XG59O1xuXG5Tb2xpZGl0eVR5cGVTdHJpbmcucHJvdG90eXBlLmlzRHluYW1pY1R5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvbGlkaXR5VHlwZVN0cmluZztcbiIsInZhciBmID0gcmVxdWlyZSgnLi9mb3JtYXR0ZXJzJyk7XG52YXIgU29saWRpdHlQYXJhbSA9IHJlcXVpcmUoJy4vcGFyYW0nKTtcblxuLyoqXG4gKiBTb2xpZGl0eVR5cGUgcHJvdG90eXBlIGlzIHVzZWQgdG8gZW5jb2RlL2RlY29kZSBzb2xpZGl0eSBwYXJhbXMgb2YgY2VydGFpbiB0eXBlXG4gKi9cbnZhciBTb2xpZGl0eVR5cGUgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgdGhpcy5faW5wdXRGb3JtYXR0ZXIgPSBjb25maWcuaW5wdXRGb3JtYXR0ZXI7XG4gICAgdGhpcy5fb3V0cHV0Rm9ybWF0dGVyID0gY29uZmlnLm91dHB1dEZvcm1hdHRlcjtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIHRoaXMgU29saWRpdHlUeXBlIGRvIG1hdGNoIGdpdmVuIG5hbWVcbiAqXG4gKiBAbWV0aG9kIGlzVHlwZVxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2x9IHRydWUgaWYgdHlwZSBtYXRjaCB0aGlzIFNvbGlkaXR5VHlwZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cblNvbGlkaXR5VHlwZS5wcm90b3R5cGUuaXNUeXBlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBcInRoaXMgbWV0aG9kIHNob3VsZCBiZSBvdmVycndyaXR0ZW4gZm9yIHR5cGUgXCIgKyBuYW1lO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBkZXRlcm1pbmUgd2hhdCBpcyB0aGUgbGVuZ3RoIG9mIHN0YXRpYyBwYXJ0IGluIGdpdmVuIHR5cGVcbiAqXG4gKiBAbWV0aG9kIHN0YXRpY1BhcnRMZW5ndGhcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGxlbmd0aCBvZiBzdGF0aWMgcGFydCBpbiBieXRlc1xuICovXG5Tb2xpZGl0eVR5cGUucHJvdG90eXBlLnN0YXRpY1BhcnRMZW5ndGggPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIC8vIElmIG5hbWUgaXNuJ3QgYW4gYXJyYXkgdGhlbiB0cmVhdCBpdCBsaWtlIGEgc2luZ2xlIGVsZW1lbnQgYXJyYXkuXG4gICAgcmV0dXJuICh0aGlzLm5lc3RlZFR5cGVzKG5hbWUpIHx8IFsnWzFdJ10pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICAgIC8vIHRoZSBsZW5ndGggb2YgdGhlIG5lc3RlZCBhcnJheVxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHR5cGUuc2xpY2UoMSwgLTEpLCAxMCkgfHwgMTtcbiAgICAgICAgfSlcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2aW91cyAqIGN1cnJlbnQ7XG4gICAgICAgIC8vIGFsbCBiYXNpYyB0eXBlcyBhcmUgMzIgYnl0ZXMgbG9uZ1xuICAgICAgICB9LCAzMik7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIGRldGVybWluZSBpZiB0eXBlIGlzIGR5bmFtaWMgYXJyYXlcbiAqIGVnOlxuICogXCJ0eXBlW11cIiA9PiB0cnVlXG4gKiBcInR5cGVbNF1cIiA9PiBmYWxzZVxuICpcbiAqIEBtZXRob2QgaXNEeW5hbWljQXJyYXlcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sfSB0cnVlIGlmIHRoZSB0eXBlIGlzIGR5bmFtaWMgYXJyYXlcbiAqL1xuU29saWRpdHlUeXBlLnByb3RvdHlwZS5pc0R5bmFtaWNBcnJheSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIG5lc3RlZFR5cGVzID0gdGhpcy5uZXN0ZWRUeXBlcyhuYW1lKTtcbiAgICByZXR1cm4gISFuZXN0ZWRUeXBlcyAmJiAhbmVzdGVkVHlwZXNbbmVzdGVkVHlwZXMubGVuZ3RoIC0gMV0ubWF0Y2goL1swLTldezEsfS9nKTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIHR5cGUgaXMgc3RhdGljIGFycmF5XG4gKiBlZzpcbiAqIFwidHlwZVtdXCIgPT4gZmFsc2VcbiAqIFwidHlwZVs0XVwiID0+IHRydWVcbiAqXG4gKiBAbWV0aG9kIGlzU3RhdGljQXJyYXlcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sfSB0cnVlIGlmIHRoZSB0eXBlIGlzIHN0YXRpYyBhcnJheVxuICovXG5Tb2xpZGl0eVR5cGUucHJvdG90eXBlLmlzU3RhdGljQXJyYXkgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBuZXN0ZWRUeXBlcyA9IHRoaXMubmVzdGVkVHlwZXMobmFtZSk7XG4gICAgcmV0dXJuICEhbmVzdGVkVHlwZXMgJiYgISFuZXN0ZWRUeXBlc1tuZXN0ZWRUeXBlcy5sZW5ndGggLSAxXS5tYXRjaCgvWzAtOV17MSx9L2cpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgcmV0dXJuIGxlbmd0aCBvZiBzdGF0aWMgYXJyYXlcbiAqIGVnLlxuICogXCJpbnRbMzJdXCIgPT4gMzJcbiAqIFwiaW50MjU2WzE0XVwiID0+IDE0XG4gKiBcImludFsyXVszXVwiID0+IDNcbiAqIFwiaW50XCIgPT4gMVxuICogXCJpbnRbMV1cIiA9PiAxXG4gKiBcImludFtdXCIgPT4gMVxuICpcbiAqIEBtZXRob2Qgc3RhdGljQXJyYXlMZW5ndGhcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHN0YXRpYyBhcnJheSBsZW5ndGhcbiAqL1xuU29saWRpdHlUeXBlLnByb3RvdHlwZS5zdGF0aWNBcnJheUxlbmd0aCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIG5lc3RlZFR5cGVzID0gdGhpcy5uZXN0ZWRUeXBlcyhuYW1lKTtcbiAgICBpZiAobmVzdGVkVHlwZXMpIHtcbiAgICAgICByZXR1cm4gcGFyc2VJbnQobmVzdGVkVHlwZXNbbmVzdGVkVHlwZXMubGVuZ3RoIC0gMV0ubWF0Y2goL1swLTldezEsfS9nKSB8fCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIDE7XG59O1xuXG4vKipcbiAqIFNob3VsZCByZXR1cm4gbmVzdGVkIHR5cGVcbiAqIGVnLlxuICogXCJpbnRbMzJdXCIgPT4gXCJpbnRcIlxuICogXCJpbnQyNTZbMTRdXCIgPT4gXCJpbnQyNTZcIlxuICogXCJpbnRbMl1bM11cIiA9PiBcImludFsyXVwiXG4gKiBcImludFwiID0+IFwiaW50XCJcbiAqIFwiaW50W11cIiA9PiBcImludFwiXG4gKlxuICogQG1ldGhvZCBuZXN0ZWROYW1lXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7U3RyaW5nfSBuZXN0ZWQgbmFtZVxuICovXG5Tb2xpZGl0eVR5cGUucHJvdG90eXBlLm5lc3RlZE5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIC8vIHJlbW92ZSBsYXN0IFtdIGluIG5hbWVcbiAgICB2YXIgbmVzdGVkVHlwZXMgPSB0aGlzLm5lc3RlZFR5cGVzKG5hbWUpO1xuICAgIGlmICghbmVzdGVkVHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWUuc3Vic3RyKDAsIG5hbWUubGVuZ3RoIC0gbmVzdGVkVHlwZXNbbmVzdGVkVHlwZXMubGVuZ3RoIC0gMV0ubGVuZ3RoKTtcbn07XG5cbi8qKlxuICogU2hvdWxkIHJldHVybiB0cnVlIGlmIHR5cGUgaGFzIGR5bmFtaWMgc2l6ZSBieSBkZWZhdWx0XG4gKiBzdWNoIHR5cGVzIGFyZSBcInN0cmluZ1wiLCBcImJ5dGVzXCJcbiAqXG4gKiBAbWV0aG9kIGlzRHluYW1pY1R5cGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sfSB0cnVlIGlmIGlzIGR5bmFtaWMsIG90aGVyd2lzZSBmYWxzZVxuICovXG5Tb2xpZGl0eVR5cGUucHJvdG90eXBlLmlzRHluYW1pY1R5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBTaG91bGQgcmV0dXJuIGFycmF5IG9mIG5lc3RlZCB0eXBlc1xuICogZWcuXG4gKiBcImludFsyXVszXVtdXCIgPT4gW1wiWzJdXCIsIFwiWzNdXCIsIFwiW11cIl1cbiAqIFwiaW50W10gPT4gW1wiW11cIl1cbiAqIFwiaW50XCIgPT4gbnVsbFxuICpcbiAqIEBtZXRob2QgbmVzdGVkVHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtBcnJheX0gYXJyYXkgb2YgbmVzdGVkIHR5cGVzXG4gKi9cblNvbGlkaXR5VHlwZS5wcm90b3R5cGUubmVzdGVkVHlwZXMgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIC8vIHJldHVybiBsaXN0IG9mIHN0cmluZ3MgZWcuIFwiW11cIiwgXCJbM11cIiwgXCJbXVwiLCBcIlsyXVwiXG4gICAgcmV0dXJuIG5hbWUubWF0Y2goLyhcXFtbMC05XSpcXF0pL2cpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBlbmNvZGUgdGhlIHZhbHVlXG4gKlxuICogQG1ldGhvZCBlbmNvZGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZVxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge1N0cmluZ30gZW5jb2RlZCB2YWx1ZVxuICovXG5Tb2xpZGl0eVR5cGUucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uICh2YWx1ZSwgbmFtZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodGhpcy5pc0R5bmFtaWNBcnJheShuYW1lKSkge1xuXG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluIGludFxuICAgICAgICAgICAgdmFyIG5lc3RlZE5hbWUgPSBzZWxmLm5lc3RlZE5hbWUobmFtZSk7XG5cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGYuZm9ybWF0SW5wdXRJbnQobGVuZ3RoKS5lbmNvZGUoKSk7XG5cbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzZWxmLmVuY29kZSh2LCBuZXN0ZWROYW1lKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSkoKTtcblxuICAgIH0gZWxzZSBpZiAodGhpcy5pc1N0YXRpY0FycmF5KG5hbWUpKSB7XG5cbiAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gc2VsZi5zdGF0aWNBcnJheUxlbmd0aChuYW1lKTsgICAgICAgICAgLy8gaW4gaW50XG4gICAgICAgICAgICB2YXIgbmVzdGVkTmFtZSA9IHNlbGYubmVzdGVkTmFtZShuYW1lKTtcblxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHNlbGYuZW5jb2RlKHZhbHVlW2ldLCBuZXN0ZWROYW1lKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pKCk7XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5faW5wdXRGb3JtYXR0ZXIodmFsdWUsIG5hbWUpLmVuY29kZSgpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBkZWNvZGUgdmFsdWUgZnJvbSBieXRlc1xuICpcbiAqIEBtZXRob2QgZGVjb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gYnl0ZXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgaW4gYnl0ZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIHR5cGUgbmFtZVxuICogQHJldHVybnMge09iamVjdH0gZGVjb2RlZCB2YWx1ZVxuICovXG5Tb2xpZGl0eVR5cGUucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChieXRlcywgb2Zmc2V0LCBuYW1lKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuaXNEeW5hbWljQXJyYXkobmFtZSkpIHtcblxuICAgICAgICByZXR1cm4gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcnJheU9mZnNldCA9IHBhcnNlSW50KCcweCcgKyBieXRlcy5zdWJzdHIob2Zmc2V0ICogMiwgNjQpKTsgLy8gaW4gYnl0ZXNcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBwYXJzZUludCgnMHgnICsgYnl0ZXMuc3Vic3RyKGFycmF5T2Zmc2V0ICogMiwgNjQpKTsgLy8gaW4gaW50XG4gICAgICAgICAgICB2YXIgYXJyYXlTdGFydCA9IGFycmF5T2Zmc2V0ICsgMzI7IC8vIGFycmF5IHN0YXJ0cyBhZnRlciBsZW5ndGg7IC8vIGluIGJ5dGVzXG5cbiAgICAgICAgICAgIHZhciBuZXN0ZWROYW1lID0gc2VsZi5uZXN0ZWROYW1lKG5hbWUpO1xuICAgICAgICAgICAgdmFyIG5lc3RlZFN0YXRpY1BhcnRMZW5ndGggPSBzZWxmLnN0YXRpY1BhcnRMZW5ndGgobmVzdGVkTmFtZSk7ICAvLyBpbiBieXRlc1xuICAgICAgICAgICAgdmFyIHJvdW5kZWROZXN0ZWRTdGF0aWNQYXJ0TGVuZ3RoID0gTWF0aC5mbG9vcigobmVzdGVkU3RhdGljUGFydExlbmd0aCArIDMxKSAvIDMyKSAqIDMyO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aCAqIHJvdW5kZWROZXN0ZWRTdGF0aWNQYXJ0TGVuZ3RoOyBpICs9IHJvdW5kZWROZXN0ZWRTdGF0aWNQYXJ0TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goc2VsZi5kZWNvZGUoYnl0ZXMsIGFycmF5U3RhcnQgKyBpLCBuZXN0ZWROYW1lKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pKCk7XG5cbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNTdGF0aWNBcnJheShuYW1lKSkge1xuXG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHNlbGYuc3RhdGljQXJyYXlMZW5ndGgobmFtZSk7ICAgICAgICAgICAgICAgICAgICAgIC8vIGluIGludFxuICAgICAgICAgICAgdmFyIGFycmF5U3RhcnQgPSBvZmZzZXQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluIGJ5dGVzXG5cbiAgICAgICAgICAgIHZhciBuZXN0ZWROYW1lID0gc2VsZi5uZXN0ZWROYW1lKG5hbWUpO1xuICAgICAgICAgICAgdmFyIG5lc3RlZFN0YXRpY1BhcnRMZW5ndGggPSBzZWxmLnN0YXRpY1BhcnRMZW5ndGgobmVzdGVkTmFtZSk7IC8vIGluIGJ5dGVzXG4gICAgICAgICAgICB2YXIgcm91bmRlZE5lc3RlZFN0YXRpY1BhcnRMZW5ndGggPSBNYXRoLmZsb29yKChuZXN0ZWRTdGF0aWNQYXJ0TGVuZ3RoICsgMzEpIC8gMzIpICogMzI7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoICogcm91bmRlZE5lc3RlZFN0YXRpY1BhcnRMZW5ndGg7IGkgKz0gcm91bmRlZE5lc3RlZFN0YXRpY1BhcnRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzZWxmLmRlY29kZShieXRlcywgYXJyYXlTdGFydCArIGksIG5lc3RlZE5hbWUpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSkoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNEeW5hbWljVHlwZShuYW1lKSkge1xuXG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGR5bmFtaWNPZmZzZXQgPSBwYXJzZUludCgnMHgnICsgYnl0ZXMuc3Vic3RyKG9mZnNldCAqIDIsIDY0KSk7ICAgICAgLy8gaW4gYnl0ZXNcbiAgICAgICAgICAgIHZhciBsZW5ndGggPSBwYXJzZUludCgnMHgnICsgYnl0ZXMuc3Vic3RyKGR5bmFtaWNPZmZzZXQgKiAyLCA2NCkpOyAgICAgIC8vIGluIGJ5dGVzXG4gICAgICAgICAgICB2YXIgcm91bmRlZExlbmd0aCA9IE1hdGguZmxvb3IoKGxlbmd0aCArIDMxKSAvIDMyKTsgICAgICAgICAgICAgICAgICAgICAvLyBpbiBpbnRcbiAgICAgICAgICAgIHZhciBwYXJhbSA9IG5ldyBTb2xpZGl0eVBhcmFtKGJ5dGVzLnN1YnN0cihkeW5hbWljT2Zmc2V0ICogMiwgKCAxICsgcm91bmRlZExlbmd0aCkgKiA2NCksIDApO1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuX291dHB1dEZvcm1hdHRlcihwYXJhbSwgbmFtZSk7XG4gICAgICAgIH0pKCk7XG4gICAgfVxuXG4gICAgdmFyIGxlbmd0aCA9IHRoaXMuc3RhdGljUGFydExlbmd0aChuYW1lKTtcbiAgICB2YXIgcGFyYW0gPSBuZXcgU29saWRpdHlQYXJhbShieXRlcy5zdWJzdHIob2Zmc2V0ICogMiwgbGVuZ3RoICogMikpO1xuICAgIHJldHVybiB0aGlzLl9vdXRwdXRGb3JtYXR0ZXIocGFyYW0sIG5hbWUpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTb2xpZGl0eVR5cGU7XG4iLCJ2YXIgZiA9IHJlcXVpcmUoJy4vZm9ybWF0dGVycycpO1xudmFyIFNvbGlkaXR5VHlwZSA9IHJlcXVpcmUoJy4vdHlwZScpO1xuXG4vKipcbiAqIFNvbGlkaXR5VHlwZVVJbnQgaXMgYSBwcm9vdHlwZSB0aGF0IHJlcHJlc2VudHMgdWludCB0eXBlXG4gKiBJdCBtYXRjaGVzOlxuICogdWludFxuICogdWludFtdXG4gKiB1aW50WzRdXG4gKiB1aW50W11bXVxuICogdWludFszXVtdXG4gKiB1aW50W11bNl1bXSwgLi4uXG4gKiB1aW50MzJcbiAqIHVpbnQ2NFtdXG4gKiB1aW50OFs0XVxuICogdWludDI1NltdW11cbiAqIHVpbnRbM11bXVxuICogdWludDY0W11bNl1bXSwgLi4uXG4gKi9cbnZhciBTb2xpZGl0eVR5cGVVSW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2lucHV0Rm9ybWF0dGVyID0gZi5mb3JtYXRJbnB1dEludDtcbiAgICB0aGlzLl9vdXRwdXRGb3JtYXR0ZXIgPSBmLmZvcm1hdE91dHB1dFVJbnQ7XG59O1xuXG5Tb2xpZGl0eVR5cGVVSW50LnByb3RvdHlwZSA9IG5ldyBTb2xpZGl0eVR5cGUoe30pO1xuU29saWRpdHlUeXBlVUludC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTb2xpZGl0eVR5cGVVSW50O1xuXG5Tb2xpZGl0eVR5cGVVSW50LnByb3RvdHlwZS5pc1R5cGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiAhIW5hbWUubWF0Y2goL151aW50KFswLTldKik/KFxcWyhbMC05XSopXFxdKSokLyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvbGlkaXR5VHlwZVVJbnQ7XG4iLCJ2YXIgZiA9IHJlcXVpcmUoJy4vZm9ybWF0dGVycycpO1xudmFyIFNvbGlkaXR5VHlwZSA9IHJlcXVpcmUoJy4vdHlwZScpO1xuXG4vKipcbiAqIFNvbGlkaXR5VHlwZVVSZWFsIGlzIGEgcHJvb3R5cGUgdGhhdCByZXByZXNlbnRzIHVyZWFsIHR5cGVcbiAqIEl0IG1hdGNoZXM6XG4gKiB1cmVhbFxuICogdXJlYWxbXVxuICogdXJlYWxbNF1cbiAqIHVyZWFsW11bXVxuICogdXJlYWxbM11bXVxuICogdXJlYWxbXVs2XVtdLCAuLi5cbiAqIHVyZWFsMzJcbiAqIHVyZWFsNjRbXVxuICogdXJlYWw4WzRdXG4gKiB1cmVhbDI1NltdW11cbiAqIHVyZWFsWzNdW11cbiAqIHVyZWFsNjRbXVs2XVtdLCAuLi5cbiAqL1xudmFyIFNvbGlkaXR5VHlwZVVSZWFsID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2lucHV0Rm9ybWF0dGVyID0gZi5mb3JtYXRJbnB1dFJlYWw7XG4gICAgdGhpcy5fb3V0cHV0Rm9ybWF0dGVyID0gZi5mb3JtYXRPdXRwdXRVUmVhbDtcbn07XG5cblNvbGlkaXR5VHlwZVVSZWFsLnByb3RvdHlwZSA9IG5ldyBTb2xpZGl0eVR5cGUoe30pO1xuU29saWRpdHlUeXBlVVJlYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU29saWRpdHlUeXBlVVJlYWw7XG5cblNvbGlkaXR5VHlwZVVSZWFsLnByb3RvdHlwZS5pc1R5cGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiAhIW5hbWUubWF0Y2goL151cmVhbChbMC05XSopPyhcXFsoWzAtOV0qKVxcXSkqJC8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTb2xpZGl0eVR5cGVVUmVhbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gZ28gZW52IGRvZXNuJ3QgaGF2ZSBhbmQgbmVlZCBYTUxIdHRwUmVxdWVzdFxuaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBleHBvcnRzLlhNTEh0dHBSZXF1ZXN0ID0ge307XG59IGVsc2Uge1xuICAgIGV4cG9ydHMuWE1MSHR0cFJlcXVlc3QgPSBYTUxIdHRwUmVxdWVzdDsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG59XG5cbiIsIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKiogQGZpbGUgY29uZmlnLmpzXG4gKiBAYXV0aG9yczpcbiAqICAgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblxuLyoqXG4gKiBVdGlsc1xuICogXG4gKiBAbW9kdWxlIHV0aWxzXG4gKi9cblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uc1xuICogXG4gKiBAY2xhc3MgW3V0aWxzXSBjb25maWdcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5cblxuLy8vIHJlcXVpcmVkIHRvIGRlZmluZSBFVEhfQklHTlVNQkVSX1JPVU5ESU5HX01PREVcbnZhciBCaWdOdW1iZXIgPSByZXF1aXJlKCdiaWdudW1iZXIuanMnKTtcblxudmFyIEVUSF9VTklUUyA9IFtcbiAgICAnd2VpJyxcbiAgICAna3dlaScsXG4gICAgJ013ZWknLFxuICAgICdHd2VpJyxcbiAgICAnc3phYm8nLFxuICAgICdmaW5uZXknLFxuICAgICdmZW10b2V0aGVyJyxcbiAgICAncGljb2V0aGVyJyxcbiAgICAnbmFub2V0aGVyJyxcbiAgICAnbWljcm9ldGhlcicsXG4gICAgJ21pbGxpZXRoZXInLFxuICAgICduYW5vJyxcbiAgICAnbWljcm8nLFxuICAgICdtaWxsaScsXG4gICAgJ2V0aGVyJyxcbiAgICAnZ3JhbmQnLFxuICAgICdNZXRoZXInLFxuICAgICdHZXRoZXInLFxuICAgICdUZXRoZXInLFxuICAgICdQZXRoZXInLFxuICAgICdFZXRoZXInLFxuICAgICdaZXRoZXInLFxuICAgICdZZXRoZXInLFxuICAgICdOZXRoZXInLFxuICAgICdEZXRoZXInLFxuICAgICdWZXRoZXInLFxuICAgICdVZXRoZXInXG5dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBFVEhfUEFERElORzogMzIsXG4gICAgRVRIX1NJR05BVFVSRV9MRU5HVEg6IDQsXG4gICAgRVRIX1VOSVRTOiBFVEhfVU5JVFMsXG4gICAgRVRIX0JJR05VTUJFUl9ST1VORElOR19NT0RFOiB7IFJPVU5ESU5HX01PREU6IEJpZ051bWJlci5ST1VORF9ET1dOIH0sXG4gICAgRVRIX1BPTExJTkdfVElNRU9VVDogMTAwMC8yLFxuICAgIGRlZmF1bHRCbG9jazogJ2xhdGVzdCcsXG4gICAgZGVmYXVsdEFjY291bnQ6IHVuZGVmaW5lZFxufTtcblxuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKiBcbiAqIEBmaWxlIHNoYTMuanNcbiAqIEBhdXRob3IgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblxudmFyIENyeXB0b0pTID0gcmVxdWlyZSgnY3J5cHRvLWpzJyk7XG52YXIgc2hhMyA9IHJlcXVpcmUoJ2NyeXB0by1qcy9zaGEzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGluZyA9PT0gJ2hleCcpIHtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDIgJiYgdmFsdWUuc3Vic3RyKDAsIDIpID09PSAnMHgnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cigyKTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IENyeXB0b0pTLmVuYy5IZXgucGFyc2UodmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBzaGEzKHZhbHVlLCB7XG4gICAgICAgIG91dHB1dExlbmd0aDogMjU2XG4gICAgfSkudG9TdHJpbmcoKTtcbn07XG5cbiIsIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKipcbiAqIEBmaWxlIHV0aWxzLmpzXG4gKiBAYXV0aG9yIE1hcmVrIEtvdGV3aWN6IDxtYXJla0BldGhkZXYuY29tPlxuICogQGRhdGUgMjAxNVxuICovXG5cbi8qKlxuICogVXRpbHNcbiAqXG4gKiBAbW9kdWxlIHV0aWxzXG4gKi9cblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uc1xuICpcbiAqIEBjbGFzcyBbdXRpbHNdIHV0aWxzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuXG5cbnZhciBCaWdOdW1iZXIgPSByZXF1aXJlKCdiaWdudW1iZXIuanMnKTtcbnZhciBzaGEzID0gcmVxdWlyZSgnLi9zaGEzLmpzJyk7XG52YXIgdXRmOCA9IHJlcXVpcmUoJ3V0ZjgnKTtcblxudmFyIHVuaXRNYXAgPSB7XG4gICAgJ25vZXRoZXInOiAgICAgICcwJyxcbiAgICAnd2VpJzogICAgICAgICAgJzEnLFxuICAgICdrd2VpJzogICAgICAgICAnMTAwMCcsXG4gICAgJ0t3ZWknOiAgICAgICAgICcxMDAwJyxcbiAgICAnYmFiYmFnZSc6ICAgICAgJzEwMDAnLFxuICAgICdmZW10b2V0aGVyJzogICAnMTAwMCcsXG4gICAgJ213ZWknOiAgICAgICAgICcxMDAwMDAwJyxcbiAgICAnTXdlaSc6ICAgICAgICAgJzEwMDAwMDAnLFxuICAgICdsb3ZlbGFjZSc6ICAgICAnMTAwMDAwMCcsXG4gICAgJ3BpY29ldGhlcic6ICAgICcxMDAwMDAwJyxcbiAgICAnZ3dlaSc6ICAgICAgICAgJzEwMDAwMDAwMDAnLFxuICAgICdHd2VpJzogICAgICAgICAnMTAwMDAwMDAwMCcsXG4gICAgJ3NoYW5ub24nOiAgICAgICcxMDAwMDAwMDAwJyxcbiAgICAnbmFub2V0aGVyJzogICAgJzEwMDAwMDAwMDAnLFxuICAgICduYW5vJzogICAgICAgICAnMTAwMDAwMDAwMCcsXG4gICAgJ3N6YWJvJzogICAgICAgICcxMDAwMDAwMDAwMDAwJyxcbiAgICAnbWljcm9ldGhlcic6ICAgJzEwMDAwMDAwMDAwMDAnLFxuICAgICdtaWNybyc6ICAgICAgICAnMTAwMDAwMDAwMDAwMCcsXG4gICAgJ2Zpbm5leSc6ICAgICAgICcxMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnbWlsbGlldGhlcic6ICAgICcxMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnbWlsbGknOiAgICAgICAgICcxMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnZXRoZXInOiAgICAgICAgJzEwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICdrZXRoZXInOiAgICAgICAnMTAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJ2dyYW5kJzogICAgICAgICcxMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnbWV0aGVyJzogICAgICAgJzEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICdnZXRoZXInOiAgICAgICAnMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJ3RldGhlcic6ICAgICAgICcxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJ1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIHBhZCBzdHJpbmcgdG8gZXhwZWN0ZWQgbGVuZ3RoXG4gKlxuICogQG1ldGhvZCBwYWRMZWZ0XG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIHRvIGJlIHBhZGRlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGNoYXJhY3RlcnMgdGhhdCByZXN1bHQgc3RyaW5nIHNob3VsZCBoYXZlXG4gKiBAcGFyYW0ge1N0cmluZ30gc2lnbiwgYnkgZGVmYXVsdCAwXG4gKiBAcmV0dXJucyB7U3RyaW5nfSByaWdodCBhbGlnbmVkIHN0cmluZ1xuICovXG52YXIgcGFkTGVmdCA9IGZ1bmN0aW9uIChzdHJpbmcsIGNoYXJzLCBzaWduKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheShjaGFycyAtIHN0cmluZy5sZW5ndGggKyAxKS5qb2luKHNpZ24gPyBzaWduIDogXCIwXCIpICsgc3RyaW5nO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIHBhZCBzdHJpbmcgdG8gZXhwZWN0ZWQgbGVuZ3RoXG4gKlxuICogQG1ldGhvZCBwYWRSaWdodFxuICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyB0byBiZSBwYWRkZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBjaGFyYWN0ZXJzIHRoYXQgcmVzdWx0IHN0cmluZyBzaG91bGQgaGF2ZVxuICogQHBhcmFtIHtTdHJpbmd9IHNpZ24sIGJ5IGRlZmF1bHQgMFxuICogQHJldHVybnMge1N0cmluZ30gcmlnaHQgYWxpZ25lZCBzdHJpbmdcbiAqL1xudmFyIHBhZFJpZ2h0ID0gZnVuY3Rpb24gKHN0cmluZywgY2hhcnMsIHNpZ24pIHtcbiAgICByZXR1cm4gc3RyaW5nICsgKG5ldyBBcnJheShjaGFycyAtIHN0cmluZy5sZW5ndGggKyAxKS5qb2luKHNpZ24gPyBzaWduIDogXCIwXCIpKTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBnZXQgdXRmOCBmcm9tIGl0J3MgaGV4IHJlcHJlc2VudGF0aW9uXG4gKlxuICogQG1ldGhvZCB0b1V0ZjhcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgaW4gaGV4XG4gKiBAcmV0dXJucyB7U3RyaW5nfSBhc2NpaSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgaGV4IHZhbHVlXG4gKi9cbnZhciB0b1V0ZjggPSBmdW5jdGlvbihoZXgpIHtcbi8vIEZpbmQgdGVybWluYXRpb25cbiAgICB2YXIgc3RyID0gXCJcIjtcbiAgICB2YXIgaSA9IDAsIGwgPSBoZXgubGVuZ3RoO1xuICAgIGlmIChoZXguc3Vic3RyaW5nKDAsIDIpID09PSAnMHgnKSB7XG4gICAgICAgIGkgPSAyO1xuICAgIH1cbiAgICBmb3IgKDsgaSA8IGw7IGkrPTIpIHtcbiAgICAgICAgdmFyIGNvZGUgPSBwYXJzZUludChoZXguc3Vic3RyKGksIDIpLCAxNik7XG4gICAgICAgIGlmIChjb2RlID09PSAwKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgIH1cblxuICAgIHJldHVybiB1dGY4LmRlY29kZShzdHIpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGdldCBhc2NpaSBmcm9tIGl0J3MgaGV4IHJlcHJlc2VudGF0aW9uXG4gKlxuICogQG1ldGhvZCB0b0FzY2lpXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIGluIGhleFxuICogQHJldHVybnMge1N0cmluZ30gYXNjaWkgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGhleCB2YWx1ZVxuICovXG52YXIgdG9Bc2NpaSA9IGZ1bmN0aW9uKGhleCkge1xuLy8gRmluZCB0ZXJtaW5hdGlvblxuICAgIHZhciBzdHIgPSBcIlwiO1xuICAgIHZhciBpID0gMCwgbCA9IGhleC5sZW5ndGg7XG4gICAgaWYgKGhleC5zdWJzdHJpbmcoMCwgMikgPT09ICcweCcpIHtcbiAgICAgICAgaSA9IDI7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgbDsgaSs9Mikge1xuICAgICAgICB2YXIgY29kZSA9IHBhcnNlSW50KGhleC5zdWJzdHIoaSwgMiksIDE2KTtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBnZXQgaGV4IHJlcHJlc2VudGF0aW9uIChwcmVmaXhlZCBieSAweCkgb2YgdXRmOCBzdHJpbmdcbiAqXG4gKiBAbWV0aG9kIGZyb21VdGY4XG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gb3B0aW9uYWwgcGFkZGluZ1xuICogQHJldHVybnMge1N0cmluZ30gaGV4IHJlcHJlc2VudGF0aW9uIG9mIGlucHV0IHN0cmluZ1xuICovXG52YXIgZnJvbVV0ZjggPSBmdW5jdGlvbihzdHIpIHtcbiAgICBzdHIgPSB1dGY4LmVuY29kZShzdHIpO1xuICAgIHZhciBoZXggPSBcIlwiO1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGNvZGUgPT09IDApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgdmFyIG4gPSBjb2RlLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgaGV4ICs9IG4ubGVuZ3RoIDwgMiA/ICcwJyArIG4gOiBuO1xuICAgIH1cblxuICAgIHJldHVybiBcIjB4XCIgKyBoZXg7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZ2V0IGhleCByZXByZXNlbnRhdGlvbiAocHJlZml4ZWQgYnkgMHgpIG9mIGFzY2lpIHN0cmluZ1xuICpcbiAqIEBtZXRob2QgZnJvbUFzY2lpXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gb3B0aW9uYWwgcGFkZGluZ1xuICogQHJldHVybnMge1N0cmluZ30gaGV4IHJlcHJlc2VudGF0aW9uIG9mIGlucHV0IHN0cmluZ1xuICovXG52YXIgZnJvbUFzY2lpID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgdmFyIGhleCA9IFwiXCI7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB2YXIgbiA9IGNvZGUudG9TdHJpbmcoMTYpO1xuICAgICAgICBoZXggKz0gbi5sZW5ndGggPCAyID8gJzAnICsgbiA6IG47XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiMHhcIiArIGhleDtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gY3JlYXRlIGZ1bGwgZnVuY3Rpb24vZXZlbnQgbmFtZSBmcm9tIGpzb24gYWJpXG4gKlxuICogQG1ldGhvZCB0cmFuc2Zvcm1Ub0Z1bGxOYW1lXG4gKiBAcGFyYW0ge09iamVjdH0ganNvbi1hYmlcbiAqIEByZXR1cm4ge1N0cmluZ30gZnVsbCBmbmN0aW9uL2V2ZW50IG5hbWVcbiAqL1xudmFyIHRyYW5zZm9ybVRvRnVsbE5hbWUgPSBmdW5jdGlvbiAoanNvbikge1xuICAgIGlmIChqc29uLm5hbWUuaW5kZXhPZignKCcpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4ganNvbi5uYW1lO1xuICAgIH1cblxuICAgIHZhciB0eXBlTmFtZSA9IGpzb24uaW5wdXRzLm1hcChmdW5jdGlvbihpKXtyZXR1cm4gaS50eXBlOyB9KS5qb2luKCk7XG4gICAgcmV0dXJuIGpzb24ubmFtZSArICcoJyArIHR5cGVOYW1lICsgJyknO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGdldCBkaXNwbGF5IG5hbWUgb2YgY29udHJhY3QgZnVuY3Rpb25cbiAqXG4gKiBAbWV0aG9kIGV4dHJhY3REaXNwbGF5TmFtZVxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgZnVuY3Rpb24vZXZlbnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGRpc3BsYXkgbmFtZSBmb3IgZnVuY3Rpb24vZXZlbnQgZWcuIG11bHRpcGx5KHVpbnQyNTYpIC0+IG11bHRpcGx5XG4gKi9cbnZhciBleHRyYWN0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBsZW5ndGggPSBuYW1lLmluZGV4T2YoJygnKTtcbiAgICByZXR1cm4gbGVuZ3RoICE9PSAtMSA/IG5hbWUuc3Vic3RyKDAsIGxlbmd0aCkgOiBuYW1lO1xufTtcblxuLy8vIEByZXR1cm5zIG92ZXJsb2FkZWQgcGFydCBvZiBmdW5jdGlvbi9ldmVudCBuYW1lXG52YXIgZXh0cmFjdFR5cGVOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAvLy8gVE9ETzogbWFrZSBpdCBpbnZ1bG5lcmFibGVcbiAgICB2YXIgbGVuZ3RoID0gbmFtZS5pbmRleE9mKCcoJyk7XG4gICAgcmV0dXJuIGxlbmd0aCAhPT0gLTEgPyBuYW1lLnN1YnN0cihsZW5ndGggKyAxLCBuYW1lLmxlbmd0aCAtIDEgLSAobGVuZ3RoICsgMSkpLnJlcGxhY2UoJyAnLCAnJykgOiBcIlwiO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyB2YWx1ZSB0byBpdCdzIGRlY2ltYWwgcmVwcmVzZW50YXRpb24gaW4gc3RyaW5nXG4gKlxuICogQG1ldGhvZCB0b0RlY2ltYWxcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcnxCaWdOdW1iZXJ9XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbnZhciB0b0RlY2ltYWwgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdG9CaWdOdW1iZXIodmFsdWUpLnRvTnVtYmVyKCk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHZhbHVlIHRvIGl0J3MgaGV4IHJlcHJlc2VudGF0aW9uXG4gKlxuICogQG1ldGhvZCBmcm9tRGVjaW1hbFxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfEJpZ051bWJlcn1cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xudmFyIGZyb21EZWNpbWFsID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIG51bWJlciA9IHRvQmlnTnVtYmVyKHZhbHVlKTtcbiAgICB2YXIgcmVzdWx0ID0gbnVtYmVyLnRvU3RyaW5nKDE2KTtcblxuICAgIHJldHVybiBudW1iZXIubGVzc1RoYW4oMCkgPyAnLTB4JyArIHJlc3VsdC5zdWJzdHIoMSkgOiAnMHgnICsgcmVzdWx0O1xufTtcblxuLyoqXG4gKiBBdXRvIGNvbnZlcnRzIGFueSBnaXZlbiB2YWx1ZSBpbnRvIGl0J3MgaGV4IHJlcHJlc2VudGF0aW9uLlxuICpcbiAqIEFuZCBldmVuIHN0cmluZ2lmeXMgb2JqZWN0cyBiZWZvcmUuXG4gKlxuICogQG1ldGhvZCB0b0hleFxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfEJpZ051bWJlcnxPYmplY3R9XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbnZhciB0b0hleCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAvKmpzaGludCBtYXhjb21wbGV4aXR5OiA4ICovXG5cbiAgICBpZiAoaXNCb29sZWFuKHZhbCkpXG4gICAgICAgIHJldHVybiBmcm9tRGVjaW1hbCgrdmFsKTtcblxuICAgIGlmIChpc0JpZ051bWJlcih2YWwpKVxuICAgICAgICByZXR1cm4gZnJvbURlY2ltYWwodmFsKTtcblxuICAgIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIGZyb21VdGY4KEpTT04uc3RyaW5naWZ5KHZhbCkpO1xuXG4gICAgLy8gaWYgaXRzIGEgbmVnYXRpdmUgbnVtYmVyLCBwYXNzIGl0IHRocm91Z2ggZnJvbURlY2ltYWxcbiAgICBpZiAoaXNTdHJpbmcodmFsKSkge1xuICAgICAgICBpZiAodmFsLmluZGV4T2YoJy0weCcpID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGZyb21EZWNpbWFsKHZhbCk7XG4gICAgICAgIGVsc2UgaWYodmFsLmluZGV4T2YoJzB4JykgPT09IDApXG4gICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICBlbHNlIGlmICghaXNGaW5pdGUodmFsKSlcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXNjaWkodmFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnJvbURlY2ltYWwodmFsKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB2YWx1ZSBvZiB1bml0IGluIFdlaVxuICpcbiAqIEBtZXRob2QgZ2V0VmFsdWVPZlVuaXRcbiAqIEBwYXJhbSB7U3RyaW5nfSB1bml0IHRoZSB1bml0IHRvIGNvbnZlcnQgdG8sIGRlZmF1bHQgZXRoZXJcbiAqIEByZXR1cm5zIHtCaWdOdW1iZXJ9IHZhbHVlIG9mIHRoZSB1bml0IChpbiBXZWkpXG4gKiBAdGhyb3dzIGVycm9yIGlmIHRoZSB1bml0IGlzIG5vdCBjb3JyZWN0OndcbiAqL1xudmFyIGdldFZhbHVlT2ZVbml0ID0gZnVuY3Rpb24gKHVuaXQpIHtcbiAgICB1bml0ID0gdW5pdCA/IHVuaXQudG9Mb3dlckNhc2UoKSA6ICdldGhlcic7XG4gICAgdmFyIHVuaXRWYWx1ZSA9IHVuaXRNYXBbdW5pdF07XG4gICAgaWYgKHVuaXRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyB1bml0IGRvZXNuXFwndCBleGlzdHMsIHBsZWFzZSB1c2UgdGhlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHVuaXRzJyArIEpTT04uc3RyaW5naWZ5KHVuaXRNYXAsIG51bGwsIDIpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIodW5pdFZhbHVlLCAxMCk7XG59O1xuXG4vKipcbiAqIFRha2VzIGEgbnVtYmVyIG9mIHdlaSBhbmQgY29udmVydHMgaXQgdG8gYW55IG90aGVyIGV0aGVyIHVuaXQuXG4gKlxuICogUG9zc2libGUgdW5pdHMgYXJlOlxuICogICBTSSBTaG9ydCAgIFNJIEZ1bGwgICAgICAgIEVmZmlneSAgICAgICBPdGhlclxuICogLSBrd2VpICAgICAgIGZlbXRvZXRoZXIgICAgIGJhYmJhZ2VcbiAqIC0gbXdlaSAgICAgICBwaWNvZXRoZXIgICAgICBsb3ZlbGFjZVxuICogLSBnd2VpICAgICAgIG5hbm9ldGhlciAgICAgIHNoYW5ub24gICAgICBuYW5vXG4gKiAtIC0tICAgICAgICAgbWljcm9ldGhlciAgICAgc3phYm8gICAgICAgIG1pY3JvXG4gKiAtIC0tICAgICAgICAgbWlsbGlldGhlciAgICAgZmlubmV5ICAgICAgIG1pbGxpXG4gKiAtIGV0aGVyICAgICAgLS0gICAgICAgICAgICAgLS1cbiAqIC0ga2V0aGVyICAgICAgICAgICAgICAgICAgICAtLSAgICAgICAgICAgZ3JhbmRcbiAqIC0gbWV0aGVyXG4gKiAtIGdldGhlclxuICogLSB0ZXRoZXJcbiAqXG4gKiBAbWV0aG9kIGZyb21XZWlcbiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gbnVtYmVyIGNhbiBiZSBhIG51bWJlciwgbnVtYmVyIHN0cmluZyBvciBhIEhFWCBvZiBhIGRlY2ltYWxcbiAqIEBwYXJhbSB7U3RyaW5nfSB1bml0IHRoZSB1bml0IHRvIGNvbnZlcnQgdG8sIGRlZmF1bHQgZXRoZXJcbiAqIEByZXR1cm4ge1N0cmluZ3xPYmplY3R9IFdoZW4gZ2l2ZW4gYSBCaWdOdW1iZXIgb2JqZWN0IGl0IHJldHVybnMgb25lIGFzIHdlbGwsIG90aGVyd2lzZSBhIG51bWJlclxuKi9cbnZhciBmcm9tV2VpID0gZnVuY3Rpb24obnVtYmVyLCB1bml0KSB7XG4gICAgdmFyIHJldHVyblZhbHVlID0gdG9CaWdOdW1iZXIobnVtYmVyKS5kaXZpZGVkQnkoZ2V0VmFsdWVPZlVuaXQodW5pdCkpO1xuXG4gICAgcmV0dXJuIGlzQmlnTnVtYmVyKG51bWJlcikgPyByZXR1cm5WYWx1ZSA6IHJldHVyblZhbHVlLnRvU3RyaW5nKDEwKTtcbn07XG5cbi8qKlxuICogVGFrZXMgYSBudW1iZXIgb2YgYSB1bml0IGFuZCBjb252ZXJ0cyBpdCB0byB3ZWkuXG4gKlxuICogUG9zc2libGUgdW5pdHMgYXJlOlxuICogICBTSSBTaG9ydCAgIFNJIEZ1bGwgICAgICAgIEVmZmlneSAgICAgICBPdGhlclxuICogLSBrd2VpICAgICAgIGZlbXRvZXRoZXIgICAgIGJhYmJhZ2VcbiAqIC0gbXdlaSAgICAgICBwaWNvZXRoZXIgICAgICBsb3ZlbGFjZVxuICogLSBnd2VpICAgICAgIG5hbm9ldGhlciAgICAgIHNoYW5ub24gICAgICBuYW5vXG4gKiAtIC0tICAgICAgICAgbWljcm9ldGhlciAgICAgc3phYm8gICAgICAgIG1pY3JvXG4gKiAtIC0tICAgICAgICAgbWljcm9ldGhlciAgICAgc3phYm8gICAgICAgIG1pY3JvXG4gKiAtIC0tICAgICAgICAgbWlsbGlldGhlciAgICAgZmlubmV5ICAgICAgIG1pbGxpXG4gKiAtIGV0aGVyICAgICAgLS0gICAgICAgICAgICAgLS1cbiAqIC0ga2V0aGVyICAgICAgICAgICAgICAgICAgICAtLSAgICAgICAgICAgZ3JhbmRcbiAqIC0gbWV0aGVyXG4gKiAtIGdldGhlclxuICogLSB0ZXRoZXJcbiAqXG4gKiBAbWV0aG9kIHRvV2VpXG4gKiBAcGFyYW0ge051bWJlcnxTdHJpbmd8QmlnTnVtYmVyfSBudW1iZXIgY2FuIGJlIGEgbnVtYmVyLCBudW1iZXIgc3RyaW5nIG9yIGEgSEVYIG9mIGEgZGVjaW1hbFxuICogQHBhcmFtIHtTdHJpbmd9IHVuaXQgdGhlIHVuaXQgdG8gY29udmVydCBmcm9tLCBkZWZhdWx0IGV0aGVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8T2JqZWN0fSBXaGVuIGdpdmVuIGEgQmlnTnVtYmVyIG9iamVjdCBpdCByZXR1cm5zIG9uZSBhcyB3ZWxsLCBvdGhlcndpc2UgYSBudW1iZXJcbiovXG52YXIgdG9XZWkgPSBmdW5jdGlvbihudW1iZXIsIHVuaXQpIHtcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSB0b0JpZ051bWJlcihudW1iZXIpLnRpbWVzKGdldFZhbHVlT2ZVbml0KHVuaXQpKTtcblxuICAgIHJldHVybiBpc0JpZ051bWJlcihudW1iZXIpID8gcmV0dXJuVmFsdWUgOiByZXR1cm5WYWx1ZS50b1N0cmluZygxMCk7XG59O1xuXG4vKipcbiAqIFRha2VzIGFuIGlucHV0IGFuZCB0cmFuc2Zvcm1zIGl0IGludG8gYW4gYmlnbnVtYmVyXG4gKlxuICogQG1ldGhvZCB0b0JpZ051bWJlclxuICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfEJpZ051bWJlcn0gYSBudW1iZXIsIHN0cmluZywgSEVYIHN0cmluZyBvciBCaWdOdW1iZXJcbiAqIEByZXR1cm4ge0JpZ051bWJlcn0gQmlnTnVtYmVyXG4qL1xudmFyIHRvQmlnTnVtYmVyID0gZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgLypqc2hpbnQgbWF4Y29tcGxleGl0eTo1ICovXG4gICAgbnVtYmVyID0gbnVtYmVyIHx8IDA7XG4gICAgaWYgKGlzQmlnTnVtYmVyKG51bWJlcikpXG4gICAgICAgIHJldHVybiBudW1iZXI7XG5cbiAgICBpZiAoaXNTdHJpbmcobnVtYmVyKSAmJiAobnVtYmVyLmluZGV4T2YoJzB4JykgPT09IDAgfHwgbnVtYmVyLmluZGV4T2YoJy0weCcpID09PSAwKSkge1xuICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihudW1iZXIucmVwbGFjZSgnMHgnLCcnKSwgMTYpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQmlnTnVtYmVyKG51bWJlci50b1N0cmluZygxMCksIDEwKTtcbn07XG5cbi8qKlxuICogVGFrZXMgYW5kIGlucHV0IHRyYW5zZm9ybXMgaXQgaW50byBiaWdudW1iZXIgYW5kIGlmIGl0IGlzIG5lZ2F0aXZlIHZhbHVlLCBpbnRvIHR3bydzIGNvbXBsZW1lbnRcbiAqXG4gKiBAbWV0aG9kIHRvVHdvc0NvbXBsZW1lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ3xCaWdOdW1iZXJ9XG4gKiBAcmV0dXJuIHtCaWdOdW1iZXJ9XG4gKi9cbnZhciB0b1R3b3NDb21wbGVtZW50ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICAgIHZhciBiaWdOdW1iZXIgPSB0b0JpZ051bWJlcihudW1iZXIpLnJvdW5kKCk7XG4gICAgaWYgKGJpZ051bWJlci5sZXNzVGhhbigwKSkge1xuICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihcImZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZcIiwgMTYpLnBsdXMoYmlnTnVtYmVyKS5wbHVzKDEpO1xuICAgIH1cbiAgICByZXR1cm4gYmlnTnVtYmVyO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIHN0cmluZyBpcyBzdHJpY3RseSBhbiBhZGRyZXNzXG4gKlxuICogQG1ldGhvZCBpc1N0cmljdEFkZHJlc3NcbiAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzIHRoZSBnaXZlbiBIRVggYWRyZXNzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuKi9cbnZhciBpc1N0cmljdEFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgIHJldHVybiAvXjB4WzAtOWEtZl17NDB9JC9pLnRlc3QoYWRkcmVzcyk7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gc3RyaW5nIGlzIGFuIGFkZHJlc3NcbiAqXG4gKiBAbWV0aG9kIGlzQWRkcmVzc1xuICogQHBhcmFtIHtTdHJpbmd9IGFkZHJlc3MgdGhlIGdpdmVuIEhFWCBhZHJlc3NcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4qL1xudmFyIGlzQWRkcmVzcyA9IGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gICAgaWYgKCEvXigweCk/WzAtOWEtZl17NDB9JC9pLnRlc3QoYWRkcmVzcykpIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgaXQgaGFzIHRoZSBiYXNpYyByZXF1aXJlbWVudHMgb2YgYW4gYWRkcmVzc1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmICgvXigweCk/WzAtOWEtZl17NDB9JC8udGVzdChhZGRyZXNzKSB8fCAvXigweCk/WzAtOUEtRl17NDB9JC8udGVzdChhZGRyZXNzKSkge1xuICAgICAgICAvLyBJZiBpdCdzIGFsbCBzbWFsbCBjYXBzIG9yIGFsbCBhbGwgY2FwcywgcmV0dXJuIHRydWVcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIGNoZWNrIGVhY2ggY2FzZVxuICAgICAgICByZXR1cm4gaXNDaGVja3N1bUFkZHJlc3MoYWRkcmVzcyk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIHN0cmluZyBpcyBhIGNoZWNrc3VtbWVkIGFkZHJlc3NcbiAqXG4gKiBAbWV0aG9kIGlzQ2hlY2tzdW1BZGRyZXNzXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyB0aGUgZ2l2ZW4gSEVYIGFkcmVzc1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiovXG52YXIgaXNDaGVja3N1bUFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgIC8vIENoZWNrIGVhY2ggY2FzZVxuICAgIGFkZHJlc3MgPSBhZGRyZXNzLnJlcGxhY2UoJzB4JywnJyk7XG4gICAgdmFyIGFkZHJlc3NIYXNoID0gc2hhMyhhZGRyZXNzLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0MDsgaSsrICkge1xuICAgICAgICAvLyB0aGUgbnRoIGxldHRlciBzaG91bGQgYmUgdXBwZXJjYXNlIGlmIHRoZSBudGggZGlnaXQgb2YgY2FzZW1hcCBpcyAxXG4gICAgICAgIGlmICgocGFyc2VJbnQoYWRkcmVzc0hhc2hbaV0sIDE2KSA+IDcgJiYgYWRkcmVzc1tpXS50b1VwcGVyQ2FzZSgpICE9PSBhZGRyZXNzW2ldKSB8fCAocGFyc2VJbnQoYWRkcmVzc0hhc2hbaV0sIDE2KSA8PSA3ICYmIGFkZHJlc3NbaV0udG9Mb3dlckNhc2UoKSAhPT0gYWRkcmVzc1tpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cblxuXG4vKipcbiAqIE1ha2VzIGEgY2hlY2tzdW0gYWRkcmVzc1xuICpcbiAqIEBtZXRob2QgdG9DaGVja3N1bUFkZHJlc3NcbiAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzIHRoZSBnaXZlbiBIRVggYWRyZXNzXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4qL1xudmFyIHRvQ2hlY2tzdW1BZGRyZXNzID0gZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgICBpZiAodHlwZW9mIGFkZHJlc3MgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gJyc7XG5cbiAgICBhZGRyZXNzID0gYWRkcmVzcy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJzB4JywnJyk7XG4gICAgdmFyIGFkZHJlc3NIYXNoID0gc2hhMyhhZGRyZXNzKTtcbiAgICB2YXIgY2hlY2tzdW1BZGRyZXNzID0gJzB4JztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWRkcmVzcy5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgLy8gSWYgaXRoIGNoYXJhY3RlciBpcyA5IHRvIGYgdGhlbiBtYWtlIGl0IHVwcGVyY2FzZVxuICAgICAgICBpZiAocGFyc2VJbnQoYWRkcmVzc0hhc2hbaV0sIDE2KSA+IDcpIHtcbiAgICAgICAgICBjaGVja3N1bUFkZHJlc3MgKz0gYWRkcmVzc1tpXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2hlY2tzdW1BZGRyZXNzICs9IGFkZHJlc3NbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoZWNrc3VtQWRkcmVzcztcbn07XG5cbi8qKlxuICogVHJhbnNmb3JtcyBnaXZlbiBzdHJpbmcgdG8gdmFsaWQgMjAgYnl0ZXMtbGVuZ3RoIGFkZHJlcyB3aXRoIDB4IHByZWZpeFxuICpcbiAqIEBtZXRob2QgdG9BZGRyZXNzXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzc1xuICogQHJldHVybiB7U3RyaW5nfSBmb3JtYXR0ZWQgYWRkcmVzc1xuICovXG52YXIgdG9BZGRyZXNzID0gZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgICBpZiAoaXNTdHJpY3RBZGRyZXNzKGFkZHJlc3MpKSB7XG4gICAgICAgIHJldHVybiBhZGRyZXNzO1xuICAgIH1cblxuICAgIGlmICgvXlswLTlhLWZdezQwfSQvLnRlc3QoYWRkcmVzcykpIHtcbiAgICAgICAgcmV0dXJuICcweCcgKyBhZGRyZXNzO1xuICAgIH1cblxuICAgIHJldHVybiAnMHgnICsgcGFkTGVmdCh0b0hleChhZGRyZXNzKS5zdWJzdHIoMiksIDQwKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iamVjdCBpcyBCaWdOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICpcbiAqIEBtZXRob2QgaXNCaWdOdW1iZXJcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzQmlnTnVtYmVyID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBCaWdOdW1iZXIgfHxcbiAgICAgICAgKG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3IgJiYgb2JqZWN0LmNvbnN0cnVjdG9yLm5hbWUgPT09ICdCaWdOdW1iZXInKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iamVjdCBpcyBzdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICpcbiAqIEBtZXRob2QgaXNTdHJpbmdcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzU3RyaW5nID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAob2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvciAmJiBvYmplY3QuY29uc3RydWN0b3IubmFtZSA9PT0gJ1N0cmluZycpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqZWN0IGlzIGZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqXG4gKiBAbWV0aG9kIGlzRnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdmdW5jdGlvbic7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmplY3QgaXMgT2JqZXQsIG90aGVyd2lzZSBmYWxzZVxuICpcbiAqIEBtZXRob2QgaXNPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzT2JqZWN0ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgIT09IG51bGwgJiYgIShvYmplY3QgaW5zdGFuY2VvZiBBcnJheSkgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCc7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBvYmplY3QgaXMgYm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKlxuICogQG1ldGhvZCBpc0Jvb2xlYW5cbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzQm9vbGVhbiA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ2Jvb2xlYW4nO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqZWN0IGlzIGFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqXG4gKiBAbWV0aG9kIGlzQXJyYXlcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzQXJyYXkgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIEFycmF5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgZ2l2ZW4gc3RyaW5nIGlzIHZhbGlkIGpzb24gb2JqZWN0XG4gKlxuICogQG1ldGhvZCBpc0pzb25cbiAqIEBwYXJhbSB7U3RyaW5nfVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzSnNvbiA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gISFKU09OLnBhcnNlKHN0cik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgZ2l2ZW4gc3RyaW5nIGlzIGEgdmFsaWQgRXRoZXJldW0gYmxvY2sgaGVhZGVyIGJsb29tLlxuICpcbiAqIEBtZXRob2QgaXNCbG9vbVxuICogQHBhcmFtIHtTdHJpbmd9IGhleCBlbmNvZGVkIGJsb29tIGZpbHRlclxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIGlzQmxvb20gPSBmdW5jdGlvbiAoYmxvb20pIHtcbiAgICBpZiAoIS9eKDB4KT9bMC05YS1mXXs1MTJ9JC9pLnRlc3QoYmxvb20pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKC9eKDB4KT9bMC05YS1mXXs1MTJ9JC8udGVzdChibG9vbSkgfHwgL14oMHgpP1swLTlBLUZdezUxMn0kLy50ZXN0KGJsb29tKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgZ2l2ZW4gc3RyaW5nIGlzIGEgdmFsaWQgbG9nIHRvcGljLlxuICpcbiAqIEBtZXRob2QgaXNUb3BpY1xuICogQHBhcmFtIHtTdHJpbmd9IGhleCBlbmNvZGVkIHRvcGljXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG52YXIgaXNUb3BpYyA9IGZ1bmN0aW9uICh0b3BpYykge1xuICAgIGlmICghL14oMHgpP1swLTlhLWZdezY0fSQvaS50ZXN0KHRvcGljKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmICgvXigweCk/WzAtOWEtZl17NjR9JC8udGVzdCh0b3BpYykgfHwgL14oMHgpP1swLTlBLUZdezY0fSQvLnRlc3QodG9waWMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBwYWRMZWZ0OiBwYWRMZWZ0LFxuICAgIHBhZFJpZ2h0OiBwYWRSaWdodCxcbiAgICB0b0hleDogdG9IZXgsXG4gICAgdG9EZWNpbWFsOiB0b0RlY2ltYWwsXG4gICAgZnJvbURlY2ltYWw6IGZyb21EZWNpbWFsLFxuICAgIHRvVXRmODogdG9VdGY4LFxuICAgIHRvQXNjaWk6IHRvQXNjaWksXG4gICAgZnJvbVV0Zjg6IGZyb21VdGY4LFxuICAgIGZyb21Bc2NpaTogZnJvbUFzY2lpLFxuICAgIHRyYW5zZm9ybVRvRnVsbE5hbWU6IHRyYW5zZm9ybVRvRnVsbE5hbWUsXG4gICAgZXh0cmFjdERpc3BsYXlOYW1lOiBleHRyYWN0RGlzcGxheU5hbWUsXG4gICAgZXh0cmFjdFR5cGVOYW1lOiBleHRyYWN0VHlwZU5hbWUsXG4gICAgdG9XZWk6IHRvV2VpLFxuICAgIGZyb21XZWk6IGZyb21XZWksXG4gICAgdG9CaWdOdW1iZXI6IHRvQmlnTnVtYmVyLFxuICAgIHRvVHdvc0NvbXBsZW1lbnQ6IHRvVHdvc0NvbXBsZW1lbnQsXG4gICAgdG9BZGRyZXNzOiB0b0FkZHJlc3MsXG4gICAgaXNCaWdOdW1iZXI6IGlzQmlnTnVtYmVyLFxuICAgIGlzU3RyaWN0QWRkcmVzczogaXNTdHJpY3RBZGRyZXNzLFxuICAgIGlzQWRkcmVzczogaXNBZGRyZXNzLFxuICAgIGlzQ2hlY2tzdW1BZGRyZXNzOiBpc0NoZWNrc3VtQWRkcmVzcyxcbiAgICB0b0NoZWNrc3VtQWRkcmVzczogdG9DaGVja3N1bUFkZHJlc3MsXG4gICAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgICBpc1N0cmluZzogaXNTdHJpbmcsXG4gICAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICAgIGlzQm9vbGVhbjogaXNCb29sZWFuLFxuICAgIGlzQXJyYXk6IGlzQXJyYXksXG4gICAgaXNKc29uOiBpc0pzb24sXG4gICAgaXNCbG9vbTogaXNCbG9vbSxcbiAgICBpc1RvcGljOiBpc1RvcGljLFxufTtcbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgICBcInZlcnNpb25cIjogXCIwLjIwLjFcIlxufVxuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgd2ViMy5qc1xuICogQGF1dGhvcnM6XG4gKiAgIEplZmZyZXkgV2lsY2tlIDxqZWZmQGV0aGRldi5jb20+XG4gKiAgIE1hcmVrIEtvdGV3aWN6IDxtYXJla0BldGhkZXYuY29tPlxuICogICBNYXJpYW4gT2FuY2VhIDxtYXJpYW5AZXRoZGV2LmNvbT5cbiAqICAgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGRldi5jb20+XG4gKiAgIEdhdiBXb29kIDxnQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE0XG4gKi9cblxudmFyIFJlcXVlc3RNYW5hZ2VyID0gcmVxdWlyZSgnLi93ZWIzL3JlcXVlc3RtYW5hZ2VyJyk7XG52YXIgSWJhbiA9IHJlcXVpcmUoJy4vd2ViMy9pYmFuJyk7XG52YXIgRXRoID0gcmVxdWlyZSgnLi93ZWIzL21ldGhvZHMvZXRoJyk7XG52YXIgREIgPSByZXF1aXJlKCcuL3dlYjMvbWV0aG9kcy9kYicpO1xudmFyIFNoaCA9IHJlcXVpcmUoJy4vd2ViMy9tZXRob2RzL3NoaCcpO1xudmFyIE5ldCA9IHJlcXVpcmUoJy4vd2ViMy9tZXRob2RzL25ldCcpO1xudmFyIFBlcnNvbmFsID0gcmVxdWlyZSgnLi93ZWIzL21ldGhvZHMvcGVyc29uYWwnKTtcbnZhciBTd2FybSA9IHJlcXVpcmUoJy4vd2ViMy9tZXRob2RzL3N3YXJtJyk7XG52YXIgU2V0dGluZ3MgPSByZXF1aXJlKCcuL3dlYjMvc2V0dGluZ3MnKTtcbnZhciB2ZXJzaW9uID0gcmVxdWlyZSgnLi92ZXJzaW9uLmpzb24nKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvdXRpbHMnKTtcbnZhciBzaGEzID0gcmVxdWlyZSgnLi91dGlscy9zaGEzJyk7XG52YXIgZXh0ZW5kID0gcmVxdWlyZSgnLi93ZWIzL2V4dGVuZCcpO1xudmFyIEJhdGNoID0gcmVxdWlyZSgnLi93ZWIzL2JhdGNoJyk7XG52YXIgUHJvcGVydHkgPSByZXF1aXJlKCcuL3dlYjMvcHJvcGVydHknKTtcbnZhciBIdHRwUHJvdmlkZXIgPSByZXF1aXJlKCcuL3dlYjMvaHR0cHByb3ZpZGVyJyk7XG52YXIgSXBjUHJvdmlkZXIgPSByZXF1aXJlKCcuL3dlYjMvaXBjcHJvdmlkZXInKTtcbnZhciBCaWdOdW1iZXIgPSByZXF1aXJlKCdiaWdudW1iZXIuanMnKTtcblxuXG5cbmZ1bmN0aW9uIFdlYjMgKHByb3ZpZGVyKSB7XG4gICAgdGhpcy5fcmVxdWVzdE1hbmFnZXIgPSBuZXcgUmVxdWVzdE1hbmFnZXIocHJvdmlkZXIpO1xuICAgIHRoaXMuY3VycmVudFByb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgdGhpcy5ldGggPSBuZXcgRXRoKHRoaXMpO1xuICAgIHRoaXMuZGIgPSBuZXcgREIodGhpcyk7XG4gICAgdGhpcy5zaGggPSBuZXcgU2hoKHRoaXMpO1xuICAgIHRoaXMubmV0ID0gbmV3IE5ldCh0aGlzKTtcbiAgICB0aGlzLnBlcnNvbmFsID0gbmV3IFBlcnNvbmFsKHRoaXMpO1xuICAgIHRoaXMuYnp6ID0gbmV3IFN3YXJtKHRoaXMpO1xuICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgU2V0dGluZ3MoKTtcbiAgICB0aGlzLnZlcnNpb24gPSB7XG4gICAgICAgIGFwaTogdmVyc2lvbi52ZXJzaW9uXG4gICAgfTtcbiAgICB0aGlzLnByb3ZpZGVycyA9IHtcbiAgICAgICAgSHR0cFByb3ZpZGVyOiBIdHRwUHJvdmlkZXIsXG4gICAgICAgIElwY1Byb3ZpZGVyOiBJcGNQcm92aWRlclxuICAgIH07XG4gICAgdGhpcy5fZXh0ZW5kID0gZXh0ZW5kKHRoaXMpO1xuICAgIHRoaXMuX2V4dGVuZCh7XG4gICAgICAgIHByb3BlcnRpZXM6IHByb3BlcnRpZXMoKVxuICAgIH0pO1xufVxuXG4vLyBleHBvc2UgcHJvdmlkZXJzIG9uIHRoZSBjbGFzc1xuV2ViMy5wcm92aWRlcnMgPSB7XG4gICAgSHR0cFByb3ZpZGVyOiBIdHRwUHJvdmlkZXIsXG4gICAgSXBjUHJvdmlkZXI6IElwY1Byb3ZpZGVyXG59O1xuXG5XZWIzLnByb3RvdHlwZS5zZXRQcm92aWRlciA9IGZ1bmN0aW9uIChwcm92aWRlcikge1xuICAgIHRoaXMuX3JlcXVlc3RNYW5hZ2VyLnNldFByb3ZpZGVyKHByb3ZpZGVyKTtcbiAgICB0aGlzLmN1cnJlbnRQcm92aWRlciA9IHByb3ZpZGVyO1xufTtcblxuV2ViMy5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoa2VlcElzU3luY2luZykge1xuICAgIHRoaXMuX3JlcXVlc3RNYW5hZ2VyLnJlc2V0KGtlZXBJc1N5bmNpbmcpO1xuICAgIHRoaXMuc2V0dGluZ3MgPSBuZXcgU2V0dGluZ3MoKTtcbn07XG5cbldlYjMucHJvdG90eXBlLkJpZ051bWJlciA9IEJpZ051bWJlcjtcbldlYjMucHJvdG90eXBlLnRvSGV4ID0gdXRpbHMudG9IZXg7XG5XZWIzLnByb3RvdHlwZS50b0FzY2lpID0gdXRpbHMudG9Bc2NpaTtcbldlYjMucHJvdG90eXBlLnRvVXRmOCA9IHV0aWxzLnRvVXRmODtcbldlYjMucHJvdG90eXBlLmZyb21Bc2NpaSA9IHV0aWxzLmZyb21Bc2NpaTtcbldlYjMucHJvdG90eXBlLmZyb21VdGY4ID0gdXRpbHMuZnJvbVV0Zjg7XG5XZWIzLnByb3RvdHlwZS50b0RlY2ltYWwgPSB1dGlscy50b0RlY2ltYWw7XG5XZWIzLnByb3RvdHlwZS5mcm9tRGVjaW1hbCA9IHV0aWxzLmZyb21EZWNpbWFsO1xuV2ViMy5wcm90b3R5cGUudG9CaWdOdW1iZXIgPSB1dGlscy50b0JpZ051bWJlcjtcbldlYjMucHJvdG90eXBlLnRvV2VpID0gdXRpbHMudG9XZWk7XG5XZWIzLnByb3RvdHlwZS5mcm9tV2VpID0gdXRpbHMuZnJvbVdlaTtcbldlYjMucHJvdG90eXBlLmlzQWRkcmVzcyA9IHV0aWxzLmlzQWRkcmVzcztcbldlYjMucHJvdG90eXBlLmlzQ2hlY2tzdW1BZGRyZXNzID0gdXRpbHMuaXNDaGVja3N1bUFkZHJlc3M7XG5XZWIzLnByb3RvdHlwZS50b0NoZWNrc3VtQWRkcmVzcyA9IHV0aWxzLnRvQ2hlY2tzdW1BZGRyZXNzO1xuV2ViMy5wcm90b3R5cGUuaXNJQkFOID0gdXRpbHMuaXNJQkFOO1xuV2ViMy5wcm90b3R5cGUucGFkTGVmdCA9IHV0aWxzLnBhZExlZnQ7XG5XZWIzLnByb3RvdHlwZS5wYWRSaWdodCA9IHV0aWxzLnBhZFJpZ2h0O1xuXG5cbldlYjMucHJvdG90eXBlLnNoYTMgPSBmdW5jdGlvbihzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gJzB4JyArIHNoYTMoc3RyaW5nLCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogVHJhbnNmb3JtcyBkaXJlY3QgaWNhcCB0byBhZGRyZXNzXG4gKi9cbldlYjMucHJvdG90eXBlLmZyb21JQ0FQID0gZnVuY3Rpb24gKGljYXApIHtcbiAgICB2YXIgaWJhbiA9IG5ldyBJYmFuKGljYXApO1xuICAgIHJldHVybiBpYmFuLmFkZHJlc3MoKTtcbn07XG5cbnZhciBwcm9wZXJ0aWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBbXG4gICAgICAgIG5ldyBQcm9wZXJ0eSh7XG4gICAgICAgICAgICBuYW1lOiAndmVyc2lvbi5ub2RlJyxcbiAgICAgICAgICAgIGdldHRlcjogJ3dlYjNfY2xpZW50VmVyc2lvbidcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBQcm9wZXJ0eSh7XG4gICAgICAgICAgICBuYW1lOiAndmVyc2lvbi5uZXR3b3JrJyxcbiAgICAgICAgICAgIGdldHRlcjogJ25ldF92ZXJzaW9uJyxcbiAgICAgICAgICAgIGlucHV0Rm9ybWF0dGVyOiB1dGlscy50b0RlY2ltYWxcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBQcm9wZXJ0eSh7XG4gICAgICAgICAgICBuYW1lOiAndmVyc2lvbi5ldGhlcmV1bScsXG4gICAgICAgICAgICBnZXR0ZXI6ICdldGhfcHJvdG9jb2xWZXJzaW9uJyxcbiAgICAgICAgICAgIGlucHV0Rm9ybWF0dGVyOiB1dGlscy50b0RlY2ltYWxcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBQcm9wZXJ0eSh7XG4gICAgICAgICAgICBuYW1lOiAndmVyc2lvbi53aGlzcGVyJyxcbiAgICAgICAgICAgIGdldHRlcjogJ3NoaF92ZXJzaW9uJyxcbiAgICAgICAgICAgIGlucHV0Rm9ybWF0dGVyOiB1dGlscy50b0RlY2ltYWxcbiAgICAgICAgfSlcbiAgICBdO1xufTtcblxuV2ViMy5wcm90b3R5cGUuaXNDb25uZWN0ZWQgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiAodGhpcy5jdXJyZW50UHJvdmlkZXIgJiYgdGhpcy5jdXJyZW50UHJvdmlkZXIuaXNDb25uZWN0ZWQoKSk7XG59O1xuXG5XZWIzLnByb3RvdHlwZS5jcmVhdGVCYXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IEJhdGNoKHRoaXMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWIzO1xuXG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqXG4gKiBAZmlsZSBhbGxldmVudHMuanNcbiAqIEBhdXRob3IgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE0XG4gKi9cblxudmFyIHNoYTMgPSByZXF1aXJlKCcuLi91dGlscy9zaGEzJyk7XG52YXIgU29saWRpdHlFdmVudCA9IHJlcXVpcmUoJy4vZXZlbnQnKTtcbnZhciBmb3JtYXR0ZXJzID0gcmVxdWlyZSgnLi9mb3JtYXR0ZXJzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpO1xudmFyIEZpbHRlciA9IHJlcXVpcmUoJy4vZmlsdGVyJyk7XG52YXIgd2F0Y2hlcyA9IHJlcXVpcmUoJy4vbWV0aG9kcy93YXRjaGVzJyk7XG5cbnZhciBBbGxTb2xpZGl0eUV2ZW50cyA9IGZ1bmN0aW9uIChyZXF1ZXN0TWFuYWdlciwganNvbiwgYWRkcmVzcykge1xuICAgIHRoaXMuX3JlcXVlc3RNYW5hZ2VyID0gcmVxdWVzdE1hbmFnZXI7XG4gICAgdGhpcy5fanNvbiA9IGpzb247XG4gICAgdGhpcy5fYWRkcmVzcyA9IGFkZHJlc3M7XG59O1xuXG5BbGxTb2xpZGl0eUV2ZW50cy5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICBbJ2Zyb21CbG9jaycsICd0b0Jsb2NrJ10uZmlsdGVyKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zW2ZdICE9PSB1bmRlZmluZWQ7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICByZXN1bHRbZl0gPSBmb3JtYXR0ZXJzLmlucHV0QmxvY2tOdW1iZXJGb3JtYXR0ZXIob3B0aW9uc1tmXSk7XG4gICAgfSk7XG5cbiAgICByZXN1bHQuYWRkcmVzcyA9IHRoaXMuX2FkZHJlc3M7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuQWxsU29saWRpdHlFdmVudHMucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGF0YS5kYXRhID0gZGF0YS5kYXRhIHx8ICcnO1xuICAgIGRhdGEudG9waWNzID0gZGF0YS50b3BpY3MgfHwgW107XG5cbiAgICB2YXIgZXZlbnRUb3BpYyA9IGRhdGEudG9waWNzWzBdLnNsaWNlKDIpO1xuICAgIHZhciBtYXRjaCA9IHRoaXMuX2pzb24uZmlsdGVyKGZ1bmN0aW9uIChqKSB7XG4gICAgICAgIHJldHVybiBldmVudFRvcGljID09PSBzaGEzKHV0aWxzLnRyYW5zZm9ybVRvRnVsbE5hbWUoaikpO1xuICAgIH0pWzBdO1xuXG4gICAgaWYgKCFtYXRjaCkgeyAvLyBjYW5ub3QgZmluZCBtYXRjaGluZyBldmVudD9cbiAgICAgICAgY29uc29sZS53YXJuKCdjYW5ub3QgZmluZCBldmVudCBmb3IgbG9nJyk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHZhciBldmVudCA9IG5ldyBTb2xpZGl0eUV2ZW50KHRoaXMuX3JlcXVlc3RNYW5hZ2VyLCBtYXRjaCwgdGhpcy5fYWRkcmVzcyk7XG4gICAgcmV0dXJuIGV2ZW50LmRlY29kZShkYXRhKTtcbn07XG5cbkFsbFNvbGlkaXR5RXZlbnRzLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICBjYWxsYmFjayA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICBvcHRpb25zID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbyA9IHRoaXMuZW5jb2RlKG9wdGlvbnMpO1xuICAgIHZhciBmb3JtYXR0ZXIgPSB0aGlzLmRlY29kZS5iaW5kKHRoaXMpO1xuICAgIHJldHVybiBuZXcgRmlsdGVyKG8sICdldGgnLCB0aGlzLl9yZXF1ZXN0TWFuYWdlciwgd2F0Y2hlcy5ldGgoKSwgZm9ybWF0dGVyLCBjYWxsYmFjayk7XG59O1xuXG5BbGxTb2xpZGl0eUV2ZW50cy5wcm90b3R5cGUuYXR0YWNoVG9Db250cmFjdCA9IGZ1bmN0aW9uIChjb250cmFjdCkge1xuICAgIHZhciBleGVjdXRlID0gdGhpcy5leGVjdXRlLmJpbmQodGhpcyk7XG4gICAgY29udHJhY3QuYWxsRXZlbnRzID0gZXhlY3V0ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWxsU29saWRpdHlFdmVudHM7XG5cbiIsIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKiogXG4gKiBAZmlsZSBiYXRjaC5qc1xuICogQGF1dGhvciBNYXJlayBLb3Rld2ljeiA8bWFyZWtAZXRoZGV2LmNvbT5cbiAqIEBkYXRlIDIwMTVcbiAqL1xuXG52YXIgSnNvbnJwYyA9IHJlcXVpcmUoJy4vanNvbnJwYycpO1xudmFyIGVycm9ycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG5cbnZhciBCYXRjaCA9IGZ1bmN0aW9uICh3ZWIzKSB7XG4gICAgdGhpcy5yZXF1ZXN0TWFuYWdlciA9IHdlYjMuX3JlcXVlc3RNYW5hZ2VyO1xuICAgIHRoaXMucmVxdWVzdHMgPSBbXTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBhZGQgY3JlYXRlIG5ldyByZXF1ZXN0IHRvIGJhdGNoIHJlcXVlc3RcbiAqXG4gKiBAbWV0aG9kIGFkZFxuICogQHBhcmFtIHtPYmplY3R9IGpzb25ycGMgcmVxdWV0IG9iamVjdFxuICovXG5CYXRjaC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICB0aGlzLnJlcXVlc3RzLnB1c2gocmVxdWVzdCk7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZXhlY3V0ZSBiYXRjaCByZXF1ZXN0XG4gKlxuICogQG1ldGhvZCBleGVjdXRlXG4gKi9cbkJhdGNoLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXF1ZXN0cyA9IHRoaXMucmVxdWVzdHM7XG4gICAgdGhpcy5yZXF1ZXN0TWFuYWdlci5zZW5kQmF0Y2gocmVxdWVzdHMsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHtcbiAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG4gICAgICAgIHJlcXVlc3RzLm1hcChmdW5jdGlvbiAocmVxdWVzdCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzW2luZGV4XSB8fCB7fTtcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0LCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKHJlcXVlc3RzW2luZGV4XS5jYWxsYmFjaykge1xuXG4gICAgICAgICAgICAgICAgaWYgKCFKc29ucnBjLmlzVmFsaWRSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0c1tpbmRleF0uY2FsbGJhY2soZXJyb3JzLkludmFsaWRSZXNwb25zZShyZXN1bHQpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXF1ZXN0c1tpbmRleF0uY2FsbGJhY2sobnVsbCwgKHJlcXVlc3RzW2luZGV4XS5mb3JtYXQgPyByZXF1ZXN0c1tpbmRleF0uZm9ybWF0KHJlc3VsdC5yZXN1bHQpIDogcmVzdWx0LnJlc3VsdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTsgXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhdGNoO1xuXG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqXG4gKiBAZmlsZSBjb250cmFjdC5qc1xuICogQGF1dGhvciBNYXJlayBLb3Rld2ljeiA8bWFyZWtAZXRoZGV2LmNvbT5cbiAqIEBkYXRlIDIwMTRcbiAqL1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpO1xudmFyIGNvZGVyID0gcmVxdWlyZSgnLi4vc29saWRpdHkvY29kZXInKTtcbnZhciBTb2xpZGl0eUV2ZW50ID0gcmVxdWlyZSgnLi9ldmVudCcpO1xudmFyIFNvbGlkaXR5RnVuY3Rpb24gPSByZXF1aXJlKCcuL2Z1bmN0aW9uJyk7XG52YXIgQWxsRXZlbnRzID0gcmVxdWlyZSgnLi9hbGxldmVudHMnKTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGVuY29kZSBjb25zdHJ1Y3RvciBwYXJhbXNcbiAqXG4gKiBAbWV0aG9kIGVuY29kZUNvbnN0cnVjdG9yUGFyYW1zXG4gKiBAcGFyYW0ge0FycmF5fSBhYmlcbiAqIEBwYXJhbSB7QXJyYXl9IGNvbnN0cnVjdG9yIHBhcmFtc1xuICovXG52YXIgZW5jb2RlQ29uc3RydWN0b3JQYXJhbXMgPSBmdW5jdGlvbiAoYWJpLCBwYXJhbXMpIHtcbiAgICByZXR1cm4gYWJpLmZpbHRlcihmdW5jdGlvbiAoanNvbikge1xuICAgICAgICByZXR1cm4ganNvbi50eXBlID09PSAnY29uc3RydWN0b3InICYmIGpzb24uaW5wdXRzLmxlbmd0aCA9PT0gcGFyYW1zLmxlbmd0aDtcbiAgICB9KS5tYXAoZnVuY3Rpb24gKGpzb24pIHtcbiAgICAgICAgcmV0dXJuIGpzb24uaW5wdXRzLm1hcChmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC50eXBlO1xuICAgICAgICB9KTtcbiAgICB9KS5tYXAoZnVuY3Rpb24gKHR5cGVzKSB7XG4gICAgICAgIHJldHVybiBjb2Rlci5lbmNvZGVQYXJhbXModHlwZXMsIHBhcmFtcyk7XG4gICAgfSlbMF0gfHwgJyc7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gYWRkIGZ1bmN0aW9ucyB0byBjb250cmFjdCBvYmplY3RcbiAqXG4gKiBAbWV0aG9kIGFkZEZ1bmN0aW9uc1RvQ29udHJhY3RcbiAqIEBwYXJhbSB7Q29udHJhY3R9IGNvbnRyYWN0XG4gKiBAcGFyYW0ge0FycmF5fSBhYmlcbiAqL1xudmFyIGFkZEZ1bmN0aW9uc1RvQ29udHJhY3QgPSBmdW5jdGlvbiAoY29udHJhY3QpIHtcbiAgICBjb250cmFjdC5hYmkuZmlsdGVyKGZ1bmN0aW9uIChqc29uKSB7XG4gICAgICAgIHJldHVybiBqc29uLnR5cGUgPT09ICdmdW5jdGlvbic7XG4gICAgfSkubWFwKGZ1bmN0aW9uIChqc29uKSB7XG4gICAgICAgIHJldHVybiBuZXcgU29saWRpdHlGdW5jdGlvbihjb250cmFjdC5fZXRoLCBqc29uLCBjb250cmFjdC5hZGRyZXNzKTtcbiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIGYuYXR0YWNoVG9Db250cmFjdChjb250cmFjdCk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gYWRkIGV2ZW50cyB0byBjb250cmFjdCBvYmplY3RcbiAqXG4gKiBAbWV0aG9kIGFkZEV2ZW50c1RvQ29udHJhY3RcbiAqIEBwYXJhbSB7Q29udHJhY3R9IGNvbnRyYWN0XG4gKiBAcGFyYW0ge0FycmF5fSBhYmlcbiAqL1xudmFyIGFkZEV2ZW50c1RvQ29udHJhY3QgPSBmdW5jdGlvbiAoY29udHJhY3QpIHtcbiAgICB2YXIgZXZlbnRzID0gY29udHJhY3QuYWJpLmZpbHRlcihmdW5jdGlvbiAoanNvbikge1xuICAgICAgICByZXR1cm4ganNvbi50eXBlID09PSAnZXZlbnQnO1xuICAgIH0pO1xuXG4gICAgdmFyIEFsbCA9IG5ldyBBbGxFdmVudHMoY29udHJhY3QuX2V0aC5fcmVxdWVzdE1hbmFnZXIsIGV2ZW50cywgY29udHJhY3QuYWRkcmVzcyk7XG4gICAgQWxsLmF0dGFjaFRvQ29udHJhY3QoY29udHJhY3QpO1xuXG4gICAgZXZlbnRzLm1hcChmdW5jdGlvbiAoanNvbikge1xuICAgICAgICByZXR1cm4gbmV3IFNvbGlkaXR5RXZlbnQoY29udHJhY3QuX2V0aC5fcmVxdWVzdE1hbmFnZXIsIGpzb24sIGNvbnRyYWN0LmFkZHJlc3MpO1xuICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5hdHRhY2hUb0NvbnRyYWN0KGNvbnRyYWN0KTtcbiAgICB9KTtcbn07XG5cblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGNoZWNrIGlmIHRoZSBjb250cmFjdCBnZXRzIHByb3Blcmx5IGRlcGxveWVkIG9uIHRoZSBibG9ja2NoYWluLlxuICpcbiAqIEBtZXRob2QgY2hlY2tGb3JDb250cmFjdEFkZHJlc3NcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250cmFjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtVbmRlZmluZWR9XG4gKi9cbnZhciBjaGVja0ZvckNvbnRyYWN0QWRkcmVzcyA9IGZ1bmN0aW9uKGNvbnRyYWN0LCBjYWxsYmFjayl7XG4gICAgdmFyIGNvdW50ID0gMCxcbiAgICAgICAgY2FsbGJhY2tGaXJlZCA9IGZhbHNlO1xuXG4gICAgLy8gd2FpdCBmb3IgcmVjZWlwdFxuICAgIHZhciBmaWx0ZXIgPSBjb250cmFjdC5fZXRoLmZpbHRlcignbGF0ZXN0JywgZnVuY3Rpb24oZSl7XG4gICAgICAgIGlmICghZSAmJiAhY2FsbGJhY2tGaXJlZCkge1xuICAgICAgICAgICAgY291bnQrKztcblxuICAgICAgICAgICAgLy8gc3RvcCB3YXRjaGluZyBhZnRlciA1MCBibG9ja3MgKHRpbWVvdXQpXG4gICAgICAgICAgICBpZiAoY291bnQgPiA1MCkge1xuXG4gICAgICAgICAgICAgICAgZmlsdGVyLnN0b3BXYXRjaGluZyhmdW5jdGlvbigpIHt9KTtcbiAgICAgICAgICAgICAgICBjYWxsYmFja0ZpcmVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCdDb250cmFjdCB0cmFuc2FjdGlvbiBjb3VsZG5cXCd0IGJlIGZvdW5kIGFmdGVyIDUwIGJsb2NrcycpKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29udHJhY3QgdHJhbnNhY3Rpb24gY291bGRuXFwndCBiZSBmb3VuZCBhZnRlciA1MCBibG9ja3MnKTtcblxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgY29udHJhY3QuX2V0aC5nZXRUcmFuc2FjdGlvblJlY2VpcHQoY29udHJhY3QudHJhbnNhY3Rpb25IYXNoLCBmdW5jdGlvbihlLCByZWNlaXB0KXtcbiAgICAgICAgICAgICAgICAgICAgaWYocmVjZWlwdCAmJiAhY2FsbGJhY2tGaXJlZCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cmFjdC5fZXRoLmdldENvZGUocmVjZWlwdC5jb250cmFjdEFkZHJlc3MsIGZ1bmN0aW9uKGUsIGNvZGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qanNoaW50IG1heGNvbXBsZXhpdHk6IDYgKi9cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNhbGxiYWNrRmlyZWQgfHwgIWNvZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlci5zdG9wV2F0Y2hpbmcoZnVuY3Rpb24oKSB7fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tGaXJlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjb2RlLmxlbmd0aCA+IDMpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQ29udHJhY3QgY29kZSBkZXBsb3llZCEnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cmFjdC5hZGRyZXNzID0gcmVjZWlwdC5jb250cmFjdEFkZHJlc3M7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXR0YWNoIGV2ZW50cyBhbmQgbWV0aG9kcyBhZ2FpbiBhZnRlciB3ZSBoYXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEZ1bmN0aW9uc1RvQ29udHJhY3QoY29udHJhY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRFdmVudHNUb0NvbnRyYWN0KGNvbnRyYWN0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGNhbGxiYWNrIGZvciB0aGUgc2Vjb25kIHRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBjb250cmFjdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignVGhlIGNvbnRyYWN0IGNvZGUgY291bGRuXFwndCBiZSBzdG9yZWQsIHBsZWFzZSBjaGVjayB5b3VyIGdhcyBhbW91bnQuJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjb250cmFjdCBjb2RlIGNvdWxkblxcJ3QgYmUgc3RvcmVkLCBwbGVhc2UgY2hlY2sgeW91ciBnYXMgYW1vdW50LicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBjcmVhdGUgbmV3IENvbnRyYWN0RmFjdG9yeSBpbnN0YW5jZVxuICpcbiAqIEBtZXRob2QgQ29udHJhY3RGYWN0b3J5XG4gKiBAcGFyYW0ge0FycmF5fSBhYmlcbiAqL1xudmFyIENvbnRyYWN0RmFjdG9yeSA9IGZ1bmN0aW9uIChldGgsIGFiaSkge1xuICAgIHRoaXMuZXRoID0gZXRoO1xuICAgIHRoaXMuYWJpID0gYWJpO1xuXG4gICAgLyoqXG4gICAgICogU2hvdWxkIGJlIGNhbGxlZCB0byBjcmVhdGUgbmV3IGNvbnRyYWN0IG9uIGEgYmxvY2tjaGFpblxuICAgICAqXG4gICAgICogQG1ldGhvZCBuZXdcbiAgICAgKiBAcGFyYW0ge0FueX0gY29udHJhY3QgY29uc3RydWN0b3IgcGFyYW0xIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0ge0FueX0gY29udHJhY3QgY29uc3RydWN0b3IgcGFyYW0yIChvcHRpb25hbClcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udHJhY3QgdHJhbnNhY3Rpb24gb2JqZWN0IChyZXF1aXJlZClcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqIEByZXR1cm5zIHtDb250cmFjdH0gcmV0dXJucyBjb250cmFjdCBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRoaXMubmV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvKmpzaGludCBtYXhjb21wbGV4aXR5OiA3ICovXG4gICAgICAgIFxuICAgICAgICB2YXIgY29udHJhY3QgPSBuZXcgQ29udHJhY3QodGhpcy5ldGgsIHRoaXMuYWJpKTtcblxuICAgICAgICAvLyBwYXJzZSBhcmd1bWVudHNcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTsgLy8gcmVxdWlyZWQhXG4gICAgICAgIHZhciBjYWxsYmFjaztcblxuICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKGFyZ3NbYXJncy5sZW5ndGggLSAxXSkpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gYXJncy5wb3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsYXN0ID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAodXRpbHMuaXNPYmplY3QobGFzdCkgJiYgIXV0aWxzLmlzQXJyYXkobGFzdCkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBhcmdzLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudmFsdWUgPiAwKSB7XG4gICAgICAgICAgICB2YXIgY29uc3RydWN0b3JBYmkgPSBhYmkuZmlsdGVyKGZ1bmN0aW9uIChqc29uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGpzb24udHlwZSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiBqc29uLmlucHV0cy5sZW5ndGggPT09IGFyZ3MubGVuZ3RoO1xuICAgICAgICAgICAgfSlbMF0gfHwge307XG5cbiAgICAgICAgICAgIGlmICghY29uc3RydWN0b3JBYmkucGF5YWJsZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNlbmQgdmFsdWUgdG8gbm9uLXBheWFibGUgY29uc3RydWN0b3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBieXRlcyA9IGVuY29kZUNvbnN0cnVjdG9yUGFyYW1zKHRoaXMuYWJpLCBhcmdzKTtcbiAgICAgICAgb3B0aW9ucy5kYXRhICs9IGJ5dGVzO1xuXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuXG4gICAgICAgICAgICAvLyB3YWl0IGZvciB0aGUgY29udHJhY3QgYWRkcmVzcyBhZG4gY2hlY2sgaWYgdGhlIGNvZGUgd2FzIGRlcGxveWVkXG4gICAgICAgICAgICB0aGlzLmV0aC5zZW5kVHJhbnNhY3Rpb24ob3B0aW9ucywgZnVuY3Rpb24gKGVyciwgaGFzaCkge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgdGhlIHRyYW5zYWN0aW9uIGhhc2hcbiAgICAgICAgICAgICAgICAgICAgY29udHJhY3QudHJhbnNhY3Rpb25IYXNoID0gaGFzaDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIGNhbGxiYWNrIGZvciB0aGUgZmlyc3QgdGltZVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBjb250cmFjdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2hlY2tGb3JDb250cmFjdEFkZHJlc3MoY29udHJhY3QsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBoYXNoID0gdGhpcy5ldGguc2VuZFRyYW5zYWN0aW9uKG9wdGlvbnMpO1xuICAgICAgICAgICAgLy8gYWRkIHRoZSB0cmFuc2FjdGlvbiBoYXNoXG4gICAgICAgICAgICBjb250cmFjdC50cmFuc2FjdGlvbkhhc2ggPSBoYXNoO1xuICAgICAgICAgICAgY2hlY2tGb3JDb250cmFjdEFkZHJlc3MoY29udHJhY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRyYWN0O1xuICAgIH07XG5cbiAgICB0aGlzLm5ldy5nZXREYXRhID0gdGhpcy5nZXREYXRhLmJpbmQodGhpcyk7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gY3JlYXRlIG5ldyBDb250cmFjdEZhY3RvcnlcbiAqXG4gKiBAbWV0aG9kIGNvbnRyYWN0XG4gKiBAcGFyYW0ge0FycmF5fSBhYmlcbiAqIEByZXR1cm5zIHtDb250cmFjdEZhY3Rvcnl9IG5ldyBjb250cmFjdCBmYWN0b3J5XG4gKi9cbi8vdmFyIGNvbnRyYWN0ID0gZnVuY3Rpb24gKGFiaSkge1xuICAgIC8vcmV0dXJuIG5ldyBDb250cmFjdEZhY3RvcnkoYWJpKTtcbi8vfTtcblxuXG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBnZXQgYWNjZXNzIHRvIGV4aXN0aW5nIGNvbnRyYWN0IG9uIGEgYmxvY2tjaGFpblxuICpcbiAqIEBtZXRob2QgYXRcbiAqIEBwYXJhbSB7QWRkcmVzc30gY29udHJhY3QgYWRkcmVzcyAocmVxdWlyZWQpXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB7b3B0aW9uYWwpXG4gKiBAcmV0dXJucyB7Q29udHJhY3R9IHJldHVybnMgY29udHJhY3QgaWYgbm8gY2FsbGJhY2sgd2FzIHBhc3NlZCxcbiAqIG90aGVyd2lzZSBjYWxscyBjYWxsYmFjayBmdW5jdGlvbiAoZXJyLCBjb250cmFjdClcbiAqL1xuQ29udHJhY3RGYWN0b3J5LnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uIChhZGRyZXNzLCBjYWxsYmFjaykge1xuICAgIHZhciBjb250cmFjdCA9IG5ldyBDb250cmFjdCh0aGlzLmV0aCwgdGhpcy5hYmksIGFkZHJlc3MpO1xuXG4gICAgLy8gdGhpcyBmdW5jdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIHByb3RvdHlwZSxcbiAgICAvLyBiZWNhdXNlIHdlIGRvbnQgd2FudCB0byBzcG9pbCB0aGUgaW50ZXJmYWNlXG4gICAgYWRkRnVuY3Rpb25zVG9Db250cmFjdChjb250cmFjdCk7XG4gICAgYWRkRXZlbnRzVG9Db250cmFjdChjb250cmFjdCk7XG5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgY29udHJhY3QpO1xuICAgIH1cbiAgICByZXR1cm4gY29udHJhY3Q7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEsIHdoaWNoIGlzIGRhdGEgdG8gZGVwbG95IHBsdXMgY29uc3RydWN0b3IgcGFyYW1zXG4gKlxuICogQG1ldGhvZCBnZXREYXRhXG4gKi9cbkNvbnRyYWN0RmFjdG9yeS5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHt9OyAvLyByZXF1aXJlZCFcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgICB2YXIgbGFzdCA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICBpZiAodXRpbHMuaXNPYmplY3QobGFzdCkgJiYgIXV0aWxzLmlzQXJyYXkobGFzdCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IGFyZ3MucG9wKCk7XG4gICAgfVxuXG4gICAgdmFyIGJ5dGVzID0gZW5jb2RlQ29uc3RydWN0b3JQYXJhbXModGhpcy5hYmksIGFyZ3MpO1xuICAgIG9wdGlvbnMuZGF0YSArPSBieXRlcztcblxuICAgIHJldHVybiBvcHRpb25zLmRhdGE7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gY3JlYXRlIG5ldyBjb250cmFjdCBpbnN0YW5jZVxuICpcbiAqIEBtZXRob2QgQ29udHJhY3RcbiAqIEBwYXJhbSB7QXJyYXl9IGFiaVxuICogQHBhcmFtIHtBZGRyZXNzfSBjb250cmFjdCBhZGRyZXNzXG4gKi9cbnZhciBDb250cmFjdCA9IGZ1bmN0aW9uIChldGgsIGFiaSwgYWRkcmVzcykge1xuICAgIHRoaXMuX2V0aCA9IGV0aDtcbiAgICB0aGlzLnRyYW5zYWN0aW9uSGFzaCA9IG51bGw7XG4gICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICB0aGlzLmFiaSA9IGFiaTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udHJhY3RGYWN0b3J5O1xuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKiBcbiAqIEBmaWxlIGVycm9ycy5qc1xuICogQGF1dGhvciBNYXJlayBLb3Rld2ljeiA8bWFyZWtAZXRoZGV2LmNvbT5cbiAqIEBkYXRlIDIwMTVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBJbnZhbGlkTnVtYmVyT2ZTb2xpZGl0eUFyZ3M6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzIHRvIFNvbGlkaXR5IGZ1bmN0aW9uJyk7XG4gICAgfSxcbiAgICBJbnZhbGlkTnVtYmVyT2ZSUENQYXJhbXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCBudW1iZXIgb2YgaW5wdXQgcGFyYW1ldGVycyB0byBSUEMgbWV0aG9kJyk7XG4gICAgfSxcbiAgICBJbnZhbGlkQ29ubmVjdGlvbjogZnVuY3Rpb24gKGhvc3Qpe1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdDT05ORUNUSU9OIEVSUk9SOiBDb3VsZG5cXCd0IGNvbm5lY3QgdG8gbm9kZSAnKyBob3N0ICsnLicpO1xuICAgIH0sXG4gICAgSW52YWxpZFByb3ZpZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1Byb3ZpZGVyIG5vdCBzZXQgb3IgaW52YWxpZCcpO1xuICAgIH0sXG4gICAgSW52YWxpZFJlc3BvbnNlOiBmdW5jdGlvbiAocmVzdWx0KXtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSAhIXJlc3VsdCAmJiAhIXJlc3VsdC5lcnJvciAmJiAhIXJlc3VsdC5lcnJvci5tZXNzYWdlID8gcmVzdWx0LmVycm9yLm1lc3NhZ2UgOiAnSW52YWxpZCBKU09OIFJQQyByZXNwb25zZTogJyArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCk7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSxcbiAgICBDb25uZWN0aW9uVGltZW91dDogZnVuY3Rpb24gKG1zKXtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignQ09OTkVDVElPTiBUSU1FT1VUOiB0aW1lb3V0IG9mICcgKyBtcyArICcgbXMgYWNoaXZlZCcpO1xuICAgIH1cbn07XG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqXG4gKiBAZmlsZSBldmVudC5qc1xuICogQGF1dGhvciBNYXJlayBLb3Rld2ljeiA8bWFyZWtAZXRoZGV2LmNvbT5cbiAqIEBkYXRlIDIwMTRcbiAqL1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpO1xudmFyIGNvZGVyID0gcmVxdWlyZSgnLi4vc29saWRpdHkvY29kZXInKTtcbnZhciBmb3JtYXR0ZXJzID0gcmVxdWlyZSgnLi9mb3JtYXR0ZXJzJyk7XG52YXIgc2hhMyA9IHJlcXVpcmUoJy4uL3V0aWxzL3NoYTMnKTtcbnZhciBGaWx0ZXIgPSByZXF1aXJlKCcuL2ZpbHRlcicpO1xudmFyIHdhdGNoZXMgPSByZXF1aXJlKCcuL21ldGhvZHMvd2F0Y2hlcycpO1xuXG4vKipcbiAqIFRoaXMgcHJvdG90eXBlIHNob3VsZCBiZSB1c2VkIHRvIGNyZWF0ZSBldmVudCBmaWx0ZXJzXG4gKi9cbnZhciBTb2xpZGl0eUV2ZW50ID0gZnVuY3Rpb24gKHJlcXVlc3RNYW5hZ2VyLCBqc29uLCBhZGRyZXNzKSB7XG4gICAgdGhpcy5fcmVxdWVzdE1hbmFnZXIgPSByZXF1ZXN0TWFuYWdlcjtcbiAgICB0aGlzLl9wYXJhbXMgPSBqc29uLmlucHV0cztcbiAgICB0aGlzLl9uYW1lID0gdXRpbHMudHJhbnNmb3JtVG9GdWxsTmFtZShqc29uKTtcbiAgICB0aGlzLl9hZGRyZXNzID0gYWRkcmVzcztcbiAgICB0aGlzLl9hbm9ueW1vdXMgPSBqc29uLmFub255bW91cztcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZ2V0IGZpbHRlcmVkIHBhcmFtIHR5cGVzXG4gKlxuICogQG1ldGhvZCB0eXBlc1xuICogQHBhcmFtIHtCb29sfSBkZWNpZGUgaWYgcmV0dXJuZWQgdHlwZWQgc2hvdWxkIGJlIGluZGV4ZWRcbiAqIEByZXR1cm4ge0FycmF5fSBhcnJheSBvZiB0eXBlc1xuICovXG5Tb2xpZGl0eUV2ZW50LnByb3RvdHlwZS50eXBlcyA9IGZ1bmN0aW9uIChpbmRleGVkKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmFtcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuIGkuaW5kZXhlZCA9PT0gaW5kZXhlZDtcbiAgICB9KS5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuIGkudHlwZTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZ2V0IGV2ZW50IGRpc3BsYXkgbmFtZVxuICpcbiAqIEBtZXRob2QgZGlzcGxheU5hbWVcbiAqIEByZXR1cm4ge1N0cmluZ30gZXZlbnQgZGlzcGxheSBuYW1lXG4gKi9cblNvbGlkaXR5RXZlbnQucHJvdG90eXBlLmRpc3BsYXlOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1dGlscy5leHRyYWN0RGlzcGxheU5hbWUodGhpcy5fbmFtZSk7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIGdldCBldmVudCB0eXBlIG5hbWVcbiAqXG4gKiBAbWV0aG9kIHR5cGVOYW1lXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGV2ZW50IHR5cGUgbmFtZVxuICovXG5Tb2xpZGl0eUV2ZW50LnByb3RvdHlwZS50eXBlTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXRpbHMuZXh0cmFjdFR5cGVOYW1lKHRoaXMuX25hbWUpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBnZXQgZXZlbnQgc2lnbmF0dXJlXG4gKlxuICogQG1ldGhvZCBzaWduYXR1cmVcbiAqIEByZXR1cm4ge1N0cmluZ30gZXZlbnQgc2lnbmF0dXJlXG4gKi9cblNvbGlkaXR5RXZlbnQucHJvdG90eXBlLnNpZ25hdHVyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc2hhMyh0aGlzLl9uYW1lKTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZW5jb2RlIGluZGV4ZWQgcGFyYW1zIGFuZCBvcHRpb25zIHRvIG9uZSBmaW5hbCBvYmplY3RcbiAqXG4gKiBAbWV0aG9kIGVuY29kZVxuICogQHBhcmFtIHtPYmplY3R9IGluZGV4ZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IGV2ZXJ5dGhpbmcgY29tYmluZWQgdG9nZXRoZXIgYW5kIGVuY29kZWRcbiAqL1xuU29saWRpdHlFdmVudC5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKGluZGV4ZWQsIG9wdGlvbnMpIHtcbiAgICBpbmRleGVkID0gaW5kZXhlZCB8fCB7fTtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICBbJ2Zyb21CbG9jaycsICd0b0Jsb2NrJ10uZmlsdGVyKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zW2ZdICE9PSB1bmRlZmluZWQ7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICByZXN1bHRbZl0gPSBmb3JtYXR0ZXJzLmlucHV0QmxvY2tOdW1iZXJGb3JtYXR0ZXIob3B0aW9uc1tmXSk7XG4gICAgfSk7XG5cbiAgICByZXN1bHQudG9waWNzID0gW107XG5cbiAgICByZXN1bHQuYWRkcmVzcyA9IHRoaXMuX2FkZHJlc3M7XG4gICAgaWYgKCF0aGlzLl9hbm9ueW1vdXMpIHtcbiAgICAgICAgcmVzdWx0LnRvcGljcy5wdXNoKCcweCcgKyB0aGlzLnNpZ25hdHVyZSgpKTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXhlZFRvcGljcyA9IHRoaXMuX3BhcmFtcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuIGkuaW5kZXhlZCA9PT0gdHJ1ZTtcbiAgICB9KS5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXhlZFtpLm5hbWVdO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJzB4JyArIGNvZGVyLmVuY29kZVBhcmFtKGkudHlwZSwgdik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJzB4JyArIGNvZGVyLmVuY29kZVBhcmFtKGkudHlwZSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgcmVzdWx0LnRvcGljcyA9IHJlc3VsdC50b3BpY3MuY29uY2F0KGluZGV4ZWRUb3BpY3MpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZGVjb2RlIGluZGV4ZWQgcGFyYW1zIGFuZCBvcHRpb25zXG4gKlxuICogQG1ldGhvZCBkZWNvZGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlc3VsdCBvYmplY3Qgd2l0aCBkZWNvZGVkIGluZGV4ZWQgJiYgbm90IGluZGV4ZWQgcGFyYW1zXG4gKi9cblNvbGlkaXR5RXZlbnQucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG5cbiAgICBkYXRhLmRhdGEgPSBkYXRhLmRhdGEgfHwgJyc7XG4gICAgZGF0YS50b3BpY3MgPSBkYXRhLnRvcGljcyB8fCBbXTtcblxuICAgIHZhciBhcmdUb3BpY3MgPSB0aGlzLl9hbm9ueW1vdXMgPyBkYXRhLnRvcGljcyA6IGRhdGEudG9waWNzLnNsaWNlKDEpO1xuICAgIHZhciBpbmRleGVkRGF0YSA9IGFyZ1RvcGljcy5tYXAoZnVuY3Rpb24gKHRvcGljcykgeyByZXR1cm4gdG9waWNzLnNsaWNlKDIpOyB9KS5qb2luKFwiXCIpO1xuICAgIHZhciBpbmRleGVkUGFyYW1zID0gY29kZXIuZGVjb2RlUGFyYW1zKHRoaXMudHlwZXModHJ1ZSksIGluZGV4ZWREYXRhKTtcblxuICAgIHZhciBub3RJbmRleGVkRGF0YSA9IGRhdGEuZGF0YS5zbGljZSgyKTtcbiAgICB2YXIgbm90SW5kZXhlZFBhcmFtcyA9IGNvZGVyLmRlY29kZVBhcmFtcyh0aGlzLnR5cGVzKGZhbHNlKSwgbm90SW5kZXhlZERhdGEpO1xuXG4gICAgdmFyIHJlc3VsdCA9IGZvcm1hdHRlcnMub3V0cHV0TG9nRm9ybWF0dGVyKGRhdGEpO1xuICAgIHJlc3VsdC5ldmVudCA9IHRoaXMuZGlzcGxheU5hbWUoKTtcbiAgICByZXN1bHQuYWRkcmVzcyA9IGRhdGEuYWRkcmVzcztcblxuICAgIHJlc3VsdC5hcmdzID0gdGhpcy5fcGFyYW1zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXJyZW50KSB7XG4gICAgICAgIGFjY1tjdXJyZW50Lm5hbWVdID0gY3VycmVudC5pbmRleGVkID8gaW5kZXhlZFBhcmFtcy5zaGlmdCgpIDogbm90SW5kZXhlZFBhcmFtcy5zaGlmdCgpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcblxuICAgIGRlbGV0ZSByZXN1bHQuZGF0YTtcbiAgICBkZWxldGUgcmVzdWx0LnRvcGljcztcblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIGNyZWF0ZSBuZXcgZmlsdGVyIG9iamVjdCBmcm9tIGV2ZW50XG4gKlxuICogQG1ldGhvZCBleGVjdXRlXG4gKiBAcGFyYW0ge09iamVjdH0gaW5kZXhlZFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH0gZmlsdGVyIG9iamVjdFxuICovXG5Tb2xpZGl0eUV2ZW50LnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKGluZGV4ZWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cbiAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICBjYWxsYmFjayA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpXG4gICAgICAgICAgICBvcHRpb25zID0gbnVsbDtcbiAgICAgICAgaWYoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IG51bGw7XG4gICAgICAgICAgICBpbmRleGVkID0ge307XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbyA9IHRoaXMuZW5jb2RlKGluZGV4ZWQsIG9wdGlvbnMpO1xuICAgIHZhciBmb3JtYXR0ZXIgPSB0aGlzLmRlY29kZS5iaW5kKHRoaXMpO1xuICAgIHJldHVybiBuZXcgRmlsdGVyKG8sICdldGgnLCB0aGlzLl9yZXF1ZXN0TWFuYWdlciwgd2F0Y2hlcy5ldGgoKSwgZm9ybWF0dGVyLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIGF0dGFjaCBldmVudCB0byBjb250cmFjdCBvYmplY3RcbiAqXG4gKiBAbWV0aG9kIGF0dGFjaFRvQ29udHJhY3RcbiAqIEBwYXJhbSB7Q29udHJhY3R9XG4gKi9cblNvbGlkaXR5RXZlbnQucHJvdG90eXBlLmF0dGFjaFRvQ29udHJhY3QgPSBmdW5jdGlvbiAoY29udHJhY3QpIHtcbiAgICB2YXIgZXhlY3V0ZSA9IHRoaXMuZXhlY3V0ZS5iaW5kKHRoaXMpO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IHRoaXMuZGlzcGxheU5hbWUoKTtcbiAgICBpZiAoIWNvbnRyYWN0W2Rpc3BsYXlOYW1lXSkge1xuICAgICAgICBjb250cmFjdFtkaXNwbGF5TmFtZV0gPSBleGVjdXRlO1xuICAgIH1cbiAgICBjb250cmFjdFtkaXNwbGF5TmFtZV1bdGhpcy50eXBlTmFtZSgpXSA9IHRoaXMuZXhlY3V0ZS5iaW5kKHRoaXMsIGNvbnRyYWN0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU29saWRpdHlFdmVudDtcblxuIiwidmFyIGZvcm1hdHRlcnMgPSByZXF1aXJlKCcuL2Zvcm1hdHRlcnMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMvdXRpbHMnKTtcbnZhciBNZXRob2QgPSByZXF1aXJlKCcuL21ldGhvZCcpO1xudmFyIFByb3BlcnR5ID0gcmVxdWlyZSgnLi9wcm9wZXJ0eScpO1xuXG4vLyBUT0RPOiByZWZhY3Rvciwgc28gdGhlIGlucHV0IHBhcmFtcyBhcmUgbm90IGFsdGVyZWQuXG4vLyBpdCdzIG5lY2Vzc2FyeSB0byBtYWtlIHNhbWUgJ2V4dGVuc2lvbicgd29yayB3aXRoIG11bHRpcGxlIHByb3ZpZGVyc1xudmFyIGV4dGVuZCA9IGZ1bmN0aW9uICh3ZWIzKSB7XG4gICAgLyoganNoaW50IG1heGNvbXBsZXhpdHk6NSAqL1xuICAgIHZhciBleCA9IGZ1bmN0aW9uIChleHRlbnNpb24pIHtcblxuICAgICAgICB2YXIgZXh0ZW5kZWRPYmplY3Q7XG4gICAgICAgIGlmIChleHRlbnNpb24ucHJvcGVydHkpIHtcbiAgICAgICAgICAgIGlmICghd2ViM1tleHRlbnNpb24ucHJvcGVydHldKSB7XG4gICAgICAgICAgICAgICAgd2ViM1tleHRlbnNpb24ucHJvcGVydHldID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHRlbmRlZE9iamVjdCA9IHdlYjNbZXh0ZW5zaW9uLnByb3BlcnR5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV4dGVuZGVkT2JqZWN0ID0gd2ViMztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChleHRlbnNpb24ubWV0aG9kcykge1xuICAgICAgICAgICAgZXh0ZW5zaW9uLm1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kLmF0dGFjaFRvT2JqZWN0KGV4dGVuZGVkT2JqZWN0KTtcbiAgICAgICAgICAgICAgICBtZXRob2Quc2V0UmVxdWVzdE1hbmFnZXIod2ViMy5fcmVxdWVzdE1hbmFnZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXh0ZW5zaW9uLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIGV4dGVuc2lvbi5wcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydHkuYXR0YWNoVG9PYmplY3QoZXh0ZW5kZWRPYmplY3QpO1xuICAgICAgICAgICAgICAgIHByb3BlcnR5LnNldFJlcXVlc3RNYW5hZ2VyKHdlYjMuX3JlcXVlc3RNYW5hZ2VyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGV4LmZvcm1hdHRlcnMgPSBmb3JtYXR0ZXJzOyBcbiAgICBleC51dGlscyA9IHV0aWxzO1xuICAgIGV4Lk1ldGhvZCA9IE1ldGhvZDtcbiAgICBleC5Qcm9wZXJ0eSA9IFByb3BlcnR5O1xuXG4gICAgcmV0dXJuIGV4O1xufTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXh0ZW5kO1xuXG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqIEBmaWxlIGZpbHRlci5qc1xuICogQGF1dGhvcnM6XG4gKiAgIEplZmZyZXkgV2lsY2tlIDxqZWZmQGV0aGRldi5jb20+XG4gKiAgIE1hcmVrIEtvdGV3aWN6IDxtYXJla0BldGhkZXYuY29tPlxuICogICBNYXJpYW4gT2FuY2VhIDxtYXJpYW5AZXRoZGV2LmNvbT5cbiAqICAgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGRldi5jb20+XG4gKiAgIEdhdiBXb29kIDxnQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE0XG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSByZXF1aXJlKCcuL2Zvcm1hdHRlcnMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7XG5cbi8qKlxuKiBDb252ZXJ0cyBhIGdpdmVuIHRvcGljIHRvIGEgaGV4IHN0cmluZywgYnV0IGFsc28gYWxsb3dzIG51bGwgdmFsdWVzLlxuKlxuKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuKiBAcmV0dXJuIHtTdHJpbmd9XG4qL1xudmFyIHRvVG9waWMgPSBmdW5jdGlvbih2YWx1ZSl7XG5cbiAgICBpZih2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcblxuICAgIGlmKHZhbHVlLmluZGV4T2YoJzB4JykgPT09IDApXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiB1dGlscy5mcm9tVXRmOCh2YWx1ZSk7XG59O1xuXG4vLy8gVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBvbiBvcHRpb25zIG9iamVjdCwgdG8gdmVyaWZ5IGRlcHJlY2F0ZWQgcHJvcGVydGllcyAmJiBsYXp5IGxvYWQgZHluYW1pYyBvbmVzXG4vLy8gQHBhcmFtIHNob3VsZCBiZSBzdHJpbmcgb3Igb2JqZWN0XG4vLy8gQHJldHVybnMgb3B0aW9ucyBzdHJpbmcgb3Igb2JqZWN0XG52YXIgZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zLCB0eXBlKSB7XG4gICAgLypqc2hpbnQgbWF4Y29tcGxleGl0eTogNiAqL1xuXG4gICAgaWYgKHV0aWxzLmlzU3RyaW5nKG9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cbiAgICBzd2l0Y2godHlwZSkge1xuICAgICAgICBjYXNlICdldGgnOlxuXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgdG9waWNzLCBnZXQgY29udmVydGVkIHRvIGhleFxuICAgICAgICAgICAgb3B0aW9ucy50b3BpY3MgPSBvcHRpb25zLnRvcGljcyB8fCBbXTtcbiAgICAgICAgICAgIG9wdGlvbnMudG9waWNzID0gb3B0aW9ucy50b3BpY3MubWFwKGZ1bmN0aW9uKHRvcGljKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHV0aWxzLmlzQXJyYXkodG9waWMpKSA/IHRvcGljLm1hcCh0b1RvcGljKSA6IHRvVG9waWModG9waWMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdG9waWNzOiBvcHRpb25zLnRvcGljcyxcbiAgICAgICAgICAgICAgICBmcm9tOiBvcHRpb25zLmZyb20sXG4gICAgICAgICAgICAgICAgdG86IG9wdGlvbnMudG8sXG4gICAgICAgICAgICAgICAgYWRkcmVzczogb3B0aW9ucy5hZGRyZXNzLFxuICAgICAgICAgICAgICAgIGZyb21CbG9jazogZm9ybWF0dGVycy5pbnB1dEJsb2NrTnVtYmVyRm9ybWF0dGVyKG9wdGlvbnMuZnJvbUJsb2NrKSxcbiAgICAgICAgICAgICAgICB0b0Jsb2NrOiBmb3JtYXR0ZXJzLmlucHV0QmxvY2tOdW1iZXJGb3JtYXR0ZXIob3B0aW9ucy50b0Jsb2NrKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgY2FzZSAnc2hoJzpcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cbn07XG5cbi8qKlxuQWRkcyB0aGUgY2FsbGJhY2sgYW5kIHNldHMgdXAgdGhlIG1ldGhvZHMsIHRvIGl0ZXJhdGUgb3ZlciB0aGUgcmVzdWx0cy5cblxuQG1ldGhvZCBnZXRMb2dzQXRTdGFydFxuQHBhcmFtIHtPYmplY3R9IHNlbGZcbkBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4qL1xudmFyIGdldExvZ3NBdFN0YXJ0ID0gZnVuY3Rpb24oc2VsZiwgY2FsbGJhY2spe1xuICAgIC8vIGNhbGwgZ2V0RmlsdGVyTG9ncyBmb3IgdGhlIGZpcnN0IHdhdGNoIGNhbGxiYWNrIHN0YXJ0XG4gICAgaWYgKCF1dGlscy5pc1N0cmluZyhzZWxmLm9wdGlvbnMpKSB7XG4gICAgICAgIHNlbGYuZ2V0KGZ1bmN0aW9uIChlcnIsIG1lc3NhZ2VzKSB7XG4gICAgICAgICAgICAvLyBkb24ndCBzZW5kIGFsbCB0aGUgcmVzcG9uc2VzIHRvIGFsbCB0aGUgd2F0Y2hlcyBhZ2Fpbi4uLiBqdXN0IHRvIHNlbGYgb25lXG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYodXRpbHMuaXNBcnJheShtZXNzYWdlcykpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG4vKipcbkFkZHMgdGhlIGNhbGxiYWNrIGFuZCBzZXRzIHVwIHRoZSBtZXRob2RzLCB0byBpdGVyYXRlIG92ZXIgdGhlIHJlc3VsdHMuXG5cbkBtZXRob2QgcG9sbEZpbHRlclxuQHBhcmFtIHtPYmplY3R9IHNlbGZcbiovXG52YXIgcG9sbEZpbHRlciA9IGZ1bmN0aW9uKHNlbGYpIHtcblxuICAgIHZhciBvbk1lc3NhZ2UgPSBmdW5jdGlvbiAoZXJyb3IsIG1lc3NhZ2VzKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZih1dGlscy5pc0FycmF5KG1lc3NhZ2VzKSkge1xuICAgICAgICAgICAgbWVzc2FnZXMuZm9yRWFjaChmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBzZWxmLmZvcm1hdHRlciA/IHNlbGYuZm9ybWF0dGVyKG1lc3NhZ2UpIDogbWVzc2FnZTtcbiAgICAgICAgICAgICAgICBzZWxmLmNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHNlbGYucmVxdWVzdE1hbmFnZXIuc3RhcnRQb2xsaW5nKHtcbiAgICAgICAgbWV0aG9kOiBzZWxmLmltcGxlbWVudGF0aW9uLnBvbGwuY2FsbCxcbiAgICAgICAgcGFyYW1zOiBbc2VsZi5maWx0ZXJJZF0sXG4gICAgfSwgc2VsZi5maWx0ZXJJZCwgb25NZXNzYWdlLCBzZWxmLnN0b3BXYXRjaGluZy5iaW5kKHNlbGYpKTtcblxufTtcblxudmFyIEZpbHRlciA9IGZ1bmN0aW9uIChvcHRpb25zLCB0eXBlLCByZXF1ZXN0TWFuYWdlciwgbWV0aG9kcywgZm9ybWF0dGVyLCBjYWxsYmFjaywgZmlsdGVyQ3JlYXRpb25FcnJvckNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBpbXBsZW1lbnRhdGlvbiA9IHt9O1xuICAgIG1ldGhvZHMuZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICAgIG1ldGhvZC5zZXRSZXF1ZXN0TWFuYWdlcihyZXF1ZXN0TWFuYWdlcik7XG4gICAgICAgIG1ldGhvZC5hdHRhY2hUb09iamVjdChpbXBsZW1lbnRhdGlvbik7XG4gICAgfSk7XG4gICAgdGhpcy5yZXF1ZXN0TWFuYWdlciA9IHJlcXVlc3RNYW5hZ2VyO1xuICAgIHRoaXMub3B0aW9ucyA9IGdldE9wdGlvbnMob3B0aW9ucywgdHlwZSk7XG4gICAgdGhpcy5pbXBsZW1lbnRhdGlvbiA9IGltcGxlbWVudGF0aW9uO1xuICAgIHRoaXMuZmlsdGVySWQgPSBudWxsO1xuICAgIHRoaXMuY2FsbGJhY2tzID0gW107XG4gICAgdGhpcy5nZXRMb2dzQ2FsbGJhY2tzID0gW107XG4gICAgdGhpcy5wb2xsRmlsdGVycyA9IFtdO1xuICAgIHRoaXMuZm9ybWF0dGVyID0gZm9ybWF0dGVyO1xuICAgIHRoaXMuaW1wbGVtZW50YXRpb24ubmV3RmlsdGVyKHRoaXMub3B0aW9ucywgZnVuY3Rpb24oZXJyb3IsIGlkKXtcbiAgICAgICAgaWYoZXJyb3IpIHtcbiAgICAgICAgICAgIHNlbGYuY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24oY2Ipe1xuICAgICAgICAgICAgICAgIGNiKGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXJDcmVhdGlvbkVycm9yQ2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgZmlsdGVyQ3JlYXRpb25FcnJvckNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYuZmlsdGVySWQgPSBpZDtcblxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGdldCBwZW5kaW5nIGNhbGxiYWNrcyBhcyBhIGNvbnNlcXVlbmNlXG4gICAgICAgICAgICAvLyBvZiBjYWxsaW5nIGdldCgpIHdpdGggZmlsdGVySWQgdW5hc3NpZ25lZC5cbiAgICAgICAgICAgIHNlbGYuZ2V0TG9nc0NhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYil7XG4gICAgICAgICAgICAgICAgc2VsZi5nZXQoY2IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWxmLmdldExvZ3NDYWxsYmFja3MgPSBbXTtcblxuICAgICAgICAgICAgLy8gZ2V0IGZpbHRlciBsb2dzIGZvciB0aGUgYWxyZWFkeSBleGlzdGluZyB3YXRjaCBjYWxsc1xuICAgICAgICAgICAgc2VsZi5jYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbihjYil7XG4gICAgICAgICAgICAgICAgZ2V0TG9nc0F0U3RhcnQoc2VsZiwgY2IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZihzZWxmLmNhbGxiYWNrcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgIHBvbGxGaWx0ZXIoc2VsZik7XG5cbiAgICAgICAgICAgIC8vIHN0YXJ0IHRvIHdhdGNoIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBpZih0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi53YXRjaChjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuRmlsdGVyLnByb3RvdHlwZS53YXRjaCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHRoaXMuY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuXG4gICAgaWYodGhpcy5maWx0ZXJJZCkge1xuICAgICAgICBnZXRMb2dzQXRTdGFydCh0aGlzLCBjYWxsYmFjayk7XG4gICAgICAgIHBvbGxGaWx0ZXIodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5GaWx0ZXIucHJvdG90eXBlLnN0b3BXYXRjaGluZyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHRoaXMucmVxdWVzdE1hbmFnZXIuc3RvcFBvbGxpbmcodGhpcy5maWx0ZXJJZCk7XG4gICAgdGhpcy5jYWxsYmFja3MgPSBbXTtcbiAgICAvLyByZW1vdmUgZmlsdGVyIGFzeW5jXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuaW1wbGVtZW50YXRpb24udW5pbnN0YWxsRmlsdGVyKHRoaXMuZmlsdGVySWQsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5pbXBsZW1lbnRhdGlvbi51bmluc3RhbGxGaWx0ZXIodGhpcy5maWx0ZXJJZCk7XG4gICAgfVxufTtcblxuRmlsdGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgIGlmICh0aGlzLmZpbHRlcklkID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJZiBmaWx0ZXJJZCBpcyBub3Qgc2V0IHlldCwgY2FsbCBpdCBiYWNrXG4gICAgICAgICAgICAvLyB3aGVuIG5ld0ZpbHRlcigpIGFzc2lnbnMgaXQuXG4gICAgICAgICAgICB0aGlzLmdldExvZ3NDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmltcGxlbWVudGF0aW9uLmdldExvZ3ModGhpcy5maWx0ZXJJZCwgZnVuY3Rpb24oZXJyLCByZXMpe1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXMubWFwKGZ1bmN0aW9uIChsb2cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmZvcm1hdHRlciA/IHNlbGYuZm9ybWF0dGVyKGxvZykgOiBsb2c7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmZpbHRlcklkID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpbHRlciBJRCBFcnJvcjogZmlsdGVyKCkuZ2V0KCkgY2FuXFwndCBiZSBjaGFpbmVkIHN5bmNocm9ub3VzLCBwbGVhc2UgcHJvdmlkZSBhIGNhbGxiYWNrIGZvciB0aGUgZ2V0KCkgbWV0aG9kLicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsb2dzID0gdGhpcy5pbXBsZW1lbnRhdGlvbi5nZXRMb2dzKHRoaXMuZmlsdGVySWQpO1xuICAgICAgICByZXR1cm4gbG9ncy5tYXAoZnVuY3Rpb24gKGxvZykge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuZm9ybWF0dGVyID8gc2VsZi5mb3JtYXR0ZXIobG9nKSA6IGxvZztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZpbHRlcjtcblxuIiwiJ3VzZSBzdHJpY3QnXG5cbi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKipcbiAqIEBmaWxlIGZvcm1hdHRlcnMuanNcbiAqIEBhdXRob3IgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiBAYXV0aG9yIEZhYmlhbiBWb2dlbHN0ZWxsZXIgPGZhYmlhbkBldGhkZXYuY29tPlxuICogQGRhdGUgMjAxNVxuICovXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7XG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi4vdXRpbHMvY29uZmlnJyk7XG52YXIgSWJhbiA9IHJlcXVpcmUoJy4vaWJhbicpO1xuXG4vKipcbiAqIFNob3VsZCB0aGUgZm9ybWF0IG91dHB1dCB0byBhIGJpZyBudW1iZXJcbiAqXG4gKiBAbWV0aG9kIG91dHB1dEJpZ051bWJlckZvcm1hdHRlclxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfEJpZ051bWJlcn1cbiAqIEByZXR1cm5zIHtCaWdOdW1iZXJ9IG9iamVjdFxuICovXG52YXIgb3V0cHV0QmlnTnVtYmVyRm9ybWF0dGVyID0gZnVuY3Rpb24gKG51bWJlcikge1xuICAgIHJldHVybiB1dGlscy50b0JpZ051bWJlcihudW1iZXIpO1xufTtcblxudmFyIGlzUHJlZGVmaW5lZEJsb2NrTnVtYmVyID0gZnVuY3Rpb24gKGJsb2NrTnVtYmVyKSB7XG4gICAgcmV0dXJuIGJsb2NrTnVtYmVyID09PSAnbGF0ZXN0JyB8fCBibG9ja051bWJlciA9PT0gJ3BlbmRpbmcnIHx8IGJsb2NrTnVtYmVyID09PSAnZWFybGllc3QnO1xufTtcblxudmFyIGlucHV0RGVmYXVsdEJsb2NrTnVtYmVyRm9ybWF0dGVyID0gZnVuY3Rpb24gKGJsb2NrTnVtYmVyKSB7XG4gICAgaWYgKGJsb2NrTnVtYmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5kZWZhdWx0QmxvY2s7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dEJsb2NrTnVtYmVyRm9ybWF0dGVyKGJsb2NrTnVtYmVyKTtcbn07XG5cbnZhciBpbnB1dEJsb2NrTnVtYmVyRm9ybWF0dGVyID0gZnVuY3Rpb24gKGJsb2NrTnVtYmVyKSB7XG4gICAgaWYgKGJsb2NrTnVtYmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKGlzUHJlZGVmaW5lZEJsb2NrTnVtYmVyKGJsb2NrTnVtYmVyKSkge1xuICAgICAgICByZXR1cm4gYmxvY2tOdW1iZXI7XG4gICAgfVxuICAgIHJldHVybiB1dGlscy50b0hleChibG9ja051bWJlcik7XG59O1xuXG4vKipcbiAqIEZvcm1hdHMgdGhlIGlucHV0IG9mIGEgdHJhbnNhY3Rpb24gYW5kIGNvbnZlcnRzIGFsbCB2YWx1ZXMgdG8gSEVYXG4gKlxuICogQG1ldGhvZCBpbnB1dENhbGxGb3JtYXR0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0cmFuc2FjdGlvbiBvcHRpb25zXG4gKiBAcmV0dXJucyBvYmplY3RcbiovXG52YXIgaW5wdXRDYWxsRm9ybWF0dGVyID0gZnVuY3Rpb24gKG9wdGlvbnMpe1xuXG4gICAgb3B0aW9ucy5mcm9tID0gb3B0aW9ucy5mcm9tIHx8IGNvbmZpZy5kZWZhdWx0QWNjb3VudDtcblxuICAgIGlmIChvcHRpb25zLmZyb20pIHtcbiAgICAgICAgb3B0aW9ucy5mcm9tID0gaW5wdXRBZGRyZXNzRm9ybWF0dGVyKG9wdGlvbnMuZnJvbSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudG8pIHsgLy8gaXQgbWlnaHQgYmUgY29udHJhY3QgY3JlYXRpb25cbiAgICAgICAgb3B0aW9ucy50byA9IGlucHV0QWRkcmVzc0Zvcm1hdHRlcihvcHRpb25zLnRvKTtcbiAgICB9XG5cbiAgICBbJ2dhc1ByaWNlJywgJ2dhcycsICd2YWx1ZScsICdub25jZSddLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zW2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIG9wdGlvbnNba2V5XSA9IHV0aWxzLmZyb21EZWNpbWFsKG9wdGlvbnNba2V5XSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbn07XG5cbi8qKlxuICogRm9ybWF0cyB0aGUgaW5wdXQgb2YgYSB0cmFuc2FjdGlvbiBhbmQgY29udmVydHMgYWxsIHZhbHVlcyB0byBIRVhcbiAqXG4gKiBAbWV0aG9kIGlucHV0VHJhbnNhY3Rpb25Gb3JtYXR0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0cmFuc2FjdGlvbiBvcHRpb25zXG4gKiBAcmV0dXJucyBvYmplY3RcbiovXG52YXIgaW5wdXRUcmFuc2FjdGlvbkZvcm1hdHRlciA9IGZ1bmN0aW9uIChvcHRpb25zKXtcblxuICAgIG9wdGlvbnMuZnJvbSA9IG9wdGlvbnMuZnJvbSB8fCBjb25maWcuZGVmYXVsdEFjY291bnQ7XG4gICAgb3B0aW9ucy5mcm9tID0gaW5wdXRBZGRyZXNzRm9ybWF0dGVyKG9wdGlvbnMuZnJvbSk7XG5cbiAgICBpZiAob3B0aW9ucy50bykgeyAvLyBpdCBtaWdodCBiZSBjb250cmFjdCBjcmVhdGlvblxuICAgICAgICBvcHRpb25zLnRvID0gaW5wdXRBZGRyZXNzRm9ybWF0dGVyKG9wdGlvbnMudG8pO1xuICAgIH1cblxuICAgIFsnZ2FzUHJpY2UnLCAnZ2FzJywgJ3ZhbHVlJywgJ25vbmNlJ10uZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnNba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIH0pLmZvckVhY2goZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgb3B0aW9uc1trZXldID0gdXRpbHMuZnJvbURlY2ltYWwob3B0aW9uc1trZXldKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvcHRpb25zO1xufTtcblxuLyoqXG4gKiBGb3JtYXRzIHRoZSBvdXRwdXQgb2YgYSB0cmFuc2FjdGlvbiB0byBpdHMgcHJvcGVyIHZhbHVlc1xuICpcbiAqIEBtZXRob2Qgb3V0cHV0VHJhbnNhY3Rpb25Gb3JtYXR0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eFxuICogQHJldHVybnMge09iamVjdH1cbiovXG52YXIgb3V0cHV0VHJhbnNhY3Rpb25Gb3JtYXR0ZXIgPSBmdW5jdGlvbiAodHgpe1xuICAgIGlmKHR4LmJsb2NrTnVtYmVyICE9PSBudWxsKVxuICAgICAgICB0eC5ibG9ja051bWJlciA9IHV0aWxzLnRvRGVjaW1hbCh0eC5ibG9ja051bWJlcik7XG4gICAgaWYodHgudHJhbnNhY3Rpb25JbmRleCAhPT0gbnVsbClcbiAgICAgICAgdHgudHJhbnNhY3Rpb25JbmRleCA9IHV0aWxzLnRvRGVjaW1hbCh0eC50cmFuc2FjdGlvbkluZGV4KTtcbiAgICB0eC5ub25jZSA9IHV0aWxzLnRvRGVjaW1hbCh0eC5ub25jZSk7XG4gICAgdHguZ2FzID0gdXRpbHMudG9EZWNpbWFsKHR4Lmdhcyk7XG4gICAgdHguZ2FzUHJpY2UgPSB1dGlscy50b0JpZ051bWJlcih0eC5nYXNQcmljZSk7XG4gICAgdHgudmFsdWUgPSB1dGlscy50b0JpZ051bWJlcih0eC52YWx1ZSk7XG4gICAgcmV0dXJuIHR4O1xufTtcblxuLyoqXG4gKiBGb3JtYXRzIHRoZSBvdXRwdXQgb2YgYSB0cmFuc2FjdGlvbiByZWNlaXB0IHRvIGl0cyBwcm9wZXIgdmFsdWVzXG4gKlxuICogQG1ldGhvZCBvdXRwdXRUcmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWNlaXB0XG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuKi9cbnZhciBvdXRwdXRUcmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZXIgPSBmdW5jdGlvbiAocmVjZWlwdCl7XG4gICAgaWYocmVjZWlwdC5ibG9ja051bWJlciAhPT0gbnVsbClcbiAgICAgICAgcmVjZWlwdC5ibG9ja051bWJlciA9IHV0aWxzLnRvRGVjaW1hbChyZWNlaXB0LmJsb2NrTnVtYmVyKTtcbiAgICBpZihyZWNlaXB0LnRyYW5zYWN0aW9uSW5kZXggIT09IG51bGwpXG4gICAgICAgIHJlY2VpcHQudHJhbnNhY3Rpb25JbmRleCA9IHV0aWxzLnRvRGVjaW1hbChyZWNlaXB0LnRyYW5zYWN0aW9uSW5kZXgpO1xuICAgIHJlY2VpcHQuY3VtdWxhdGl2ZUdhc1VzZWQgPSB1dGlscy50b0RlY2ltYWwocmVjZWlwdC5jdW11bGF0aXZlR2FzVXNlZCk7XG4gICAgcmVjZWlwdC5nYXNVc2VkID0gdXRpbHMudG9EZWNpbWFsKHJlY2VpcHQuZ2FzVXNlZCk7XG5cbiAgICBpZih1dGlscy5pc0FycmF5KHJlY2VpcHQubG9ncykpIHtcbiAgICAgICAgcmVjZWlwdC5sb2dzID0gcmVjZWlwdC5sb2dzLm1hcChmdW5jdGlvbihsb2cpe1xuICAgICAgICAgICAgcmV0dXJuIG91dHB1dExvZ0Zvcm1hdHRlcihsb2cpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVjZWlwdDtcbn07XG5cbi8qKlxuICogRm9ybWF0cyB0aGUgb3V0cHV0IG9mIGEgYmxvY2sgdG8gaXRzIHByb3BlciB2YWx1ZXNcbiAqXG4gKiBAbWV0aG9kIG91dHB1dEJsb2NrRm9ybWF0dGVyXG4gKiBAcGFyYW0ge09iamVjdH0gYmxvY2tcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4qL1xudmFyIG91dHB1dEJsb2NrRm9ybWF0dGVyID0gZnVuY3Rpb24oYmxvY2spIHtcblxuICAgIC8vIHRyYW5zZm9ybSB0byBudW1iZXJcbiAgICBibG9jay5nYXNMaW1pdCA9IHV0aWxzLnRvRGVjaW1hbChibG9jay5nYXNMaW1pdCk7XG4gICAgYmxvY2suZ2FzVXNlZCA9IHV0aWxzLnRvRGVjaW1hbChibG9jay5nYXNVc2VkKTtcbiAgICBibG9jay5zaXplID0gdXRpbHMudG9EZWNpbWFsKGJsb2NrLnNpemUpO1xuICAgIGJsb2NrLnRpbWVzdGFtcCA9IHV0aWxzLnRvRGVjaW1hbChibG9jay50aW1lc3RhbXApO1xuICAgIGlmKGJsb2NrLm51bWJlciAhPT0gbnVsbClcbiAgICAgICAgYmxvY2subnVtYmVyID0gdXRpbHMudG9EZWNpbWFsKGJsb2NrLm51bWJlcik7XG5cbiAgICBibG9jay5kaWZmaWN1bHR5ID0gdXRpbHMudG9CaWdOdW1iZXIoYmxvY2suZGlmZmljdWx0eSk7XG4gICAgYmxvY2sudG90YWxEaWZmaWN1bHR5ID0gdXRpbHMudG9CaWdOdW1iZXIoYmxvY2sudG90YWxEaWZmaWN1bHR5KTtcblxuICAgIGlmICh1dGlscy5pc0FycmF5KGJsb2NrLnRyYW5zYWN0aW9ucykpIHtcbiAgICAgICAgYmxvY2sudHJhbnNhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgICAgICBpZighdXRpbHMuaXNTdHJpbmcoaXRlbSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmxvY2s7XG59O1xuXG4vKipcbiAqIEZvcm1hdHMgdGhlIG91dHB1dCBvZiBhIGxvZ1xuICpcbiAqIEBtZXRob2Qgb3V0cHV0TG9nRm9ybWF0dGVyXG4gKiBAcGFyYW0ge09iamVjdH0gbG9nIG9iamVjdFxuICogQHJldHVybnMge09iamVjdH0gbG9nXG4qL1xudmFyIG91dHB1dExvZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uKGxvZykge1xuICAgIGlmKGxvZy5ibG9ja051bWJlcilcbiAgICAgICAgbG9nLmJsb2NrTnVtYmVyID0gdXRpbHMudG9EZWNpbWFsKGxvZy5ibG9ja051bWJlcik7XG4gICAgaWYobG9nLnRyYW5zYWN0aW9uSW5kZXgpXG4gICAgICAgIGxvZy50cmFuc2FjdGlvbkluZGV4ID0gdXRpbHMudG9EZWNpbWFsKGxvZy50cmFuc2FjdGlvbkluZGV4KTtcbiAgICBpZihsb2cubG9nSW5kZXgpXG4gICAgICAgIGxvZy5sb2dJbmRleCA9IHV0aWxzLnRvRGVjaW1hbChsb2cubG9nSW5kZXgpO1xuXG4gICAgcmV0dXJuIGxvZztcbn07XG5cbi8qKlxuICogRm9ybWF0cyB0aGUgaW5wdXQgb2YgYSB3aGlzcGVyIHBvc3QgYW5kIGNvbnZlcnRzIGFsbCB2YWx1ZXMgdG8gSEVYXG4gKlxuICogQG1ldGhvZCBpbnB1dFBvc3RGb3JtYXR0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0cmFuc2FjdGlvbiBvYmplY3RcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4qL1xudmFyIGlucHV0UG9zdEZvcm1hdHRlciA9IGZ1bmN0aW9uKHBvc3QpIHtcblxuICAgIC8vIHBvc3QucGF5bG9hZCA9IHV0aWxzLnRvSGV4KHBvc3QucGF5bG9hZCk7XG4gICAgcG9zdC50dGwgPSB1dGlscy5mcm9tRGVjaW1hbChwb3N0LnR0bCk7XG4gICAgcG9zdC53b3JrVG9Qcm92ZSA9IHV0aWxzLmZyb21EZWNpbWFsKHBvc3Qud29ya1RvUHJvdmUpO1xuICAgIHBvc3QucHJpb3JpdHkgPSB1dGlscy5mcm9tRGVjaW1hbChwb3N0LnByaW9yaXR5KTtcblxuICAgIC8vIGZhbGxiYWNrXG4gICAgaWYgKCF1dGlscy5pc0FycmF5KHBvc3QudG9waWNzKSkge1xuICAgICAgICBwb3N0LnRvcGljcyA9IHBvc3QudG9waWNzID8gW3Bvc3QudG9waWNzXSA6IFtdO1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCB0aGUgZm9sbG93aW5nIG9wdGlvbnNcbiAgICBwb3N0LnRvcGljcyA9IHBvc3QudG9waWNzLm1hcChmdW5jdGlvbih0b3BpYyl7XG4gICAgICAgIC8vIGNvbnZlcnQgb25seSBpZiBub3QgaGV4XG4gICAgICAgIHJldHVybiAodG9waWMuaW5kZXhPZignMHgnKSA9PT0gMCkgPyB0b3BpYyA6IHV0aWxzLmZyb21VdGY4KHRvcGljKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwb3N0O1xufTtcblxuLyoqXG4gKiBGb3JtYXRzIHRoZSBvdXRwdXQgb2YgYSByZWNlaXZlZCBwb3N0IG1lc3NhZ2VcbiAqXG4gKiBAbWV0aG9kIG91dHB1dFBvc3RGb3JtYXR0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xudmFyIG91dHB1dFBvc3RGb3JtYXR0ZXIgPSBmdW5jdGlvbihwb3N0KXtcblxuICAgIHBvc3QuZXhwaXJ5ID0gdXRpbHMudG9EZWNpbWFsKHBvc3QuZXhwaXJ5KTtcbiAgICBwb3N0LnNlbnQgPSB1dGlscy50b0RlY2ltYWwocG9zdC5zZW50KTtcbiAgICBwb3N0LnR0bCA9IHV0aWxzLnRvRGVjaW1hbChwb3N0LnR0bCk7XG4gICAgcG9zdC53b3JrUHJvdmVkID0gdXRpbHMudG9EZWNpbWFsKHBvc3Qud29ya1Byb3ZlZCk7XG4gICAgLy8gcG9zdC5wYXlsb2FkUmF3ID0gcG9zdC5wYXlsb2FkO1xuICAgIC8vIHBvc3QucGF5bG9hZCA9IHV0aWxzLnRvQXNjaWkocG9zdC5wYXlsb2FkKTtcblxuICAgIC8vIGlmICh1dGlscy5pc0pzb24ocG9zdC5wYXlsb2FkKSkge1xuICAgIC8vICAgICBwb3N0LnBheWxvYWQgPSBKU09OLnBhcnNlKHBvc3QucGF5bG9hZCk7XG4gICAgLy8gfVxuXG4gICAgLy8gZm9ybWF0IHRoZSBmb2xsb3dpbmcgb3B0aW9uc1xuICAgIGlmICghcG9zdC50b3BpY3MpIHtcbiAgICAgICAgcG9zdC50b3BpY3MgPSBbXTtcbiAgICB9XG4gICAgcG9zdC50b3BpY3MgPSBwb3N0LnRvcGljcy5tYXAoZnVuY3Rpb24odG9waWMpe1xuICAgICAgICByZXR1cm4gdXRpbHMudG9Bc2NpaSh0b3BpYyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcG9zdDtcbn07XG5cbnZhciBpbnB1dEFkZHJlc3NGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgIHZhciBpYmFuID0gbmV3IEliYW4oYWRkcmVzcyk7XG4gICAgaWYgKGliYW4uaXNWYWxpZCgpICYmIGliYW4uaXNEaXJlY3QoKSkge1xuICAgICAgICByZXR1cm4gJzB4JyArIGliYW4uYWRkcmVzcygpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNTdHJpY3RBZGRyZXNzKGFkZHJlc3MpKSB7XG4gICAgICAgIHJldHVybiBhZGRyZXNzO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBZGRyZXNzKGFkZHJlc3MpKSB7XG4gICAgICAgIHJldHVybiAnMHgnICsgYWRkcmVzcztcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGFkZHJlc3MnKTtcbn07XG5cblxudmFyIG91dHB1dFN5bmNpbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJlc3VsdC5zdGFydGluZ0Jsb2NrID0gdXRpbHMudG9EZWNpbWFsKHJlc3VsdC5zdGFydGluZ0Jsb2NrKTtcbiAgICByZXN1bHQuY3VycmVudEJsb2NrID0gdXRpbHMudG9EZWNpbWFsKHJlc3VsdC5jdXJyZW50QmxvY2spO1xuICAgIHJlc3VsdC5oaWdoZXN0QmxvY2sgPSB1dGlscy50b0RlY2ltYWwocmVzdWx0LmhpZ2hlc3RCbG9jayk7XG4gICAgaWYgKHJlc3VsdC5rbm93blN0YXRlcykge1xuICAgICAgICByZXN1bHQua25vd25TdGF0ZXMgPSB1dGlscy50b0RlY2ltYWwocmVzdWx0Lmtub3duU3RhdGVzKTtcbiAgICAgICAgcmVzdWx0LnB1bGxlZFN0YXRlcyA9IHV0aWxzLnRvRGVjaW1hbChyZXN1bHQucHVsbGVkU3RhdGVzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaW5wdXREZWZhdWx0QmxvY2tOdW1iZXJGb3JtYXR0ZXI6IGlucHV0RGVmYXVsdEJsb2NrTnVtYmVyRm9ybWF0dGVyLFxuICAgIGlucHV0QmxvY2tOdW1iZXJGb3JtYXR0ZXI6IGlucHV0QmxvY2tOdW1iZXJGb3JtYXR0ZXIsXG4gICAgaW5wdXRDYWxsRm9ybWF0dGVyOiBpbnB1dENhbGxGb3JtYXR0ZXIsXG4gICAgaW5wdXRUcmFuc2FjdGlvbkZvcm1hdHRlcjogaW5wdXRUcmFuc2FjdGlvbkZvcm1hdHRlcixcbiAgICBpbnB1dEFkZHJlc3NGb3JtYXR0ZXI6IGlucHV0QWRkcmVzc0Zvcm1hdHRlcixcbiAgICBpbnB1dFBvc3RGb3JtYXR0ZXI6IGlucHV0UG9zdEZvcm1hdHRlcixcbiAgICBvdXRwdXRCaWdOdW1iZXJGb3JtYXR0ZXI6IG91dHB1dEJpZ051bWJlckZvcm1hdHRlcixcbiAgICBvdXRwdXRUcmFuc2FjdGlvbkZvcm1hdHRlcjogb3V0cHV0VHJhbnNhY3Rpb25Gb3JtYXR0ZXIsXG4gICAgb3V0cHV0VHJhbnNhY3Rpb25SZWNlaXB0Rm9ybWF0dGVyOiBvdXRwdXRUcmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZXIsXG4gICAgb3V0cHV0QmxvY2tGb3JtYXR0ZXI6IG91dHB1dEJsb2NrRm9ybWF0dGVyLFxuICAgIG91dHB1dExvZ0Zvcm1hdHRlcjogb3V0cHV0TG9nRm9ybWF0dGVyLFxuICAgIG91dHB1dFBvc3RGb3JtYXR0ZXI6IG91dHB1dFBvc3RGb3JtYXR0ZXIsXG4gICAgb3V0cHV0U3luY2luZ0Zvcm1hdHRlcjogb3V0cHV0U3luY2luZ0Zvcm1hdHRlclxufTtcblxuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgZnVuY3Rpb24uanNcbiAqIEBhdXRob3IgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblxudmFyIGNvZGVyID0gcmVxdWlyZSgnLi4vc29saWRpdHkvY29kZXInKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7XG52YXIgZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcbnZhciBmb3JtYXR0ZXJzID0gcmVxdWlyZSgnLi9mb3JtYXR0ZXJzJyk7XG52YXIgc2hhMyA9IHJlcXVpcmUoJy4uL3V0aWxzL3NoYTMnKTtcblxuLyoqXG4gKiBUaGlzIHByb3RvdHlwZSBzaG91bGQgYmUgdXNlZCB0byBjYWxsL3NlbmRUcmFuc2FjdGlvbiB0byBzb2xpZGl0eSBmdW5jdGlvbnNcbiAqL1xudmFyIFNvbGlkaXR5RnVuY3Rpb24gPSBmdW5jdGlvbiAoZXRoLCBqc29uLCBhZGRyZXNzKSB7XG4gICAgdGhpcy5fZXRoID0gZXRoO1xuICAgIHRoaXMuX2lucHV0VHlwZXMgPSBqc29uLmlucHV0cy5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuIGkudHlwZTtcbiAgICB9KTtcbiAgICB0aGlzLl9vdXRwdXRUeXBlcyA9IGpzb24ub3V0cHV0cy5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuIGkudHlwZTtcbiAgICB9KTtcbiAgICB0aGlzLl9jb25zdGFudCA9IGpzb24uY29uc3RhbnQ7XG4gICAgdGhpcy5fcGF5YWJsZSA9IGpzb24ucGF5YWJsZTtcbiAgICB0aGlzLl9uYW1lID0gdXRpbHMudHJhbnNmb3JtVG9GdWxsTmFtZShqc29uKTtcbiAgICB0aGlzLl9hZGRyZXNzID0gYWRkcmVzcztcbn07XG5cblNvbGlkaXR5RnVuY3Rpb24ucHJvdG90eXBlLmV4dHJhY3RDYWxsYmFjayA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oYXJnc1thcmdzLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICByZXR1cm4gYXJncy5wb3AoKTsgLy8gbW9kaWZ5IHRoZSBhcmdzIGFycmF5IVxuICAgIH1cbn07XG5cblNvbGlkaXR5RnVuY3Rpb24ucHJvdG90eXBlLmV4dHJhY3REZWZhdWx0QmxvY2sgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IHRoaXMuX2lucHV0VHlwZXMubGVuZ3RoICYmICF1dGlscy5pc09iamVjdChhcmdzW2FyZ3MubGVuZ3RoIC0xXSkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlcnMuaW5wdXREZWZhdWx0QmxvY2tOdW1iZXJGb3JtYXR0ZXIoYXJncy5wb3AoKSk7IC8vIG1vZGlmeSB0aGUgYXJncyBhcnJheSFcbiAgICB9XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gY2hlY2sgaWYgdGhlIG51bWJlciBvZiBhcmd1bWVudHMgaXMgY29ycmVjdFxuICpcbiAqIEBtZXRob2QgdmFsaWRhdGVBcmdzXG4gKiBAcGFyYW0ge0FycmF5fSBhcmd1bWVudHNcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBpdCBpcyBub3RcbiAqL1xuU29saWRpdHlGdW5jdGlvbi5wcm90b3R5cGUudmFsaWRhdGVBcmdzID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICB2YXIgaW5wdXRBcmdzID0gYXJncy5maWx0ZXIoZnVuY3Rpb24gKGEpIHtcbiAgICAgIC8vIGZpbHRlciB0aGUgb3B0aW9ucyBvYmplY3QgYnV0IG5vdCBhcmd1bWVudHMgdGhhdCBhcmUgYXJyYXlzXG4gICAgICByZXR1cm4gISggKHV0aWxzLmlzT2JqZWN0KGEpID09PSB0cnVlKSAmJlxuICAgICAgICAgICAgICAgICh1dGlscy5pc0FycmF5KGEpID09PSBmYWxzZSkgJiZcbiAgICAgICAgICAgICAgICAodXRpbHMuaXNCaWdOdW1iZXIoYSkgPT09IGZhbHNlKVxuICAgICAgICAgICAgICApO1xuICAgIH0pO1xuICAgIGlmIChpbnB1dEFyZ3MubGVuZ3RoICE9PSB0aGlzLl9pbnB1dFR5cGVzLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBlcnJvcnMuSW52YWxpZE51bWJlck9mU29saWRpdHlBcmdzKCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBjcmVhdGUgcGF5bG9hZCBmcm9tIGFyZ3VtZW50c1xuICpcbiAqIEBtZXRob2QgdG9QYXlsb2FkXG4gKiBAcGFyYW0ge0FycmF5fSBzb2xpZGl0eSBmdW5jdGlvbiBwYXJhbXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25hbCBwYXlsb2FkIG9wdGlvbnNcbiAqL1xuU29saWRpdHlGdW5jdGlvbi5wcm90b3R5cGUudG9QYXlsb2FkID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHt9O1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IHRoaXMuX2lucHV0VHlwZXMubGVuZ3RoICYmIHV0aWxzLmlzT2JqZWN0KGFyZ3NbYXJncy5sZW5ndGggLTFdKSkge1xuICAgICAgICBvcHRpb25zID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICB0aGlzLnZhbGlkYXRlQXJncyhhcmdzKTtcbiAgICBvcHRpb25zLnRvID0gdGhpcy5fYWRkcmVzcztcbiAgICBvcHRpb25zLmRhdGEgPSAnMHgnICsgdGhpcy5zaWduYXR1cmUoKSArIGNvZGVyLmVuY29kZVBhcmFtcyh0aGlzLl9pbnB1dFR5cGVzLCBhcmdzKTtcbiAgICByZXR1cm4gb3B0aW9ucztcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZ2V0IGZ1bmN0aW9uIHNpZ25hdHVyZVxuICpcbiAqIEBtZXRob2Qgc2lnbmF0dXJlXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGZ1bmN0aW9uIHNpZ25hdHVyZVxuICovXG5Tb2xpZGl0eUZ1bmN0aW9uLnByb3RvdHlwZS5zaWduYXR1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHNoYTModGhpcy5fbmFtZSkuc2xpY2UoMCwgOCk7XG59O1xuXG5cblNvbGlkaXR5RnVuY3Rpb24ucHJvdG90eXBlLnVucGFja091dHB1dCA9IGZ1bmN0aW9uIChvdXRwdXQpIHtcbiAgICBpZiAoIW91dHB1dCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb3V0cHV0ID0gb3V0cHV0Lmxlbmd0aCA+PSAyID8gb3V0cHV0LnNsaWNlKDIpIDogb3V0cHV0O1xuICAgIHZhciByZXN1bHQgPSBjb2Rlci5kZWNvZGVQYXJhbXModGhpcy5fb3V0cHV0VHlwZXMsIG91dHB1dCk7XG4gICAgcmV0dXJuIHJlc3VsdC5sZW5ndGggPT09IDEgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIENhbGxzIGEgY29udHJhY3QgZnVuY3Rpb24uXG4gKlxuICogQG1ldGhvZCBjYWxsXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gQ29udHJhY3QgZnVuY3Rpb24gYXJndW1lbnRzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBJZiB0aGUgbGFzdCBhcmd1bWVudCBpcyBhIGZ1bmN0aW9uLCB0aGUgY29udHJhY3QgZnVuY3Rpb25cbiAqICAgY2FsbCB3aWxsIGJlIGFzeW5jaHJvbm91cywgYW5kIHRoZSBjYWxsYmFjayB3aWxsIGJlIHBhc3NlZCB0aGVcbiAqICAgZXJyb3IgYW5kIHJlc3VsdC5cbiAqIEByZXR1cm4ge1N0cmluZ30gb3V0cHV0IGJ5dGVzXG4gKi9cblNvbGlkaXR5RnVuY3Rpb24ucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLmZpbHRlcihmdW5jdGlvbiAoYSkge3JldHVybiBhICE9PSB1bmRlZmluZWQ7IH0pO1xuICAgIHZhciBjYWxsYmFjayA9IHRoaXMuZXh0cmFjdENhbGxiYWNrKGFyZ3MpO1xuICAgIHZhciBkZWZhdWx0QmxvY2sgPSB0aGlzLmV4dHJhY3REZWZhdWx0QmxvY2soYXJncyk7XG4gICAgdmFyIHBheWxvYWQgPSB0aGlzLnRvUGF5bG9hZChhcmdzKTtcblxuXG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fZXRoLmNhbGwocGF5bG9hZCwgZGVmYXVsdEJsb2NrKTtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5wYWNrT3V0cHV0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuX2V0aC5jYWxsKHBheWxvYWQsIGRlZmF1bHRCbG9jaywgZnVuY3Rpb24gKGVycm9yLCBvdXRwdXQpIHtcbiAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuXG4gICAgICAgIHZhciB1bnBhY2tlZCA9IG51bGw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB1bnBhY2tlZCA9IHNlbGYudW5wYWNrT3V0cHV0KG91dHB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yID0gZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCB1bnBhY2tlZCk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIHNlbmRUcmFuc2FjdGlvbiB0byBzb2xpZGl0eSBmdW5jdGlvblxuICpcbiAqIEBtZXRob2Qgc2VuZFRyYW5zYWN0aW9uXG4gKi9cblNvbGlkaXR5RnVuY3Rpb24ucHJvdG90eXBlLnNlbmRUcmFuc2FjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuZmlsdGVyKGZ1bmN0aW9uIChhKSB7cmV0dXJuIGEgIT09IHVuZGVmaW5lZDsgfSk7XG4gICAgdmFyIGNhbGxiYWNrID0gdGhpcy5leHRyYWN0Q2FsbGJhY2soYXJncyk7XG4gICAgdmFyIHBheWxvYWQgPSB0aGlzLnRvUGF5bG9hZChhcmdzKTtcblxuICAgIGlmIChwYXlsb2FkLnZhbHVlID4gMCAmJiAhdGhpcy5fcGF5YWJsZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzZW5kIHZhbHVlIHRvIG5vbi1wYXlhYmxlIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXRoLnNlbmRUcmFuc2FjdGlvbihwYXlsb2FkKTtcbiAgICB9XG5cbiAgICB0aGlzLl9ldGguc2VuZFRyYW5zYWN0aW9uKHBheWxvYWQsIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZXN0aW1hdGVHYXMgb2Ygc29saWRpdHkgZnVuY3Rpb25cbiAqXG4gKiBAbWV0aG9kIGVzdGltYXRlR2FzXG4gKi9cblNvbGlkaXR5RnVuY3Rpb24ucHJvdG90eXBlLmVzdGltYXRlR2FzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICB2YXIgY2FsbGJhY2sgPSB0aGlzLmV4dHJhY3RDYWxsYmFjayhhcmdzKTtcbiAgICB2YXIgcGF5bG9hZCA9IHRoaXMudG9QYXlsb2FkKGFyZ3MpO1xuXG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXRoLmVzdGltYXRlR2FzKHBheWxvYWQpO1xuICAgIH1cblxuICAgIHRoaXMuX2V0aC5lc3RpbWF0ZUdhcyhwYXlsb2FkLCBjYWxsYmFjayk7XG59O1xuXG4vKipcbiAqIFJldHVybiB0aGUgZW5jb2RlZCBkYXRhIG9mIHRoZSBjYWxsXG4gKlxuICogQG1ldGhvZCBnZXREYXRhXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHRoZSBlbmNvZGVkIGRhdGFcbiAqL1xuU29saWRpdHlGdW5jdGlvbi5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgdmFyIHBheWxvYWQgPSB0aGlzLnRvUGF5bG9hZChhcmdzKTtcblxuICAgIHJldHVybiBwYXlsb2FkLmRhdGE7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIGdldCBmdW5jdGlvbiBkaXNwbGF5IG5hbWVcbiAqXG4gKiBAbWV0aG9kIGRpc3BsYXlOYW1lXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGRpc3BsYXkgbmFtZSBvZiB0aGUgZnVuY3Rpb25cbiAqL1xuU29saWRpdHlGdW5jdGlvbi5wcm90b3R5cGUuZGlzcGxheU5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHV0aWxzLmV4dHJhY3REaXNwbGF5TmFtZSh0aGlzLl9uYW1lKTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gZ2V0IGZ1bmN0aW9uIHR5cGUgbmFtZVxuICpcbiAqIEBtZXRob2QgdHlwZU5hbWVcbiAqIEByZXR1cm4ge1N0cmluZ30gdHlwZSBuYW1lIG9mIHRoZSBmdW5jdGlvblxuICovXG5Tb2xpZGl0eUZ1bmN0aW9uLnByb3RvdHlwZS50eXBlTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXRpbHMuZXh0cmFjdFR5cGVOYW1lKHRoaXMuX25hbWUpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGdldCBycGMgcmVxdWVzdHMgZnJvbSBzb2xpZGl0eSBmdW5jdGlvblxuICpcbiAqIEBtZXRob2QgcmVxdWVzdFxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuU29saWRpdHlGdW5jdGlvbi5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgdmFyIGNhbGxiYWNrID0gdGhpcy5leHRyYWN0Q2FsbGJhY2soYXJncyk7XG4gICAgdmFyIHBheWxvYWQgPSB0aGlzLnRvUGF5bG9hZChhcmdzKTtcbiAgICB2YXIgZm9ybWF0ID0gdGhpcy51bnBhY2tPdXRwdXQuYmluZCh0aGlzKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG1ldGhvZDogdGhpcy5fY29uc3RhbnQgPyAnZXRoX2NhbGwnIDogJ2V0aF9zZW5kVHJhbnNhY3Rpb24nLFxuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIHBhcmFtczogW3BheWxvYWRdLFxuICAgICAgICBmb3JtYXQ6IGZvcm1hdFxuICAgIH07XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZXhlY3V0ZSBmdW5jdGlvblxuICpcbiAqIEBtZXRob2QgZXhlY3V0ZVxuICovXG5Tb2xpZGl0eUZ1bmN0aW9uLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0cmFuc2FjdGlvbiA9ICF0aGlzLl9jb25zdGFudDtcblxuICAgIC8vIHNlbmQgdHJhbnNhY3Rpb25cbiAgICBpZiAodHJhbnNhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZFRyYW5zYWN0aW9uLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIC8vIGNhbGxcbiAgICByZXR1cm4gdGhpcy5jYWxsLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGF0dGFjaCBmdW5jdGlvbiB0byBjb250cmFjdFxuICpcbiAqIEBtZXRob2QgYXR0YWNoVG9Db250cmFjdFxuICogQHBhcmFtIHtDb250cmFjdH1cbiAqL1xuU29saWRpdHlGdW5jdGlvbi5wcm90b3R5cGUuYXR0YWNoVG9Db250cmFjdCA9IGZ1bmN0aW9uIChjb250cmFjdCkge1xuICAgIHZhciBleGVjdXRlID0gdGhpcy5leGVjdXRlLmJpbmQodGhpcyk7XG4gICAgZXhlY3V0ZS5yZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0LmJpbmQodGhpcyk7XG4gICAgZXhlY3V0ZS5jYWxsID0gdGhpcy5jYWxsLmJpbmQodGhpcyk7XG4gICAgZXhlY3V0ZS5zZW5kVHJhbnNhY3Rpb24gPSB0aGlzLnNlbmRUcmFuc2FjdGlvbi5iaW5kKHRoaXMpO1xuICAgIGV4ZWN1dGUuZXN0aW1hdGVHYXMgPSB0aGlzLmVzdGltYXRlR2FzLmJpbmQodGhpcyk7XG4gICAgZXhlY3V0ZS5nZXREYXRhID0gdGhpcy5nZXREYXRhLmJpbmQodGhpcyk7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gdGhpcy5kaXNwbGF5TmFtZSgpO1xuICAgIGlmICghY29udHJhY3RbZGlzcGxheU5hbWVdKSB7XG4gICAgICAgIGNvbnRyYWN0W2Rpc3BsYXlOYW1lXSA9IGV4ZWN1dGU7XG4gICAgfVxuICAgIGNvbnRyYWN0W2Rpc3BsYXlOYW1lXVt0aGlzLnR5cGVOYW1lKCldID0gZXhlY3V0ZTsgLy8gY2lyY3VsYXIhISEhXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNvbGlkaXR5RnVuY3Rpb247XG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqIEBmaWxlIGh0dHBwcm92aWRlci5qc1xuICogQGF1dGhvcnM6XG4gKiAgIE1hcmVrIEtvdGV3aWN6IDxtYXJla0BldGhkZXYuY29tPlxuICogICBNYXJpYW4gT2FuY2VhIDxtYXJpYW5AZXRoZGV2LmNvbT5cbiAqICAgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblxudmFyIGVycm9ycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG5cbi8vIHdvcmthcm91bmQgdG8gdXNlIGh0dHBwcm92aWRlciBpbiBkaWZmZXJlbnQgZW52c1xuXG4vLyBicm93c2VyXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LlhNTEh0dHBSZXF1ZXN0KSB7XG4gIFhNTEh0dHBSZXF1ZXN0ID0gd2luZG93LlhNTEh0dHBSZXF1ZXN0OyAvLyBqc2hpbnQgaWdub3JlOiBsaW5lXG4vLyBub2RlXG59IGVsc2Uge1xuICBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0JykuWE1MSHR0cFJlcXVlc3Q7IC8vIGpzaGludCBpZ25vcmU6IGxpbmVcbn1cblxudmFyIFhIUjIgPSByZXF1aXJlKCd4aHIyJyk7IC8vIGpzaGludCBpZ25vcmU6IGxpbmVcblxuLyoqXG4gKiBIdHRwUHJvdmlkZXIgc2hvdWxkIGJlIHVzZWQgdG8gc2VuZCBycGMgY2FsbHMgb3ZlciBodHRwXG4gKi9cbnZhciBIdHRwUHJvdmlkZXIgPSBmdW5jdGlvbiAoaG9zdCwgdGltZW91dCwgdXNlciwgcGFzc3dvcmQpIHtcbiAgdGhpcy5ob3N0ID0gaG9zdCB8fCAnaHR0cDovL2xvY2FsaG9zdDo4NTQ1JztcbiAgdGhpcy50aW1lb3V0ID0gdGltZW91dCB8fCAwO1xuICB0aGlzLnVzZXIgPSB1c2VyO1xuICB0aGlzLnBhc3N3b3JkID0gcGFzc3dvcmQ7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gcHJlcGFyZSBuZXcgWE1MSHR0cFJlcXVlc3RcbiAqXG4gKiBAbWV0aG9kIHByZXBhcmVSZXF1ZXN0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IHRydWUgaWYgcmVxdWVzdCBzaG91bGQgYmUgYXN5bmNcbiAqIEByZXR1cm4ge1hNTEh0dHBSZXF1ZXN0fSBvYmplY3RcbiAqL1xuSHR0cFByb3ZpZGVyLnByb3RvdHlwZS5wcmVwYXJlUmVxdWVzdCA9IGZ1bmN0aW9uIChhc3luYykge1xuICB2YXIgcmVxdWVzdDtcblxuICBpZiAoYXN5bmMpIHtcbiAgICByZXF1ZXN0ID0gbmV3IFhIUjIoKTtcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSB0aGlzLnRpbWVvdXQ7XG4gIH0gZWxzZSB7XG4gICAgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICB9XG5cbiAgcmVxdWVzdC5vcGVuKCdQT1NUJywgdGhpcy5ob3N0LCBhc3luYyk7XG4gIGlmICh0aGlzLnVzZXIgJiYgdGhpcy5wYXNzd29yZCkge1xuICAgIHZhciBhdXRoID0gJ0Jhc2ljICcgKyBuZXcgQnVmZmVyKHRoaXMudXNlciArICc6JyArIHRoaXMucGFzc3dvcmQpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCBhdXRoKTtcbiAgfSByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gIHJldHVybiByZXF1ZXN0O1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIG1ha2Ugc3luYyByZXF1ZXN0XG4gKlxuICogQG1ldGhvZCBzZW5kXG4gKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZFxuICogQHJldHVybiB7T2JqZWN0fSByZXN1bHRcbiAqL1xuSHR0cFByb3ZpZGVyLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgdmFyIHJlcXVlc3QgPSB0aGlzLnByZXBhcmVSZXF1ZXN0KGZhbHNlKTtcblxuICB0cnkge1xuICAgIHJlcXVlc3Quc2VuZChKU09OLnN0cmluZ2lmeShwYXlsb2FkKSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgZXJyb3JzLkludmFsaWRDb25uZWN0aW9uKHRoaXMuaG9zdCk7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gcmVxdWVzdC5yZXNwb25zZVRleHQ7XG5cbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3VsdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBlcnJvcnMuSW52YWxpZFJlc3BvbnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIG1ha2UgYXN5bmMgcmVxdWVzdFxuICpcbiAqIEBtZXRob2Qgc2VuZEFzeW5jXG4gKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdHJpZ2dlcmVkIG9uIGVuZCB3aXRoIChlcnIsIHJlc3VsdClcbiAqL1xuSHR0cFByb3ZpZGVyLnByb3RvdHlwZS5zZW5kQXN5bmMgPSBmdW5jdGlvbiAocGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgdmFyIHJlcXVlc3QgPSB0aGlzLnByZXBhcmVSZXF1ZXN0KHRydWUpO1xuXG4gIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQgJiYgcmVxdWVzdC50aW1lb3V0ICE9PSAxKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVxdWVzdC5yZXNwb25zZVRleHQ7XG4gICAgICB2YXIgZXJyb3IgPSBudWxsO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3VsdCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGVycm9yID0gZXJyb3JzLkludmFsaWRSZXNwb25zZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrKGVycm9yLCByZXN1bHQpO1xuICAgIH1cbiAgfTtcblxuICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsYmFjayhlcnJvcnMuQ29ubmVjdGlvblRpbWVvdXQodGhpcy50aW1lb3V0KSk7XG4gIH07XG5cbiAgdHJ5IHtcbiAgICByZXF1ZXN0LnNlbmQoSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhbGxiYWNrKGVycm9ycy5JbnZhbGlkQ29ubmVjdGlvbih0aGlzLmhvc3QpKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTeW5jaHJvbm91c2x5IHRyaWVzIHRvIG1ha2UgSHR0cCByZXF1ZXN0XG4gKlxuICogQG1ldGhvZCBpc0Nvbm5lY3RlZFxuICogQHJldHVybiB7Qm9vbGVhbn0gcmV0dXJucyB0cnVlIGlmIHJlcXVlc3QgaGF2ZW4ndCBmYWlsZWQuIE90aGVyd2lzZSBmYWxzZVxuICovXG5IdHRwUHJvdmlkZXIucHJvdG90eXBlLmlzQ29ubmVjdGVkID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIHRoaXMuc2VuZCh7XG4gICAgICBpZDogOTk5OTk5OTk5OSxcbiAgICAgIGpzb25ycGM6ICcyLjAnLFxuICAgICAgbWV0aG9kOiAnbmV0X2xpc3RlbmluZycsXG4gICAgICBwYXJhbXM6IFtdXG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSHR0cFByb3ZpZGVyO1xuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKiBcbiAqIEBmaWxlIGliYW4uanNcbiAqIEBhdXRob3IgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblxudmFyIEJpZ051bWJlciA9IHJlcXVpcmUoJ2JpZ251bWJlci5qcycpO1xuXG52YXIgcGFkTGVmdCA9IGZ1bmN0aW9uIChzdHJpbmcsIGJ5dGVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHN0cmluZztcbiAgICB3aGlsZSAocmVzdWx0Lmxlbmd0aCA8IGJ5dGVzICogMikge1xuICAgICAgICByZXN1bHQgPSAnMCcgKyByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIFByZXBhcmUgYW4gSUJBTiBmb3IgbW9kIDk3IGNvbXB1dGF0aW9uIGJ5IG1vdmluZyB0aGUgZmlyc3QgNCBjaGFycyB0byB0aGUgZW5kIGFuZCB0cmFuc2Zvcm1pbmcgdGhlIGxldHRlcnMgdG9cbiAqIG51bWJlcnMgKEEgPSAxMCwgQiA9IDExLCAuLi4sIFogPSAzNSksIGFzIHNwZWNpZmllZCBpbiBJU08xMzYxNi5cbiAqXG4gKiBAbWV0aG9kIGlzbzEzNjE2UHJlcGFyZVxuICogQHBhcmFtIHtTdHJpbmd9IGliYW4gdGhlIElCQU5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBwcmVwYXJlZCBJQkFOXG4gKi9cbnZhciBpc28xMzYxNlByZXBhcmUgPSBmdW5jdGlvbiAoaWJhbikge1xuICAgIHZhciBBID0gJ0EnLmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIFogPSAnWicuY2hhckNvZGVBdCgwKTtcblxuICAgIGliYW4gPSBpYmFuLnRvVXBwZXJDYXNlKCk7XG4gICAgaWJhbiA9IGliYW4uc3Vic3RyKDQpICsgaWJhbi5zdWJzdHIoMCw0KTtcblxuICAgIHJldHVybiBpYmFuLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24obil7XG4gICAgICAgIHZhciBjb2RlID0gbi5jaGFyQ29kZUF0KDApO1xuICAgICAgICBpZiAoY29kZSA+PSBBICYmIGNvZGUgPD0gWil7XG4gICAgICAgICAgICAvLyBBID0gMTAsIEIgPSAxMSwgLi4uIFogPSAzNVxuICAgICAgICAgICAgcmV0dXJuIGNvZGUgLSBBICsgMTA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfVxuICAgIH0pLmpvaW4oJycpO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBNT0QgOTcgMTAgb2YgdGhlIHBhc3NlZCBJQkFOIGFzIHNwZWNpZmllZCBpbiBJU083MDY0LlxuICpcbiAqIEBtZXRob2QgbW9kOTcxMFxuICogQHBhcmFtIHtTdHJpbmd9IGliYW5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gKi9cbnZhciBtb2Q5NzEwID0gZnVuY3Rpb24gKGliYW4pIHtcbiAgICB2YXIgcmVtYWluZGVyID0gaWJhbixcbiAgICAgICAgYmxvY2s7XG5cbiAgICB3aGlsZSAocmVtYWluZGVyLmxlbmd0aCA+IDIpe1xuICAgICAgICBibG9jayA9IHJlbWFpbmRlci5zbGljZSgwLCA5KTtcbiAgICAgICAgcmVtYWluZGVyID0gcGFyc2VJbnQoYmxvY2ssIDEwKSAlIDk3ICsgcmVtYWluZGVyLnNsaWNlKGJsb2NrLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlSW50KHJlbWFpbmRlciwgMTApICUgOTc7XG59O1xuXG4vKipcbiAqIFRoaXMgcHJvdG90eXBlIHNob3VsZCBiZSB1c2VkIHRvIGNyZWF0ZSBpYmFuIG9iamVjdCBmcm9tIGliYW4gY29ycmVjdCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaWJhblxuICovXG52YXIgSWJhbiA9IGZ1bmN0aW9uIChpYmFuKSB7XG4gICAgdGhpcy5faWJhbiA9IGliYW47XG59O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSB1c2VkIHRvIGNyZWF0ZSBpYmFuIG9iamVjdCBmcm9tIGV0aGVyZXVtIGFkZHJlc3NcbiAqXG4gKiBAbWV0aG9kIGZyb21BZGRyZXNzXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzc1xuICogQHJldHVybiB7SWJhbn0gdGhlIElCQU4gb2JqZWN0XG4gKi9cbkliYW4uZnJvbUFkZHJlc3MgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgIHZhciBhc0JuID0gbmV3IEJpZ051bWJlcihhZGRyZXNzLCAxNik7XG4gICAgdmFyIGJhc2UzNiA9IGFzQm4udG9TdHJpbmcoMzYpO1xuICAgIHZhciBwYWRkZWQgPSBwYWRMZWZ0KGJhc2UzNiwgMTUpO1xuICAgIHJldHVybiBJYmFuLmZyb21CYmFuKHBhZGRlZC50b1VwcGVyQ2FzZSgpKTtcbn07XG5cbi8qKlxuICogQ29udmVydCB0aGUgcGFzc2VkIEJCQU4gdG8gYW4gSUJBTiBmb3IgdGhpcyBjb3VudHJ5IHNwZWNpZmljYXRpb24uXG4gKiBQbGVhc2Ugbm90ZSB0aGF0IDxpPlwiZ2VuZXJhdGlvbiBvZiB0aGUgSUJBTiBzaGFsbCBiZSB0aGUgZXhjbHVzaXZlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBiYW5rL2JyYW5jaCBzZXJ2aWNpbmcgdGhlIGFjY291bnRcIjwvaT4uXG4gKiBUaGlzIG1ldGhvZCBpbXBsZW1lbnRzIHRoZSBwcmVmZXJyZWQgYWxnb3JpdGhtIGRlc2NyaWJlZCBpbiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludGVybmF0aW9uYWxfQmFua19BY2NvdW50X051bWJlciNHZW5lcmF0aW5nX0lCQU5fY2hlY2tfZGlnaXRzXG4gKlxuICogQG1ldGhvZCBmcm9tQmJhblxuICogQHBhcmFtIHtTdHJpbmd9IGJiYW4gdGhlIEJCQU4gdG8gY29udmVydCB0byBJQkFOXG4gKiBAcmV0dXJucyB7SWJhbn0gdGhlIElCQU4gb2JqZWN0XG4gKi9cbkliYW4uZnJvbUJiYW4gPSBmdW5jdGlvbiAoYmJhbikge1xuICAgIHZhciBjb3VudHJ5Q29kZSA9ICdYRSc7XG5cbiAgICB2YXIgcmVtYWluZGVyID0gbW9kOTcxMChpc28xMzYxNlByZXBhcmUoY291bnRyeUNvZGUgKyAnMDAnICsgYmJhbikpO1xuICAgIHZhciBjaGVja0RpZ2l0ID0gKCcwJyArICg5OCAtIHJlbWFpbmRlcikpLnNsaWNlKC0yKTtcblxuICAgIHJldHVybiBuZXcgSWJhbihjb3VudHJ5Q29kZSArIGNoZWNrRGlnaXQgKyBiYmFuKTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIHVzZWQgdG8gY3JlYXRlIElCQU4gb2JqZWN0IGZvciBnaXZlbiBpbnN0aXR1dGlvbiBhbmQgaWRlbnRpZmllclxuICpcbiAqIEBtZXRob2QgY3JlYXRlSW5kaXJlY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLCByZXF1aXJlZCBvcHRpb25zIGFyZSBcImluc3RpdHV0aW9uXCIgYW5kIFwiaWRlbnRpZmllclwiXG4gKiBAcmV0dXJuIHtJYmFufSB0aGUgSUJBTiBvYmplY3RcbiAqL1xuSWJhbi5jcmVhdGVJbmRpcmVjdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgcmV0dXJuIEliYW4uZnJvbUJiYW4oJ0VUSCcgKyBvcHRpb25zLmluc3RpdHV0aW9uICsgb3B0aW9ucy5pZGVudGlmaWVyKTtcbn07XG5cbi8qKlxuICogVGhvcyBtZXRob2Qgc2hvdWxkIGJlIHVzZWQgdG8gY2hlY2sgaWYgZ2l2ZW4gc3RyaW5nIGlzIHZhbGlkIGliYW4gb2JqZWN0XG4gKlxuICogQG1ldGhvZCBpc1ZhbGlkXG4gKiBAcGFyYW0ge1N0cmluZ30gaWJhbiBzdHJpbmdcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgaXQgaXMgdmFsaWQgSUJBTlxuICovXG5JYmFuLmlzVmFsaWQgPSBmdW5jdGlvbiAoaWJhbikge1xuICAgIHZhciBpID0gbmV3IEliYW4oaWJhbik7XG4gICAgcmV0dXJuIGkuaXNWYWxpZCgpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGNoZWNrIGlmIGliYW4gaXMgY29ycmVjdFxuICpcbiAqIEBtZXRob2QgaXNWYWxpZFxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgaXQgaXMsIG90aGVyd2lzZSBmYWxzZVxuICovXG5JYmFuLnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAvXlhFWzAtOV17Mn0oRVRIWzAtOUEtWl17MTN9fFswLTlBLVpdezMwLDMxfSkkLy50ZXN0KHRoaXMuX2liYW4pICYmXG4gICAgICAgIG1vZDk3MTAoaXNvMTM2MTZQcmVwYXJlKHRoaXMuX2liYW4pKSA9PT0gMTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBjaGVjayBpZiBpYmFuIG51bWJlciBpcyBkaXJlY3RcbiAqXG4gKiBAbWV0aG9kIGlzRGlyZWN0XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiBpdCBpcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbkliYW4ucHJvdG90eXBlLmlzRGlyZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9pYmFuLmxlbmd0aCA9PT0gMzQgfHwgdGhpcy5faWJhbi5sZW5ndGggPT09IDM1O1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGNoZWNrIGlmIGliYW4gbnVtYmVyIGlmIGluZGlyZWN0XG4gKlxuICogQG1ldGhvZCBpc0luZGlyZWN0XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiBpdCBpcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbkliYW4ucHJvdG90eXBlLmlzSW5kaXJlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2liYW4ubGVuZ3RoID09PSAyMDtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBnZXQgaWJhbiBjaGVja3N1bVxuICogVXNlcyB0aGUgbW9kLTk3LTEwIGNoZWNrc3VtbWluZyBwcm90b2NvbCAoSVNPL0lFQyA3MDY0OjIwMDMpXG4gKlxuICogQG1ldGhvZCBjaGVja3N1bVxuICogQHJldHVybnMge1N0cmluZ30gY2hlY2tzdW1cbiAqL1xuSWJhbi5wcm90b3R5cGUuY2hlY2tzdW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2liYW4uc3Vic3RyKDIsIDIpO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGdldCBpbnN0aXR1dGlvbiBpZGVudGlmaWVyXG4gKiBlZy4gWFJFR1xuICpcbiAqIEBtZXRob2QgaW5zdGl0dXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGluc3RpdHV0aW9uIGlkZW50aWZpZXJcbiAqL1xuSWJhbi5wcm90b3R5cGUuaW5zdGl0dXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNJbmRpcmVjdCgpID8gdGhpcy5faWJhbi5zdWJzdHIoNywgNCkgOiAnJztcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBnZXQgY2xpZW50IGlkZW50aWZpZXIgd2l0aGluIGluc3RpdHV0aW9uXG4gKiBlZy4gR0FWT0ZZT1JLXG4gKlxuICogQG1ldGhvZCBjbGllbnRcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGNsaWVudCBpZGVudGlmaWVyXG4gKi9cbkliYW4ucHJvdG90eXBlLmNsaWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc0luZGlyZWN0KCkgPyB0aGlzLl9pYmFuLnN1YnN0cigxMSkgOiAnJztcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBnZXQgY2xpZW50IGRpcmVjdCBhZGRyZXNzXG4gKlxuICogQG1ldGhvZCBhZGRyZXNzXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBjbGllbnQgZGlyZWN0IGFkZHJlc3NcbiAqL1xuSWJhbi5wcm90b3R5cGUuYWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc0RpcmVjdCgpKSB7XG4gICAgICAgIHZhciBiYXNlMzYgPSB0aGlzLl9pYmFuLnN1YnN0cig0KTtcbiAgICAgICAgdmFyIGFzQm4gPSBuZXcgQmlnTnVtYmVyKGJhc2UzNiwgMzYpO1xuICAgICAgICByZXR1cm4gcGFkTGVmdChhc0JuLnRvU3RyaW5nKDE2KSwgMjApO1xuICAgIH0gXG5cbiAgICByZXR1cm4gJyc7XG59O1xuXG5JYmFuLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5faWJhbjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSWJhbjtcblxuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKiBAZmlsZSBpcGNwcm92aWRlci5qc1xuICogQGF1dGhvcnM6XG4gKiAgIEZhYmlhbiBWb2dlbHN0ZWxsZXIgPGZhYmlhbkBldGhkZXYuY29tPlxuICogQGRhdGUgMjAxNVxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpO1xudmFyIGVycm9ycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG5cblxudmFyIElwY1Byb3ZpZGVyID0gZnVuY3Rpb24gKHBhdGgsIG5ldCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5yZXNwb25zZUNhbGxiYWNrcyA9IHt9O1xuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gICAgXG4gICAgdGhpcy5jb25uZWN0aW9uID0gbmV0LmNvbm5lY3Qoe3BhdGg6IHRoaXMucGF0aH0pO1xuXG4gICAgdGhpcy5jb25uZWN0aW9uLm9uKCdlcnJvcicsIGZ1bmN0aW9uKGUpe1xuICAgICAgICBjb25zb2xlLmVycm9yKCdJUEMgQ29ubmVjdGlvbiBFcnJvcicsIGUpO1xuICAgICAgICBfdGhpcy5fdGltZW91dCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jb25uZWN0aW9uLm9uKCdlbmQnLCBmdW5jdGlvbigpe1xuICAgICAgICBfdGhpcy5fdGltZW91dCgpO1xuICAgIH0pOyBcblxuXG4gICAgLy8gTElTVEVOIEZPUiBDT05ORUNUSU9OIFJFU1BPTlNFU1xuICAgIHRoaXMuY29ubmVjdGlvbi5vbignZGF0YScsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgLypqc2hpbnQgbWF4Y29tcGxleGl0eTogNiAqL1xuXG4gICAgICAgIF90aGlzLl9wYXJzZVJlc3BvbnNlKGRhdGEudG9TdHJpbmcoKSkuZm9yRWFjaChmdW5jdGlvbihyZXN1bHQpe1xuXG4gICAgICAgICAgICB2YXIgaWQgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBnZXQgdGhlIGlkIHdoaWNoIG1hdGNoZXMgdGhlIHJldHVybmVkIGlkXG4gICAgICAgICAgICBpZih1dGlscy5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuZm9yRWFjaChmdW5jdGlvbihsb2FkKXtcbiAgICAgICAgICAgICAgICAgICAgaWYoX3RoaXMucmVzcG9uc2VDYWxsYmFja3NbbG9hZC5pZF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBpZCA9IGxvYWQuaWQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlkID0gcmVzdWx0LmlkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmaXJlIHRoZSBjYWxsYmFja1xuICAgICAgICAgICAgaWYoX3RoaXMucmVzcG9uc2VDYWxsYmFja3NbaWRdKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVzcG9uc2VDYWxsYmFja3NbaWRdKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLnJlc3BvbnNlQ2FsbGJhY2tzW2lkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuXG4vKipcbldpbGwgcGFyc2UgdGhlIHJlc3BvbnNlIGFuZCBtYWtlIGFuIGFycmF5IG91dCBvZiBpdC5cblxuQG1ldGhvZCBfcGFyc2VSZXNwb25zZVxuQHBhcmFtIHtTdHJpbmd9IGRhdGFcbiovXG5JcGNQcm92aWRlci5wcm90b3R5cGUuX3BhcnNlUmVzcG9uc2UgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgcmV0dXJuVmFsdWVzID0gW107XG4gICAgXG4gICAgLy8gREUtQ0hVTktFUlxuICAgIHZhciBkZWNodW5rZWREYXRhID0gZGF0YVxuICAgICAgICAucmVwbGFjZSgvXFx9W1xcblxccl0/XFx7L2csJ318LS18eycpIC8vIH17XG4gICAgICAgIC5yZXBsYWNlKC9cXH1cXF1bXFxuXFxyXT9cXFtcXHsvZywnfV18LS18W3snKSAvLyB9XVt7XG4gICAgICAgIC5yZXBsYWNlKC9cXH1bXFxuXFxyXT9cXFtcXHsvZywnfXwtLXxbeycpIC8vIH1be1xuICAgICAgICAucmVwbGFjZSgvXFx9XFxdW1xcblxccl0/XFx7L2csJ31dfC0tfHsnKSAvLyB9XXtcbiAgICAgICAgLnNwbGl0KCd8LS18Jyk7XG5cbiAgICBkZWNodW5rZWREYXRhLmZvckVhY2goZnVuY3Rpb24oZGF0YSl7XG5cbiAgICAgICAgLy8gcHJlcGVuZCB0aGUgbGFzdCBjaHVua1xuICAgICAgICBpZihfdGhpcy5sYXN0Q2h1bmspXG4gICAgICAgICAgICBkYXRhID0gX3RoaXMubGFzdENodW5rICsgZGF0YTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShkYXRhKTtcblxuICAgICAgICB9IGNhdGNoKGUpIHtcblxuICAgICAgICAgICAgX3RoaXMubGFzdENodW5rID0gZGF0YTtcblxuICAgICAgICAgICAgLy8gc3RhcnQgdGltZW91dCB0byBjYW5jZWwgYWxsIHJlcXVlc3RzXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMubGFzdENodW5rVGltZW91dCk7XG4gICAgICAgICAgICBfdGhpcy5sYXN0Q2h1bmtUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIF90aGlzLl90aW1lb3V0KCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JzLkludmFsaWRSZXNwb25zZShkYXRhKTtcbiAgICAgICAgICAgIH0sIDEwMDAgKiAxNSk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNhbmNlbCB0aW1lb3V0IGFuZCBzZXQgY2h1bmsgdG8gbnVsbFxuICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMubGFzdENodW5rVGltZW91dCk7XG4gICAgICAgIF90aGlzLmxhc3RDaHVuayA9IG51bGw7XG5cbiAgICAgICAgaWYocmVzdWx0KVxuICAgICAgICAgICAgcmV0dXJuVmFsdWVzLnB1c2gocmVzdWx0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXR1cm5WYWx1ZXM7XG59O1xuXG5cbi8qKlxuR2V0IHRoZSBhZGRzIGEgY2FsbGJhY2sgdG8gdGhlIHJlc3BvbnNlQ2FsbGJhY2tzIG9iamVjdCxcbndoaWNoIHdpbGwgYmUgY2FsbGVkIGlmIGEgcmVzcG9uc2UgbWF0Y2hpbmcgdGhlIHJlc3BvbnNlIElkIHdpbGwgYXJyaXZlLlxuXG5AbWV0aG9kIF9hZGRSZXNwb25zZUNhbGxiYWNrXG4qL1xuSXBjUHJvdmlkZXIucHJvdG90eXBlLl9hZGRSZXNwb25zZUNhbGxiYWNrID0gZnVuY3Rpb24ocGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICB2YXIgaWQgPSBwYXlsb2FkLmlkIHx8IHBheWxvYWRbMF0uaWQ7XG4gICAgdmFyIG1ldGhvZCA9IHBheWxvYWQubWV0aG9kIHx8IHBheWxvYWRbMF0ubWV0aG9kO1xuXG4gICAgdGhpcy5yZXNwb25zZUNhbGxiYWNrc1tpZF0gPSBjYWxsYmFjaztcbiAgICB0aGlzLnJlc3BvbnNlQ2FsbGJhY2tzW2lkXS5tZXRob2QgPSBtZXRob2Q7XG59O1xuXG4vKipcblRpbWVvdXQgYWxsIHJlcXVlc3RzIHdoZW4gdGhlIGVuZC9lcnJvciBldmVudCBpcyBmaXJlZFxuXG5AbWV0aG9kIF90aW1lb3V0XG4qL1xuSXBjUHJvdmlkZXIucHJvdG90eXBlLl90aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yKHZhciBrZXkgaW4gdGhpcy5yZXNwb25zZUNhbGxiYWNrcykge1xuICAgICAgICBpZih0aGlzLnJlc3BvbnNlQ2FsbGJhY2tzLmhhc093blByb3BlcnR5KGtleSkpe1xuICAgICAgICAgICAgdGhpcy5yZXNwb25zZUNhbGxiYWNrc1trZXldKGVycm9ycy5JbnZhbGlkQ29ubmVjdGlvbignb24gSVBDJykpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMucmVzcG9uc2VDYWxsYmFja3Nba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuLyoqXG5DaGVjayBpZiB0aGUgY3VycmVudCBjb25uZWN0aW9uIGlzIHN0aWxsIHZhbGlkLlxuXG5AbWV0aG9kIGlzQ29ubmVjdGVkXG4qL1xuSXBjUHJvdmlkZXIucHJvdG90eXBlLmlzQ29ubmVjdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vIHRyeSByZWNvbm5lY3QsIHdoZW4gY29ubmVjdGlvbiBpcyBnb25lXG4gICAgaWYoIV90aGlzLmNvbm5lY3Rpb24ud3JpdGFibGUpXG4gICAgICAgIF90aGlzLmNvbm5lY3Rpb24uY29ubmVjdCh7cGF0aDogX3RoaXMucGF0aH0pO1xuXG4gICAgcmV0dXJuICEhdGhpcy5jb25uZWN0aW9uLndyaXRhYmxlO1xufTtcblxuSXBjUHJvdmlkZXIucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocGF5bG9hZCkge1xuXG4gICAgaWYodGhpcy5jb25uZWN0aW9uLndyaXRlU3luYykge1xuICAgICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICAgIC8vIHRyeSByZWNvbm5lY3QsIHdoZW4gY29ubmVjdGlvbiBpcyBnb25lXG4gICAgICAgIGlmKCF0aGlzLmNvbm5lY3Rpb24ud3JpdGFibGUpXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24uY29ubmVjdCh7cGF0aDogdGhpcy5wYXRofSk7XG5cbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLmNvbm5lY3Rpb24ud3JpdGVTeW5jKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcnMuSW52YWxpZFJlc3BvbnNlKGRhdGEpOyAgICAgICAgICAgICAgICBcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSB0cmllZCB0byBzZW5kIFwiJysgcGF5bG9hZC5tZXRob2QgKydcIiBzeW5jaHJvbm91c2x5LiBTeW5jaHJvbm91cyByZXF1ZXN0cyBhcmUgbm90IHN1cHBvcnRlZCBieSB0aGUgSVBDIHByb3ZpZGVyLicpO1xuICAgIH1cbn07XG5cbklwY1Byb3ZpZGVyLnByb3RvdHlwZS5zZW5kQXN5bmMgPSBmdW5jdGlvbiAocGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICAvLyB0cnkgcmVjb25uZWN0LCB3aGVuIGNvbm5lY3Rpb24gaXMgZ29uZVxuICAgIGlmKCF0aGlzLmNvbm5lY3Rpb24ud3JpdGFibGUpXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5jb25uZWN0KHtwYXRoOiB0aGlzLnBhdGh9KTtcblxuXG4gICAgdGhpcy5jb25uZWN0aW9uLndyaXRlKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKTtcbiAgICB0aGlzLl9hZGRSZXNwb25zZUNhbGxiYWNrKHBheWxvYWQsIGNhbGxiYWNrKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSXBjUHJvdmlkZXI7XG5cbiIsIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKiogQGZpbGUganNvbnJwYy5qc1xuICogQGF1dGhvcnM6XG4gKiAgIE1hcmVrIEtvdGV3aWN6IDxtYXJla0BldGhkZXYuY29tPlxuICogICBBYXJvbiBLdW1hdmlzIDxhYXJvbkBrdW1hdmlzLm1lPlxuICogQGRhdGUgMjAxNVxuICovXG5cbi8vIEluaXRpYWxpemUgSnNvbnJwYyBhcyBhIHNpbXBsZSBvYmplY3Qgd2l0aCB1dGlsaXR5IGZ1bmN0aW9ucy5cbnZhciBKc29ucnBjID0ge1xuICAgIG1lc3NhZ2VJZDogMFxufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIHZhbGlkIGpzb24gY3JlYXRlIHBheWxvYWQgb2JqZWN0XG4gKlxuICogQG1ldGhvZCB0b1BheWxvYWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZCBvZiBqc29ucnBjIGNhbGwsIHJlcXVpcmVkXG4gKiBAcGFyYW0ge0FycmF5fSBwYXJhbXMsIGFuIGFycmF5IG9mIG1ldGhvZCBwYXJhbXMsIG9wdGlvbmFsXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB2YWxpZCBqc29ucnBjIHBheWxvYWQgb2JqZWN0XG4gKi9cbkpzb25ycGMudG9QYXlsb2FkID0gZnVuY3Rpb24gKG1ldGhvZCwgcGFyYW1zKSB7XG4gICAgaWYgKCFtZXRob2QpXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2pzb25ycGMgbWV0aG9kIHNob3VsZCBiZSBzcGVjaWZpZWQhJyk7XG5cbiAgICAvLyBhZHZhbmNlIG1lc3NhZ2UgSURcbiAgICBKc29ucnBjLm1lc3NhZ2VJZCsrO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgIGlkOiBKc29ucnBjLm1lc3NhZ2VJZCxcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIHBhcmFtczogcGFyYW1zIHx8IFtdXG4gICAgfTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBjaGVjayBpZiBqc29ucnBjIHJlc3BvbnNlIGlzIHZhbGlkXG4gKlxuICogQG1ldGhvZCBpc1ZhbGlkUmVzcG9uc2VcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgcmVzcG9uc2UgaXMgdmFsaWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5Kc29ucnBjLmlzVmFsaWRSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHJlc3BvbnNlKSA/IHJlc3BvbnNlLmV2ZXJ5KHZhbGlkYXRlU2luZ2xlTWVzc2FnZSkgOiB2YWxpZGF0ZVNpbmdsZU1lc3NhZ2UocmVzcG9uc2UpO1xuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVTaW5nbGVNZXNzYWdlKG1lc3NhZ2Upe1xuICAgICAgcmV0dXJuICEhbWVzc2FnZSAmJlxuICAgICAgICAhbWVzc2FnZS5lcnJvciAmJlxuICAgICAgICBtZXNzYWdlLmpzb25ycGMgPT09ICcyLjAnICYmXG4gICAgICAgIHR5cGVvZiBtZXNzYWdlLmlkID09PSAnbnVtYmVyJyAmJlxuICAgICAgICBtZXNzYWdlLnJlc3VsdCAhPT0gdW5kZWZpbmVkOyAvLyBvbmx5IHVuZGVmaW5lZCBpcyBub3QgdmFsaWQganNvbiBvYmplY3RcbiAgICB9XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gY3JlYXRlIGJhdGNoIHBheWxvYWQgb2JqZWN0XG4gKlxuICogQG1ldGhvZCB0b0JhdGNoUGF5bG9hZFxuICogQHBhcmFtIHtBcnJheX0gbWVzc2FnZXMsIGFuIGFycmF5IG9mIG9iamVjdHMgd2l0aCBtZXRob2QgKHJlcXVpcmVkKSBhbmQgcGFyYW1zIChvcHRpb25hbCkgZmllbGRzXG4gKiBAcmV0dXJucyB7QXJyYXl9IGJhdGNoIHBheWxvYWRcbiAqL1xuSnNvbnJwYy50b0JhdGNoUGF5bG9hZCA9IGZ1bmN0aW9uIChtZXNzYWdlcykge1xuICAgIHJldHVybiBtZXNzYWdlcy5tYXAoZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIEpzb25ycGMudG9QYXlsb2FkKG1lc3NhZ2UubWV0aG9kLCBtZXNzYWdlLnBhcmFtcyk7XG4gICAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpzb25ycGM7XG5cbiIsIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKipcbiAqIEBmaWxlIG1ldGhvZC5qc1xuICogQGF1dGhvciBNYXJlayBLb3Rld2ljeiA8bWFyZWtAZXRoZGV2LmNvbT5cbiAqIEBkYXRlIDIwMTVcbiAqL1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpO1xudmFyIGVycm9ycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG5cbnZhciBNZXRob2QgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgICB0aGlzLmNhbGwgPSBvcHRpb25zLmNhbGw7XG4gICAgdGhpcy5wYXJhbXMgPSBvcHRpb25zLnBhcmFtcyB8fCAwO1xuICAgIHRoaXMuaW5wdXRGb3JtYXR0ZXIgPSBvcHRpb25zLmlucHV0Rm9ybWF0dGVyO1xuICAgIHRoaXMub3V0cHV0Rm9ybWF0dGVyID0gb3B0aW9ucy5vdXRwdXRGb3JtYXR0ZXI7XG4gICAgdGhpcy5yZXF1ZXN0TWFuYWdlciA9IG51bGw7XG59O1xuXG5NZXRob2QucHJvdG90eXBlLnNldFJlcXVlc3RNYW5hZ2VyID0gZnVuY3Rpb24gKHJtKSB7XG4gICAgdGhpcy5yZXF1ZXN0TWFuYWdlciA9IHJtO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBkZXRlcm1pbmUgbmFtZSBvZiB0aGUganNvbnJwYyBtZXRob2QgYmFzZWQgb24gYXJndW1lbnRzXG4gKlxuICogQG1ldGhvZCBnZXRDYWxsXG4gKiBAcGFyYW0ge0FycmF5fSBhcmd1bWVudHNcbiAqIEByZXR1cm4ge1N0cmluZ30gbmFtZSBvZiBqc29ucnBjIG1ldGhvZFxuICovXG5NZXRob2QucHJvdG90eXBlLmdldENhbGwgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIHJldHVybiB1dGlscy5pc0Z1bmN0aW9uKHRoaXMuY2FsbCkgPyB0aGlzLmNhbGwoYXJncykgOiB0aGlzLmNhbGw7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIGV4dHJhY3QgY2FsbGJhY2sgZnJvbSBhcnJheSBvZiBhcmd1bWVudHMuIE1vZGlmaWVzIGlucHV0IHBhcmFtXG4gKlxuICogQG1ldGhvZCBleHRyYWN0Q2FsbGJhY2tcbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3VtZW50c1xuICogQHJldHVybiB7RnVuY3Rpb258TnVsbH0gY2FsbGJhY2ssIGlmIGV4aXN0c1xuICovXG5NZXRob2QucHJvdG90eXBlLmV4dHJhY3RDYWxsYmFjayA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oYXJnc1thcmdzLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICByZXR1cm4gYXJncy5wb3AoKTsgLy8gbW9kaWZ5IHRoZSBhcmdzIGFycmF5IVxuICAgIH1cbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBjaGVjayBpZiB0aGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBpcyBjb3JyZWN0XG4gKiBcbiAqIEBtZXRob2QgdmFsaWRhdGVBcmdzXG4gKiBAcGFyYW0ge0FycmF5fSBhcmd1bWVudHNcbiAqIEB0aHJvd3Mge0Vycm9yfSBpZiBpdCBpcyBub3RcbiAqL1xuTWV0aG9kLnByb3RvdHlwZS52YWxpZGF0ZUFyZ3MgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gdGhpcy5wYXJhbXMpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JzLkludmFsaWROdW1iZXJPZlJQQ1BhcmFtcygpO1xuICAgIH1cbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBmb3JtYXQgaW5wdXQgYXJncyBvZiBtZXRob2RcbiAqIFxuICogQG1ldGhvZCBmb3JtYXRJbnB1dFxuICogQHBhcmFtIHtBcnJheX1cbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5NZXRob2QucHJvdG90eXBlLmZvcm1hdElucHV0ID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuaW5wdXRGb3JtYXR0ZXIpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaW5wdXRGb3JtYXR0ZXIubWFwKGZ1bmN0aW9uIChmb3JtYXR0ZXIsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBmb3JtYXR0ZXIgPyBmb3JtYXR0ZXIoYXJnc1tpbmRleF0pIDogYXJnc1tpbmRleF07XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gZm9ybWF0IG91dHB1dChyZXN1bHQpIG9mIG1ldGhvZFxuICpcbiAqIEBtZXRob2QgZm9ybWF0T3V0cHV0XG4gKiBAcGFyYW0ge09iamVjdH1cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuTWV0aG9kLnByb3RvdHlwZS5mb3JtYXRPdXRwdXQgPSBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIHRoaXMub3V0cHV0Rm9ybWF0dGVyICYmIHJlc3VsdCA/IHRoaXMub3V0cHV0Rm9ybWF0dGVyKHJlc3VsdCkgOiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIFNob3VsZCBjcmVhdGUgcGF5bG9hZCBmcm9tIGdpdmVuIGlucHV0IGFyZ3NcbiAqXG4gKiBAbWV0aG9kIHRvUGF5bG9hZFxuICogQHBhcmFtIHtBcnJheX0gYXJnc1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5NZXRob2QucHJvdG90eXBlLnRvUGF5bG9hZCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgdmFyIGNhbGwgPSB0aGlzLmdldENhbGwoYXJncyk7XG4gICAgdmFyIGNhbGxiYWNrID0gdGhpcy5leHRyYWN0Q2FsbGJhY2soYXJncyk7XG4gICAgdmFyIHBhcmFtcyA9IHRoaXMuZm9ybWF0SW5wdXQoYXJncyk7XG4gICAgdGhpcy52YWxpZGF0ZUFyZ3MocGFyYW1zKTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIG1ldGhvZDogY2FsbCxcbiAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgIGNhbGxiYWNrOiBjYWxsYmFja1xuICAgIH07XG59O1xuXG5NZXRob2QucHJvdG90eXBlLmF0dGFjaFRvT2JqZWN0ID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBmdW5jID0gdGhpcy5idWlsZENhbGwoKTtcbiAgICBmdW5jLmNhbGwgPSB0aGlzLmNhbGw7IC8vIFRPRE8hISEgdGhhdCdzIHVnbHkuIGZpbHRlci5qcyB1c2VzIGl0XG4gICAgdmFyIG5hbWUgPSB0aGlzLm5hbWUuc3BsaXQoJy4nKTtcbiAgICBpZiAobmFtZS5sZW5ndGggPiAxKSB7XG4gICAgICAgIG9ialtuYW1lWzBdXSA9IG9ialtuYW1lWzBdXSB8fCB7fTtcbiAgICAgICAgb2JqW25hbWVbMF1dW25hbWVbMV1dID0gZnVuYztcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmpbbmFtZVswXV0gPSBmdW5jOyBcbiAgICB9XG59O1xuXG5NZXRob2QucHJvdG90eXBlLmJ1aWxkQ2FsbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBtZXRob2QgPSB0aGlzO1xuICAgIHZhciBzZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGF5bG9hZCA9IG1ldGhvZC50b1BheWxvYWQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgICAgIGlmIChwYXlsb2FkLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kLnJlcXVlc3RNYW5hZ2VyLnNlbmRBc3luYyhwYXlsb2FkLCBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkLmNhbGxiYWNrKGVyciwgbWV0aG9kLmZvcm1hdE91dHB1dChyZXN1bHQpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXRob2QuZm9ybWF0T3V0cHV0KG1ldGhvZC5yZXF1ZXN0TWFuYWdlci5zZW5kKHBheWxvYWQpKTtcbiAgICB9O1xuICAgIHNlbmQucmVxdWVzdCA9IHRoaXMucmVxdWVzdC5iaW5kKHRoaXMpO1xuICAgIHJldHVybiBzZW5kO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGNyZWF0ZSBwdXJlIEpTT05SUEMgcmVxdWVzdCB3aGljaCBjYW4gYmUgdXNlZCBpbiBiYXRjaCByZXF1ZXN0XG4gKlxuICogQG1ldGhvZCByZXF1ZXN0XG4gKiBAcGFyYW0gey4uLn0gcGFyYW1zXG4gKiBAcmV0dXJuIHtPYmplY3R9IGpzb25ycGMgcmVxdWVzdFxuICovXG5NZXRob2QucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBheWxvYWQgPSB0aGlzLnRvUGF5bG9hZChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICBwYXlsb2FkLmZvcm1hdCA9IHRoaXMuZm9ybWF0T3V0cHV0LmJpbmQodGhpcyk7XG4gICAgcmV0dXJuIHBheWxvYWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1ldGhvZDtcbiIsIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKiogQGZpbGUgZGIuanNcbiAqIEBhdXRob3JzOlxuICogICBNYXJlayBLb3Rld2ljeiA8bWFyZWtAZXRoZGV2LmNvbT5cbiAqIEBkYXRlIDIwMTVcbiAqL1xuXG52YXIgTWV0aG9kID0gcmVxdWlyZSgnLi4vbWV0aG9kJyk7XG5cbnZhciBEQiA9IGZ1bmN0aW9uICh3ZWIzKSB7XG4gICAgdGhpcy5fcmVxdWVzdE1hbmFnZXIgPSB3ZWIzLl9yZXF1ZXN0TWFuYWdlcjtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBcbiAgICBtZXRob2RzKCkuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHsgXG4gICAgICAgIG1ldGhvZC5hdHRhY2hUb09iamVjdChzZWxmKTtcbiAgICAgICAgbWV0aG9kLnNldFJlcXVlc3RNYW5hZ2VyKHdlYjMuX3JlcXVlc3RNYW5hZ2VyKTtcbiAgICB9KTtcbn07XG5cbnZhciBtZXRob2RzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwdXRTdHJpbmcgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ3B1dFN0cmluZycsXG4gICAgICAgIGNhbGw6ICdkYl9wdXRTdHJpbmcnLFxuICAgICAgICBwYXJhbXM6IDNcbiAgICB9KTtcblxuICAgIHZhciBnZXRTdHJpbmcgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ2dldFN0cmluZycsXG4gICAgICAgIGNhbGw6ICdkYl9nZXRTdHJpbmcnLFxuICAgICAgICBwYXJhbXM6IDJcbiAgICB9KTtcblxuICAgIHZhciBwdXRIZXggPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ3B1dEhleCcsXG4gICAgICAgIGNhbGw6ICdkYl9wdXRIZXgnLFxuICAgICAgICBwYXJhbXM6IDNcbiAgICB9KTtcblxuICAgIHZhciBnZXRIZXggPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ2dldEhleCcsXG4gICAgICAgIGNhbGw6ICdkYl9nZXRIZXgnLFxuICAgICAgICBwYXJhbXM6IDJcbiAgICB9KTtcblxuICAgIHJldHVybiBbXG4gICAgICAgIHB1dFN0cmluZywgZ2V0U3RyaW5nLCBwdXRIZXgsIGdldEhleFxuICAgIF07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERCO1xuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgZXRoLmpzXG4gKiBAYXV0aG9yIE1hcmVrIEtvdGV3aWN6IDxtYXJla0BldGhkZXYuY29tPlxuICogQGF1dGhvciBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZGV2LmNvbT5cbiAqIEBkYXRlIDIwMTVcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGZvcm1hdHRlcnMgPSByZXF1aXJlKCcuLi9mb3JtYXR0ZXJzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy91dGlscycpO1xudmFyIE1ldGhvZCA9IHJlcXVpcmUoJy4uL21ldGhvZCcpO1xudmFyIFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vcHJvcGVydHknKTtcbnZhciBjID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvY29uZmlnJyk7XG52YXIgQ29udHJhY3QgPSByZXF1aXJlKCcuLi9jb250cmFjdCcpO1xudmFyIHdhdGNoZXMgPSByZXF1aXJlKCcuL3dhdGNoZXMnKTtcbnZhciBGaWx0ZXIgPSByZXF1aXJlKCcuLi9maWx0ZXInKTtcbnZhciBJc1N5bmNpbmcgPSByZXF1aXJlKCcuLi9zeW5jaW5nJyk7XG52YXIgbmFtZXJlZyA9IHJlcXVpcmUoJy4uL25hbWVyZWcnKTtcbnZhciBJYmFuID0gcmVxdWlyZSgnLi4vaWJhbicpO1xudmFyIHRyYW5zZmVyID0gcmVxdWlyZSgnLi4vdHJhbnNmZXInKTtcblxudmFyIGJsb2NrQ2FsbCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgcmV0dXJuICh1dGlscy5pc1N0cmluZyhhcmdzWzBdKSAmJiBhcmdzWzBdLmluZGV4T2YoJzB4JykgPT09IDApID8gXCJldGhfZ2V0QmxvY2tCeUhhc2hcIiA6IFwiZXRoX2dldEJsb2NrQnlOdW1iZXJcIjtcbn07XG5cbnZhciB0cmFuc2FjdGlvbkZyb21CbG9ja0NhbGwgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIHJldHVybiAodXRpbHMuaXNTdHJpbmcoYXJnc1swXSkgJiYgYXJnc1swXS5pbmRleE9mKCcweCcpID09PSAwKSA/ICdldGhfZ2V0VHJhbnNhY3Rpb25CeUJsb2NrSGFzaEFuZEluZGV4JyA6ICdldGhfZ2V0VHJhbnNhY3Rpb25CeUJsb2NrTnVtYmVyQW5kSW5kZXgnO1xufTtcblxudmFyIHVuY2xlQ2FsbCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgcmV0dXJuICh1dGlscy5pc1N0cmluZyhhcmdzWzBdKSAmJiBhcmdzWzBdLmluZGV4T2YoJzB4JykgPT09IDApID8gJ2V0aF9nZXRVbmNsZUJ5QmxvY2tIYXNoQW5kSW5kZXgnIDogJ2V0aF9nZXRVbmNsZUJ5QmxvY2tOdW1iZXJBbmRJbmRleCc7XG59O1xuXG52YXIgZ2V0QmxvY2tUcmFuc2FjdGlvbkNvdW50Q2FsbCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgcmV0dXJuICh1dGlscy5pc1N0cmluZyhhcmdzWzBdKSAmJiBhcmdzWzBdLmluZGV4T2YoJzB4JykgPT09IDApID8gJ2V0aF9nZXRCbG9ja1RyYW5zYWN0aW9uQ291bnRCeUhhc2gnIDogJ2V0aF9nZXRCbG9ja1RyYW5zYWN0aW9uQ291bnRCeU51bWJlcic7XG59O1xuXG52YXIgdW5jbGVDb3VudENhbGwgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIHJldHVybiAodXRpbHMuaXNTdHJpbmcoYXJnc1swXSkgJiYgYXJnc1swXS5pbmRleE9mKCcweCcpID09PSAwKSA/ICdldGhfZ2V0VW5jbGVDb3VudEJ5QmxvY2tIYXNoJyA6ICdldGhfZ2V0VW5jbGVDb3VudEJ5QmxvY2tOdW1iZXInO1xufTtcblxuZnVuY3Rpb24gRXRoKHdlYjMpIHtcbiAgICB0aGlzLl9yZXF1ZXN0TWFuYWdlciA9IHdlYjMuX3JlcXVlc3RNYW5hZ2VyO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgbWV0aG9kcygpLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICAgIG1ldGhvZC5hdHRhY2hUb09iamVjdChzZWxmKTtcbiAgICAgICAgbWV0aG9kLnNldFJlcXVlc3RNYW5hZ2VyKHNlbGYuX3JlcXVlc3RNYW5hZ2VyKTtcbiAgICB9KTtcblxuICAgIHByb3BlcnRpZXMoKS5mb3JFYWNoKGZ1bmN0aW9uKHApIHtcbiAgICAgICAgcC5hdHRhY2hUb09iamVjdChzZWxmKTtcbiAgICAgICAgcC5zZXRSZXF1ZXN0TWFuYWdlcihzZWxmLl9yZXF1ZXN0TWFuYWdlcik7XG4gICAgfSk7XG5cblxuICAgIHRoaXMuaWJhbiA9IEliYW47XG4gICAgdGhpcy5zZW5kSUJBTlRyYW5zYWN0aW9uID0gdHJhbnNmZXIuYmluZChudWxsLCB0aGlzKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV0aC5wcm90b3R5cGUsICdkZWZhdWx0QmxvY2snLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjLmRlZmF1bHRCbG9jaztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICBjLmRlZmF1bHRCbG9jayA9IHZhbDtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV0aC5wcm90b3R5cGUsICdkZWZhdWx0QWNjb3VudCcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGMuZGVmYXVsdEFjY291bnQ7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgYy5kZWZhdWx0QWNjb3VudCA9IHZhbDtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG59KTtcblxudmFyIG1ldGhvZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGdldEJhbGFuY2UgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ2dldEJhbGFuY2UnLFxuICAgICAgICBjYWxsOiAnZXRoX2dldEJhbGFuY2UnLFxuICAgICAgICBwYXJhbXM6IDIsXG4gICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbZm9ybWF0dGVycy5pbnB1dEFkZHJlc3NGb3JtYXR0ZXIsIGZvcm1hdHRlcnMuaW5wdXREZWZhdWx0QmxvY2tOdW1iZXJGb3JtYXR0ZXJdLFxuICAgICAgICBvdXRwdXRGb3JtYXR0ZXI6IGZvcm1hdHRlcnMub3V0cHV0QmlnTnVtYmVyRm9ybWF0dGVyXG4gICAgfSk7XG5cbiAgICB2YXIgZ2V0U3RvcmFnZUF0ID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdnZXRTdG9yYWdlQXQnLFxuICAgICAgICBjYWxsOiAnZXRoX2dldFN0b3JhZ2VBdCcsXG4gICAgICAgIHBhcmFtczogMyxcbiAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtudWxsLCB1dGlscy50b0hleCwgZm9ybWF0dGVycy5pbnB1dERlZmF1bHRCbG9ja051bWJlckZvcm1hdHRlcl1cbiAgICB9KTtcblxuICAgIHZhciBnZXRDb2RlID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdnZXRDb2RlJyxcbiAgICAgICAgY2FsbDogJ2V0aF9nZXRDb2RlJyxcbiAgICAgICAgcGFyYW1zOiAyLFxuICAgICAgICBpbnB1dEZvcm1hdHRlcjogW2Zvcm1hdHRlcnMuaW5wdXRBZGRyZXNzRm9ybWF0dGVyLCBmb3JtYXR0ZXJzLmlucHV0RGVmYXVsdEJsb2NrTnVtYmVyRm9ybWF0dGVyXVxuICAgIH0pO1xuXG4gICAgdmFyIGdldEJsb2NrID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdnZXRCbG9jaycsXG4gICAgICAgIGNhbGw6IGJsb2NrQ2FsbCxcbiAgICAgICAgcGFyYW1zOiAyLFxuICAgICAgICBpbnB1dEZvcm1hdHRlcjogW2Zvcm1hdHRlcnMuaW5wdXRCbG9ja051bWJlckZvcm1hdHRlciwgZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gISF2YWw7IH1dLFxuICAgICAgICBvdXRwdXRGb3JtYXR0ZXI6IGZvcm1hdHRlcnMub3V0cHV0QmxvY2tGb3JtYXR0ZXJcbiAgICB9KTtcblxuICAgIHZhciBnZXRVbmNsZSA9IG5ldyBNZXRob2Qoe1xuICAgICAgICBuYW1lOiAnZ2V0VW5jbGUnLFxuICAgICAgICBjYWxsOiB1bmNsZUNhbGwsXG4gICAgICAgIHBhcmFtczogMixcbiAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtmb3JtYXR0ZXJzLmlucHV0QmxvY2tOdW1iZXJGb3JtYXR0ZXIsIHV0aWxzLnRvSGV4XSxcbiAgICAgICAgb3V0cHV0Rm9ybWF0dGVyOiBmb3JtYXR0ZXJzLm91dHB1dEJsb2NrRm9ybWF0dGVyLFxuXG4gICAgfSk7XG5cbiAgICB2YXIgZ2V0Q29tcGlsZXJzID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdnZXRDb21waWxlcnMnLFxuICAgICAgICBjYWxsOiAnZXRoX2dldENvbXBpbGVycycsXG4gICAgICAgIHBhcmFtczogMFxuICAgIH0pO1xuXG4gICAgdmFyIGdldEJsb2NrVHJhbnNhY3Rpb25Db3VudCA9IG5ldyBNZXRob2Qoe1xuICAgICAgICBuYW1lOiAnZ2V0QmxvY2tUcmFuc2FjdGlvbkNvdW50JyxcbiAgICAgICAgY2FsbDogZ2V0QmxvY2tUcmFuc2FjdGlvbkNvdW50Q2FsbCxcbiAgICAgICAgcGFyYW1zOiAxLFxuICAgICAgICBpbnB1dEZvcm1hdHRlcjogW2Zvcm1hdHRlcnMuaW5wdXRCbG9ja051bWJlckZvcm1hdHRlcl0sXG4gICAgICAgIG91dHB1dEZvcm1hdHRlcjogdXRpbHMudG9EZWNpbWFsXG4gICAgfSk7XG5cbiAgICB2YXIgZ2V0QmxvY2tVbmNsZUNvdW50ID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdnZXRCbG9ja1VuY2xlQ291bnQnLFxuICAgICAgICBjYWxsOiB1bmNsZUNvdW50Q2FsbCxcbiAgICAgICAgcGFyYW1zOiAxLFxuICAgICAgICBpbnB1dEZvcm1hdHRlcjogW2Zvcm1hdHRlcnMuaW5wdXRCbG9ja051bWJlckZvcm1hdHRlcl0sXG4gICAgICAgIG91dHB1dEZvcm1hdHRlcjogdXRpbHMudG9EZWNpbWFsXG4gICAgfSk7XG5cbiAgICB2YXIgZ2V0VHJhbnNhY3Rpb24gPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ2dldFRyYW5zYWN0aW9uJyxcbiAgICAgICAgY2FsbDogJ2V0aF9nZXRUcmFuc2FjdGlvbkJ5SGFzaCcsXG4gICAgICAgIHBhcmFtczogMSxcbiAgICAgICAgb3V0cHV0Rm9ybWF0dGVyOiBmb3JtYXR0ZXJzLm91dHB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyXG4gICAgfSk7XG5cbiAgICB2YXIgZ2V0VHJhbnNhY3Rpb25Gcm9tQmxvY2sgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ2dldFRyYW5zYWN0aW9uRnJvbUJsb2NrJyxcbiAgICAgICAgY2FsbDogdHJhbnNhY3Rpb25Gcm9tQmxvY2tDYWxsLFxuICAgICAgICBwYXJhbXM6IDIsXG4gICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbZm9ybWF0dGVycy5pbnB1dEJsb2NrTnVtYmVyRm9ybWF0dGVyLCB1dGlscy50b0hleF0sXG4gICAgICAgIG91dHB1dEZvcm1hdHRlcjogZm9ybWF0dGVycy5vdXRwdXRUcmFuc2FjdGlvbkZvcm1hdHRlclxuICAgIH0pO1xuXG4gICAgdmFyIGdldFRyYW5zYWN0aW9uUmVjZWlwdCA9IG5ldyBNZXRob2Qoe1xuICAgICAgICBuYW1lOiAnZ2V0VHJhbnNhY3Rpb25SZWNlaXB0JyxcbiAgICAgICAgY2FsbDogJ2V0aF9nZXRUcmFuc2FjdGlvblJlY2VpcHQnLFxuICAgICAgICBwYXJhbXM6IDEsXG4gICAgICAgIG91dHB1dEZvcm1hdHRlcjogZm9ybWF0dGVycy5vdXRwdXRUcmFuc2FjdGlvblJlY2VpcHRGb3JtYXR0ZXJcbiAgICB9KTtcblxuICAgIHZhciBnZXRUcmFuc2FjdGlvbkNvdW50ID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdnZXRUcmFuc2FjdGlvbkNvdW50JyxcbiAgICAgICAgY2FsbDogJ2V0aF9nZXRUcmFuc2FjdGlvbkNvdW50JyxcbiAgICAgICAgcGFyYW1zOiAyLFxuICAgICAgICBpbnB1dEZvcm1hdHRlcjogW251bGwsIGZvcm1hdHRlcnMuaW5wdXREZWZhdWx0QmxvY2tOdW1iZXJGb3JtYXR0ZXJdLFxuICAgICAgICBvdXRwdXRGb3JtYXR0ZXI6IHV0aWxzLnRvRGVjaW1hbFxuICAgIH0pO1xuXG4gICAgdmFyIHNlbmRSYXdUcmFuc2FjdGlvbiA9IG5ldyBNZXRob2Qoe1xuICAgICAgICBuYW1lOiAnc2VuZFJhd1RyYW5zYWN0aW9uJyxcbiAgICAgICAgY2FsbDogJ2V0aF9zZW5kUmF3VHJhbnNhY3Rpb24nLFxuICAgICAgICBwYXJhbXM6IDEsXG4gICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbbnVsbF1cbiAgICB9KTtcblxuICAgIHZhciBzZW5kVHJhbnNhY3Rpb24gPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ3NlbmRUcmFuc2FjdGlvbicsXG4gICAgICAgIGNhbGw6ICdldGhfc2VuZFRyYW5zYWN0aW9uJyxcbiAgICAgICAgcGFyYW1zOiAxLFxuICAgICAgICBpbnB1dEZvcm1hdHRlcjogW2Zvcm1hdHRlcnMuaW5wdXRUcmFuc2FjdGlvbkZvcm1hdHRlcl1cbiAgICB9KTtcblxuICAgIHZhciBzaWduVHJhbnNhY3Rpb24gPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ3NpZ25UcmFuc2FjdGlvbicsXG4gICAgICAgIGNhbGw6ICdldGhfc2lnblRyYW5zYWN0aW9uJyxcbiAgICAgICAgcGFyYW1zOiAxLFxuICAgICAgICBpbnB1dEZvcm1hdHRlcjogW2Zvcm1hdHRlcnMuaW5wdXRUcmFuc2FjdGlvbkZvcm1hdHRlcl1cbiAgICB9KTtcblxuICAgIHZhciBzaWduID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdzaWduJyxcbiAgICAgICAgY2FsbDogJ2V0aF9zaWduJyxcbiAgICAgICAgcGFyYW1zOiAyLFxuICAgICAgICBpbnB1dEZvcm1hdHRlcjogW2Zvcm1hdHRlcnMuaW5wdXRBZGRyZXNzRm9ybWF0dGVyLCBudWxsXVxuICAgIH0pO1xuXG4gICAgdmFyIGNhbGwgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ2NhbGwnLFxuICAgICAgICBjYWxsOiAnZXRoX2NhbGwnLFxuICAgICAgICBwYXJhbXM6IDIsXG4gICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbZm9ybWF0dGVycy5pbnB1dENhbGxGb3JtYXR0ZXIsIGZvcm1hdHRlcnMuaW5wdXREZWZhdWx0QmxvY2tOdW1iZXJGb3JtYXR0ZXJdXG4gICAgfSk7XG5cbiAgICB2YXIgZXN0aW1hdGVHYXMgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ2VzdGltYXRlR2FzJyxcbiAgICAgICAgY2FsbDogJ2V0aF9lc3RpbWF0ZUdhcycsXG4gICAgICAgIHBhcmFtczogMSxcbiAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtmb3JtYXR0ZXJzLmlucHV0Q2FsbEZvcm1hdHRlcl0sXG4gICAgICAgIG91dHB1dEZvcm1hdHRlcjogdXRpbHMudG9EZWNpbWFsXG4gICAgfSk7XG5cbiAgICB2YXIgY29tcGlsZVNvbGlkaXR5ID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdjb21waWxlLnNvbGlkaXR5JyxcbiAgICAgICAgY2FsbDogJ2V0aF9jb21waWxlU29saWRpdHknLFxuICAgICAgICBwYXJhbXM6IDFcbiAgICB9KTtcblxuICAgIHZhciBjb21waWxlTExMID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdjb21waWxlLmxsbCcsXG4gICAgICAgIGNhbGw6ICdldGhfY29tcGlsZUxMTCcsXG4gICAgICAgIHBhcmFtczogMVxuICAgIH0pO1xuXG4gICAgdmFyIGNvbXBpbGVTZXJwZW50ID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdjb21waWxlLnNlcnBlbnQnLFxuICAgICAgICBjYWxsOiAnZXRoX2NvbXBpbGVTZXJwZW50JyxcbiAgICAgICAgcGFyYW1zOiAxXG4gICAgfSk7XG5cbiAgICB2YXIgc3VibWl0V29yayA9IG5ldyBNZXRob2Qoe1xuICAgICAgICBuYW1lOiAnc3VibWl0V29yaycsXG4gICAgICAgIGNhbGw6ICdldGhfc3VibWl0V29yaycsXG4gICAgICAgIHBhcmFtczogM1xuICAgIH0pO1xuXG4gICAgdmFyIGdldFdvcmsgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ2dldFdvcmsnLFxuICAgICAgICBjYWxsOiAnZXRoX2dldFdvcmsnLFxuICAgICAgICBwYXJhbXM6IDBcbiAgICB9KTtcblxuICAgIHJldHVybiBbXG4gICAgICAgIGdldEJhbGFuY2UsXG4gICAgICAgIGdldFN0b3JhZ2VBdCxcbiAgICAgICAgZ2V0Q29kZSxcbiAgICAgICAgZ2V0QmxvY2ssXG4gICAgICAgIGdldFVuY2xlLFxuICAgICAgICBnZXRDb21waWxlcnMsXG4gICAgICAgIGdldEJsb2NrVHJhbnNhY3Rpb25Db3VudCxcbiAgICAgICAgZ2V0QmxvY2tVbmNsZUNvdW50LFxuICAgICAgICBnZXRUcmFuc2FjdGlvbixcbiAgICAgICAgZ2V0VHJhbnNhY3Rpb25Gcm9tQmxvY2ssXG4gICAgICAgIGdldFRyYW5zYWN0aW9uUmVjZWlwdCxcbiAgICAgICAgZ2V0VHJhbnNhY3Rpb25Db3VudCxcbiAgICAgICAgY2FsbCxcbiAgICAgICAgZXN0aW1hdGVHYXMsXG4gICAgICAgIHNlbmRSYXdUcmFuc2FjdGlvbixcbiAgICAgICAgc2lnblRyYW5zYWN0aW9uLFxuICAgICAgICBzZW5kVHJhbnNhY3Rpb24sXG4gICAgICAgIHNpZ24sXG4gICAgICAgIGNvbXBpbGVTb2xpZGl0eSxcbiAgICAgICAgY29tcGlsZUxMTCxcbiAgICAgICAgY29tcGlsZVNlcnBlbnQsXG4gICAgICAgIHN1Ym1pdFdvcmssXG4gICAgICAgIGdldFdvcmtcbiAgICBdO1xufTtcblxuXG52YXIgcHJvcGVydGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBuZXcgUHJvcGVydHkoe1xuICAgICAgICAgICAgbmFtZTogJ2NvaW5iYXNlJyxcbiAgICAgICAgICAgIGdldHRlcjogJ2V0aF9jb2luYmFzZSdcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBQcm9wZXJ0eSh7XG4gICAgICAgICAgICBuYW1lOiAnbWluaW5nJyxcbiAgICAgICAgICAgIGdldHRlcjogJ2V0aF9taW5pbmcnXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgUHJvcGVydHkoe1xuICAgICAgICAgICAgbmFtZTogJ2hhc2hyYXRlJyxcbiAgICAgICAgICAgIGdldHRlcjogJ2V0aF9oYXNocmF0ZScsXG4gICAgICAgICAgICBvdXRwdXRGb3JtYXR0ZXI6IHV0aWxzLnRvRGVjaW1hbFxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IFByb3BlcnR5KHtcbiAgICAgICAgICAgIG5hbWU6ICdzeW5jaW5nJyxcbiAgICAgICAgICAgIGdldHRlcjogJ2V0aF9zeW5jaW5nJyxcbiAgICAgICAgICAgIG91dHB1dEZvcm1hdHRlcjogZm9ybWF0dGVycy5vdXRwdXRTeW5jaW5nRm9ybWF0dGVyXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgUHJvcGVydHkoe1xuICAgICAgICAgICAgbmFtZTogJ2dhc1ByaWNlJyxcbiAgICAgICAgICAgIGdldHRlcjogJ2V0aF9nYXNQcmljZScsXG4gICAgICAgICAgICBvdXRwdXRGb3JtYXR0ZXI6IGZvcm1hdHRlcnMub3V0cHV0QmlnTnVtYmVyRm9ybWF0dGVyXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgUHJvcGVydHkoe1xuICAgICAgICAgICAgbmFtZTogJ2FjY291bnRzJyxcbiAgICAgICAgICAgIGdldHRlcjogJ2V0aF9hY2NvdW50cydcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBQcm9wZXJ0eSh7XG4gICAgICAgICAgICBuYW1lOiAnYmxvY2tOdW1iZXInLFxuICAgICAgICAgICAgZ2V0dGVyOiAnZXRoX2Jsb2NrTnVtYmVyJyxcbiAgICAgICAgICAgIG91dHB1dEZvcm1hdHRlcjogdXRpbHMudG9EZWNpbWFsXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgUHJvcGVydHkoe1xuICAgICAgICAgICAgbmFtZTogJ3Byb3RvY29sVmVyc2lvbicsXG4gICAgICAgICAgICBnZXR0ZXI6ICdldGhfcHJvdG9jb2xWZXJzaW9uJ1xuICAgICAgICB9KVxuICAgIF07XG59O1xuXG5FdGgucHJvdG90eXBlLmNvbnRyYWN0ID0gZnVuY3Rpb24gKGFiaSkge1xuICAgIHZhciBmYWN0b3J5ID0gbmV3IENvbnRyYWN0KHRoaXMsIGFiaSk7XG4gICAgcmV0dXJuIGZhY3Rvcnk7XG59O1xuXG5FdGgucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaywgZmlsdGVyQ3JlYXRpb25FcnJvckNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIG5ldyBGaWx0ZXIob3B0aW9ucywgJ2V0aCcsIHRoaXMuX3JlcXVlc3RNYW5hZ2VyLCB3YXRjaGVzLmV0aCgpLCBmb3JtYXR0ZXJzLm91dHB1dExvZ0Zvcm1hdHRlciwgY2FsbGJhY2ssIGZpbHRlckNyZWF0aW9uRXJyb3JDYWxsYmFjayk7XG59O1xuXG5FdGgucHJvdG90eXBlLm5hbWVyZWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJhY3QobmFtZXJlZy5nbG9iYWwuYWJpKS5hdChuYW1lcmVnLmdsb2JhbC5hZGRyZXNzKTtcbn07XG5cbkV0aC5wcm90b3R5cGUuaWNhcE5hbWVyZWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJhY3QobmFtZXJlZy5pY2FwLmFiaSkuYXQobmFtZXJlZy5pY2FwLmFkZHJlc3MpO1xufTtcblxuRXRoLnByb3RvdHlwZS5pc1N5bmNpbmcgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gbmV3IElzU3luY2luZyh0aGlzLl9yZXF1ZXN0TWFuYWdlciwgY2FsbGJhY2spO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdGg7XG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqIEBmaWxlIGV0aC5qc1xuICogQGF1dGhvcnM6XG4gKiAgIE1hcmVrIEtvdGV3aWN6IDxtYXJla0BldGhkZXYuY29tPlxuICogQGRhdGUgMjAxNVxuICovXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3V0aWxzJyk7XG52YXIgUHJvcGVydHkgPSByZXF1aXJlKCcuLi9wcm9wZXJ0eScpO1xuXG52YXIgTmV0ID0gZnVuY3Rpb24gKHdlYjMpIHtcbiAgICB0aGlzLl9yZXF1ZXN0TWFuYWdlciA9IHdlYjMuX3JlcXVlc3RNYW5hZ2VyO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgcHJvcGVydGllcygpLmZvckVhY2goZnVuY3Rpb24ocCkgeyBcbiAgICAgICAgcC5hdHRhY2hUb09iamVjdChzZWxmKTtcbiAgICAgICAgcC5zZXRSZXF1ZXN0TWFuYWdlcih3ZWIzLl9yZXF1ZXN0TWFuYWdlcik7XG4gICAgfSk7XG59O1xuXG4vLy8gQHJldHVybnMgYW4gYXJyYXkgb2Ygb2JqZWN0cyBkZXNjcmliaW5nIHdlYjMuZXRoIGFwaSBwcm9wZXJ0aWVzXG52YXIgcHJvcGVydGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBuZXcgUHJvcGVydHkoe1xuICAgICAgICAgICAgbmFtZTogJ2xpc3RlbmluZycsXG4gICAgICAgICAgICBnZXR0ZXI6ICduZXRfbGlzdGVuaW5nJ1xuICAgICAgICB9KSxcbiAgICAgICAgbmV3IFByb3BlcnR5KHtcbiAgICAgICAgICAgIG5hbWU6ICdwZWVyQ291bnQnLFxuICAgICAgICAgICAgZ2V0dGVyOiAnbmV0X3BlZXJDb3VudCcsXG4gICAgICAgICAgICBvdXRwdXRGb3JtYXR0ZXI6IHV0aWxzLnRvRGVjaW1hbFxuICAgICAgICB9KVxuICAgIF07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5ldDtcbiIsIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKipcbiAqIEBmaWxlIGV0aC5qc1xuICogQGF1dGhvciBNYXJlayBLb3Rld2ljeiA8bWFyZWtAZXRoZGV2LmNvbT5cbiAqIEBhdXRob3IgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBNZXRob2QgPSByZXF1aXJlKCcuLi9tZXRob2QnKTtcbnZhciBQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL3Byb3BlcnR5Jyk7XG52YXIgZm9ybWF0dGVycyA9IHJlcXVpcmUoJy4uL2Zvcm1hdHRlcnMnKTtcblxuZnVuY3Rpb24gUGVyc29uYWwod2ViMykge1xuICAgIHRoaXMuX3JlcXVlc3RNYW5hZ2VyID0gd2ViMy5fcmVxdWVzdE1hbmFnZXI7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBtZXRob2RzKCkuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgICAgbWV0aG9kLmF0dGFjaFRvT2JqZWN0KHNlbGYpO1xuICAgICAgICBtZXRob2Quc2V0UmVxdWVzdE1hbmFnZXIoc2VsZi5fcmVxdWVzdE1hbmFnZXIpO1xuICAgIH0pO1xuXG4gICAgcHJvcGVydGllcygpLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgICBwLmF0dGFjaFRvT2JqZWN0KHNlbGYpO1xuICAgICAgICBwLnNldFJlcXVlc3RNYW5hZ2VyKHNlbGYuX3JlcXVlc3RNYW5hZ2VyKTtcbiAgICB9KTtcbn1cblxudmFyIG1ldGhvZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5ld0FjY291bnQgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ25ld0FjY291bnQnLFxuICAgICAgICBjYWxsOiAncGVyc29uYWxfbmV3QWNjb3VudCcsXG4gICAgICAgIHBhcmFtczogMSxcbiAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtudWxsXVxuICAgIH0pO1xuXG4gICAgdmFyIGltcG9ydFJhd0tleSA9IG5ldyBNZXRob2Qoe1xuICAgICAgICBuYW1lOiAnaW1wb3J0UmF3S2V5Jyxcblx0XHRjYWxsOiAncGVyc29uYWxfaW1wb3J0UmF3S2V5Jyxcblx0XHRwYXJhbXM6IDJcbiAgICB9KTtcblxuICAgIHZhciBzaWduID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdzaWduJyxcblx0XHRjYWxsOiAncGVyc29uYWxfc2lnbicsXG5cdFx0cGFyYW1zOiAzLFxuXHRcdGlucHV0Rm9ybWF0dGVyOiBbbnVsbCwgZm9ybWF0dGVycy5pbnB1dEFkZHJlc3NGb3JtYXR0ZXIsIG51bGxdXG4gICAgfSk7XG5cbiAgICB2YXIgZWNSZWNvdmVyID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdlY1JlY292ZXInLFxuXHRcdGNhbGw6ICdwZXJzb25hbF9lY1JlY292ZXInLFxuXHRcdHBhcmFtczogMlxuICAgIH0pO1xuXG4gICAgdmFyIHVubG9ja0FjY291bnQgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ3VubG9ja0FjY291bnQnLFxuICAgICAgICBjYWxsOiAncGVyc29uYWxfdW5sb2NrQWNjb3VudCcsXG4gICAgICAgIHBhcmFtczogMyxcbiAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtmb3JtYXR0ZXJzLmlucHV0QWRkcmVzc0Zvcm1hdHRlciwgbnVsbCwgbnVsbF1cbiAgICB9KTtcblxuICAgIHZhciBzZW5kVHJhbnNhY3Rpb24gPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ3NlbmRUcmFuc2FjdGlvbicsXG4gICAgICAgIGNhbGw6ICdwZXJzb25hbF9zZW5kVHJhbnNhY3Rpb24nLFxuICAgICAgICBwYXJhbXM6IDIsXG4gICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbZm9ybWF0dGVycy5pbnB1dFRyYW5zYWN0aW9uRm9ybWF0dGVyLCBudWxsXVxuICAgIH0pO1xuXG4gICAgdmFyIGxvY2tBY2NvdW50ID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdsb2NrQWNjb3VudCcsXG4gICAgICAgIGNhbGw6ICdwZXJzb25hbF9sb2NrQWNjb3VudCcsXG4gICAgICAgIHBhcmFtczogMSxcbiAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtmb3JtYXR0ZXJzLmlucHV0QWRkcmVzc0Zvcm1hdHRlcl1cbiAgICB9KTtcblxuICAgIHJldHVybiBbXG4gICAgICAgIG5ld0FjY291bnQsXG4gICAgICAgIGltcG9ydFJhd0tleSxcbiAgICAgICAgdW5sb2NrQWNjb3VudCxcbiAgICAgICAgZWNSZWNvdmVyLFxuICAgICAgICBzaWduLFxuICAgICAgICBzZW5kVHJhbnNhY3Rpb24sXG4gICAgICAgIGxvY2tBY2NvdW50XG4gICAgXTtcbn07XG5cbnZhciBwcm9wZXJ0aWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBbXG4gICAgICAgIG5ldyBQcm9wZXJ0eSh7XG4gICAgICAgICAgICBuYW1lOiAnbGlzdEFjY291bnRzJyxcbiAgICAgICAgICAgIGdldHRlcjogJ3BlcnNvbmFsX2xpc3RBY2NvdW50cydcbiAgICAgICAgfSlcbiAgICBdO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFBlcnNvbmFsO1xuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKiBAZmlsZSBzaGguanNcbiAqIEBhdXRob3JzOlxuICogICBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZXJldW0ub3JnPlxuICogICBNYXJlayBLb3Rld2ljeiA8bWFyZWtAZXRoY29yZS5pbz5cbiAqIEBkYXRlIDIwMTdcbiAqL1xuXG52YXIgTWV0aG9kID0gcmVxdWlyZSgnLi4vbWV0aG9kJyk7XG52YXIgRmlsdGVyID0gcmVxdWlyZSgnLi4vZmlsdGVyJyk7XG52YXIgd2F0Y2hlcyA9IHJlcXVpcmUoJy4vd2F0Y2hlcycpO1xuXG52YXIgU2hoID0gZnVuY3Rpb24gKHdlYjMpIHtcbiAgICB0aGlzLl9yZXF1ZXN0TWFuYWdlciA9IHdlYjMuX3JlcXVlc3RNYW5hZ2VyO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgbWV0aG9kcygpLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICAgIG1ldGhvZC5hdHRhY2hUb09iamVjdChzZWxmKTtcbiAgICAgICAgbWV0aG9kLnNldFJlcXVlc3RNYW5hZ2VyKHNlbGYuX3JlcXVlc3RNYW5hZ2VyKTtcbiAgICB9KTtcbn07XG5cblNoaC5wcm90b3R5cGUubmV3TWVzc2FnZUZpbHRlciA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaywgZmlsdGVyQ3JlYXRpb25FcnJvckNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIG5ldyBGaWx0ZXIob3B0aW9ucywgJ3NoaCcsIHRoaXMuX3JlcXVlc3RNYW5hZ2VyLCB3YXRjaGVzLnNoaCgpLCBudWxsLCBjYWxsYmFjaywgZmlsdGVyQ3JlYXRpb25FcnJvckNhbGxiYWNrKTtcbn07XG5cbnZhciBtZXRob2RzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIFtcbiAgICAgICAgbmV3IE1ldGhvZCh7XG4gICAgICAgICAgICBuYW1lOiAndmVyc2lvbicsXG4gICAgICAgICAgICBjYWxsOiAnc2hoX3ZlcnNpb24nLFxuICAgICAgICAgICAgcGFyYW1zOiAwXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgTWV0aG9kKHtcbiAgICAgICAgICAgIG5hbWU6ICdpbmZvJyxcbiAgICAgICAgICAgIGNhbGw6ICdzaGhfaW5mbycsXG4gICAgICAgICAgICBwYXJhbXM6IDBcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgbmFtZTogJ3NldE1heE1lc3NhZ2VTaXplJyxcbiAgICAgICAgICAgIGNhbGw6ICdzaGhfc2V0TWF4TWVzc2FnZVNpemUnLFxuICAgICAgICAgICAgcGFyYW1zOiAxXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgTWV0aG9kKHtcbiAgICAgICAgICAgIG5hbWU6ICdzZXRNaW5Qb1cnLFxuICAgICAgICAgICAgY2FsbDogJ3NoaF9zZXRNaW5Qb1cnLFxuICAgICAgICAgICAgcGFyYW1zOiAxXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgTWV0aG9kKHtcbiAgICAgICAgICAgIG5hbWU6ICdtYXJrVHJ1c3RlZFBlZXInLFxuICAgICAgICAgICAgY2FsbDogJ3NoaF9tYXJrVHJ1c3RlZFBlZXInLFxuICAgICAgICAgICAgcGFyYW1zOiAxXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgTWV0aG9kKHtcbiAgICAgICAgICAgIG5hbWU6ICduZXdLZXlQYWlyJyxcbiAgICAgICAgICAgIGNhbGw6ICdzaGhfbmV3S2V5UGFpcicsXG4gICAgICAgICAgICBwYXJhbXM6IDBcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgbmFtZTogJ2FkZFByaXZhdGVLZXknLFxuICAgICAgICAgICAgY2FsbDogJ3NoaF9hZGRQcml2YXRlS2V5JyxcbiAgICAgICAgICAgIHBhcmFtczogMVxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IE1ldGhvZCh7XG4gICAgICAgICAgICBuYW1lOiAnZGVsZXRlS2V5UGFpcicsXG4gICAgICAgICAgICBjYWxsOiAnc2hoX2RlbGV0ZUtleVBhaXInLFxuICAgICAgICAgICAgcGFyYW1zOiAxXG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgTWV0aG9kKHtcbiAgICAgICAgICAgIG5hbWU6ICdoYXNLZXlQYWlyJyxcbiAgICAgICAgICAgIGNhbGw6ICdzaGhfaGFzS2V5UGFpcicsXG4gICAgICAgICAgICBwYXJhbXM6IDFcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgbmFtZTogJ2dldFB1YmxpY0tleScsXG4gICAgICAgICAgICBjYWxsOiAnc2hoX2dldFB1YmxpY0tleScsXG4gICAgICAgICAgICBwYXJhbXM6IDFcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgbmFtZTogJ2dldFByaXZhdGVLZXknLFxuICAgICAgICAgICAgY2FsbDogJ3NoaF9nZXRQcml2YXRlS2V5JyxcbiAgICAgICAgICAgIHBhcmFtczogMVxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IE1ldGhvZCh7XG4gICAgICAgICAgICBuYW1lOiAnbmV3U3ltS2V5JyxcbiAgICAgICAgICAgIGNhbGw6ICdzaGhfbmV3U3ltS2V5JyxcbiAgICAgICAgICAgIHBhcmFtczogMFxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IE1ldGhvZCh7XG4gICAgICAgICAgICBuYW1lOiAnYWRkU3ltS2V5JyxcbiAgICAgICAgICAgIGNhbGw6ICdzaGhfYWRkU3ltS2V5JyxcbiAgICAgICAgICAgIHBhcmFtczogMVxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IE1ldGhvZCh7XG4gICAgICAgICAgICBuYW1lOiAnZ2VuZXJhdGVTeW1LZXlGcm9tUGFzc3dvcmQnLFxuICAgICAgICAgICAgY2FsbDogJ3NoaF9nZW5lcmF0ZVN5bUtleUZyb21QYXNzd29yZCcsXG4gICAgICAgICAgICBwYXJhbXM6IDFcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgbmFtZTogJ2hhc1N5bUtleScsXG4gICAgICAgICAgICBjYWxsOiAnc2hoX2hhc1N5bUtleScsXG4gICAgICAgICAgICBwYXJhbXM6IDFcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgbmFtZTogJ2dldFN5bUtleScsXG4gICAgICAgICAgICBjYWxsOiAnc2hoX2dldFN5bUtleScsXG4gICAgICAgICAgICBwYXJhbXM6IDFcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgbmFtZTogJ2RlbGV0ZVN5bUtleScsXG4gICAgICAgICAgICBjYWxsOiAnc2hoX2RlbGV0ZVN5bUtleScsXG4gICAgICAgICAgICBwYXJhbXM6IDFcbiAgICAgICAgfSksXG5cbiAgICAgICAgLy8gc3Vic2NyaWJlIGFuZCB1bnN1YnNjcmliZSBtaXNzaW5nXG5cbiAgICAgICAgbmV3IE1ldGhvZCh7XG4gICAgICAgICAgICBuYW1lOiAncG9zdCcsXG4gICAgICAgICAgICBjYWxsOiAnc2hoX3Bvc3QnLFxuICAgICAgICAgICAgcGFyYW1zOiAxLFxuICAgICAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtudWxsXVxuICAgICAgICB9KVxuICAgIF07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNoaDtcblxuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgYnp6LmpzXG4gKiBAYXV0aG9yIEFsZXggQmVyZWdzemFzemkgPGFsZXhAcnRmcy5odT5cbiAqIEBkYXRlIDIwMTZcbiAqXG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9nby1ldGhlcmV1bS9ibG9iL3N3YXJtL2ludGVybmFsL3dlYjNleHQvd2ViM2V4dC5nbyNMMzNcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIE1ldGhvZCA9IHJlcXVpcmUoJy4uL21ldGhvZCcpO1xudmFyIFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vcHJvcGVydHknKTtcblxuZnVuY3Rpb24gU3dhcm0od2ViMykge1xuICAgIHRoaXMuX3JlcXVlc3RNYW5hZ2VyID0gd2ViMy5fcmVxdWVzdE1hbmFnZXI7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBtZXRob2RzKCkuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgICAgbWV0aG9kLmF0dGFjaFRvT2JqZWN0KHNlbGYpO1xuICAgICAgICBtZXRob2Quc2V0UmVxdWVzdE1hbmFnZXIoc2VsZi5fcmVxdWVzdE1hbmFnZXIpO1xuICAgIH0pO1xuXG4gICAgcHJvcGVydGllcygpLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgICBwLmF0dGFjaFRvT2JqZWN0KHNlbGYpO1xuICAgICAgICBwLnNldFJlcXVlc3RNYW5hZ2VyKHNlbGYuX3JlcXVlc3RNYW5hZ2VyKTtcbiAgICB9KTtcbn1cblxudmFyIG1ldGhvZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJsb2NrTmV0d29ya1JlYWQgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ2Jsb2NrTmV0d29ya1JlYWQnLFxuICAgICAgICBjYWxsOiAnYnp6X2Jsb2NrTmV0d29ya1JlYWQnLFxuICAgICAgICBwYXJhbXM6IDEsXG4gICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbbnVsbF1cbiAgICB9KTtcblxuICAgIHZhciBzeW5jRW5hYmxlZCA9IG5ldyBNZXRob2Qoe1xuICAgICAgICBuYW1lOiAnc3luY0VuYWJsZWQnLFxuICAgICAgICBjYWxsOiAnYnp6X3N5bmNFbmFibGVkJyxcbiAgICAgICAgcGFyYW1zOiAxLFxuICAgICAgICBpbnB1dEZvcm1hdHRlcjogW251bGxdXG4gICAgfSk7XG5cbiAgICB2YXIgc3dhcEVuYWJsZWQgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ3N3YXBFbmFibGVkJyxcbiAgICAgICAgY2FsbDogJ2J6el9zd2FwRW5hYmxlZCcsXG4gICAgICAgIHBhcmFtczogMSxcbiAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtudWxsXVxuICAgIH0pO1xuXG4gICAgdmFyIGRvd25sb2FkID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdkb3dubG9hZCcsXG4gICAgICAgIGNhbGw6ICdienpfZG93bmxvYWQnLFxuICAgICAgICBwYXJhbXM6IDIsXG4gICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbbnVsbCwgbnVsbF1cbiAgICB9KTtcblxuICAgIHZhciB1cGxvYWQgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ3VwbG9hZCcsXG4gICAgICAgIGNhbGw6ICdienpfdXBsb2FkJyxcbiAgICAgICAgcGFyYW1zOiAyLFxuICAgICAgICBpbnB1dEZvcm1hdHRlcjogW251bGwsIG51bGxdXG4gICAgfSk7XG5cbiAgICB2YXIgcmV0cmlldmUgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ3JldHJpZXZlJyxcbiAgICAgICAgY2FsbDogJ2J6el9yZXRyaWV2ZScsXG4gICAgICAgIHBhcmFtczogMSxcbiAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtudWxsXVxuICAgIH0pO1xuXG4gICAgdmFyIHN0b3JlID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdzdG9yZScsXG4gICAgICAgIGNhbGw6ICdienpfc3RvcmUnLFxuICAgICAgICBwYXJhbXM6IDIsXG4gICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbbnVsbCwgbnVsbF1cbiAgICB9KTtcblxuICAgIHZhciBnZXQgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ2dldCcsXG4gICAgICAgIGNhbGw6ICdienpfZ2V0JyxcbiAgICAgICAgcGFyYW1zOiAxLFxuICAgICAgICBpbnB1dEZvcm1hdHRlcjogW251bGxdXG4gICAgfSk7XG5cbiAgICB2YXIgcHV0ID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICdwdXQnLFxuICAgICAgICBjYWxsOiAnYnp6X3B1dCcsXG4gICAgICAgIHBhcmFtczogMixcbiAgICAgICAgaW5wdXRGb3JtYXR0ZXI6IFtudWxsLCBudWxsXVxuICAgIH0pO1xuXG4gICAgdmFyIG1vZGlmeSA9IG5ldyBNZXRob2Qoe1xuICAgICAgICBuYW1lOiAnbW9kaWZ5JyxcbiAgICAgICAgY2FsbDogJ2J6el9tb2RpZnknLFxuICAgICAgICBwYXJhbXM6IDQsXG4gICAgICAgIGlucHV0Rm9ybWF0dGVyOiBbbnVsbCwgbnVsbCwgbnVsbCwgbnVsbF1cbiAgICB9KTtcblxuICAgIHJldHVybiBbXG4gICAgICAgIGJsb2NrTmV0d29ya1JlYWQsXG4gICAgICAgIHN5bmNFbmFibGVkLFxuICAgICAgICBzd2FwRW5hYmxlZCxcbiAgICAgICAgZG93bmxvYWQsXG4gICAgICAgIHVwbG9hZCxcbiAgICAgICAgcmV0cmlldmUsXG4gICAgICAgIHN0b3JlLFxuICAgICAgICBnZXQsXG4gICAgICAgIHB1dCxcbiAgICAgICAgbW9kaWZ5XG4gICAgXTtcbn07XG5cbnZhciBwcm9wZXJ0aWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBbXG4gICAgICAgIG5ldyBQcm9wZXJ0eSh7XG4gICAgICAgICAgICBuYW1lOiAnaGl2ZScsXG4gICAgICAgICAgICBnZXR0ZXI6ICdienpfaGl2ZSdcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBQcm9wZXJ0eSh7XG4gICAgICAgICAgICBuYW1lOiAnaW5mbycsXG4gICAgICAgICAgICBnZXR0ZXI6ICdienpfaW5mbydcbiAgICAgICAgfSlcbiAgICBdO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFN3YXJtO1xuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKiBAZmlsZSB3YXRjaGVzLmpzXG4gKiBAYXV0aG9yczpcbiAqICAgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblxudmFyIE1ldGhvZCA9IHJlcXVpcmUoJy4uL21ldGhvZCcpO1xuXG4vLy8gQHJldHVybnMgYW4gYXJyYXkgb2Ygb2JqZWN0cyBkZXNjcmliaW5nIHdlYjMuZXRoLmZpbHRlciBhcGkgbWV0aG9kc1xudmFyIGV0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmV3RmlsdGVyQ2FsbCA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICAgIHZhciB0eXBlID0gYXJnc1swXTtcblxuICAgICAgICBzd2l0Y2godHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnbGF0ZXN0JzpcbiAgICAgICAgICAgICAgICBhcmdzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJhbXMgPSAwO1xuICAgICAgICAgICAgICAgIHJldHVybiAnZXRoX25ld0Jsb2NrRmlsdGVyJztcbiAgICAgICAgICAgIGNhc2UgJ3BlbmRpbmcnOlxuICAgICAgICAgICAgICAgIGFyZ3Muc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmFtcyA9IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdldGhfbmV3UGVuZGluZ1RyYW5zYWN0aW9uRmlsdGVyJztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdldGhfbmV3RmlsdGVyJztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbmV3RmlsdGVyID0gbmV3IE1ldGhvZCh7XG4gICAgICAgIG5hbWU6ICduZXdGaWx0ZXInLFxuICAgICAgICBjYWxsOiBuZXdGaWx0ZXJDYWxsLFxuICAgICAgICBwYXJhbXM6IDFcbiAgICB9KTtcblxuICAgIHZhciB1bmluc3RhbGxGaWx0ZXIgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ3VuaW5zdGFsbEZpbHRlcicsXG4gICAgICAgIGNhbGw6ICdldGhfdW5pbnN0YWxsRmlsdGVyJyxcbiAgICAgICAgcGFyYW1zOiAxXG4gICAgfSk7XG5cbiAgICB2YXIgZ2V0TG9ncyA9IG5ldyBNZXRob2Qoe1xuICAgICAgICBuYW1lOiAnZ2V0TG9ncycsXG4gICAgICAgIGNhbGw6ICdldGhfZ2V0RmlsdGVyTG9ncycsXG4gICAgICAgIHBhcmFtczogMVxuICAgIH0pO1xuXG4gICAgdmFyIHBvbGwgPSBuZXcgTWV0aG9kKHtcbiAgICAgICAgbmFtZTogJ3BvbGwnLFxuICAgICAgICBjYWxsOiAnZXRoX2dldEZpbHRlckNoYW5nZXMnLFxuICAgICAgICBwYXJhbXM6IDFcbiAgICB9KTtcblxuICAgIHJldHVybiBbXG4gICAgICAgIG5ld0ZpbHRlcixcbiAgICAgICAgdW5pbnN0YWxsRmlsdGVyLFxuICAgICAgICBnZXRMb2dzLFxuICAgICAgICBwb2xsXG4gICAgXTtcbn07XG5cbi8vLyBAcmV0dXJucyBhbiBhcnJheSBvZiBvYmplY3RzIGRlc2NyaWJpbmcgd2ViMy5zaGgud2F0Y2ggYXBpIG1ldGhvZHNcbnZhciBzaGggPSBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gW1xuICAgICAgICBuZXcgTWV0aG9kKHtcbiAgICAgICAgICAgIG5hbWU6ICduZXdGaWx0ZXInLFxuICAgICAgICAgICAgY2FsbDogJ3NoaF9uZXdNZXNzYWdlRmlsdGVyJyxcbiAgICAgICAgICAgIHBhcmFtczogMVxuICAgICAgICB9KSxcbiAgICAgICAgbmV3IE1ldGhvZCh7XG4gICAgICAgICAgICBuYW1lOiAndW5pbnN0YWxsRmlsdGVyJyxcbiAgICAgICAgICAgIGNhbGw6ICdzaGhfZGVsZXRlTWVzc2FnZUZpbHRlcicsXG4gICAgICAgICAgICBwYXJhbXM6IDFcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgbmFtZTogJ2dldExvZ3MnLFxuICAgICAgICAgICAgY2FsbDogJ3NoaF9nZXRGaWx0ZXJNZXNzYWdlcycsXG4gICAgICAgICAgICBwYXJhbXM6IDFcbiAgICAgICAgfSksXG4gICAgICAgIG5ldyBNZXRob2Qoe1xuICAgICAgICAgICAgbmFtZTogJ3BvbGwnLFxuICAgICAgICAgICAgY2FsbDogJ3NoaF9nZXRGaWx0ZXJNZXNzYWdlcycsXG4gICAgICAgICAgICBwYXJhbXM6IDFcbiAgICAgICAgfSlcbiAgICBdO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZXRoOiBldGgsXG4gICAgc2hoOiBzaGhcbn07XG5cbiIsIi8qXG4gICAgVGhpcyBmaWxlIGlzIHBhcnQgb2Ygd2ViMy5qcy5cblxuICAgIHdlYjMuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICAgIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICAgIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gICAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cblxuICAgIHdlYjMuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAgICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICAgIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAgICBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICAgIGFsb25nIHdpdGggd2ViMy5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiovXG4vKiogXG4gKiBAZmlsZSBuYW1lcmVnLmpzXG4gKiBAYXV0aG9yIE1hcmVrIEtvdGV3aWN6IDxtYXJla0BldGhkZXYuY29tPlxuICogQGRhdGUgMjAxNVxuICovXG5cbnZhciBnbG9iYWxSZWdpc3RyYXJBYmkgPSByZXF1aXJlKCcuLi9jb250cmFjdHMvR2xvYmFsUmVnaXN0cmFyLmpzb24nKTtcbnZhciBpY2FwUmVnaXN0cmFyQWJpPSByZXF1aXJlKCcuLi9jb250cmFjdHMvSUNBUFJlZ2lzdHJhci5qc29uJyk7XG5cbnZhciBnbG9iYWxOYW1lcmVnQWRkcmVzcyA9ICcweGM2ZDlkMmNkNDQ5YTc1NGM0OTQyNjRlMTgwOWM1MGUzNGQ2NDU2MmInO1xudmFyIGljYXBOYW1lcmVnQWRkcmVzcyA9ICcweGExYTExMWJjMDc0YzljZmE3ODFmMGMzOGU2M2JkNTFjOTFiOGFmMDAnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBnbG9iYWw6IHtcbiAgICAgICAgYWJpOiBnbG9iYWxSZWdpc3RyYXJBYmksXG4gICAgICAgIGFkZHJlc3M6IGdsb2JhbE5hbWVyZWdBZGRyZXNzXG4gICAgfSxcbiAgICBpY2FwOiB7XG4gICAgICAgIGFiaTogaWNhcFJlZ2lzdHJhckFiaSxcbiAgICAgICAgYWRkcmVzczogaWNhcE5hbWVyZWdBZGRyZXNzXG4gICAgfVxufTtcblxuIiwiLypcbiAgICBUaGlzIGZpbGUgaXMgcGFydCBvZiB3ZWIzLmpzLlxuXG4gICAgd2ViMy5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gICAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAgICAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgd2ViMy5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICAgIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gICAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICAgIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuXG4gICAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gICAgYWxvbmcgd2l0aCB3ZWIzLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cbi8qKlxuICogQGZpbGUgcHJvcGVydHkuanNcbiAqIEBhdXRob3IgRmFiaWFuIFZvZ2Vsc3RlbGxlciA8ZmFiaWFuQGZyb3plbWFuLmRlPlxuICogQGF1dGhvciBNYXJlayBLb3Rld2ljeiA8bWFyZWtAZXRoZGV2LmNvbT5cbiAqIEBkYXRlIDIwMTVcbiAqL1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpO1xuXG52YXIgUHJvcGVydHkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgICB0aGlzLmdldHRlciA9IG9wdGlvbnMuZ2V0dGVyO1xuICAgIHRoaXMuc2V0dGVyID0gb3B0aW9ucy5zZXR0ZXI7XG4gICAgdGhpcy5vdXRwdXRGb3JtYXR0ZXIgPSBvcHRpb25zLm91dHB1dEZvcm1hdHRlcjtcbiAgICB0aGlzLmlucHV0Rm9ybWF0dGVyID0gb3B0aW9ucy5pbnB1dEZvcm1hdHRlcjtcbiAgICB0aGlzLnJlcXVlc3RNYW5hZ2VyID0gbnVsbDtcbn07XG5cblByb3BlcnR5LnByb3RvdHlwZS5zZXRSZXF1ZXN0TWFuYWdlciA9IGZ1bmN0aW9uIChybSkge1xuICAgIHRoaXMucmVxdWVzdE1hbmFnZXIgPSBybTtcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBmb3JtYXQgaW5wdXQgYXJncyBvZiBtZXRob2RcbiAqXG4gKiBAbWV0aG9kIGZvcm1hdElucHV0XG4gKiBAcGFyYW0ge0FycmF5fVxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cblByb3BlcnR5LnByb3RvdHlwZS5mb3JtYXRJbnB1dCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dEZvcm1hdHRlciA/IHRoaXMuaW5wdXRGb3JtYXR0ZXIoYXJnKSA6IGFyZztcbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBmb3JtYXQgb3V0cHV0KHJlc3VsdCkgb2YgbWV0aG9kXG4gKlxuICogQG1ldGhvZCBmb3JtYXRPdXRwdXRcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5Qcm9wZXJ0eS5wcm90b3R5cGUuZm9ybWF0T3V0cHV0ID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHJldHVybiB0aGlzLm91dHB1dEZvcm1hdHRlciAmJiByZXN1bHQgIT09IG51bGwgJiYgcmVzdWx0ICE9PSB1bmRlZmluZWQgPyB0aGlzLm91dHB1dEZvcm1hdHRlcihyZXN1bHQpIDogcmVzdWx0O1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBleHRyYWN0IGNhbGxiYWNrIGZyb20gYXJyYXkgb2YgYXJndW1lbnRzLiBNb2RpZmllcyBpbnB1dCBwYXJhbVxuICpcbiAqIEBtZXRob2QgZXh0cmFjdENhbGxiYWNrXG4gKiBAcGFyYW0ge0FycmF5fSBhcmd1bWVudHNcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufE51bGx9IGNhbGxiYWNrLCBpZiBleGlzdHNcbiAqL1xuUHJvcGVydHkucHJvdG90eXBlLmV4dHJhY3RDYWxsYmFjayA9IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oYXJnc1thcmdzLmxlbmd0aCAtIDFdKSkge1xuICAgICAgICByZXR1cm4gYXJncy5wb3AoKTsgLy8gbW9kaWZ5IHRoZSBhcmdzIGFycmF5IVxuICAgIH1cbn07XG5cblxuLyoqXG4gKiBTaG91bGQgYXR0YWNoIGZ1bmN0aW9uIHRvIG1ldGhvZFxuICpcbiAqIEBtZXRob2QgYXR0YWNoVG9PYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fVxuICogQHBhcmFtIHtGdW5jdGlvbn1cbiAqL1xuUHJvcGVydHkucHJvdG90eXBlLmF0dGFjaFRvT2JqZWN0ID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBwcm90byA9IHtcbiAgICAgICAgZ2V0OiB0aGlzLmJ1aWxkR2V0KCksXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9O1xuXG4gICAgdmFyIG5hbWVzID0gdGhpcy5uYW1lLnNwbGl0KCcuJyk7XG4gICAgdmFyIG5hbWUgPSBuYW1lc1swXTtcbiAgICBpZiAobmFtZXMubGVuZ3RoID4gMSkge1xuICAgICAgICBvYmpbbmFtZXNbMF1dID0gb2JqW25hbWVzWzBdXSB8fCB7fTtcbiAgICAgICAgb2JqID0gb2JqW25hbWVzWzBdXTtcbiAgICAgICAgbmFtZSA9IG5hbWVzWzFdO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG5hbWUsIHByb3RvKTtcbiAgICBvYmpbYXN5bmNHZXR0ZXJOYW1lKG5hbWUpXSA9IHRoaXMuYnVpbGRBc3luY0dldCgpO1xufTtcblxudmFyIGFzeW5jR2V0dGVyTmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuICdnZXQnICsgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSk7XG59O1xuXG5Qcm9wZXJ0eS5wcm90b3R5cGUuYnVpbGRHZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb3BlcnR5ID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHkuZm9ybWF0T3V0cHV0KHByb3BlcnR5LnJlcXVlc3RNYW5hZ2VyLnNlbmQoe1xuICAgICAgICAgICAgbWV0aG9kOiBwcm9wZXJ0eS5nZXR0ZXJcbiAgICAgICAgfSkpO1xuICAgIH07XG59O1xuXG5Qcm9wZXJ0eS5wcm90b3R5cGUuYnVpbGRBc3luY0dldCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvcGVydHkgPSB0aGlzO1xuICAgIHZhciBnZXQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgcHJvcGVydHkucmVxdWVzdE1hbmFnZXIuc2VuZEFzeW5jKHtcbiAgICAgICAgICAgIG1ldGhvZDogcHJvcGVydHkuZ2V0dGVyXG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBwcm9wZXJ0eS5mb3JtYXRPdXRwdXQocmVzdWx0KSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgZ2V0LnJlcXVlc3QgPSB0aGlzLnJlcXVlc3QuYmluZCh0aGlzKTtcbiAgICByZXR1cm4gZ2V0O1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGNyZWF0ZSBwdXJlIEpTT05SUEMgcmVxdWVzdCB3aGljaCBjYW4gYmUgdXNlZCBpbiBiYXRjaCByZXF1ZXN0XG4gKlxuICogQG1ldGhvZCByZXF1ZXN0XG4gKiBAcGFyYW0gey4uLn0gcGFyYW1zXG4gKiBAcmV0dXJuIHtPYmplY3R9IGpzb25ycGMgcmVxdWVzdFxuICovXG5Qcm9wZXJ0eS5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHtcbiAgICAgICAgbWV0aG9kOiB0aGlzLmdldHRlcixcbiAgICAgICAgcGFyYW1zOiBbXSxcbiAgICAgICAgY2FsbGJhY2s6IHRoaXMuZXh0cmFjdENhbGxiYWNrKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgfTtcbiAgICBwYXlsb2FkLmZvcm1hdCA9IHRoaXMuZm9ybWF0T3V0cHV0LmJpbmQodGhpcyk7XG4gICAgcmV0dXJuIHBheWxvYWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb3BlcnR5O1xuXG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqIFxuICogQGZpbGUgcmVxdWVzdG1hbmFnZXIuanNcbiAqIEBhdXRob3IgSmVmZnJleSBXaWxja2UgPGplZmZAZXRoZGV2LmNvbT5cbiAqIEBhdXRob3IgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiBAYXV0aG9yIE1hcmlhbiBPYW5jZWEgPG1hcmlhbkBldGhkZXYuY29tPlxuICogQGF1dGhvciBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZGV2LmNvbT5cbiAqIEBhdXRob3IgR2F2IFdvb2QgPGdAZXRoZGV2LmNvbT5cbiAqIEBkYXRlIDIwMTRcbiAqL1xuXG52YXIgSnNvbnJwYyA9IHJlcXVpcmUoJy4vanNvbnJwYycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTtcbnZhciBjID0gcmVxdWlyZSgnLi4vdXRpbHMvY29uZmlnJyk7XG52YXIgZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcblxuLyoqXG4gKiBJdCdzIHJlc3BvbnNpYmxlIGZvciBwYXNzaW5nIG1lc3NhZ2VzIHRvIHByb3ZpZGVyc1xuICogSXQncyBhbHNvIHJlc3BvbnNpYmxlIGZvciBwb2xsaW5nIHRoZSBldGhlcmV1bSBub2RlIGZvciBpbmNvbWluZyBtZXNzYWdlc1xuICogRGVmYXVsdCBwb2xsIHRpbWVvdXQgaXMgMSBzZWNvbmRcbiAqIFNpbmdsZXRvblxuICovXG52YXIgUmVxdWVzdE1hbmFnZXIgPSBmdW5jdGlvbiAocHJvdmlkZXIpIHtcbiAgICB0aGlzLnByb3ZpZGVyID0gcHJvdmlkZXI7XG4gICAgdGhpcy5wb2xscyA9IHt9O1xuICAgIHRoaXMudGltZW91dCA9IG51bGw7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIHN5bmNocm9ub3VzbHkgc2VuZCByZXF1ZXN0XG4gKlxuICogQG1ldGhvZCBzZW5kXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5SZXF1ZXN0TWFuYWdlci5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKCF0aGlzLnByb3ZpZGVyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JzLkludmFsaWRQcm92aWRlcigpKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHBheWxvYWQgPSBKc29ucnBjLnRvUGF5bG9hZChkYXRhLm1ldGhvZCwgZGF0YS5wYXJhbXMpO1xuICAgIHZhciByZXN1bHQgPSB0aGlzLnByb3ZpZGVyLnNlbmQocGF5bG9hZCk7XG5cbiAgICBpZiAoIUpzb25ycGMuaXNWYWxpZFJlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JzLkludmFsaWRSZXNwb25zZShyZXN1bHQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQucmVzdWx0O1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBhc3luY2hyb25vdXNseSBzZW5kIHJlcXVlc3RcbiAqXG4gKiBAbWV0aG9kIHNlbmRBc3luY1xuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKi9cblJlcXVlc3RNYW5hZ2VyLnByb3RvdHlwZS5zZW5kQXN5bmMgPSBmdW5jdGlvbiAoZGF0YSwgY2FsbGJhY2spIHtcbiAgICBpZiAoIXRoaXMucHJvdmlkZXIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9ycy5JbnZhbGlkUHJvdmlkZXIoKSk7XG4gICAgfVxuXG4gICAgdmFyIHBheWxvYWQgPSBKc29ucnBjLnRvUGF5bG9hZChkYXRhLm1ldGhvZCwgZGF0YS5wYXJhbXMpO1xuICAgIHRoaXMucHJvdmlkZXIuc2VuZEFzeW5jKHBheWxvYWQsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdCkge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCFKc29ucnBjLmlzVmFsaWRSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3JzLkludmFsaWRSZXNwb25zZShyZXN1bHQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdC5yZXN1bHQpO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgY2FsbGVkIHRvIGFzeW5jaHJvbm91c2x5IHNlbmQgYmF0Y2ggcmVxdWVzdFxuICpcbiAqIEBtZXRob2Qgc2VuZEJhdGNoXG4gKiBAcGFyYW0ge0FycmF5fSBiYXRjaCBkYXRhXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5SZXF1ZXN0TWFuYWdlci5wcm90b3R5cGUuc2VuZEJhdGNoID0gZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLnByb3ZpZGVyKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcnMuSW52YWxpZFByb3ZpZGVyKCkpO1xuICAgIH1cblxuICAgIHZhciBwYXlsb2FkID0gSnNvbnJwYy50b0JhdGNoUGF5bG9hZChkYXRhKTtcblxuICAgIHRoaXMucHJvdmlkZXIuc2VuZEFzeW5jKHBheWxvYWQsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXV0aWxzLmlzQXJyYXkocmVzdWx0cykpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcnMuSW52YWxpZFJlc3BvbnNlKHJlc3VsdHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0cyk7XG4gICAgfSk7IFxufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBzZXQgcHJvdmlkZXIgb2YgcmVxdWVzdCBtYW5hZ2VyXG4gKlxuICogQG1ldGhvZCBzZXRQcm92aWRlclxuICogQHBhcmFtIHtPYmplY3R9XG4gKi9cblJlcXVlc3RNYW5hZ2VyLnByb3RvdHlwZS5zZXRQcm92aWRlciA9IGZ1bmN0aW9uIChwKSB7XG4gICAgdGhpcy5wcm92aWRlciA9IHA7XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIHN0YXJ0IHBvbGxpbmdcbiAqXG4gKiBAbWV0aG9kIHN0YXJ0UG9sbGluZ1xuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7TnVtYmVyfSBwb2xsSWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB1bmluc3RhbGxcbiAqXG4gKiBAdG9kbyBjbGVhbnVwIG51bWJlciBvZiBwYXJhbXNcbiAqL1xuUmVxdWVzdE1hbmFnZXIucHJvdG90eXBlLnN0YXJ0UG9sbGluZyA9IGZ1bmN0aW9uIChkYXRhLCBwb2xsSWQsIGNhbGxiYWNrLCB1bmluc3RhbGwpIHtcbiAgICB0aGlzLnBvbGxzW3BvbGxJZF0gPSB7ZGF0YTogZGF0YSwgaWQ6IHBvbGxJZCwgY2FsbGJhY2s6IGNhbGxiYWNrLCB1bmluc3RhbGw6IHVuaW5zdGFsbH07XG5cblxuICAgIC8vIHN0YXJ0IHBvbGxpbmdcbiAgICBpZiAoIXRoaXMudGltZW91dCkge1xuICAgICAgICB0aGlzLnBvbGwoKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSB1c2VkIHRvIHN0b3AgcG9sbGluZyBmb3IgZmlsdGVyIHdpdGggZ2l2ZW4gaWRcbiAqXG4gKiBAbWV0aG9kIHN0b3BQb2xsaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gcG9sbElkXG4gKi9cblJlcXVlc3RNYW5hZ2VyLnByb3RvdHlwZS5zdG9wUG9sbGluZyA9IGZ1bmN0aW9uIChwb2xsSWQpIHtcbiAgICBkZWxldGUgdGhpcy5wb2xsc1twb2xsSWRdO1xuXG4gICAgLy8gc3RvcCBwb2xsaW5nXG4gICAgaWYoT2JqZWN0LmtleXModGhpcy5wb2xscykubGVuZ3RoID09PSAwICYmIHRoaXMudGltZW91dCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gbnVsbDtcbiAgICB9XG59O1xuXG4vKipcbiAqIFNob3VsZCBiZSBjYWxsZWQgdG8gcmVzZXQgdGhlIHBvbGxpbmcgbWVjaGFuaXNtIG9mIHRoZSByZXF1ZXN0IG1hbmFnZXJcbiAqXG4gKiBAbWV0aG9kIHJlc2V0XG4gKi9cblJlcXVlc3RNYW5hZ2VyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIChrZWVwSXNTeW5jaW5nKSB7XG4gICAgLypqc2hpbnQgbWF4Y29tcGxleGl0eTo1ICovXG5cbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5wb2xscykge1xuICAgICAgICAvLyByZW1vdmUgYWxsIHBvbGxzLCBleGNlcHQgc3luYyBwb2xscyxcbiAgICAgICAgLy8gdGhleSBuZWVkIHRvIGJlIHJlbW92ZWQgbWFudWFsbHkgYnkgY2FsbGluZyBzeW5jaW5nLnN0b3BXYXRjaGluZygpXG4gICAgICAgIGlmKCFrZWVwSXNTeW5jaW5nIHx8IGtleS5pbmRleE9mKCdzeW5jUG9sbF8nKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMucG9sbHNba2V5XS51bmluc3RhbGwoKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnBvbGxzW2tleV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBzdG9wIHBvbGxpbmdcbiAgICBpZihPYmplY3Qua2V5cyh0aGlzLnBvbGxzKS5sZW5ndGggPT09IDAgJiYgdGhpcy50aW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSBudWxsO1xuICAgIH1cbn07XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB0byBwb2xsIGZvciBjaGFuZ2VzIG9uIGZpbHRlciB3aXRoIGdpdmVuIGlkXG4gKlxuICogQG1ldGhvZCBwb2xsXG4gKi9cblJlcXVlc3RNYW5hZ2VyLnByb3RvdHlwZS5wb2xsID0gZnVuY3Rpb24gKCkge1xuICAgIC8qanNoaW50IG1heGNvbXBsZXhpdHk6IDYgKi9cbiAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMucG9sbC5iaW5kKHRoaXMpLCBjLkVUSF9QT0xMSU5HX1RJTUVPVVQpO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKHRoaXMucG9sbHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnByb3ZpZGVyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JzLkludmFsaWRQcm92aWRlcigpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwb2xsc0RhdGEgPSBbXTtcbiAgICB2YXIgcG9sbHNJZHMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5wb2xscykge1xuICAgICAgICBwb2xsc0RhdGEucHVzaCh0aGlzLnBvbGxzW2tleV0uZGF0YSk7XG4gICAgICAgIHBvbGxzSWRzLnB1c2goa2V5KTtcbiAgICB9XG5cbiAgICBpZiAocG9sbHNEYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHBheWxvYWQgPSBKc29ucnBjLnRvQmF0Y2hQYXlsb2FkKHBvbGxzRGF0YSk7XG4gICAgXG4gICAgLy8gbWFwIHRoZSByZXF1ZXN0IGlkIHRvIHRoZXkgcG9sbCBpZFxuICAgIHZhciBwb2xsc0lkTWFwID0ge307XG4gICAgcGF5bG9hZC5mb3JFYWNoKGZ1bmN0aW9uKGxvYWQsIGluZGV4KXtcbiAgICAgICAgcG9sbHNJZE1hcFtsb2FkLmlkXSA9IHBvbGxzSWRzW2luZGV4XTtcbiAgICB9KTtcblxuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMucHJvdmlkZXIuc2VuZEFzeW5jKHBheWxvYWQsIGZ1bmN0aW9uIChlcnJvciwgcmVzdWx0cykge1xuXG5cbiAgICAgICAgLy8gVE9ETzogY29uc29sZSBsb2c/XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1dGlscy5pc0FycmF5KHJlc3VsdHMpKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcnMuSW52YWxpZFJlc3BvbnNlKHJlc3VsdHMpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdHMubWFwKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHZhciBpZCA9IHBvbGxzSWRNYXBbcmVzdWx0LmlkXTtcblxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBmaWx0ZXIgaXMgc3RpbGwgaW5zdGFsbGVkIGFmdGVyIGFycml2YWwgb2YgdGhlIHJlcXVlc3RcbiAgICAgICAgICAgIGlmIChzZWxmLnBvbGxzW2lkXSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5jYWxsYmFjayA9IHNlbGYucG9sbHNbaWRdLmNhbGxiYWNrO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gISFyZXN1bHQ7IFxuICAgICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgdmFyIHZhbGlkID0gSnNvbnJwYy5pc1ZhbGlkUmVzcG9uc2UocmVzdWx0KTtcbiAgICAgICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuY2FsbGJhY2soZXJyb3JzLkludmFsaWRSZXNwb25zZShyZXN1bHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWxpZDtcbiAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQuY2FsbGJhY2sobnVsbCwgcmVzdWx0LnJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZXF1ZXN0TWFuYWdlcjtcblxuIiwiXG5cbnZhciBTZXR0aW5ncyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmRlZmF1bHRCbG9jayA9ICdsYXRlc3QnO1xuICAgIHRoaXMuZGVmYXVsdEFjY291bnQgPSB1bmRlZmluZWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldHRpbmdzO1xuXG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqIEBmaWxlIHN5bmNpbmcuanNcbiAqIEBhdXRob3JzOlxuICogICBGYWJpYW4gVm9nZWxzdGVsbGVyIDxmYWJpYW5AZXRoZGV2LmNvbT5cbiAqIEBkYXRlIDIwMTVcbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHJlcXVpcmUoJy4vZm9ybWF0dGVycycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTtcblxudmFyIGNvdW50ID0gMTtcblxuLyoqXG5BZGRzIHRoZSBjYWxsYmFjayBhbmQgc2V0cyB1cCB0aGUgbWV0aG9kcywgdG8gaXRlcmF0ZSBvdmVyIHRoZSByZXN1bHRzLlxuXG5AbWV0aG9kIHBvbGxTeW5jaW5nXG5AcGFyYW0ge09iamVjdH0gc2VsZlxuKi9cbnZhciBwb2xsU3luY2luZyA9IGZ1bmN0aW9uKHNlbGYpIHtcblxuICAgIHZhciBvbk1lc3NhZ2UgPSBmdW5jdGlvbiAoZXJyb3IsIHN5bmMpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi5jYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHV0aWxzLmlzT2JqZWN0KHN5bmMpICYmIHN5bmMuc3RhcnRpbmdCbG9jaylcbiAgICAgICAgICAgIHN5bmMgPSBmb3JtYXR0ZXJzLm91dHB1dFN5bmNpbmdGb3JtYXR0ZXIoc3luYyk7XG5cbiAgICAgICAgc2VsZi5jYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmxhc3RTeW5jU3RhdGUgIT09IHN5bmMpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBjYWxsIHRoZSBjYWxsYmFjayB3aXRoIHRydWUgZmlyc3Qgc28gdGhlIGFwcCBjYW4gc3RvcCBhbnl0aGluZywgYmVmb3JlIHJlY2VpdmluZyB0aGUgc3luYyBkYXRhXG4gICAgICAgICAgICAgICAgaWYoIXNlbGYubGFzdFN5bmNTdGF0ZSAmJiB1dGlscy5pc09iamVjdChzeW5jKSlcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gY2FsbCBvbiB0aGUgbmV4dCBDUFUgY3ljbGUsIHNvIHRoZSBhY3Rpb25zIG9mIHRoZSBzeW5jIHN0b3AgY2FuIGJlIHByb2Nlc3NlcyBmaXJzdFxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHN5bmMpO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNlbGYubGFzdFN5bmNTdGF0ZSA9IHN5bmM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBzZWxmLnJlcXVlc3RNYW5hZ2VyLnN0YXJ0UG9sbGluZyh7XG4gICAgICAgIG1ldGhvZDogJ2V0aF9zeW5jaW5nJyxcbiAgICAgICAgcGFyYW1zOiBbXSxcbiAgICB9LCBzZWxmLnBvbGxJZCwgb25NZXNzYWdlLCBzZWxmLnN0b3BXYXRjaGluZy5iaW5kKHNlbGYpKTtcblxufTtcblxudmFyIElzU3luY2luZyA9IGZ1bmN0aW9uIChyZXF1ZXN0TWFuYWdlciwgY2FsbGJhY2spIHtcbiAgICB0aGlzLnJlcXVlc3RNYW5hZ2VyID0gcmVxdWVzdE1hbmFnZXI7XG4gICAgdGhpcy5wb2xsSWQgPSAnc3luY1BvbGxfJysgY291bnQrKztcbiAgICB0aGlzLmNhbGxiYWNrcyA9IFtdO1xuICAgIHRoaXMuYWRkQ2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMubGFzdFN5bmNTdGF0ZSA9IGZhbHNlO1xuICAgIHBvbGxTeW5jaW5nKHRoaXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5Jc1N5bmNpbmcucHJvdG90eXBlLmFkZENhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgaWYoY2FsbGJhY2spXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuSXNTeW5jaW5nLnByb3RvdHlwZS5zdG9wV2F0Y2hpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZXF1ZXN0TWFuYWdlci5zdG9wUG9sbGluZyh0aGlzLnBvbGxJZCk7XG4gICAgdGhpcy5jYWxsYmFja3MgPSBbXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSXNTeW5jaW5nO1xuXG4iLCIvKlxuICAgIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHdlYjMuanMuXG5cbiAgICB3ZWIzLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAgICBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAgICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICAgIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG5cbiAgICB3ZWIzLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHdlYjMuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuLyoqIFxuICogQGZpbGUgdHJhbnNmZXIuanNcbiAqIEBhdXRob3IgTWFyZWsgS290ZXdpY3ogPG1hcmVrQGV0aGRldi5jb20+XG4gKiBAZGF0ZSAyMDE1XG4gKi9cblxudmFyIEliYW4gPSByZXF1aXJlKCcuL2liYW4nKTtcbnZhciBleGNoYW5nZUFiaSA9IHJlcXVpcmUoJy4uL2NvbnRyYWN0cy9TbWFydEV4Y2hhbmdlLmpzb24nKTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBtYWtlIEliYW4gdHJhbnNmZXJcbiAqXG4gKiBAbWV0aG9kIHRyYW5zZmVyXG4gKiBAcGFyYW0ge1N0cmluZ30gZnJvbVxuICogQHBhcmFtIHtTdHJpbmd9IHRvIGliYW5cbiAqIEBwYXJhbSB7VmFsdWV9IHZhbHVlIHRvIGJlIHRyYW5mZXJlZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2ssIGNhbGxiYWNrXG4gKi9cbnZhciB0cmFuc2ZlciA9IGZ1bmN0aW9uIChldGgsIGZyb20sIHRvLCB2YWx1ZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgaWJhbiA9IG5ldyBJYmFuKHRvKTsgXG4gICAgaWYgKCFpYmFuLmlzVmFsaWQoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaWJhbiBhZGRyZXNzJyk7XG4gICAgfVxuXG4gICAgaWYgKGliYW4uaXNEaXJlY3QoKSkge1xuICAgICAgICByZXR1cm4gdHJhbnNmZXJUb0FkZHJlc3MoZXRoLCBmcm9tLCBpYmFuLmFkZHJlc3MoKSwgdmFsdWUsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICB2YXIgYWRkcmVzcyA9IGV0aC5pY2FwTmFtZXJlZygpLmFkZHIoaWJhbi5pbnN0aXR1dGlvbigpKTtcbiAgICAgICAgcmV0dXJuIGRlcG9zaXQoZXRoLCBmcm9tLCBhZGRyZXNzLCB2YWx1ZSwgaWJhbi5jbGllbnQoKSk7XG4gICAgfVxuXG4gICAgZXRoLmljYXBOYW1lcmVnKCkuYWRkcihpYmFuLmluc3RpdHV0aW9uKCksIGZ1bmN0aW9uIChlcnIsIGFkZHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIGRlcG9zaXQoZXRoLCBmcm9tLCBhZGRyZXNzLCB2YWx1ZSwgaWJhbi5jbGllbnQoKSwgY2FsbGJhY2spO1xuICAgIH0pO1xuICAgIFxufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byB0cmFuc2ZlciBmdW5kcyB0byBjZXJ0YWluIGFkZHJlc3NcbiAqXG4gKiBAbWV0aG9kIHRyYW5zZmVyVG9BZGRyZXNzXG4gKiBAcGFyYW0ge1N0cmluZ30gZnJvbVxuICogQHBhcmFtIHtTdHJpbmd9IHRvXG4gKiBAcGFyYW0ge1ZhbHVlfSB2YWx1ZSB0byBiZSB0cmFuZmVyZWRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrLCBjYWxsYmFja1xuICovXG52YXIgdHJhbnNmZXJUb0FkZHJlc3MgPSBmdW5jdGlvbiAoZXRoLCBmcm9tLCB0bywgdmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGV0aC5zZW5kVHJhbnNhY3Rpb24oe1xuICAgICAgICBhZGRyZXNzOiB0byxcbiAgICAgICAgZnJvbTogZnJvbSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSwgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBTaG91bGQgYmUgdXNlZCB0byBkZXBvc2l0IGZ1bmRzIHRvIGdlbmVyaWMgRXhjaGFuZ2UgY29udHJhY3QgKG11c3QgaW1wbGVtZW50IGRlcG9zaXQoYnl0ZXMzMikgbWV0aG9kISlcbiAqXG4gKiBAbWV0aG9kIGRlcG9zaXRcbiAqIEBwYXJhbSB7U3RyaW5nfSBmcm9tXG4gKiBAcGFyYW0ge1N0cmluZ30gdG9cbiAqIEBwYXJhbSB7VmFsdWV9IHZhbHVlIHRvIGJlIHRyYW5zZmVyZWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBjbGllbnQgdW5pcXVlIGlkZW50aWZpZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrLCBjYWxsYmFja1xuICovXG52YXIgZGVwb3NpdCA9IGZ1bmN0aW9uIChldGgsIGZyb20sIHRvLCB2YWx1ZSwgY2xpZW50LCBjYWxsYmFjaykge1xuICAgIHZhciBhYmkgPSBleGNoYW5nZUFiaTtcbiAgICByZXR1cm4gZXRoLmNvbnRyYWN0KGFiaSkuYXQodG8pLmRlcG9zaXQoY2xpZW50LCB7XG4gICAgICAgIGZyb206IGZyb20sXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0sIGNhbGxiYWNrKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhbnNmZXI7XG5cbiIsIi8qISBiaWdudW1iZXIuanMgdjIuMC43IGh0dHBzOi8vZ2l0aHViLmNvbS9NaWtlTWNsL2JpZ251bWJlci5qcy9MSUNFTkNFICovXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIC8qXG4gICAgICBiaWdudW1iZXIuanMgdjIuMC43XG4gICAgICBBIEphdmFTY3JpcHQgbGlicmFyeSBmb3IgYXJiaXRyYXJ5LXByZWNpc2lvbiBhcml0aG1ldGljLlxuICAgICAgaHR0cHM6Ly9naXRodWIuY29tL01pa2VNY2wvYmlnbnVtYmVyLmpzXG4gICAgICBDb3B5cmlnaHQgKGMpIDIwMTUgTWljaGFlbCBNY2xhdWdobGluIDxNOGNoODhsQGdtYWlsLmNvbT5cbiAgICAgIE1JVCBFeHBhdCBMaWNlbmNlXG4gICAgKi9cblxuXG4gICAgdmFyIEJpZ051bWJlciwgY3J5cHRvLCBwYXJzZU51bWVyaWMsXG4gICAgICAgIGlzTnVtZXJpYyA9IC9eLT8oXFxkKyhcXC5cXGQqKT98XFwuXFxkKykoZVsrLV0/XFxkKyk/JC9pLFxuICAgICAgICBtYXRoY2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgbWF0aGZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbm90Qm9vbCA9ICcgbm90IGEgYm9vbGVhbiBvciBiaW5hcnkgZGlnaXQnLFxuICAgICAgICByb3VuZGluZ01vZGUgPSAncm91bmRpbmcgbW9kZScsXG4gICAgICAgIHRvb01hbnlEaWdpdHMgPSAnbnVtYmVyIHR5cGUgaGFzIG1vcmUgdGhhbiAxNSBzaWduaWZpY2FudCBkaWdpdHMnLFxuICAgICAgICBBTFBIQUJFVCA9ICcwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWiRfJyxcbiAgICAgICAgQkFTRSA9IDFlMTQsXG4gICAgICAgIExPR19CQVNFID0gMTQsXG4gICAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFmZmZmZmZmZmZmZmZmLCAgICAgICAgIC8vIDJeNTMgLSAxXG4gICAgICAgIC8vIE1BWF9JTlQzMiA9IDB4N2ZmZmZmZmYsICAgICAgICAgICAgICAgICAgIC8vIDJeMzEgLSAxXG4gICAgICAgIFBPV1NfVEVOID0gWzEsIDEwLCAxMDAsIDFlMywgMWU0LCAxZTUsIDFlNiwgMWU3LCAxZTgsIDFlOSwgMWUxMCwgMWUxMSwgMWUxMiwgMWUxM10sXG4gICAgICAgIFNRUlRfQkFTRSA9IDFlNyxcblxuICAgICAgICAvKlxuICAgICAgICAgKiBUaGUgbGltaXQgb24gdGhlIHZhbHVlIG9mIERFQ0lNQUxfUExBQ0VTLCBUT19FWFBfTkVHLCBUT19FWFBfUE9TLCBNSU5fRVhQLCBNQVhfRVhQLCBhbmRcbiAgICAgICAgICogdGhlIGFyZ3VtZW50cyB0byB0b0V4cG9uZW50aWFsLCB0b0ZpeGVkLCB0b0Zvcm1hdCwgYW5kIHRvUHJlY2lzaW9uLCBiZXlvbmQgd2hpY2ggYW5cbiAgICAgICAgICogZXhjZXB0aW9uIGlzIHRocm93biAoaWYgRVJST1JTIGlzIHRydWUpLlxuICAgICAgICAgKi9cbiAgICAgICAgTUFYID0gMUU5OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byBNQVhfSU5UMzJcblxuXG4gICAgLypcbiAgICAgKiBDcmVhdGUgYW5kIHJldHVybiBhIEJpZ051bWJlciBjb25zdHJ1Y3Rvci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhbm90aGVyKGNvbmZpZ09iaikge1xuICAgICAgICB2YXIgZGl2LFxuXG4gICAgICAgICAgICAvLyBpZCB0cmFja3MgdGhlIGNhbGxlciBmdW5jdGlvbiwgc28gaXRzIG5hbWUgY2FuIGJlIGluY2x1ZGVkIGluIGVycm9yIG1lc3NhZ2VzLlxuICAgICAgICAgICAgaWQgPSAwLFxuICAgICAgICAgICAgUCA9IEJpZ051bWJlci5wcm90b3R5cGUsXG4gICAgICAgICAgICBPTkUgPSBuZXcgQmlnTnVtYmVyKDEpLFxuXG5cbiAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogRURJVEFCTEUgREVGQVVMVFMgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogVGhlIGRlZmF1bHQgdmFsdWVzIGJlbG93IG11c3QgYmUgaW50ZWdlcnMgd2l0aGluIHRoZSBpbmNsdXNpdmUgcmFuZ2VzIHN0YXRlZC5cbiAgICAgICAgICAgICAqIFRoZSB2YWx1ZXMgY2FuIGFsc28gYmUgY2hhbmdlZCBhdCBydW4tdGltZSB1c2luZyBCaWdOdW1iZXIuY29uZmlnLlxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8vIFRoZSBtYXhpbXVtIG51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyBmb3Igb3BlcmF0aW9ucyBpbnZvbHZpbmcgZGl2aXNpb24uXG4gICAgICAgICAgICBERUNJTUFMX1BMQUNFUyA9IDIwLCAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gTUFYXG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBUaGUgcm91bmRpbmcgbW9kZSB1c2VkIHdoZW4gcm91bmRpbmcgdG8gdGhlIGFib3ZlIGRlY2ltYWwgcGxhY2VzLCBhbmQgd2hlbiB1c2luZ1xuICAgICAgICAgICAgICogdG9FeHBvbmVudGlhbCwgdG9GaXhlZCwgdG9Gb3JtYXQgYW5kIHRvUHJlY2lzaW9uLCBhbmQgcm91bmQgKGRlZmF1bHQgdmFsdWUpLlxuICAgICAgICAgICAgICogVVAgICAgICAgICAwIEF3YXkgZnJvbSB6ZXJvLlxuICAgICAgICAgICAgICogRE9XTiAgICAgICAxIFRvd2FyZHMgemVyby5cbiAgICAgICAgICAgICAqIENFSUwgICAgICAgMiBUb3dhcmRzICtJbmZpbml0eS5cbiAgICAgICAgICAgICAqIEZMT09SICAgICAgMyBUb3dhcmRzIC1JbmZpbml0eS5cbiAgICAgICAgICAgICAqIEhBTEZfVVAgICAgNCBUb3dhcmRzIG5lYXJlc3QgbmVpZ2hib3VyLiBJZiBlcXVpZGlzdGFudCwgdXAuXG4gICAgICAgICAgICAgKiBIQUxGX0RPV04gIDUgVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIGRvd24uXG4gICAgICAgICAgICAgKiBIQUxGX0VWRU4gIDYgVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvd2FyZHMgZXZlbiBuZWlnaGJvdXIuXG4gICAgICAgICAgICAgKiBIQUxGX0NFSUwgIDcgVG93YXJkcyBuZWFyZXN0IG5laWdoYm91ci4gSWYgZXF1aWRpc3RhbnQsIHRvd2FyZHMgK0luZmluaXR5LlxuICAgICAgICAgICAgICogSEFMRl9GTE9PUiA4IFRvd2FyZHMgbmVhcmVzdCBuZWlnaGJvdXIuIElmIGVxdWlkaXN0YW50LCB0b3dhcmRzIC1JbmZpbml0eS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUk9VTkRJTkdfTU9ERSA9IDQsICAgICAgICAgICAgICAgICAgICAgICAvLyAwIHRvIDhcblxuICAgICAgICAgICAgLy8gRVhQT05FTlRJQUxfQVQgOiBbVE9fRVhQX05FRyAsIFRPX0VYUF9QT1NdXG5cbiAgICAgICAgICAgIC8vIFRoZSBleHBvbmVudCB2YWx1ZSBhdCBhbmQgYmVuZWF0aCB3aGljaCB0b1N0cmluZyByZXR1cm5zIGV4cG9uZW50aWFsIG5vdGF0aW9uLlxuICAgICAgICAgICAgLy8gTnVtYmVyIHR5cGU6IC03XG4gICAgICAgICAgICBUT19FWFBfTkVHID0gLTcsICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgdG8gLU1BWFxuXG4gICAgICAgICAgICAvLyBUaGUgZXhwb25lbnQgdmFsdWUgYXQgYW5kIGFib3ZlIHdoaWNoIHRvU3RyaW5nIHJldHVybnMgZXhwb25lbnRpYWwgbm90YXRpb24uXG4gICAgICAgICAgICAvLyBOdW1iZXIgdHlwZTogMjFcbiAgICAgICAgICAgIFRPX0VYUF9QT1MgPSAyMSwgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byBNQVhcblxuICAgICAgICAgICAgLy8gUkFOR0UgOiBbTUlOX0VYUCwgTUFYX0VYUF1cblxuICAgICAgICAgICAgLy8gVGhlIG1pbmltdW0gZXhwb25lbnQgdmFsdWUsIGJlbmVhdGggd2hpY2ggdW5kZXJmbG93IHRvIHplcm8gb2NjdXJzLlxuICAgICAgICAgICAgLy8gTnVtYmVyIHR5cGU6IC0zMjQgICg1ZS0zMjQpXG4gICAgICAgICAgICBNSU5fRVhQID0gLTFlNywgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0xIHRvIC1NQVhcblxuICAgICAgICAgICAgLy8gVGhlIG1heGltdW0gZXhwb25lbnQgdmFsdWUsIGFib3ZlIHdoaWNoIG92ZXJmbG93IHRvIEluZmluaXR5IG9jY3Vycy5cbiAgICAgICAgICAgIC8vIE51bWJlciB0eXBlOiAgMzA4ICAoMS43OTc2OTMxMzQ4NjIzMTU3ZSszMDgpXG4gICAgICAgICAgICAvLyBGb3IgTUFYX0VYUCA+IDFlNywgZS5nLiBuZXcgQmlnTnVtYmVyKCcxZTEwMDAwMDAwMCcpLnBsdXMoMSkgbWF5IGJlIHNsb3cuXG4gICAgICAgICAgICBNQVhfRVhQID0gMWU3LCAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDEgdG8gTUFYXG5cbiAgICAgICAgICAgIC8vIFdoZXRoZXIgQmlnTnVtYmVyIEVycm9ycyBhcmUgZXZlciB0aHJvd24uXG4gICAgICAgICAgICBFUlJPUlMgPSB0cnVlLCAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRydWUgb3IgZmFsc2VcblxuICAgICAgICAgICAgLy8gQ2hhbmdlIHRvIGludFZhbGlkYXRvck5vRXJyb3JzIGlmIEVSUk9SUyBpcyBmYWxzZS5cbiAgICAgICAgICAgIGlzVmFsaWRJbnQgPSBpbnRWYWxpZGF0b3JXaXRoRXJyb3JzLCAgICAgLy8gaW50VmFsaWRhdG9yV2l0aEVycm9ycy9pbnRWYWxpZGF0b3JOb0Vycm9yc1xuXG4gICAgICAgICAgICAvLyBXaGV0aGVyIHRvIHVzZSBjcnlwdG9ncmFwaGljYWxseS1zZWN1cmUgcmFuZG9tIG51bWJlciBnZW5lcmF0aW9uLCBpZiBhdmFpbGFibGUuXG4gICAgICAgICAgICBDUllQVE8gPSBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRydWUgb3IgZmFsc2VcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIFRoZSBtb2R1bG8gbW9kZSB1c2VkIHdoZW4gY2FsY3VsYXRpbmcgdGhlIG1vZHVsdXM6IGEgbW9kIG4uXG4gICAgICAgICAgICAgKiBUaGUgcXVvdGllbnQgKHEgPSBhIC8gbikgaXMgY2FsY3VsYXRlZCBhY2NvcmRpbmcgdG8gdGhlIGNvcnJlc3BvbmRpbmcgcm91bmRpbmcgbW9kZS5cbiAgICAgICAgICAgICAqIFRoZSByZW1haW5kZXIgKHIpIGlzIGNhbGN1bGF0ZWQgYXM6IHIgPSBhIC0gbiAqIHEuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVVAgICAgICAgIDAgVGhlIHJlbWFpbmRlciBpcyBwb3NpdGl2ZSBpZiB0aGUgZGl2aWRlbmQgaXMgbmVnYXRpdmUsIGVsc2UgaXMgbmVnYXRpdmUuXG4gICAgICAgICAgICAgKiBET1dOICAgICAgMSBUaGUgcmVtYWluZGVyIGhhcyB0aGUgc2FtZSBzaWduIGFzIHRoZSBkaXZpZGVuZC5cbiAgICAgICAgICAgICAqICAgICAgICAgICAgIFRoaXMgbW9kdWxvIG1vZGUgaXMgY29tbW9ubHkga25vd24gYXMgJ3RydW5jYXRlZCBkaXZpc2lvbicgYW5kIGlzXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICBlcXVpdmFsZW50IHRvIChhICUgbikgaW4gSmF2YVNjcmlwdC5cbiAgICAgICAgICAgICAqIEZMT09SICAgICAzIFRoZSByZW1haW5kZXIgaGFzIHRoZSBzYW1lIHNpZ24gYXMgdGhlIGRpdmlzb3IgKFB5dGhvbiAlKS5cbiAgICAgICAgICAgICAqIEhBTEZfRVZFTiA2IFRoaXMgbW9kdWxvIG1vZGUgaW1wbGVtZW50cyB0aGUgSUVFRSA3NTQgcmVtYWluZGVyIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICogRVVDTElEICAgIDkgRXVjbGlkaWFuIGRpdmlzaW9uLiBxID0gc2lnbihuKSAqIGZsb29yKGEgLyBhYnMobikpLlxuICAgICAgICAgICAgICogICAgICAgICAgICAgVGhlIHJlbWFpbmRlciBpcyBhbHdheXMgcG9zaXRpdmUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogVGhlIHRydW5jYXRlZCBkaXZpc2lvbiwgZmxvb3JlZCBkaXZpc2lvbiwgRXVjbGlkaWFuIGRpdmlzaW9uIGFuZCBJRUVFIDc1NCByZW1haW5kZXJcbiAgICAgICAgICAgICAqIG1vZGVzIGFyZSBjb21tb25seSB1c2VkIGZvciB0aGUgbW9kdWx1cyBvcGVyYXRpb24uXG4gICAgICAgICAgICAgKiBBbHRob3VnaCB0aGUgb3RoZXIgcm91bmRpbmcgbW9kZXMgY2FuIGFsc28gYmUgdXNlZCwgdGhleSBtYXkgbm90IGdpdmUgdXNlZnVsIHJlc3VsdHMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIE1PRFVMT19NT0RFID0gMSwgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byA5XG5cbiAgICAgICAgICAgIC8vIFRoZSBtYXhpbXVtIG51bWJlciBvZiBzaWduaWZpY2FudCBkaWdpdHMgb2YgdGhlIHJlc3VsdCBvZiB0aGUgdG9Qb3dlciBvcGVyYXRpb24uXG4gICAgICAgICAgICAvLyBJZiBQT1dfUFJFQ0lTSU9OIGlzIDAsIHRoZXJlIHdpbGwgYmUgdW5saW1pdGVkIHNpZ25pZmljYW50IGRpZ2l0cy5cbiAgICAgICAgICAgIFBPV19QUkVDSVNJT04gPSAxMDAsICAgICAgICAgICAgICAgICAgICAgLy8gMCB0byBNQVhcblxuICAgICAgICAgICAgLy8gVGhlIGZvcm1hdCBzcGVjaWZpY2F0aW9uIHVzZWQgYnkgdGhlIEJpZ051bWJlci5wcm90b3R5cGUudG9Gb3JtYXQgbWV0aG9kLlxuICAgICAgICAgICAgRk9STUFUID0ge1xuICAgICAgICAgICAgICAgIGRlY2ltYWxTZXBhcmF0b3I6ICcuJyxcbiAgICAgICAgICAgICAgICBncm91cFNlcGFyYXRvcjogJywnLFxuICAgICAgICAgICAgICAgIGdyb3VwU2l6ZTogMyxcbiAgICAgICAgICAgICAgICBzZWNvbmRhcnlHcm91cFNpemU6IDAsXG4gICAgICAgICAgICAgICAgZnJhY3Rpb25Hcm91cFNlcGFyYXRvcjogJ1xceEEwJywgICAgICAvLyBub24tYnJlYWtpbmcgc3BhY2VcbiAgICAgICAgICAgICAgICBmcmFjdGlvbkdyb3VwU2l6ZTogMFxuICAgICAgICAgICAgfTtcblxuXG4gICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxuICAgICAgICAvLyBDT05TVFJVQ1RPUlxuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogVGhlIEJpZ051bWJlciBjb25zdHJ1Y3RvciBhbmQgZXhwb3J0ZWQgZnVuY3Rpb24uXG4gICAgICAgICAqIENyZWF0ZSBhbmQgcmV0dXJuIGEgbmV3IGluc3RhbmNlIG9mIGEgQmlnTnVtYmVyIG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogbiB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ9IEEgbnVtZXJpYyB2YWx1ZS5cbiAgICAgICAgICogW2JdIHtudW1iZXJ9IFRoZSBiYXNlIG9mIG4uIEludGVnZXIsIDIgdG8gNjQgaW5jbHVzaXZlLlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gQmlnTnVtYmVyKCBuLCBiICkge1xuICAgICAgICAgICAgdmFyIGMsIGUsIGksIG51bSwgbGVuLCBzdHIsXG4gICAgICAgICAgICAgICAgeCA9IHRoaXM7XG5cbiAgICAgICAgICAgIC8vIEVuYWJsZSBjb25zdHJ1Y3RvciB1c2FnZSB3aXRob3V0IG5ldy5cbiAgICAgICAgICAgIGlmICggISggeCBpbnN0YW5jZW9mIEJpZ051bWJlciApICkge1xuXG4gICAgICAgICAgICAgICAgLy8gJ0JpZ051bWJlcigpIGNvbnN0cnVjdG9yIGNhbGwgd2l0aG91dCBuZXc6IHtufSdcbiAgICAgICAgICAgICAgICBpZiAoRVJST1JTKSByYWlzZSggMjYsICdjb25zdHJ1Y3RvciBjYWxsIHdpdGhvdXQgbmV3JywgbiApO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQmlnTnVtYmVyKCBuLCBiICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vICduZXcgQmlnTnVtYmVyKCkgYmFzZSBub3QgYW4gaW50ZWdlcjoge2J9J1xuICAgICAgICAgICAgLy8gJ25ldyBCaWdOdW1iZXIoKSBiYXNlIG91dCBvZiByYW5nZToge2J9J1xuICAgICAgICAgICAgaWYgKCBiID09IG51bGwgfHwgIWlzVmFsaWRJbnQoIGIsIDIsIDY0LCBpZCwgJ2Jhc2UnICkgKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBEdXBsaWNhdGUuXG4gICAgICAgICAgICAgICAgaWYgKCBuIGluc3RhbmNlb2YgQmlnTnVtYmVyICkge1xuICAgICAgICAgICAgICAgICAgICB4LnMgPSBuLnM7XG4gICAgICAgICAgICAgICAgICAgIHguZSA9IG4uZTtcbiAgICAgICAgICAgICAgICAgICAgeC5jID0gKCBuID0gbi5jICkgPyBuLnNsaWNlKCkgOiBuO1xuICAgICAgICAgICAgICAgICAgICBpZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoICggbnVtID0gdHlwZW9mIG4gPT0gJ251bWJlcicgKSAmJiBuICogMCA9PSAwICkge1xuICAgICAgICAgICAgICAgICAgICB4LnMgPSAxIC8gbiA8IDAgPyAoIG4gPSAtbiwgLTEgKSA6IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRmFzdCBwYXRoIGZvciBpbnRlZ2Vycy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBuID09PSB+fm4gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCBlID0gMCwgaSA9IG47IGkgPj0gMTA7IGkgLz0gMTAsIGUrKyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgeC5lID0gZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHguYyA9IFtuXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IG4gKyAnJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoICFpc051bWVyaWMudGVzdCggc3RyID0gbiArICcnICkgKSByZXR1cm4gcGFyc2VOdW1lcmljKCB4LCBzdHIsIG51bSApO1xuICAgICAgICAgICAgICAgICAgICB4LnMgPSBzdHIuY2hhckNvZGVBdCgwKSA9PT0gNDUgPyAoIHN0ciA9IHN0ci5zbGljZSgxKSwgLTEgKSA6IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBiID0gYiB8IDA7XG4gICAgICAgICAgICAgICAgc3RyID0gbiArICcnO1xuXG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIHJldHVybiB2YWx1ZSBpcyByb3VuZGVkIHRvIERFQ0lNQUxfUExBQ0VTIGFzIHdpdGggb3RoZXIgYmFzZXMuXG4gICAgICAgICAgICAgICAgLy8gQWxsb3cgZXhwb25lbnRpYWwgbm90YXRpb24gdG8gYmUgdXNlZCB3aXRoIGJhc2UgMTAgYXJndW1lbnQuXG4gICAgICAgICAgICAgICAgaWYgKCBiID09IDEwICkge1xuICAgICAgICAgICAgICAgICAgICB4ID0gbmV3IEJpZ051bWJlciggbiBpbnN0YW5jZW9mIEJpZ051bWJlciA/IG4gOiBzdHIgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvdW5kKCB4LCBERUNJTUFMX1BMQUNFUyArIHguZSArIDEsIFJPVU5ESU5HX01PREUgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBBdm9pZCBwb3RlbnRpYWwgaW50ZXJwcmV0YXRpb24gb2YgSW5maW5pdHkgYW5kIE5hTiBhcyBiYXNlIDQ0KyB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgLy8gQW55IG51bWJlciBpbiBleHBvbmVudGlhbCBmb3JtIHdpbGwgZmFpbCBkdWUgdG8gdGhlIFtFZV1bKy1dLlxuICAgICAgICAgICAgICAgIGlmICggKCBudW0gPSB0eXBlb2YgbiA9PSAnbnVtYmVyJyApICYmIG4gKiAwICE9IDAgfHxcbiAgICAgICAgICAgICAgICAgICEoIG5ldyBSZWdFeHAoICdeLT8nICsgKCBjID0gJ1snICsgQUxQSEFCRVQuc2xpY2UoIDAsIGIgKSArICddKycgKSArXG4gICAgICAgICAgICAgICAgICAgICcoPzpcXFxcLicgKyBjICsgJyk/JCcsYiA8IDM3ID8gJ2knIDogJycgKSApLnRlc3Qoc3RyKSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpYyggeCwgc3RyLCBudW0sIGIgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobnVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHgucyA9IDEgLyBuIDwgMCA/ICggc3RyID0gc3RyLnNsaWNlKDEpLCAtMSApIDogMTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIEVSUk9SUyAmJiBzdHIucmVwbGFjZSggL14wXFwuMCp8XFwuLywgJycgKS5sZW5ndGggPiAxNSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ25ldyBCaWdOdW1iZXIoKSBudW1iZXIgdHlwZSBoYXMgbW9yZSB0aGFuIDE1IHNpZ25pZmljYW50IGRpZ2l0czoge259J1xuICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2UoIGlkLCB0b29NYW55RGlnaXRzLCBuICk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IGxhdGVyIGNoZWNrIGZvciBsZW5ndGggb24gY29udmVydGVkIG51bWJlci5cbiAgICAgICAgICAgICAgICAgICAgbnVtID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeC5zID0gc3RyLmNoYXJDb2RlQXQoMCkgPT09IDQ1ID8gKCBzdHIgPSBzdHIuc2xpY2UoMSksIC0xICkgOiAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0ciA9IGNvbnZlcnRCYXNlKCBzdHIsIDEwLCBiLCB4LnMgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGVjaW1hbCBwb2ludD9cbiAgICAgICAgICAgIGlmICggKCBlID0gc3RyLmluZGV4T2YoJy4nKSApID4gLTEgKSBzdHIgPSBzdHIucmVwbGFjZSggJy4nLCAnJyApO1xuXG4gICAgICAgICAgICAvLyBFeHBvbmVudGlhbCBmb3JtP1xuICAgICAgICAgICAgaWYgKCAoIGkgPSBzdHIuc2VhcmNoKCAvZS9pICkgKSA+IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgZXhwb25lbnQuXG4gICAgICAgICAgICAgICAgaWYgKCBlIDwgMCApIGUgPSBpO1xuICAgICAgICAgICAgICAgIGUgKz0gK3N0ci5zbGljZSggaSArIDEgKTtcbiAgICAgICAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKCAwLCBpICk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBlIDwgMCApIHtcblxuICAgICAgICAgICAgICAgIC8vIEludGVnZXIuXG4gICAgICAgICAgICAgICAgZSA9IHN0ci5sZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERldGVybWluZSBsZWFkaW5nIHplcm9zLlxuICAgICAgICAgICAgZm9yICggaSA9IDA7IHN0ci5jaGFyQ29kZUF0KGkpID09PSA0ODsgaSsrICk7XG5cbiAgICAgICAgICAgIC8vIERldGVybWluZSB0cmFpbGluZyB6ZXJvcy5cbiAgICAgICAgICAgIGZvciAoIGxlbiA9IHN0ci5sZW5ndGg7IHN0ci5jaGFyQ29kZUF0KC0tbGVuKSA9PT0gNDg7ICk7XG4gICAgICAgICAgICBzdHIgPSBzdHIuc2xpY2UoIGksIGxlbiArIDEgKTtcblxuICAgICAgICAgICAgaWYgKHN0cikge1xuICAgICAgICAgICAgICAgIGxlbiA9IHN0ci5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAvLyBEaXNhbGxvdyBudW1iZXJzIHdpdGggb3ZlciAxNSBzaWduaWZpY2FudCBkaWdpdHMgaWYgbnVtYmVyIHR5cGUuXG4gICAgICAgICAgICAgICAgLy8gJ25ldyBCaWdOdW1iZXIoKSBudW1iZXIgdHlwZSBoYXMgbW9yZSB0aGFuIDE1IHNpZ25pZmljYW50IGRpZ2l0czoge259J1xuICAgICAgICAgICAgICAgIGlmICggbnVtICYmIEVSUk9SUyAmJiBsZW4gPiAxNSApIHJhaXNlKCBpZCwgdG9vTWFueURpZ2l0cywgeC5zICogbiApO1xuXG4gICAgICAgICAgICAgICAgZSA9IGUgLSBpIC0gMTtcblxuICAgICAgICAgICAgICAgICAvLyBPdmVyZmxvdz9cbiAgICAgICAgICAgICAgICBpZiAoIGUgPiBNQVhfRVhQICkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEluZmluaXR5LlxuICAgICAgICAgICAgICAgICAgICB4LmMgPSB4LmUgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy8gVW5kZXJmbG93P1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGUgPCBNSU5fRVhQICkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFplcm8uXG4gICAgICAgICAgICAgICAgICAgIHguYyA9IFsgeC5lID0gMCBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHguZSA9IGU7XG4gICAgICAgICAgICAgICAgICAgIHguYyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyYW5zZm9ybSBiYXNlXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZSBpcyB0aGUgYmFzZSAxMCBleHBvbmVudC5cbiAgICAgICAgICAgICAgICAgICAgLy8gaSBpcyB3aGVyZSB0byBzbGljZSBzdHIgdG8gZ2V0IHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBjb2VmZmljaWVudCBhcnJheS5cbiAgICAgICAgICAgICAgICAgICAgaSA9ICggZSArIDEgKSAlIExPR19CQVNFO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGUgPCAwICkgaSArPSBMT0dfQkFTRTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIGkgPCBsZW4gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSkgeC5jLnB1c2goICtzdHIuc2xpY2UoIDAsIGkgKSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCBsZW4gLT0gTE9HX0JBU0U7IGkgPCBsZW47ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHguYy5wdXNoKCArc3RyLnNsaWNlKCBpLCBpICs9IExPR19CQVNFICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyLnNsaWNlKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IExPR19CQVNFIC0gc3RyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgLT0gbGVuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICggOyBpLS07IHN0ciArPSAnMCcgKTtcbiAgICAgICAgICAgICAgICAgICAgeC5jLnB1c2goICtzdHIgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgLy8gWmVyby5cbiAgICAgICAgICAgICAgICB4LmMgPSBbIHguZSA9IDAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWQgPSAwO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyBDT05TVFJVQ1RPUiBQUk9QRVJUSUVTXG5cblxuICAgICAgICBCaWdOdW1iZXIuYW5vdGhlciA9IGFub3RoZXI7XG5cbiAgICAgICAgQmlnTnVtYmVyLlJPVU5EX1VQID0gMDtcbiAgICAgICAgQmlnTnVtYmVyLlJPVU5EX0RPV04gPSAxO1xuICAgICAgICBCaWdOdW1iZXIuUk9VTkRfQ0VJTCA9IDI7XG4gICAgICAgIEJpZ051bWJlci5ST1VORF9GTE9PUiA9IDM7XG4gICAgICAgIEJpZ051bWJlci5ST1VORF9IQUxGX1VQID0gNDtcbiAgICAgICAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfRE9XTiA9IDU7XG4gICAgICAgIEJpZ051bWJlci5ST1VORF9IQUxGX0VWRU4gPSA2O1xuICAgICAgICBCaWdOdW1iZXIuUk9VTkRfSEFMRl9DRUlMID0gNztcbiAgICAgICAgQmlnTnVtYmVyLlJPVU5EX0hBTEZfRkxPT1IgPSA4O1xuICAgICAgICBCaWdOdW1iZXIuRVVDTElEID0gOTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIENvbmZpZ3VyZSBpbmZyZXF1ZW50bHktY2hhbmdpbmcgbGlicmFyeS13aWRlIHNldHRpbmdzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBBY2NlcHQgYW4gb2JqZWN0IG9yIGFuIGFyZ3VtZW50IGxpc3QsIHdpdGggb25lIG9yIG1hbnkgb2YgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIG9yXG4gICAgICAgICAqIHBhcmFtZXRlcnMgcmVzcGVjdGl2ZWx5OlxuICAgICAgICAgKlxuICAgICAgICAgKiAgIERFQ0lNQUxfUExBQ0VTICB7bnVtYmVyfSAgSW50ZWdlciwgMCB0byBNQVggaW5jbHVzaXZlXG4gICAgICAgICAqICAgUk9VTkRJTkdfTU9ERSAgIHtudW1iZXJ9ICBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlXG4gICAgICAgICAqICAgRVhQT05FTlRJQUxfQVQgIHtudW1iZXJ8bnVtYmVyW119ICBJbnRlZ2VyLCAtTUFYIHRvIE1BWCBpbmNsdXNpdmUgb3JcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtpbnRlZ2VyIC1NQVggdG8gMCBpbmNsLiwgMCB0byBNQVggaW5jbC5dXG4gICAgICAgICAqICAgUkFOR0UgICAgICAgICAgIHtudW1iZXJ8bnVtYmVyW119ICBOb24temVybyBpbnRlZ2VyLCAtTUFYIHRvIE1BWCBpbmNsdXNpdmUgb3JcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtpbnRlZ2VyIC1NQVggdG8gLTEgaW5jbC4sIGludGVnZXIgMSB0byBNQVggaW5jbC5dXG4gICAgICAgICAqICAgRVJST1JTICAgICAgICAgIHtib29sZWFufG51bWJlcn0gICB0cnVlLCBmYWxzZSwgMSBvciAwXG4gICAgICAgICAqICAgQ1JZUFRPICAgICAgICAgIHtib29sZWFufG51bWJlcn0gICB0cnVlLCBmYWxzZSwgMSBvciAwXG4gICAgICAgICAqICAgTU9EVUxPX01PREUgICAgIHtudW1iZXJ9ICAgICAgICAgICAwIHRvIDkgaW5jbHVzaXZlXG4gICAgICAgICAqICAgUE9XX1BSRUNJU0lPTiAgIHtudW1iZXJ9ICAgICAgICAgICAwIHRvIE1BWCBpbmNsdXNpdmVcbiAgICAgICAgICogICBGT1JNQVQgICAgICAgICAge29iamVjdH0gICAgICAgICAgIFNlZSBCaWdOdW1iZXIucHJvdG90eXBlLnRvRm9ybWF0XG4gICAgICAgICAqICAgICAgZGVjaW1hbFNlcGFyYXRvciAgICAgICB7c3RyaW5nfVxuICAgICAgICAgKiAgICAgIGdyb3VwU2VwYXJhdG9yICAgICAgICAge3N0cmluZ31cbiAgICAgICAgICogICAgICBncm91cFNpemUgICAgICAgICAgICAgIHtudW1iZXJ9XG4gICAgICAgICAqICAgICAgc2Vjb25kYXJ5R3JvdXBTaXplICAgICB7bnVtYmVyfVxuICAgICAgICAgKiAgICAgIGZyYWN0aW9uR3JvdXBTZXBhcmF0b3Ige3N0cmluZ31cbiAgICAgICAgICogICAgICBmcmFjdGlvbkdyb3VwU2l6ZSAgICAgIHtudW1iZXJ9XG4gICAgICAgICAqXG4gICAgICAgICAqIChUaGUgdmFsdWVzIGFzc2lnbmVkIHRvIHRoZSBhYm92ZSBGT1JNQVQgb2JqZWN0IHByb3BlcnRpZXMgYXJlIG5vdCBjaGVja2VkIGZvciB2YWxpZGl0eS4pXG4gICAgICAgICAqXG4gICAgICAgICAqIEUuZy5cbiAgICAgICAgICogQmlnTnVtYmVyLmNvbmZpZygyMCwgNCkgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAgKiBCaWdOdW1iZXIuY29uZmlnKHsgREVDSU1BTF9QTEFDRVMgOiAyMCwgUk9VTkRJTkdfTU9ERSA6IDQgfSlcbiAgICAgICAgICpcbiAgICAgICAgICogSWdub3JlIHByb3BlcnRpZXMvcGFyYW1ldGVycyBzZXQgdG8gbnVsbCBvciB1bmRlZmluZWQuXG4gICAgICAgICAqIFJldHVybiBhbiBvYmplY3Qgd2l0aCB0aGUgcHJvcGVydGllcyBjdXJyZW50IHZhbHVlcy5cbiAgICAgICAgICovXG4gICAgICAgIEJpZ051bWJlci5jb25maWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdiwgcCxcbiAgICAgICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgICAgICByID0ge30sXG4gICAgICAgICAgICAgICAgYSA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBvID0gYVswXSxcbiAgICAgICAgICAgICAgICBoYXMgPSBvICYmIHR5cGVvZiBvID09ICdvYmplY3QnXG4gICAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHsgaWYgKCBvLmhhc093blByb3BlcnR5KHApICkgcmV0dXJuICggdiA9IG9bcF0gKSAhPSBudWxsOyB9XG4gICAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uICgpIHsgaWYgKCBhLmxlbmd0aCA+IGkgKSByZXR1cm4gKCB2ID0gYVtpKytdICkgIT0gbnVsbDsgfTtcblxuICAgICAgICAgICAgLy8gREVDSU1BTF9QTEFDRVMge251bWJlcn0gSW50ZWdlciwgMCB0byBNQVggaW5jbHVzaXZlLlxuICAgICAgICAgICAgLy8gJ2NvbmZpZygpIERFQ0lNQUxfUExBQ0VTIG5vdCBhbiBpbnRlZ2VyOiB7dn0nXG4gICAgICAgICAgICAvLyAnY29uZmlnKCkgREVDSU1BTF9QTEFDRVMgb3V0IG9mIHJhbmdlOiB7dn0nXG4gICAgICAgICAgICBpZiAoIGhhcyggcCA9ICdERUNJTUFMX1BMQUNFUycgKSAmJiBpc1ZhbGlkSW50KCB2LCAwLCBNQVgsIDIsIHAgKSApIHtcbiAgICAgICAgICAgICAgICBERUNJTUFMX1BMQUNFUyA9IHYgfCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcltwXSA9IERFQ0lNQUxfUExBQ0VTO1xuXG4gICAgICAgICAgICAvLyBST1VORElOR19NT0RFIHtudW1iZXJ9IEludGVnZXIsIDAgdG8gOCBpbmNsdXNpdmUuXG4gICAgICAgICAgICAvLyAnY29uZmlnKCkgUk9VTkRJTkdfTU9ERSBub3QgYW4gaW50ZWdlcjoge3Z9J1xuICAgICAgICAgICAgLy8gJ2NvbmZpZygpIFJPVU5ESU5HX01PREUgb3V0IG9mIHJhbmdlOiB7dn0nXG4gICAgICAgICAgICBpZiAoIGhhcyggcCA9ICdST1VORElOR19NT0RFJyApICYmIGlzVmFsaWRJbnQoIHYsIDAsIDgsIDIsIHAgKSApIHtcbiAgICAgICAgICAgICAgICBST1VORElOR19NT0RFID0gdiB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByW3BdID0gUk9VTkRJTkdfTU9ERTtcblxuICAgICAgICAgICAgLy8gRVhQT05FTlRJQUxfQVQge251bWJlcnxudW1iZXJbXX1cbiAgICAgICAgICAgIC8vIEludGVnZXIsIC1NQVggdG8gTUFYIGluY2x1c2l2ZSBvciBbaW50ZWdlciAtTUFYIHRvIDAgaW5jbHVzaXZlLCAwIHRvIE1BWCBpbmNsdXNpdmVdLlxuICAgICAgICAgICAgLy8gJ2NvbmZpZygpIEVYUE9ORU5USUFMX0FUIG5vdCBhbiBpbnRlZ2VyOiB7dn0nXG4gICAgICAgICAgICAvLyAnY29uZmlnKCkgRVhQT05FTlRJQUxfQVQgb3V0IG9mIHJhbmdlOiB7dn0nXG4gICAgICAgICAgICBpZiAoIGhhcyggcCA9ICdFWFBPTkVOVElBTF9BVCcgKSApIHtcblxuICAgICAgICAgICAgICAgIGlmICggaXNBcnJheSh2KSApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpc1ZhbGlkSW50KCB2WzBdLCAtTUFYLCAwLCAyLCBwICkgJiYgaXNWYWxpZEludCggdlsxXSwgMCwgTUFYLCAyLCBwICkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBUT19FWFBfTkVHID0gdlswXSB8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBUT19FWFBfUE9TID0gdlsxXSB8IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBpc1ZhbGlkSW50KCB2LCAtTUFYLCBNQVgsIDIsIHAgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgVE9fRVhQX05FRyA9IC0oIFRPX0VYUF9QT1MgPSAoIHYgPCAwID8gLXYgOiB2ICkgfCAwICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcltwXSA9IFsgVE9fRVhQX05FRywgVE9fRVhQX1BPUyBdO1xuXG4gICAgICAgICAgICAvLyBSQU5HRSB7bnVtYmVyfG51bWJlcltdfSBOb24temVybyBpbnRlZ2VyLCAtTUFYIHRvIE1BWCBpbmNsdXNpdmUgb3JcbiAgICAgICAgICAgIC8vIFtpbnRlZ2VyIC1NQVggdG8gLTEgaW5jbHVzaXZlLCBpbnRlZ2VyIDEgdG8gTUFYIGluY2x1c2l2ZV0uXG4gICAgICAgICAgICAvLyAnY29uZmlnKCkgUkFOR0Ugbm90IGFuIGludGVnZXI6IHt2fSdcbiAgICAgICAgICAgIC8vICdjb25maWcoKSBSQU5HRSBjYW5ub3QgYmUgemVybzoge3Z9J1xuICAgICAgICAgICAgLy8gJ2NvbmZpZygpIFJBTkdFIG91dCBvZiByYW5nZToge3Z9J1xuICAgICAgICAgICAgaWYgKCBoYXMoIHAgPSAnUkFOR0UnICkgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIGlzQXJyYXkodikgKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggaXNWYWxpZEludCggdlswXSwgLU1BWCwgLTEsIDIsIHAgKSAmJiBpc1ZhbGlkSW50KCB2WzFdLCAxLCBNQVgsIDIsIHAgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1JTl9FWFAgPSB2WzBdIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIE1BWF9FWFAgPSB2WzFdIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGlzVmFsaWRJbnQoIHYsIC1NQVgsIE1BWCwgMiwgcCApICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHYgfCAwICkgTUlOX0VYUCA9IC0oIE1BWF9FWFAgPSAoIHYgPCAwID8gLXYgOiB2ICkgfCAwICk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKEVSUk9SUykgcmFpc2UoIDIsIHAgKyAnIGNhbm5vdCBiZSB6ZXJvJywgdiApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJbcF0gPSBbIE1JTl9FWFAsIE1BWF9FWFAgXTtcblxuICAgICAgICAgICAgLy8gRVJST1JTIHtib29sZWFufG51bWJlcn0gdHJ1ZSwgZmFsc2UsIDEgb3IgMC5cbiAgICAgICAgICAgIC8vICdjb25maWcoKSBFUlJPUlMgbm90IGEgYm9vbGVhbiBvciBiaW5hcnkgZGlnaXQ6IHt2fSdcbiAgICAgICAgICAgIGlmICggaGFzKCBwID0gJ0VSUk9SUycgKSApIHtcblxuICAgICAgICAgICAgICAgIGlmICggdiA9PT0gISF2IHx8IHYgPT09IDEgfHwgdiA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgaWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkSW50ID0gKCBFUlJPUlMgPSAhIXYgKSA/IGludFZhbGlkYXRvcldpdGhFcnJvcnMgOiBpbnRWYWxpZGF0b3JOb0Vycm9ycztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEVSUk9SUykge1xuICAgICAgICAgICAgICAgICAgICByYWlzZSggMiwgcCArIG5vdEJvb2wsIHYgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByW3BdID0gRVJST1JTO1xuXG4gICAgICAgICAgICAvLyBDUllQVE8ge2Jvb2xlYW58bnVtYmVyfSB0cnVlLCBmYWxzZSwgMSBvciAwLlxuICAgICAgICAgICAgLy8gJ2NvbmZpZygpIENSWVBUTyBub3QgYSBib29sZWFuIG9yIGJpbmFyeSBkaWdpdDoge3Z9J1xuICAgICAgICAgICAgLy8gJ2NvbmZpZygpIGNyeXB0byB1bmF2YWlsYWJsZToge2NyeXB0b30nXG4gICAgICAgICAgICBpZiAoIGhhcyggcCA9ICdDUllQVE8nICkgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIHYgPT09ICEhdiB8fCB2ID09PSAxIHx8IHYgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgIENSWVBUTyA9ICEhKCB2ICYmIGNyeXB0byAmJiB0eXBlb2YgY3J5cHRvID09ICdvYmplY3QnICk7XG4gICAgICAgICAgICAgICAgICAgIGlmICggdiAmJiAhQ1JZUFRPICYmIEVSUk9SUyApIHJhaXNlKCAyLCAnY3J5cHRvIHVuYXZhaWxhYmxlJywgY3J5cHRvICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChFUlJPUlMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFpc2UoIDIsIHAgKyBub3RCb29sLCB2ICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcltwXSA9IENSWVBUTztcblxuICAgICAgICAgICAgLy8gTU9EVUxPX01PREUge251bWJlcn0gSW50ZWdlciwgMCB0byA5IGluY2x1c2l2ZS5cbiAgICAgICAgICAgIC8vICdjb25maWcoKSBNT0RVTE9fTU9ERSBub3QgYW4gaW50ZWdlcjoge3Z9J1xuICAgICAgICAgICAgLy8gJ2NvbmZpZygpIE1PRFVMT19NT0RFIG91dCBvZiByYW5nZToge3Z9J1xuICAgICAgICAgICAgaWYgKCBoYXMoIHAgPSAnTU9EVUxPX01PREUnICkgJiYgaXNWYWxpZEludCggdiwgMCwgOSwgMiwgcCApICkge1xuICAgICAgICAgICAgICAgIE1PRFVMT19NT0RFID0gdiB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByW3BdID0gTU9EVUxPX01PREU7XG5cbiAgICAgICAgICAgIC8vIFBPV19QUkVDSVNJT04ge251bWJlcn0gSW50ZWdlciwgMCB0byBNQVggaW5jbHVzaXZlLlxuICAgICAgICAgICAgLy8gJ2NvbmZpZygpIFBPV19QUkVDSVNJT04gbm90IGFuIGludGVnZXI6IHt2fSdcbiAgICAgICAgICAgIC8vICdjb25maWcoKSBQT1dfUFJFQ0lTSU9OIG91dCBvZiByYW5nZToge3Z9J1xuICAgICAgICAgICAgaWYgKCBoYXMoIHAgPSAnUE9XX1BSRUNJU0lPTicgKSAmJiBpc1ZhbGlkSW50KCB2LCAwLCBNQVgsIDIsIHAgKSApIHtcbiAgICAgICAgICAgICAgICBQT1dfUFJFQ0lTSU9OID0gdiB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByW3BdID0gUE9XX1BSRUNJU0lPTjtcblxuICAgICAgICAgICAgLy8gRk9STUFUIHtvYmplY3R9XG4gICAgICAgICAgICAvLyAnY29uZmlnKCkgRk9STUFUIG5vdCBhbiBvYmplY3Q6IHt2fSdcbiAgICAgICAgICAgIGlmICggaGFzKCBwID0gJ0ZPUk1BVCcgKSApIHtcblxuICAgICAgICAgICAgICAgIGlmICggdHlwZW9mIHYgPT0gJ29iamVjdCcgKSB7XG4gICAgICAgICAgICAgICAgICAgIEZPUk1BVCA9IHY7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChFUlJPUlMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFpc2UoIDIsIHAgKyAnIG5vdCBhbiBvYmplY3QnLCB2ICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcltwXSA9IEZPUk1BVDtcblxuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSBtYXhpbXVtIG9mIHRoZSBhcmd1bWVudHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIGFyZ3VtZW50cyB7bnVtYmVyfHN0cmluZ3xCaWdOdW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBCaWdOdW1iZXIubWF4ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbWF4T3JNaW4oIGFyZ3VtZW50cywgUC5sdCApOyB9O1xuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgbWluaW11bSBvZiB0aGUgYXJndW1lbnRzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBhcmd1bWVudHMge251bWJlcnxzdHJpbmd8QmlnTnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgQmlnTnVtYmVyLm1pbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1heE9yTWluKCBhcmd1bWVudHMsIFAuZ3QgKTsgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2l0aCBhIHJhbmRvbSB2YWx1ZSBlcXVhbCB0byBvciBncmVhdGVyIHRoYW4gMCBhbmQgbGVzcyB0aGFuIDEsXG4gICAgICAgICAqIGFuZCB3aXRoIGRwLCBvciBERUNJTUFMX1BMQUNFUyBpZiBkcCBpcyBvbWl0dGVkLCBkZWNpbWFsIHBsYWNlcyAob3IgbGVzcyBpZiB0cmFpbGluZ1xuICAgICAgICAgKiB6ZXJvcyBhcmUgcHJvZHVjZWQpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBbZHBdIHtudW1iZXJ9IERlY2ltYWwgcGxhY2VzLiBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXG4gICAgICAgICAqXG4gICAgICAgICAqICdyYW5kb20oKSBkZWNpbWFsIHBsYWNlcyBub3QgYW4gaW50ZWdlcjoge2RwfSdcbiAgICAgICAgICogJ3JhbmRvbSgpIGRlY2ltYWwgcGxhY2VzIG91dCBvZiByYW5nZToge2RwfSdcbiAgICAgICAgICogJ3JhbmRvbSgpIGNyeXB0byB1bmF2YWlsYWJsZToge2NyeXB0b30nXG4gICAgICAgICAqL1xuICAgICAgICBCaWdOdW1iZXIucmFuZG9tID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwb3cyXzUzID0gMHgyMDAwMDAwMDAwMDAwMDtcblxuICAgICAgICAgICAgLy8gUmV0dXJuIGEgNTMgYml0IGludGVnZXIgbiwgd2hlcmUgMCA8PSBuIDwgOTAwNzE5OTI1NDc0MDk5Mi5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIE1hdGgucmFuZG9tKCkgcHJvZHVjZXMgbW9yZSB0aGFuIDMyIGJpdHMgb2YgcmFuZG9tbmVzcy5cbiAgICAgICAgICAgIC8vIElmIGl0IGRvZXMsIGFzc3VtZSBhdCBsZWFzdCA1MyBiaXRzIGFyZSBwcm9kdWNlZCwgb3RoZXJ3aXNlIGFzc3VtZSBhdCBsZWFzdCAzMCBiaXRzLlxuICAgICAgICAgICAgLy8gMHg0MDAwMDAwMCBpcyAyXjMwLCAweDgwMDAwMCBpcyAyXjIzLCAweDFmZmZmZiBpcyAyXjIxIC0gMS5cbiAgICAgICAgICAgIHZhciByYW5kb201M2JpdEludCA9IChNYXRoLnJhbmRvbSgpICogcG93Ml81MykgJiAweDFmZmZmZlxuICAgICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1hdGhmbG9vciggTWF0aC5yYW5kb20oKSAqIHBvdzJfNTMgKTsgfVxuICAgICAgICAgICAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICgoTWF0aC5yYW5kb20oKSAqIDB4NDAwMDAwMDAgfCAwKSAqIDB4ODAwMDAwKSArXG4gICAgICAgICAgICAgICAgICAoTWF0aC5yYW5kb20oKSAqIDB4ODAwMDAwIHwgMCk7IH07XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZHApIHtcbiAgICAgICAgICAgICAgICB2YXIgYSwgYiwgZSwgaywgdixcbiAgICAgICAgICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGMgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgcmFuZCA9IG5ldyBCaWdOdW1iZXIoT05FKTtcblxuICAgICAgICAgICAgICAgIGRwID0gZHAgPT0gbnVsbCB8fCAhaXNWYWxpZEludCggZHAsIDAsIE1BWCwgMTQgKSA/IERFQ0lNQUxfUExBQ0VTIDogZHAgfCAwO1xuICAgICAgICAgICAgICAgIGsgPSBtYXRoY2VpbCggZHAgLyBMT0dfQkFTRSApO1xuXG4gICAgICAgICAgICAgICAgaWYgKENSWVBUTykge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEJyb3dzZXJzIHN1cHBvcnRpbmcgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjcnlwdG8gJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoIG5ldyBVaW50MzJBcnJheSggayAqPSAyICkgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggOyBpIDwgazsgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA1MyBiaXRzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICgoTWF0aC5wb3coMiwgMzIpIC0gMSkgKiBNYXRoLnBvdygyLCAyMSkpLnRvU3RyaW5nKDIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMTExMTEgMTExMTExMTEgMTExMTExMTEgMTExMTExMTEgMTExMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAoKE1hdGgucG93KDIsIDMyKSAtIDEpID4+PiAxMSkudG9TdHJpbmcoMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMTExMSAxMTExMTExMSAxMTExMTExMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDB4MjAwMDAgaXMgMl4yMS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gYVtpXSAqIDB4MjAwMDAgKyAoYVtpICsgMV0gPj4+IDExKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlamVjdGlvbiBzYW1wbGluZzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAwIDw9IHYgPCA5MDA3MTk5MjU0NzQwOTkyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUHJvYmFiaWxpdHkgdGhhdCB2ID49IDllMTUsIGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gNzE5OTI1NDc0MDk5MiAvIDkwMDcxOTkyNTQ3NDA5OTIgfj0gMC4wMDA4LCBpLmUuIDEgaW4gMTI1MVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdiA+PSA5ZTE1ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyggbmV3IFVpbnQzMkFycmF5KDIpICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbaV0gPSBiWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhW2kgKyAxXSA9IGJbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAwIDw9IHYgPD0gODk5OTk5OTk5OTk5OTk5OVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAwIDw9ICh2ICUgMWUxNCkgPD0gOTk5OTk5OTk5OTk5OTlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5wdXNoKCB2ICUgMWUxNCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGsgLyAyO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vZGUuanMgc3VwcG9ydGluZyBjcnlwdG8ucmFuZG9tQnl0ZXMuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGNyeXB0byAmJiBjcnlwdG8ucmFuZG9tQnl0ZXMgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1ZmZlclxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGNyeXB0by5yYW5kb21CeXRlcyggayAqPSA3ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIDsgaSA8IGs7ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMHgxMDAwMDAwMDAwMDAwIGlzIDJeNDgsIDB4MTAwMDAwMDAwMDAgaXMgMl40MFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDB4MTAwMDAwMDAwIGlzIDJeMzIsIDB4MTAwMDAwMCBpcyAyXjI0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMTExMTEgMTExMTExMTEgMTExMTExMTEgMTExMTExMTEgMTExMTExMTEgMTExMTExMTEgMTExMTExMTFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAwIDw9IHYgPCA5MDA3MTk5MjU0NzQwOTkyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9ICggKCBhW2ldICYgMzEgKSAqIDB4MTAwMDAwMDAwMDAwMCApICsgKCBhW2kgKyAxXSAqIDB4MTAwMDAwMDAwMDAgKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCBhW2kgKyAyXSAqIDB4MTAwMDAwMDAwICkgKyAoIGFbaSArIDNdICogMHgxMDAwMDAwICkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICggYVtpICsgNF0gPDwgMTYgKSArICggYVtpICsgNV0gPDwgOCApICsgYVtpICsgNl07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHYgPj0gOWUxNSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3J5cHRvLnJhbmRvbUJ5dGVzKDcpLmNvcHkoIGEsIGkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgPD0gKHYgJSAxZTE0KSA8PSA5OTk5OTk5OTk5OTk5OVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnB1c2goIHYgJSAxZTE0ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gNztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gayAvIDc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoRVJST1JTKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYWlzZSggMTQsICdjcnlwdG8gdW5hdmFpbGFibGUnLCBjcnlwdG8gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFVzZSBNYXRoLnJhbmRvbTogQ1JZUFRPIGlzIGZhbHNlIG9yIGNyeXB0byBpcyB1bmF2YWlsYWJsZSBhbmQgRVJST1JTIGlzIGZhbHNlLlxuICAgICAgICAgICAgICAgIGlmICghaSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIDsgaSA8IGs7ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdiA9IHJhbmRvbTUzYml0SW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHYgPCA5ZTE1ICkgY1tpKytdID0gdiAlIDFlMTQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBrID0gY1stLWldO1xuICAgICAgICAgICAgICAgIGRwICU9IExPR19CQVNFO1xuXG4gICAgICAgICAgICAgICAgLy8gQ29udmVydCB0cmFpbGluZyBkaWdpdHMgdG8gemVyb3MgYWNjb3JkaW5nIHRvIGRwLlxuICAgICAgICAgICAgICAgIGlmICggayAmJiBkcCApIHtcbiAgICAgICAgICAgICAgICAgICAgdiA9IFBPV1NfVEVOW0xPR19CQVNFIC0gZHBdO1xuICAgICAgICAgICAgICAgICAgICBjW2ldID0gbWF0aGZsb29yKCBrIC8gdiApICogdjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgZWxlbWVudHMgd2hpY2ggYXJlIHplcm8uXG4gICAgICAgICAgICAgICAgZm9yICggOyBjW2ldID09PSAwOyBjLnBvcCgpLCBpLS0gKTtcblxuICAgICAgICAgICAgICAgIC8vIFplcm8/XG4gICAgICAgICAgICAgICAgaWYgKCBpIDwgMCApIHtcbiAgICAgICAgICAgICAgICAgICAgYyA9IFsgZSA9IDAgXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIGVsZW1lbnRzIHdoaWNoIGFyZSB6ZXJvIGFuZCBhZGp1c3QgZXhwb25lbnQgYWNjb3JkaW5nbHkuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIGUgPSAtMSA7IGNbMF0gPT09IDA7IGMuc2hpZnQoKSwgZSAtPSBMT0dfQkFTRSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ291bnQgdGhlIGRpZ2l0cyBvZiB0aGUgZmlyc3QgZWxlbWVudCBvZiBjIHRvIGRldGVybWluZSBsZWFkaW5nIHplcm9zLCBhbmQuLi5cbiAgICAgICAgICAgICAgICAgICAgZm9yICggaSA9IDEsIHYgPSBjWzBdOyB2ID49IDEwOyB2IC89IDEwLCBpKyspO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkanVzdCB0aGUgZXhwb25lbnQgYWNjb3JkaW5nbHkuXG4gICAgICAgICAgICAgICAgICAgIGlmICggaSA8IExPR19CQVNFICkgZSAtPSBMT0dfQkFTRSAtIGk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmFuZC5lID0gZTtcbiAgICAgICAgICAgICAgICByYW5kLmMgPSBjO1xuICAgICAgICAgICAgICAgIHJldHVybiByYW5kO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkoKTtcblxuXG4gICAgICAgIC8vIFBSSVZBVEUgRlVOQ1RJT05TXG5cblxuICAgICAgICAvLyBDb252ZXJ0IGEgbnVtZXJpYyBzdHJpbmcgb2YgYmFzZUluIHRvIGEgbnVtZXJpYyBzdHJpbmcgb2YgYmFzZU91dC5cbiAgICAgICAgZnVuY3Rpb24gY29udmVydEJhc2UoIHN0ciwgYmFzZU91dCwgYmFzZUluLCBzaWduICkge1xuICAgICAgICAgICAgdmFyIGQsIGUsIGssIHIsIHgsIHhjLCB5LFxuICAgICAgICAgICAgICAgIGkgPSBzdHIuaW5kZXhPZiggJy4nICksXG4gICAgICAgICAgICAgICAgZHAgPSBERUNJTUFMX1BMQUNFUyxcbiAgICAgICAgICAgICAgICBybSA9IFJPVU5ESU5HX01PREU7XG5cbiAgICAgICAgICAgIGlmICggYmFzZUluIDwgMzcgKSBzdHIgPSBzdHIudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICAgICAgLy8gTm9uLWludGVnZXIuXG4gICAgICAgICAgICBpZiAoIGkgPj0gMCApIHtcbiAgICAgICAgICAgICAgICBrID0gUE9XX1BSRUNJU0lPTjtcblxuICAgICAgICAgICAgICAgIC8vIFVubGltaXRlZCBwcmVjaXNpb24uXG4gICAgICAgICAgICAgICAgUE9XX1BSRUNJU0lPTiA9IDA7XG4gICAgICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoICcuJywgJycgKTtcbiAgICAgICAgICAgICAgICB5ID0gbmV3IEJpZ051bWJlcihiYXNlSW4pO1xuICAgICAgICAgICAgICAgIHggPSB5LnBvdyggc3RyLmxlbmd0aCAtIGkgKTtcbiAgICAgICAgICAgICAgICBQT1dfUFJFQ0lTSU9OID0gaztcblxuICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgc3RyIGFzIGlmIGFuIGludGVnZXIsIHRoZW4gcmVzdG9yZSB0aGUgZnJhY3Rpb24gcGFydCBieSBkaXZpZGluZyB0aGVcbiAgICAgICAgICAgICAgICAvLyByZXN1bHQgYnkgaXRzIGJhc2UgcmFpc2VkIHRvIGEgcG93ZXIuXG4gICAgICAgICAgICAgICAgeS5jID0gdG9CYXNlT3V0KCB0b0ZpeGVkUG9pbnQoIGNvZWZmVG9TdHJpbmcoIHguYyApLCB4LmUgKSwgMTAsIGJhc2VPdXQgKTtcbiAgICAgICAgICAgICAgICB5LmUgPSB5LmMubGVuZ3RoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSBudW1iZXIgYXMgaW50ZWdlci5cbiAgICAgICAgICAgIHhjID0gdG9CYXNlT3V0KCBzdHIsIGJhc2VJbiwgYmFzZU91dCApO1xuICAgICAgICAgICAgZSA9IGsgPSB4Yy5sZW5ndGg7XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyB6ZXJvcy5cbiAgICAgICAgICAgIGZvciAoIDsgeGNbLS1rXSA9PSAwOyB4Yy5wb3AoKSApO1xuICAgICAgICAgICAgaWYgKCAheGNbMF0gKSByZXR1cm4gJzAnO1xuXG4gICAgICAgICAgICBpZiAoIGkgPCAwICkge1xuICAgICAgICAgICAgICAgIC0tZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeC5jID0geGM7XG4gICAgICAgICAgICAgICAgeC5lID0gZTtcblxuICAgICAgICAgICAgICAgIC8vIHNpZ24gaXMgbmVlZGVkIGZvciBjb3JyZWN0IHJvdW5kaW5nLlxuICAgICAgICAgICAgICAgIHgucyA9IHNpZ247XG4gICAgICAgICAgICAgICAgeCA9IGRpdiggeCwgeSwgZHAsIHJtLCBiYXNlT3V0ICk7XG4gICAgICAgICAgICAgICAgeGMgPSB4LmM7XG4gICAgICAgICAgICAgICAgciA9IHgucjtcbiAgICAgICAgICAgICAgICBlID0geC5lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkID0gZSArIGRwICsgMTtcblxuICAgICAgICAgICAgLy8gVGhlIHJvdW5kaW5nIGRpZ2l0LCBpLmUuIHRoZSBkaWdpdCB0byB0aGUgcmlnaHQgb2YgdGhlIGRpZ2l0IHRoYXQgbWF5IGJlIHJvdW5kZWQgdXAuXG4gICAgICAgICAgICBpID0geGNbZF07XG4gICAgICAgICAgICBrID0gYmFzZU91dCAvIDI7XG4gICAgICAgICAgICByID0gciB8fCBkIDwgMCB8fCB4Y1tkICsgMV0gIT0gbnVsbDtcblxuICAgICAgICAgICAgciA9IHJtIDwgNCA/ICggaSAhPSBudWxsIHx8IHIgKSAmJiAoIHJtID09IDAgfHwgcm0gPT0gKCB4LnMgPCAwID8gMyA6IDIgKSApXG4gICAgICAgICAgICAgICAgICAgICAgIDogaSA+IGsgfHwgaSA9PSBrICYmKCBybSA9PSA0IHx8IHIgfHwgcm0gPT0gNiAmJiB4Y1tkIC0gMV0gJiAxIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgcm0gPT0gKCB4LnMgPCAwID8gOCA6IDcgKSApO1xuXG4gICAgICAgICAgICBpZiAoIGQgPCAxIHx8ICF4Y1swXSApIHtcblxuICAgICAgICAgICAgICAgIC8vIDFeLWRwIG9yIDAuXG4gICAgICAgICAgICAgICAgc3RyID0gciA/IHRvRml4ZWRQb2ludCggJzEnLCAtZHAgKSA6ICcwJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeGMubGVuZ3RoID0gZDtcblxuICAgICAgICAgICAgICAgIGlmIChyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUm91bmRpbmcgdXAgbWF5IG1lYW4gdGhlIHByZXZpb3VzIGRpZ2l0IGhhcyB0byBiZSByb3VuZGVkIHVwIGFuZCBzbyBvbi5cbiAgICAgICAgICAgICAgICAgICAgZm9yICggLS1iYXNlT3V0OyArK3hjWy0tZF0gPiBiYXNlT3V0OyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhjW2RdID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhZCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGMudW5zaGlmdCgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIERldGVybWluZSB0cmFpbGluZyB6ZXJvcy5cbiAgICAgICAgICAgICAgICBmb3IgKCBrID0geGMubGVuZ3RoOyAheGNbLS1rXTsgKTtcblxuICAgICAgICAgICAgICAgIC8vIEUuZy4gWzQsIDExLCAxNV0gYmVjb21lcyA0YmYuXG4gICAgICAgICAgICAgICAgZm9yICggaSA9IDAsIHN0ciA9ICcnOyBpIDw9IGs7IHN0ciArPSBBTFBIQUJFVC5jaGFyQXQoIHhjW2krK10gKSApO1xuICAgICAgICAgICAgICAgIHN0ciA9IHRvRml4ZWRQb2ludCggc3RyLCBlICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRoZSBjYWxsZXIgd2lsbCBhZGQgdGhlIHNpZ24uXG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyBQZXJmb3JtIGRpdmlzaW9uIGluIHRoZSBzcGVjaWZpZWQgYmFzZS4gQ2FsbGVkIGJ5IGRpdiBhbmQgY29udmVydEJhc2UuXG4gICAgICAgIGRpdiA9IChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIC8vIEFzc3VtZSBub24temVybyB4IGFuZCBrLlxuICAgICAgICAgICAgZnVuY3Rpb24gbXVsdGlwbHkoIHgsIGssIGJhc2UgKSB7XG4gICAgICAgICAgICAgICAgdmFyIG0sIHRlbXAsIHhsbywgeGhpLFxuICAgICAgICAgICAgICAgICAgICBjYXJyeSA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGkgPSB4Lmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAga2xvID0gayAlIFNRUlRfQkFTRSxcbiAgICAgICAgICAgICAgICAgICAga2hpID0gayAvIFNRUlRfQkFTRSB8IDA7XG5cbiAgICAgICAgICAgICAgICBmb3IgKCB4ID0geC5zbGljZSgpOyBpLS07ICkge1xuICAgICAgICAgICAgICAgICAgICB4bG8gPSB4W2ldICUgU1FSVF9CQVNFO1xuICAgICAgICAgICAgICAgICAgICB4aGkgPSB4W2ldIC8gU1FSVF9CQVNFIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgbSA9IGtoaSAqIHhsbyArIHhoaSAqIGtsbztcbiAgICAgICAgICAgICAgICAgICAgdGVtcCA9IGtsbyAqIHhsbyArICggKCBtICUgU1FSVF9CQVNFICkgKiBTUVJUX0JBU0UgKSArIGNhcnJ5O1xuICAgICAgICAgICAgICAgICAgICBjYXJyeSA9ICggdGVtcCAvIGJhc2UgfCAwICkgKyAoIG0gLyBTUVJUX0JBU0UgfCAwICkgKyBraGkgKiB4aGk7XG4gICAgICAgICAgICAgICAgICAgIHhbaV0gPSB0ZW1wICUgYmFzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FycnkpIHgudW5zaGlmdChjYXJyeSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGFyZSggYSwgYiwgYUwsIGJMICkge1xuICAgICAgICAgICAgICAgIHZhciBpLCBjbXA7XG5cbiAgICAgICAgICAgICAgICBpZiAoIGFMICE9IGJMICkge1xuICAgICAgICAgICAgICAgICAgICBjbXAgPSBhTCA+IGJMID8gMSA6IC0xO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICggaSA9IGNtcCA9IDA7IGkgPCBhTDsgaSsrICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGFbaV0gIT0gYltpXSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbXAgPSBhW2ldID4gYltpXSA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY21wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBzdWJ0cmFjdCggYSwgYiwgYUwsIGJhc2UgKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICAgICAgICAgICAgLy8gU3VidHJhY3QgYiBmcm9tIGEuXG4gICAgICAgICAgICAgICAgZm9yICggOyBhTC0tOyApIHtcbiAgICAgICAgICAgICAgICAgICAgYVthTF0gLT0gaTtcbiAgICAgICAgICAgICAgICAgICAgaSA9IGFbYUxdIDwgYlthTF0gPyAxIDogMDtcbiAgICAgICAgICAgICAgICAgICAgYVthTF0gPSBpICogYmFzZSArIGFbYUxdIC0gYlthTF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGxlYWRpbmcgemVyb3MuXG4gICAgICAgICAgICAgICAgZm9yICggOyAhYVswXSAmJiBhLmxlbmd0aCA+IDE7IGEuc2hpZnQoKSApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB4OiBkaXZpZGVuZCwgeTogZGl2aXNvci5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoIHgsIHksIGRwLCBybSwgYmFzZSApIHtcbiAgICAgICAgICAgICAgICB2YXIgY21wLCBlLCBpLCBtb3JlLCBuLCBwcm9kLCBwcm9kTCwgcSwgcWMsIHJlbSwgcmVtTCwgcmVtMCwgeGksIHhMLCB5YzAsXG4gICAgICAgICAgICAgICAgICAgIHlMLCB5eixcbiAgICAgICAgICAgICAgICAgICAgcyA9IHgucyA9PSB5LnMgPyAxIDogLTEsXG4gICAgICAgICAgICAgICAgICAgIHhjID0geC5jLFxuICAgICAgICAgICAgICAgICAgICB5YyA9IHkuYztcblxuICAgICAgICAgICAgICAgIC8vIEVpdGhlciBOYU4sIEluZmluaXR5IG9yIDA/XG4gICAgICAgICAgICAgICAgaWYgKCAheGMgfHwgIXhjWzBdIHx8ICF5YyB8fCAheWNbMF0gKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIoXG5cbiAgICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gTmFOIGlmIGVpdGhlciBOYU4sIG9yIGJvdGggSW5maW5pdHkgb3IgMC5cbiAgICAgICAgICAgICAgICAgICAgICAheC5zIHx8ICF5LnMgfHwgKCB4YyA/IHljICYmIHhjWzBdID09IHljWzBdIDogIXljICkgPyBOYU4gOlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gwrEwIGlmIHggaXMgwrEwIG9yIHkgaXMgwrFJbmZpbml0eSwgb3IgcmV0dXJuIMKxSW5maW5pdHkgYXMgeSBpcyDCsTAuXG4gICAgICAgICAgICAgICAgICAgICAgICB4YyAmJiB4Y1swXSA9PSAwIHx8ICF5YyA/IHMgKiAwIDogcyAvIDBcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBxID0gbmV3IEJpZ051bWJlcihzKTtcbiAgICAgICAgICAgICAgICBxYyA9IHEuYyA9IFtdO1xuICAgICAgICAgICAgICAgIGUgPSB4LmUgLSB5LmU7XG4gICAgICAgICAgICAgICAgcyA9IGRwICsgZSArIDE7XG5cbiAgICAgICAgICAgICAgICBpZiAoICFiYXNlICkge1xuICAgICAgICAgICAgICAgICAgICBiYXNlID0gQkFTRTtcbiAgICAgICAgICAgICAgICAgICAgZSA9IGJpdEZsb29yKCB4LmUgLyBMT0dfQkFTRSApIC0gYml0Rmxvb3IoIHkuZSAvIExPR19CQVNFICk7XG4gICAgICAgICAgICAgICAgICAgIHMgPSBzIC8gTE9HX0JBU0UgfCAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJlc3VsdCBleHBvbmVudCBtYXkgYmUgb25lIGxlc3MgdGhlbiB0aGUgY3VycmVudCB2YWx1ZSBvZiBlLlxuICAgICAgICAgICAgICAgIC8vIFRoZSBjb2VmZmljaWVudHMgb2YgdGhlIEJpZ051bWJlcnMgZnJvbSBjb252ZXJ0QmFzZSBtYXkgaGF2ZSB0cmFpbGluZyB6ZXJvcy5cbiAgICAgICAgICAgICAgICBmb3IgKCBpID0gMDsgeWNbaV0gPT0gKCB4Y1tpXSB8fCAwICk7IGkrKyApO1xuICAgICAgICAgICAgICAgIGlmICggeWNbaV0gPiAoIHhjW2ldIHx8IDAgKSApIGUtLTtcblxuICAgICAgICAgICAgICAgIGlmICggcyA8IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHFjLnB1c2goMSk7XG4gICAgICAgICAgICAgICAgICAgIG1vcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHhMID0geGMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB5TCA9IHljLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHMgKz0gMjtcblxuICAgICAgICAgICAgICAgICAgICAvLyBOb3JtYWxpc2UgeGMgYW5kIHljIHNvIGhpZ2hlc3Qgb3JkZXIgZGlnaXQgb2YgeWMgaXMgPj0gYmFzZSAvIDIuXG5cbiAgICAgICAgICAgICAgICAgICAgbiA9IG1hdGhmbG9vciggYmFzZSAvICggeWNbMF0gKyAxICkgKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBOb3QgbmVjZXNzYXJ5LCBidXQgdG8gaGFuZGxlIG9kZCBiYXNlcyB3aGVyZSB5Y1swXSA9PSAoIGJhc2UgLyAyICkgLSAxLlxuICAgICAgICAgICAgICAgICAgICAvLyBpZiAoIG4gPiAxIHx8IG4rKyA9PSAxICYmIHljWzBdIDwgYmFzZSAvIDIgKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggbiA+IDEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5YyA9IG11bHRpcGx5KCB5YywgbiwgYmFzZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgeGMgPSBtdWx0aXBseSggeGMsIG4sIGJhc2UgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHlMID0geWMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgeEwgPSB4Yy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB4aSA9IHlMO1xuICAgICAgICAgICAgICAgICAgICByZW0gPSB4Yy5zbGljZSggMCwgeUwgKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtTCA9IHJlbS5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHplcm9zIHRvIG1ha2UgcmVtYWluZGVyIGFzIGxvbmcgYXMgZGl2aXNvci5cbiAgICAgICAgICAgICAgICAgICAgZm9yICggOyByZW1MIDwgeUw7IHJlbVtyZW1MKytdID0gMCApO1xuICAgICAgICAgICAgICAgICAgICB5eiA9IHljLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHl6LnVuc2hpZnQoMCk7XG4gICAgICAgICAgICAgICAgICAgIHljMCA9IHljWzBdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHljWzFdID49IGJhc2UgLyAyICkgeWMwKys7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdCBuZWNlc3NhcnksIGJ1dCB0byBwcmV2ZW50IHRyaWFsIGRpZ2l0IG4gPiBiYXNlLCB3aGVuIHVzaW5nIGJhc2UgMy5cbiAgICAgICAgICAgICAgICAgICAgLy8gZWxzZSBpZiAoIGJhc2UgPT0gMyAmJiB5YzAgPT0gMSApIHljMCA9IDEgKyAxZS0xNTtcblxuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tcGFyZSBkaXZpc29yIGFuZCByZW1haW5kZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICBjbXAgPSBjb21wYXJlKCB5YywgcmVtLCB5TCwgcmVtTCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBkaXZpc29yIDwgcmVtYWluZGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjbXAgPCAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRyaWFsIGRpZ2l0LCBuLlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtMCA9IHJlbVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHlMICE9IHJlbUwgKSByZW0wID0gcmVtMCAqIGJhc2UgKyAoIHJlbVsxXSB8fCAwICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuIGlzIGhvdyBtYW55IHRpbWVzIHRoZSBkaXZpc29yIGdvZXMgaW50byB0aGUgY3VycmVudCByZW1haW5kZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IG1hdGhmbG9vciggcmVtMCAvIHljMCApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gIEFsZ29yaXRobTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgMS4gcHJvZHVjdCA9IGRpdmlzb3IgKiB0cmlhbCBkaWdpdCAobilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgMi4gaWYgcHJvZHVjdCA+IHJlbWFpbmRlcjogcHJvZHVjdCAtPSBkaXZpc29yLCBuLS1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgMy4gcmVtYWluZGVyIC09IHByb2R1Y3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgNC4gaWYgcHJvZHVjdCB3YXMgPCByZW1haW5kZXIgYXQgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICA1LiBjb21wYXJlIG5ldyByZW1haW5kZXIgYW5kIGRpdmlzb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICA2LiBJZiByZW1haW5kZXIgPiBkaXZpc29yOiByZW1haW5kZXIgLT0gZGl2aXNvciwgbisrXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG4gPiAxICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG4gbWF5IGJlID4gYmFzZSBvbmx5IHdoZW4gYmFzZSBpcyAzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA+PSBiYXNlKSBuID0gYmFzZSAtIDE7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJvZHVjdCA9IGRpdmlzb3IgKiB0cmlhbCBkaWdpdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZCA9IG11bHRpcGx5KCB5YywgbiwgYmFzZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kTCA9IHByb2QubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1MID0gcmVtLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21wYXJlIHByb2R1Y3QgYW5kIHJlbWFpbmRlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgcHJvZHVjdCA+IHJlbWFpbmRlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJpYWwgZGlnaXQgbiB0b28gaGlnaC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbiBpcyAxIHRvbyBoaWdoIGFib3V0IDUlIG9mIHRoZSB0aW1lLCBhbmQgaXMgbm90IGtub3duIHRvIGhhdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXZlciBiZWVuIG1vcmUgdGhhbiAxIHRvbyBoaWdoLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIGNvbXBhcmUoIHByb2QsIHJlbSwgcHJvZEwsIHJlbUwgKSA9PSAxICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi0tO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCBkaXZpc29yIGZyb20gcHJvZHVjdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRyYWN0KCBwcm9kLCB5TCA8IHByb2RMID8geXogOiB5YywgcHJvZEwsIGJhc2UgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2RMID0gcHJvZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbXAgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuIGlzIDAgb3IgMSwgY21wIGlzIC0xLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBuIGlzIDAsIHRoZXJlIGlzIG5vIG5lZWQgdG8gY29tcGFyZSB5YyBhbmQgcmVtIGFnYWluIGJlbG93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyBjaGFuZ2UgY21wIHRvIDEgdG8gYXZvaWQgaXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG4gaXMgMSwgbGVhdmUgY21wIGFzIC0xLCBzbyB5YyBhbmQgcmVtIGFyZSBjb21wYXJlZCBhZ2Fpbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBuID09IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpdmlzb3IgPCByZW1haW5kZXIsIHNvIG4gbXVzdCBiZSBhdCBsZWFzdCAxLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21wID0gbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcm9kdWN0ID0gZGl2aXNvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kID0geWMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZEwgPSBwcm9kLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHByb2RMIDwgcmVtTCApIHByb2QudW5zaGlmdCgwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IHByb2R1Y3QgZnJvbSByZW1haW5kZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VidHJhY3QoIHJlbSwgcHJvZCwgcmVtTCwgYmFzZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbUwgPSByZW0ubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHByb2R1Y3Qgd2FzIDwgcmVtYWluZGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY21wID09IC0xICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbXBhcmUgZGl2aXNvciBhbmQgbmV3IHJlbWFpbmRlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgZGl2aXNvciA8IG5ldyByZW1haW5kZXIsIHN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyaWFsIGRpZ2l0IG4gdG9vIGxvdy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbiBpcyAxIHRvbyBsb3cgYWJvdXQgNSUgb2YgdGhlIHRpbWUsIGFuZCB2ZXJ5IHJhcmVseSAyIHRvbyBsb3cuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICggY29tcGFyZSggeWMsIHJlbSwgeUwsIHJlbUwgKSA8IDEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuKys7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnRyYWN0IGRpdmlzb3IgZnJvbSByZW1haW5kZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0cmFjdCggcmVtLCB5TCA8IHJlbUwgPyB5eiA6IHljLCByZW1MLCBiYXNlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1MID0gcmVtLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGNtcCA9PT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtID0gWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSAvLyBlbHNlIGNtcCA9PT0gMSBhbmQgbiB3aWxsIGJlIDBcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBuZXh0IGRpZ2l0LCBuLCB0byB0aGUgcmVzdWx0IGFycmF5LlxuICAgICAgICAgICAgICAgICAgICAgICAgcWNbaSsrXSA9IG47XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVtYWluZGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCByZW1bMF0gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtW3JlbUwrK10gPSB4Y1t4aV0gfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtID0gWyB4Y1t4aV0gXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1MID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoICggeGkrKyA8IHhMIHx8IHJlbVswXSAhPSBudWxsICkgJiYgcy0tICk7XG5cbiAgICAgICAgICAgICAgICAgICAgbW9yZSA9IHJlbVswXSAhPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIExlYWRpbmcgemVybz9cbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhcWNbMF0gKSBxYy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICggYmFzZSA9PSBCQVNFICkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRvIGNhbGN1bGF0ZSBxLmUsIGZpcnN0IGdldCB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBvZiBxY1swXS5cbiAgICAgICAgICAgICAgICAgICAgZm9yICggaSA9IDEsIHMgPSBxY1swXTsgcyA+PSAxMDsgcyAvPSAxMCwgaSsrICk7XG4gICAgICAgICAgICAgICAgICAgIHJvdW5kKCBxLCBkcCArICggcS5lID0gaSArIGUgKiBMT0dfQkFTRSAtIDEgKSArIDEsIHJtLCBtb3JlICk7XG5cbiAgICAgICAgICAgICAgICAvLyBDYWxsZXIgaXMgY29udmVydEJhc2UuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcS5lID0gZTtcbiAgICAgICAgICAgICAgICAgICAgcS5yID0gK21vcmU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHE7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSgpO1xuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgQmlnTnVtYmVyIG4gaW4gZml4ZWQtcG9pbnQgb3IgZXhwb25lbnRpYWxcbiAgICAgICAgICogbm90YXRpb24gcm91bmRlZCB0byB0aGUgc3BlY2lmaWVkIGRlY2ltYWwgcGxhY2VzIG9yIHNpZ25pZmljYW50IGRpZ2l0cy5cbiAgICAgICAgICpcbiAgICAgICAgICogbiBpcyBhIEJpZ051bWJlci5cbiAgICAgICAgICogaSBpcyB0aGUgaW5kZXggb2YgdGhlIGxhc3QgZGlnaXQgcmVxdWlyZWQgKGkuZS4gdGhlIGRpZ2l0IHRoYXQgbWF5IGJlIHJvdW5kZWQgdXApLlxuICAgICAgICAgKiBybSBpcyB0aGUgcm91bmRpbmcgbW9kZS5cbiAgICAgICAgICogY2FsbGVyIGlzIGNhbGxlciBpZDogdG9FeHBvbmVudGlhbCAxOSwgdG9GaXhlZCAyMCwgdG9Gb3JtYXQgMjEsIHRvUHJlY2lzaW9uIDI0LlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZm9ybWF0KCBuLCBpLCBybSwgY2FsbGVyICkge1xuICAgICAgICAgICAgdmFyIGMwLCBlLCBuZSwgbGVuLCBzdHI7XG5cbiAgICAgICAgICAgIHJtID0gcm0gIT0gbnVsbCAmJiBpc1ZhbGlkSW50KCBybSwgMCwgOCwgY2FsbGVyLCByb3VuZGluZ01vZGUgKVxuICAgICAgICAgICAgICA/IHJtIHwgMCA6IFJPVU5ESU5HX01PREU7XG5cbiAgICAgICAgICAgIGlmICggIW4uYyApIHJldHVybiBuLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBjMCA9IG4uY1swXTtcbiAgICAgICAgICAgIG5lID0gbi5lO1xuXG4gICAgICAgICAgICBpZiAoIGkgPT0gbnVsbCApIHtcbiAgICAgICAgICAgICAgICBzdHIgPSBjb2VmZlRvU3RyaW5nKCBuLmMgKTtcbiAgICAgICAgICAgICAgICBzdHIgPSBjYWxsZXIgPT0gMTkgfHwgY2FsbGVyID09IDI0ICYmIG5lIDw9IFRPX0VYUF9ORUdcbiAgICAgICAgICAgICAgICAgID8gdG9FeHBvbmVudGlhbCggc3RyLCBuZSApXG4gICAgICAgICAgICAgICAgICA6IHRvRml4ZWRQb2ludCggc3RyLCBuZSApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuID0gcm91bmQoIG5ldyBCaWdOdW1iZXIobiksIGksIHJtICk7XG5cbiAgICAgICAgICAgICAgICAvLyBuLmUgbWF5IGhhdmUgY2hhbmdlZCBpZiB0aGUgdmFsdWUgd2FzIHJvdW5kZWQgdXAuXG4gICAgICAgICAgICAgICAgZSA9IG4uZTtcblxuICAgICAgICAgICAgICAgIHN0ciA9IGNvZWZmVG9TdHJpbmcoIG4uYyApO1xuICAgICAgICAgICAgICAgIGxlbiA9IHN0ci5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAvLyB0b1ByZWNpc2lvbiByZXR1cm5zIGV4cG9uZW50aWFsIG5vdGF0aW9uIGlmIHRoZSBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgZGlnaXRzXG4gICAgICAgICAgICAgICAgLy8gc3BlY2lmaWVkIGlzIGxlc3MgdGhhbiB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBuZWNlc3NhcnkgdG8gcmVwcmVzZW50IHRoZSBpbnRlZ2VyXG4gICAgICAgICAgICAgICAgLy8gcGFydCBvZiB0aGUgdmFsdWUgaW4gZml4ZWQtcG9pbnQgbm90YXRpb24uXG5cbiAgICAgICAgICAgICAgICAvLyBFeHBvbmVudGlhbCBub3RhdGlvbi5cbiAgICAgICAgICAgICAgICBpZiAoIGNhbGxlciA9PSAxOSB8fCBjYWxsZXIgPT0gMjQgJiYgKCBpIDw9IGUgfHwgZSA8PSBUT19FWFBfTkVHICkgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQXBwZW5kIHplcm9zP1xuICAgICAgICAgICAgICAgICAgICBmb3IgKCA7IGxlbiA8IGk7IHN0ciArPSAnMCcsIGxlbisrICk7XG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHRvRXhwb25lbnRpYWwoIHN0ciwgZSApO1xuXG4gICAgICAgICAgICAgICAgLy8gRml4ZWQtcG9pbnQgbm90YXRpb24uXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaSAtPSBuZTtcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gdG9GaXhlZFBvaW50KCBzdHIsIGUgKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgemVyb3M/XG4gICAgICAgICAgICAgICAgICAgIGlmICggZSArIDEgPiBsZW4gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIC0taSA+IDAgKSBmb3IgKCBzdHIgKz0gJy4nOyBpLS07IHN0ciArPSAnMCcgKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gZSAtIGxlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggaSA+IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBlICsgMSA9PSBsZW4gKSBzdHIgKz0gJy4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIDsgaS0tOyBzdHIgKz0gJzAnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuLnMgPCAwICYmIGMwID8gJy0nICsgc3RyIDogc3RyO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyBIYW5kbGUgQmlnTnVtYmVyLm1heCBhbmQgQmlnTnVtYmVyLm1pbi5cbiAgICAgICAgZnVuY3Rpb24gbWF4T3JNaW4oIGFyZ3MsIG1ldGhvZCApIHtcbiAgICAgICAgICAgIHZhciBtLCBuLFxuICAgICAgICAgICAgICAgIGkgPSAwO1xuXG4gICAgICAgICAgICBpZiAoIGlzQXJyYXkoIGFyZ3NbMF0gKSApIGFyZ3MgPSBhcmdzWzBdO1xuICAgICAgICAgICAgbSA9IG5ldyBCaWdOdW1iZXIoIGFyZ3NbMF0gKTtcblxuICAgICAgICAgICAgZm9yICggOyArK2kgPCBhcmdzLmxlbmd0aDsgKSB7XG4gICAgICAgICAgICAgICAgbiA9IG5ldyBCaWdOdW1iZXIoIGFyZ3NbaV0gKTtcblxuICAgICAgICAgICAgICAgIC8vIElmIGFueSBudW1iZXIgaXMgTmFOLCByZXR1cm4gTmFOLlxuICAgICAgICAgICAgICAgIGlmICggIW4ucyApIHtcbiAgICAgICAgICAgICAgICAgICAgbSA9IG47XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG1ldGhvZC5jYWxsKCBtLCBuICkgKSB7XG4gICAgICAgICAgICAgICAgICAgIG0gPSBuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVybiB0cnVlIGlmIG4gaXMgYW4gaW50ZWdlciBpbiByYW5nZSwgb3RoZXJ3aXNlIHRocm93LlxuICAgICAgICAgKiBVc2UgZm9yIGFyZ3VtZW50IHZhbGlkYXRpb24gd2hlbiBFUlJPUlMgaXMgdHJ1ZS5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGludFZhbGlkYXRvcldpdGhFcnJvcnMoIG4sIG1pbiwgbWF4LCBjYWxsZXIsIG5hbWUgKSB7XG4gICAgICAgICAgICBpZiAoIG4gPCBtaW4gfHwgbiA+IG1heCB8fCBuICE9IHRydW5jYXRlKG4pICkge1xuICAgICAgICAgICAgICAgIHJhaXNlKCBjYWxsZXIsICggbmFtZSB8fCAnZGVjaW1hbCBwbGFjZXMnICkgK1xuICAgICAgICAgICAgICAgICAgKCBuIDwgbWluIHx8IG4gPiBtYXggPyAnIG91dCBvZiByYW5nZScgOiAnIG5vdCBhbiBpbnRlZ2VyJyApLCBuICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiBTdHJpcCB0cmFpbGluZyB6ZXJvcywgY2FsY3VsYXRlIGJhc2UgMTAgZXhwb25lbnQgYW5kIGNoZWNrIGFnYWluc3QgTUlOX0VYUCBhbmQgTUFYX0VYUC5cbiAgICAgICAgICogQ2FsbGVkIGJ5IG1pbnVzLCBwbHVzIGFuZCB0aW1lcy5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIG5vcm1hbGlzZSggbiwgYywgZSApIHtcbiAgICAgICAgICAgIHZhciBpID0gMSxcbiAgICAgICAgICAgICAgICBqID0gYy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgemVyb3MuXG4gICAgICAgICAgICBmb3IgKCA7ICFjWy0tal07IGMucG9wKCkgKTtcblxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBiYXNlIDEwIGV4cG9uZW50LiBGaXJzdCBnZXQgdGhlIG51bWJlciBvZiBkaWdpdHMgb2YgY1swXS5cbiAgICAgICAgICAgIGZvciAoIGogPSBjWzBdOyBqID49IDEwOyBqIC89IDEwLCBpKysgKTtcblxuICAgICAgICAgICAgLy8gT3ZlcmZsb3c/XG4gICAgICAgICAgICBpZiAoICggZSA9IGkgKyBlICogTE9HX0JBU0UgLSAxICkgPiBNQVhfRVhQICkge1xuXG4gICAgICAgICAgICAgICAgLy8gSW5maW5pdHkuXG4gICAgICAgICAgICAgICAgbi5jID0gbi5lID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gVW5kZXJmbG93P1xuICAgICAgICAgICAgfSBlbHNlIGlmICggZSA8IE1JTl9FWFAgKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBaZXJvLlxuICAgICAgICAgICAgICAgIG4uYyA9IFsgbi5lID0gMCBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuLmUgPSBlO1xuICAgICAgICAgICAgICAgIG4uYyA9IGM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyBIYW5kbGUgdmFsdWVzIHRoYXQgZmFpbCB0aGUgdmFsaWRpdHkgdGVzdCBpbiBCaWdOdW1iZXIuXG4gICAgICAgIHBhcnNlTnVtZXJpYyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYmFzZVByZWZpeCA9IC9eKC0/KTAoW3hib10pL2ksXG4gICAgICAgICAgICAgICAgZG90QWZ0ZXIgPSAvXihbXi5dKylcXC4kLyxcbiAgICAgICAgICAgICAgICBkb3RCZWZvcmUgPSAvXlxcLihbXi5dKykkLyxcbiAgICAgICAgICAgICAgICBpc0luZmluaXR5T3JOYU4gPSAvXi0/KEluZmluaXR5fE5hTikkLyxcbiAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlT3JQbHVzID0gL15cXHMqXFwrfF5cXHMrfFxccyskL2c7XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoIHgsIHN0ciwgbnVtLCBiICkge1xuICAgICAgICAgICAgICAgIHZhciBiYXNlLFxuICAgICAgICAgICAgICAgICAgICBzID0gbnVtID8gc3RyIDogc3RyLnJlcGxhY2UoIHdoaXRlc3BhY2VPclBsdXMsICcnICk7XG5cbiAgICAgICAgICAgICAgICAvLyBObyBleGNlcHRpb24gb24gwrFJbmZpbml0eSBvciBOYU4uXG4gICAgICAgICAgICAgICAgaWYgKCBpc0luZmluaXR5T3JOYU4udGVzdChzKSApIHtcbiAgICAgICAgICAgICAgICAgICAgeC5zID0gaXNOYU4ocykgPyBudWxsIDogcyA8IDAgPyAtMSA6IDE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhbnVtICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBiYXNlUHJlZml4ID0gL14oLT8pMChbeGJvXSkoPz1cXHdbXFx3Ll0qJCkvaVxuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHMucmVwbGFjZSggYmFzZVByZWZpeCwgZnVuY3Rpb24gKCBtLCBwMSwgcDIgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZSA9ICggcDIgPSBwMi50b0xvd2VyQ2FzZSgpICkgPT0gJ3gnID8gMTYgOiBwMiA9PSAnYicgPyAyIDogODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWIgfHwgYiA9PSBiYXNlID8gcDEgOiBtO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZSA9IGI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFLmcuICcxLicgdG8gJzEnLCAnLjEnIHRvICcwLjEnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHMucmVwbGFjZSggZG90QWZ0ZXIsICckMScgKS5yZXBsYWNlKCBkb3RCZWZvcmUsICcwLiQxJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHN0ciAhPSBzICkgcmV0dXJuIG5ldyBCaWdOdW1iZXIoIHMsIGJhc2UgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vICduZXcgQmlnTnVtYmVyKCkgbm90IGEgbnVtYmVyOiB7bn0nXG4gICAgICAgICAgICAgICAgICAgIC8vICduZXcgQmlnTnVtYmVyKCkgbm90IGEgYmFzZSB7Yn0gbnVtYmVyOiB7bn0nXG4gICAgICAgICAgICAgICAgICAgIGlmIChFUlJPUlMpIHJhaXNlKCBpZCwgJ25vdCBhJyArICggYiA/ICcgYmFzZSAnICsgYiA6ICcnICkgKyAnIG51bWJlcicsIHN0ciApO1xuICAgICAgICAgICAgICAgICAgICB4LnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHguYyA9IHguZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuXG5cbiAgICAgICAgLy8gVGhyb3cgYSBCaWdOdW1iZXIgRXJyb3IuXG4gICAgICAgIGZ1bmN0aW9uIHJhaXNlKCBjYWxsZXIsIG1zZywgdmFsICkge1xuICAgICAgICAgICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCBbXG4gICAgICAgICAgICAgICAgJ25ldyBCaWdOdW1iZXInLCAgICAgLy8gMFxuICAgICAgICAgICAgICAgICdjbXAnLCAgICAgICAgICAgICAgIC8vIDFcbiAgICAgICAgICAgICAgICAnY29uZmlnJywgICAgICAgICAgICAvLyAyXG4gICAgICAgICAgICAgICAgJ2RpdicsICAgICAgICAgICAgICAgLy8gM1xuICAgICAgICAgICAgICAgICdkaXZUb0ludCcsICAgICAgICAgIC8vIDRcbiAgICAgICAgICAgICAgICAnZXEnLCAgICAgICAgICAgICAgICAvLyA1XG4gICAgICAgICAgICAgICAgJ2d0JywgICAgICAgICAgICAgICAgLy8gNlxuICAgICAgICAgICAgICAgICdndGUnLCAgICAgICAgICAgICAgIC8vIDdcbiAgICAgICAgICAgICAgICAnbHQnLCAgICAgICAgICAgICAgICAvLyA4XG4gICAgICAgICAgICAgICAgJ2x0ZScsICAgICAgICAgICAgICAgLy8gOVxuICAgICAgICAgICAgICAgICdtaW51cycsICAgICAgICAgICAgIC8vIDEwXG4gICAgICAgICAgICAgICAgJ21vZCcsICAgICAgICAgICAgICAgLy8gMTFcbiAgICAgICAgICAgICAgICAncGx1cycsICAgICAgICAgICAgICAvLyAxMlxuICAgICAgICAgICAgICAgICdwcmVjaXNpb24nLCAgICAgICAgIC8vIDEzXG4gICAgICAgICAgICAgICAgJ3JhbmRvbScsICAgICAgICAgICAgLy8gMTRcbiAgICAgICAgICAgICAgICAncm91bmQnLCAgICAgICAgICAgICAvLyAxNVxuICAgICAgICAgICAgICAgICdzaGlmdCcsICAgICAgICAgICAgIC8vIDE2XG4gICAgICAgICAgICAgICAgJ3RpbWVzJywgICAgICAgICAgICAgLy8gMTdcbiAgICAgICAgICAgICAgICAndG9EaWdpdHMnLCAgICAgICAgICAvLyAxOFxuICAgICAgICAgICAgICAgICd0b0V4cG9uZW50aWFsJywgICAgIC8vIDE5XG4gICAgICAgICAgICAgICAgJ3RvRml4ZWQnLCAgICAgICAgICAgLy8gMjBcbiAgICAgICAgICAgICAgICAndG9Gb3JtYXQnLCAgICAgICAgICAvLyAyMVxuICAgICAgICAgICAgICAgICd0b0ZyYWN0aW9uJywgICAgICAgIC8vIDIyXG4gICAgICAgICAgICAgICAgJ3BvdycsICAgICAgICAgICAgICAgLy8gMjNcbiAgICAgICAgICAgICAgICAndG9QcmVjaXNpb24nLCAgICAgICAvLyAyNFxuICAgICAgICAgICAgICAgICd0b1N0cmluZycsICAgICAgICAgIC8vIDI1XG4gICAgICAgICAgICAgICAgJ0JpZ051bWJlcicgICAgICAgICAgLy8gMjZcbiAgICAgICAgICAgIF1bY2FsbGVyXSArICcoKSAnICsgbXNnICsgJzogJyArIHZhbCApO1xuXG4gICAgICAgICAgICBlcnJvci5uYW1lID0gJ0JpZ051bWJlciBFcnJvcic7XG4gICAgICAgICAgICBpZCA9IDA7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogUm91bmQgeCB0byBzZCBzaWduaWZpY2FudCBkaWdpdHMgdXNpbmcgcm91bmRpbmcgbW9kZSBybS4gQ2hlY2sgZm9yIG92ZXIvdW5kZXItZmxvdy5cbiAgICAgICAgICogSWYgciBpcyB0cnV0aHksIGl0IGlzIGtub3duIHRoYXQgdGhlcmUgYXJlIG1vcmUgZGlnaXRzIGFmdGVyIHRoZSByb3VuZGluZyBkaWdpdC5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHJvdW5kKCB4LCBzZCwgcm0sIHIgKSB7XG4gICAgICAgICAgICB2YXIgZCwgaSwgaiwgaywgbiwgbmksIHJkLFxuICAgICAgICAgICAgICAgIHhjID0geC5jLFxuICAgICAgICAgICAgICAgIHBvd3MxMCA9IFBPV1NfVEVOO1xuXG4gICAgICAgICAgICAvLyBpZiB4IGlzIG5vdCBJbmZpbml0eSBvciBOYU4uLi5cbiAgICAgICAgICAgIGlmICh4Yykge1xuXG4gICAgICAgICAgICAgICAgLy8gcmQgaXMgdGhlIHJvdW5kaW5nIGRpZ2l0LCBpLmUuIHRoZSBkaWdpdCBhZnRlciB0aGUgZGlnaXQgdGhhdCBtYXkgYmUgcm91bmRlZCB1cC5cbiAgICAgICAgICAgICAgICAvLyBuIGlzIGEgYmFzZSAxZTE0IG51bWJlciwgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IG9mIGFycmF5IHguYyBjb250YWluaW5nIHJkLlxuICAgICAgICAgICAgICAgIC8vIG5pIGlzIHRoZSBpbmRleCBvZiBuIHdpdGhpbiB4LmMuXG4gICAgICAgICAgICAgICAgLy8gZCBpcyB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBvZiBuLlxuICAgICAgICAgICAgICAgIC8vIGkgaXMgdGhlIGluZGV4IG9mIHJkIHdpdGhpbiBuIGluY2x1ZGluZyBsZWFkaW5nIHplcm9zLlxuICAgICAgICAgICAgICAgIC8vIGogaXMgdGhlIGFjdHVhbCBpbmRleCBvZiByZCB3aXRoaW4gbiAoaWYgPCAwLCByZCBpcyBhIGxlYWRpbmcgemVybykuXG4gICAgICAgICAgICAgICAgb3V0OiB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBudW1iZXIgb2YgZGlnaXRzIG9mIHRoZSBmaXJzdCBlbGVtZW50IG9mIHhjLlxuICAgICAgICAgICAgICAgICAgICBmb3IgKCBkID0gMSwgayA9IHhjWzBdOyBrID49IDEwOyBrIC89IDEwLCBkKysgKTtcbiAgICAgICAgICAgICAgICAgICAgaSA9IHNkIC0gZDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcm91bmRpbmcgZGlnaXQgaXMgaW4gdGhlIGZpcnN0IGVsZW1lbnQgb2YgeGMuLi5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpIDwgMCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gTE9HX0JBU0U7XG4gICAgICAgICAgICAgICAgICAgICAgICBqID0gc2Q7XG4gICAgICAgICAgICAgICAgICAgICAgICBuID0geGNbIG5pID0gMCBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHJvdW5kaW5nIGRpZ2l0IGF0IGluZGV4IGogb2Ygbi5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJkID0gbiAvIHBvd3MxMFsgZCAtIGogLSAxIF0gJSAxMCB8IDA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuaSA9IG1hdGhjZWlsKCAoIGkgKyAxICkgLyBMT0dfQkFTRSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG5pID49IHhjLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmVlZGVkIGJ5IHNxcnQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIDsgeGMubGVuZ3RoIDw9IG5pOyB4Yy5wdXNoKDApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSByZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICU9IExPR19CQVNFO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gaSAtIExPR19CQVNFICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBvdXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gayA9IHhjW25pXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgbnVtYmVyIG9mIGRpZ2l0cyBvZiBuLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIGQgPSAxOyBrID49IDEwOyBrIC89IDEwLCBkKysgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgaW5kZXggb2YgcmQgd2l0aGluIG4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSAlPSBMT0dfQkFTRTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgaW5kZXggb2YgcmQgd2l0aGluIG4sIGFkanVzdGVkIGZvciBsZWFkaW5nIHplcm9zLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvcyBvZiBuIGlzIGdpdmVuIGJ5IExPR19CQVNFIC0gZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gaSAtIExPR19CQVNFICsgZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcm91bmRpbmcgZGlnaXQgYXQgaW5kZXggaiBvZiBuLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJkID0gaiA8IDAgPyAwIDogbiAvIHBvd3MxMFsgZCAtIGogLSAxIF0gJSAxMCB8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByID0gciB8fCBzZCA8IDAgfHxcblxuICAgICAgICAgICAgICAgICAgICAvLyBBcmUgdGhlcmUgYW55IG5vbi16ZXJvIGRpZ2l0cyBhZnRlciB0aGUgcm91bmRpbmcgZGlnaXQ/XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBleHByZXNzaW9uICBuICUgcG93czEwWyBkIC0gaiAtIDEgXSAgcmV0dXJucyBhbGwgZGlnaXRzIG9mIG4gdG8gdGhlIHJpZ2h0XG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIHRoZSBkaWdpdCBhdCBqLCBlLmcuIGlmIG4gaXMgOTA4NzE0IGFuZCBqIGlzIDIsIHRoZSBleHByZXNzaW9uIGdpdmVzIDcxNC5cbiAgICAgICAgICAgICAgICAgICAgICB4Y1tuaSArIDFdICE9IG51bGwgfHwgKCBqIDwgMCA/IG4gOiBuICUgcG93czEwWyBkIC0gaiAtIDEgXSApO1xuXG4gICAgICAgICAgICAgICAgICAgIHIgPSBybSA8IDRcbiAgICAgICAgICAgICAgICAgICAgICA/ICggcmQgfHwgciApICYmICggcm0gPT0gMCB8fCBybSA9PSAoIHgucyA8IDAgPyAzIDogMiApIClcbiAgICAgICAgICAgICAgICAgICAgICA6IHJkID4gNSB8fCByZCA9PSA1ICYmICggcm0gPT0gNCB8fCByIHx8IHJtID09IDYgJiZcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgZGlnaXQgdG8gdGhlIGxlZnQgb2YgdGhlIHJvdW5kaW5nIGRpZ2l0IGlzIG9kZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICggKCBpID4gMCA/IGogPiAwID8gbiAvIHBvd3MxMFsgZCAtIGogXSA6IDAgOiB4Y1tuaSAtIDFdICkgJSAxMCApICYgMSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBybSA9PSAoIHgucyA8IDAgPyA4IDogNyApICk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzZCA8IDEgfHwgIXhjWzBdICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeGMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgc2QgdG8gZGVjaW1hbCBwbGFjZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2QgLT0geC5lICsgMTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDEsIDAuMSwgMC4wMSwgMC4wMDEsIDAuMDAwMSBldGMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGNbMF0gPSBwb3dzMTBbIHNkICUgTE9HX0JBU0UgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LmUgPSAtc2QgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBaZXJvLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhjWzBdID0geC5lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZXhjZXNzIGRpZ2l0cy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpID09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4Yy5sZW5ndGggPSBuaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGsgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmktLTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhjLmxlbmd0aCA9IG5pICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBwb3dzMTBbIExPR19CQVNFIC0gaSBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFLmcuIDU2NzAwIGJlY29tZXMgNTYwMDAgaWYgNyBpcyB0aGUgcm91bmRpbmcgZGlnaXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBqID4gMCBtZWFucyBpID4gbnVtYmVyIG9mIGxlYWRpbmcgemVyb3Mgb2Ygbi5cbiAgICAgICAgICAgICAgICAgICAgICAgIHhjW25pXSA9IGogPiAwID8gbWF0aGZsb29yKCBuIC8gcG93czEwWyBkIC0gaiBdICUgcG93czEwW2pdICkgKiBrIDogMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJvdW5kIHVwP1xuICAgICAgICAgICAgICAgICAgICBpZiAocikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCA7IDsgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZGlnaXQgdG8gYmUgcm91bmRlZCB1cCBpcyBpbiB0aGUgZmlyc3QgZWxlbWVudCBvZiB4Yy4uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbmkgPT0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpIHdpbGwgYmUgdGhlIGxlbmd0aCBvZiB4Y1swXSBiZWZvcmUgayBpcyBhZGRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggaSA9IDEsIGogPSB4Y1swXTsgaiA+PSAxMDsgaiAvPSAxMCwgaSsrICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGogPSB4Y1swXSArPSBrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCBrID0gMTsgaiA+PSAxMDsgaiAvPSAxMCwgaysrICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgaSAhPSBrIHRoZSBsZW5ndGggaGFzIGluY3JlYXNlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBpICE9IGsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LmUrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggeGNbMF0gPT0gQkFTRSApIHhjWzBdID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhjW25pXSArPSBrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHhjW25pXSAhPSBCQVNFICkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhjW25pLS1dID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIHplcm9zLlxuICAgICAgICAgICAgICAgICAgICBmb3IgKCBpID0geGMubGVuZ3RoOyB4Y1stLWldID09PSAwOyB4Yy5wb3AoKSApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE92ZXJmbG93PyBJbmZpbml0eS5cbiAgICAgICAgICAgICAgICBpZiAoIHguZSA+IE1BWF9FWFAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHguYyA9IHguZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvLyBVbmRlcmZsb3c/IFplcm8uXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggeC5lIDwgTUlOX0VYUCApIHtcbiAgICAgICAgICAgICAgICAgICAgeC5jID0gWyB4LmUgPSAwIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8gUFJPVE9UWVBFL0lOU1RBTkNFIE1FVEhPRFNcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIGFic29sdXRlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgUC5hYnNvbHV0ZVZhbHVlID0gUC5hYnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgeCA9IG5ldyBCaWdOdW1iZXIodGhpcyk7XG4gICAgICAgICAgICBpZiAoIHgucyA8IDAgKSB4LnMgPSAxO1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciByb3VuZGVkIHRvIGEgd2hvbGVcbiAgICAgICAgICogbnVtYmVyIGluIHRoZSBkaXJlY3Rpb24gb2YgSW5maW5pdHkuXG4gICAgICAgICAqL1xuICAgICAgICBQLmNlaWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQoIG5ldyBCaWdOdW1iZXIodGhpcyksIHRoaXMuZSArIDEsIDIgKTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVyblxuICAgICAgICAgKiAxIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBncmVhdGVyIHRoYW4gdGhlIHZhbHVlIG9mIEJpZ051bWJlcih5LCBiKSxcbiAgICAgICAgICogLTEgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIGxlc3MgdGhhbiB0aGUgdmFsdWUgb2YgQmlnTnVtYmVyKHksIGIpLFxuICAgICAgICAgKiAwIGlmIHRoZXkgaGF2ZSB0aGUgc2FtZSB2YWx1ZSxcbiAgICAgICAgICogb3IgbnVsbCBpZiB0aGUgdmFsdWUgb2YgZWl0aGVyIGlzIE5hTi5cbiAgICAgICAgICovXG4gICAgICAgIFAuY29tcGFyZWRUbyA9IFAuY21wID0gZnVuY3Rpb24gKCB5LCBiICkge1xuICAgICAgICAgICAgaWQgPSAxO1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmUoIHRoaXMsIG5ldyBCaWdOdW1iZXIoIHksIGIgKSApO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogUmV0dXJuIHRoZSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgb2YgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyLCBvciBudWxsIGlmIHRoZSB2YWx1ZVxuICAgICAgICAgKiBvZiB0aGlzIEJpZ051bWJlciBpcyDCsUluZmluaXR5IG9yIE5hTi5cbiAgICAgICAgICovXG4gICAgICAgIFAuZGVjaW1hbFBsYWNlcyA9IFAuZHAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbiwgdixcbiAgICAgICAgICAgICAgICBjID0gdGhpcy5jO1xuXG4gICAgICAgICAgICBpZiAoICFjICkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBuID0gKCAoIHYgPSBjLmxlbmd0aCAtIDEgKSAtIGJpdEZsb29yKCB0aGlzLmUgLyBMT0dfQkFTRSApICkgKiBMT0dfQkFTRTtcblxuICAgICAgICAgICAgLy8gU3VidHJhY3QgdGhlIG51bWJlciBvZiB0cmFpbGluZyB6ZXJvcyBvZiB0aGUgbGFzdCBudW1iZXIuXG4gICAgICAgICAgICBpZiAoIHYgPSBjW3ZdICkgZm9yICggOyB2ICUgMTAgPT0gMDsgdiAvPSAxMCwgbi0tICk7XG4gICAgICAgICAgICBpZiAoIG4gPCAwICkgbiA9IDA7XG5cbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogIG4gLyAwID0gSVxuICAgICAgICAgKiAgbiAvIE4gPSBOXG4gICAgICAgICAqICBuIC8gSSA9IDBcbiAgICAgICAgICogIDAgLyBuID0gMFxuICAgICAgICAgKiAgMCAvIDAgPSBOXG4gICAgICAgICAqICAwIC8gTiA9IE5cbiAgICAgICAgICogIDAgLyBJID0gMFxuICAgICAgICAgKiAgTiAvIG4gPSBOXG4gICAgICAgICAqICBOIC8gMCA9IE5cbiAgICAgICAgICogIE4gLyBOID0gTlxuICAgICAgICAgKiAgTiAvIEkgPSBOXG4gICAgICAgICAqICBJIC8gbiA9IElcbiAgICAgICAgICogIEkgLyAwID0gSVxuICAgICAgICAgKiAgSSAvIE4gPSBOXG4gICAgICAgICAqICBJIC8gSSA9IE5cbiAgICAgICAgICpcbiAgICAgICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgZGl2aWRlZCBieSB0aGUgdmFsdWUgb2ZcbiAgICAgICAgICogQmlnTnVtYmVyKHksIGIpLCByb3VuZGVkIGFjY29yZGluZyB0byBERUNJTUFMX1BMQUNFUyBhbmQgUk9VTkRJTkdfTU9ERS5cbiAgICAgICAgICovXG4gICAgICAgIFAuZGl2aWRlZEJ5ID0gUC5kaXYgPSBmdW5jdGlvbiAoIHksIGIgKSB7XG4gICAgICAgICAgICBpZCA9IDM7XG4gICAgICAgICAgICByZXR1cm4gZGl2KCB0aGlzLCBuZXcgQmlnTnVtYmVyKCB5LCBiICksIERFQ0lNQUxfUExBQ0VTLCBST1VORElOR19NT0RFICk7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSBpbnRlZ2VyIHBhcnQgb2YgZGl2aWRpbmcgdGhlIHZhbHVlIG9mIHRoaXNcbiAgICAgICAgICogQmlnTnVtYmVyIGJ5IHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYikuXG4gICAgICAgICAqL1xuICAgICAgICBQLmRpdmlkZWRUb0ludGVnZXJCeSA9IFAuZGl2VG9JbnQgPSBmdW5jdGlvbiAoIHksIGIgKSB7XG4gICAgICAgICAgICBpZCA9IDQ7XG4gICAgICAgICAgICByZXR1cm4gZGl2KCB0aGlzLCBuZXcgQmlnTnVtYmVyKCB5LCBiICksIDAsIDEgKTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBlcXVhbCB0byB0aGUgdmFsdWUgb2YgQmlnTnVtYmVyKHksIGIpLFxuICAgICAgICAgKiBvdGhlcndpc2UgcmV0dXJucyBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIFAuZXF1YWxzID0gUC5lcSA9IGZ1bmN0aW9uICggeSwgYiApIHtcbiAgICAgICAgICAgIGlkID0gNTtcbiAgICAgICAgICAgIHJldHVybiBjb21wYXJlKCB0aGlzLCBuZXcgQmlnTnVtYmVyKCB5LCBiICkgKSA9PT0gMDtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIHJvdW5kZWQgdG8gYSB3aG9sZVxuICAgICAgICAgKiBudW1iZXIgaW4gdGhlIGRpcmVjdGlvbiBvZiAtSW5maW5pdHkuXG4gICAgICAgICAqL1xuICAgICAgICBQLmZsb29yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvdW5kKCBuZXcgQmlnTnVtYmVyKHRoaXMpLCB0aGlzLmUgKyAxLCAzICk7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgZ3JlYXRlciB0aGFuIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXIoeSwgYiksXG4gICAgICAgICAqIG90aGVyd2lzZSByZXR1cm5zIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgUC5ncmVhdGVyVGhhbiA9IFAuZ3QgPSBmdW5jdGlvbiAoIHksIGIgKSB7XG4gICAgICAgICAgICBpZCA9IDY7XG4gICAgICAgICAgICByZXR1cm4gY29tcGFyZSggdGhpcywgbmV3IEJpZ051bWJlciggeSwgYiApICkgPiAwO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogUmV0dXJuIHRydWUgaWYgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgdmFsdWUgb2ZcbiAgICAgICAgICogQmlnTnVtYmVyKHksIGIpLCBvdGhlcndpc2UgcmV0dXJucyBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIFAuZ3JlYXRlclRoYW5PckVxdWFsVG8gPSBQLmd0ZSA9IGZ1bmN0aW9uICggeSwgYiApIHtcbiAgICAgICAgICAgIGlkID0gNztcbiAgICAgICAgICAgIHJldHVybiAoIGIgPSBjb21wYXJlKCB0aGlzLCBuZXcgQmlnTnVtYmVyKCB5LCBiICkgKSApID09PSAxIHx8IGIgPT09IDA7XG5cbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBhIGZpbml0ZSBudW1iZXIsIG90aGVyd2lzZSByZXR1cm5zIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgUC5pc0Zpbml0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAhIXRoaXMuYztcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBhbiBpbnRlZ2VyLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgUC5pc0ludGVnZXIgPSBQLmlzSW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5jICYmIGJpdEZsb29yKCB0aGlzLmUgLyBMT0dfQkFTRSApID4gdGhpcy5jLmxlbmd0aCAtIDI7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgTmFOLCBvdGhlcndpc2UgcmV0dXJucyBmYWxzZS5cbiAgICAgICAgICovXG4gICAgICAgIFAuaXNOYU4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMucztcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBuZWdhdGl2ZSwgb3RoZXJ3aXNlIHJldHVybnMgZmFsc2UuXG4gICAgICAgICAqL1xuICAgICAgICBQLmlzTmVnYXRpdmUgPSBQLmlzTmVnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucyA8IDA7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgMCBvciAtMCwgb3RoZXJ3aXNlIHJldHVybnMgZmFsc2UuXG4gICAgICAgICAqL1xuICAgICAgICBQLmlzWmVybyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAhIXRoaXMuYyAmJiB0aGlzLmNbMF0gPT0gMDtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBpcyBsZXNzIHRoYW4gdGhlIHZhbHVlIG9mIEJpZ051bWJlcih5LCBiKSxcbiAgICAgICAgICogb3RoZXJ3aXNlIHJldHVybnMgZmFsc2UuXG4gICAgICAgICAqL1xuICAgICAgICBQLmxlc3NUaGFuID0gUC5sdCA9IGZ1bmN0aW9uICggeSwgYiApIHtcbiAgICAgICAgICAgIGlkID0gODtcbiAgICAgICAgICAgIHJldHVybiBjb21wYXJlKCB0aGlzLCBuZXcgQmlnTnVtYmVyKCB5LCBiICkgKSA8IDA7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSB2YWx1ZSBvZlxuICAgICAgICAgKiBCaWdOdW1iZXIoeSwgYiksIG90aGVyd2lzZSByZXR1cm5zIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgUC5sZXNzVGhhbk9yRXF1YWxUbyA9IFAubHRlID0gZnVuY3Rpb24gKCB5LCBiICkge1xuICAgICAgICAgICAgaWQgPSA5O1xuICAgICAgICAgICAgcmV0dXJuICggYiA9IGNvbXBhcmUoIHRoaXMsIG5ldyBCaWdOdW1iZXIoIHksIGIgKSApICkgPT09IC0xIHx8IGIgPT09IDA7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiAgbiAtIDAgPSBuXG4gICAgICAgICAqICBuIC0gTiA9IE5cbiAgICAgICAgICogIG4gLSBJID0gLUlcbiAgICAgICAgICogIDAgLSBuID0gLW5cbiAgICAgICAgICogIDAgLSAwID0gMFxuICAgICAgICAgKiAgMCAtIE4gPSBOXG4gICAgICAgICAqICAwIC0gSSA9IC1JXG4gICAgICAgICAqICBOIC0gbiA9IE5cbiAgICAgICAgICogIE4gLSAwID0gTlxuICAgICAgICAgKiAgTiAtIE4gPSBOXG4gICAgICAgICAqICBOIC0gSSA9IE5cbiAgICAgICAgICogIEkgLSBuID0gSVxuICAgICAgICAgKiAgSSAtIDAgPSBJXG4gICAgICAgICAqICBJIC0gTiA9IE5cbiAgICAgICAgICogIEkgLSBJID0gTlxuICAgICAgICAgKlxuICAgICAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBtaW51cyB0aGUgdmFsdWUgb2ZcbiAgICAgICAgICogQmlnTnVtYmVyKHksIGIpLlxuICAgICAgICAgKi9cbiAgICAgICAgUC5taW51cyA9IFAuc3ViID0gZnVuY3Rpb24gKCB5LCBiICkge1xuICAgICAgICAgICAgdmFyIGksIGosIHQsIHhMVHksXG4gICAgICAgICAgICAgICAgeCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYSA9IHgucztcblxuICAgICAgICAgICAgaWQgPSAxMDtcbiAgICAgICAgICAgIHkgPSBuZXcgQmlnTnVtYmVyKCB5LCBiICk7XG4gICAgICAgICAgICBiID0geS5zO1xuXG4gICAgICAgICAgICAvLyBFaXRoZXIgTmFOP1xuICAgICAgICAgICAgaWYgKCAhYSB8fCAhYiApIHJldHVybiBuZXcgQmlnTnVtYmVyKE5hTik7XG5cbiAgICAgICAgICAgIC8vIFNpZ25zIGRpZmZlcj9cbiAgICAgICAgICAgIGlmICggYSAhPSBiICkge1xuICAgICAgICAgICAgICAgIHkucyA9IC1iO1xuICAgICAgICAgICAgICAgIHJldHVybiB4LnBsdXMoeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB4ZSA9IHguZSAvIExPR19CQVNFLFxuICAgICAgICAgICAgICAgIHllID0geS5lIC8gTE9HX0JBU0UsXG4gICAgICAgICAgICAgICAgeGMgPSB4LmMsXG4gICAgICAgICAgICAgICAgeWMgPSB5LmM7XG5cbiAgICAgICAgICAgIGlmICggIXhlIHx8ICF5ZSApIHtcblxuICAgICAgICAgICAgICAgIC8vIEVpdGhlciBJbmZpbml0eT9cbiAgICAgICAgICAgICAgICBpZiAoICF4YyB8fCAheWMgKSByZXR1cm4geGMgPyAoIHkucyA9IC1iLCB5ICkgOiBuZXcgQmlnTnVtYmVyKCB5YyA/IHggOiBOYU4gKTtcblxuICAgICAgICAgICAgICAgIC8vIEVpdGhlciB6ZXJvP1xuICAgICAgICAgICAgICAgIGlmICggIXhjWzBdIHx8ICF5Y1swXSApIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4geSBpZiB5IGlzIG5vbi16ZXJvLCB4IGlmIHggaXMgbm9uLXplcm8sIG9yIHplcm8gaWYgYm90aCBhcmUgemVyby5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHljWzBdID8gKCB5LnMgPSAtYiwgeSApIDogbmV3IEJpZ051bWJlciggeGNbMF0gPyB4IDpcblxuICAgICAgICAgICAgICAgICAgICAgIC8vIElFRUUgNzU0ICgyMDA4KSA2LjM6IG4gLSBuID0gLTAgd2hlbiByb3VuZGluZyB0byAtSW5maW5pdHlcbiAgICAgICAgICAgICAgICAgICAgICBST1VORElOR19NT0RFID09IDMgPyAtMCA6IDAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHhlID0gYml0Rmxvb3IoeGUpO1xuICAgICAgICAgICAgeWUgPSBiaXRGbG9vcih5ZSk7XG4gICAgICAgICAgICB4YyA9IHhjLnNsaWNlKCk7XG5cbiAgICAgICAgICAgIC8vIERldGVybWluZSB3aGljaCBpcyB0aGUgYmlnZ2VyIG51bWJlci5cbiAgICAgICAgICAgIGlmICggYSA9IHhlIC0geWUgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIHhMVHkgPSBhIDwgMCApIHtcbiAgICAgICAgICAgICAgICAgICAgYSA9IC1hO1xuICAgICAgICAgICAgICAgICAgICB0ID0geGM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeWUgPSB4ZTtcbiAgICAgICAgICAgICAgICAgICAgdCA9IHljO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHQucmV2ZXJzZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gUHJlcGVuZCB6ZXJvcyB0byBlcXVhbGlzZSBleHBvbmVudHMuXG4gICAgICAgICAgICAgICAgZm9yICggYiA9IGE7IGItLTsgdC5wdXNoKDApICk7XG4gICAgICAgICAgICAgICAgdC5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgLy8gRXhwb25lbnRzIGVxdWFsLiBDaGVjayBkaWdpdCBieSBkaWdpdC5cbiAgICAgICAgICAgICAgICBqID0gKCB4TFR5ID0gKCBhID0geGMubGVuZ3RoICkgPCAoIGIgPSB5Yy5sZW5ndGggKSApID8gYSA6IGI7XG5cbiAgICAgICAgICAgICAgICBmb3IgKCBhID0gYiA9IDA7IGIgPCBqOyBiKysgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCB4Y1tiXSAhPSB5Y1tiXSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhMVHkgPSB4Y1tiXSA8IHljW2JdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHggPCB5PyBQb2ludCB4YyB0byB0aGUgYXJyYXkgb2YgdGhlIGJpZ2dlciBudW1iZXIuXG4gICAgICAgICAgICBpZiAoeExUeSkgdCA9IHhjLCB4YyA9IHljLCB5YyA9IHQsIHkucyA9IC15LnM7XG5cbiAgICAgICAgICAgIGIgPSAoIGogPSB5Yy5sZW5ndGggKSAtICggaSA9IHhjLmxlbmd0aCApO1xuXG4gICAgICAgICAgICAvLyBBcHBlbmQgemVyb3MgdG8geGMgaWYgc2hvcnRlci5cbiAgICAgICAgICAgIC8vIE5vIG5lZWQgdG8gYWRkIHplcm9zIHRvIHljIGlmIHNob3J0ZXIgYXMgc3VidHJhY3Qgb25seSBuZWVkcyB0byBzdGFydCBhdCB5Yy5sZW5ndGguXG4gICAgICAgICAgICBpZiAoIGIgPiAwICkgZm9yICggOyBiLS07IHhjW2krK10gPSAwICk7XG4gICAgICAgICAgICBiID0gQkFTRSAtIDE7XG5cbiAgICAgICAgICAgIC8vIFN1YnRyYWN0IHljIGZyb20geGMuXG4gICAgICAgICAgICBmb3IgKCA7IGogPiBhOyApIHtcblxuICAgICAgICAgICAgICAgIGlmICggeGNbLS1qXSA8IHljW2pdICkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKCBpID0gajsgaSAmJiAheGNbLS1pXTsgeGNbaV0gPSBiICk7XG4gICAgICAgICAgICAgICAgICAgIC0teGNbaV07XG4gICAgICAgICAgICAgICAgICAgIHhjW2pdICs9IEJBU0U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgeGNbal0gLT0geWNbal07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFJlbW92ZSBsZWFkaW5nIHplcm9zIGFuZCBhZGp1c3QgZXhwb25lbnQgYWNjb3JkaW5nbHkuXG4gICAgICAgICAgICBmb3IgKCA7IHhjWzBdID09IDA7IHhjLnNoaWZ0KCksIC0teWUgKTtcblxuICAgICAgICAgICAgLy8gWmVybz9cbiAgICAgICAgICAgIGlmICggIXhjWzBdICkge1xuXG4gICAgICAgICAgICAgICAgLy8gRm9sbG93aW5nIElFRUUgNzU0ICgyMDA4KSA2LjMsXG4gICAgICAgICAgICAgICAgLy8gbiAtIG4gPSArMCAgYnV0ICBuIC0gbiA9IC0wICB3aGVuIHJvdW5kaW5nIHRvd2FyZHMgLUluZmluaXR5LlxuICAgICAgICAgICAgICAgIHkucyA9IFJPVU5ESU5HX01PREUgPT0gMyA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICB5LmMgPSBbIHkuZSA9IDAgXTtcbiAgICAgICAgICAgICAgICByZXR1cm4geTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTm8gbmVlZCB0byBjaGVjayBmb3IgSW5maW5pdHkgYXMgK3ggLSAreSAhPSBJbmZpbml0eSAmJiAteCAtIC15ICE9IEluZmluaXR5XG4gICAgICAgICAgICAvLyBmb3IgZmluaXRlIHggYW5kIHkuXG4gICAgICAgICAgICByZXR1cm4gbm9ybWFsaXNlKCB5LCB4YywgeWUgKTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqICAgbiAlIDAgPSAgTlxuICAgICAgICAgKiAgIG4gJSBOID0gIE5cbiAgICAgICAgICogICBuICUgSSA9ICBuXG4gICAgICAgICAqICAgMCAlIG4gPSAgMFxuICAgICAgICAgKiAgLTAgJSBuID0gLTBcbiAgICAgICAgICogICAwICUgMCA9ICBOXG4gICAgICAgICAqICAgMCAlIE4gPSAgTlxuICAgICAgICAgKiAgIDAgJSBJID0gIDBcbiAgICAgICAgICogICBOICUgbiA9ICBOXG4gICAgICAgICAqICAgTiAlIDAgPSAgTlxuICAgICAgICAgKiAgIE4gJSBOID0gIE5cbiAgICAgICAgICogICBOICUgSSA9ICBOXG4gICAgICAgICAqICAgSSAlIG4gPSAgTlxuICAgICAgICAgKiAgIEkgJSAwID0gIE5cbiAgICAgICAgICogICBJICUgTiA9ICBOXG4gICAgICAgICAqICAgSSAlIEkgPSAgTlxuICAgICAgICAgKlxuICAgICAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBtb2R1bG8gdGhlIHZhbHVlIG9mXG4gICAgICAgICAqIEJpZ051bWJlcih5LCBiKS4gVGhlIHJlc3VsdCBkZXBlbmRzIG9uIHRoZSB2YWx1ZSBvZiBNT0RVTE9fTU9ERS5cbiAgICAgICAgICovXG4gICAgICAgIFAubW9kdWxvID0gUC5tb2QgPSBmdW5jdGlvbiAoIHksIGIgKSB7XG4gICAgICAgICAgICB2YXIgcSwgcyxcbiAgICAgICAgICAgICAgICB4ID0gdGhpcztcblxuICAgICAgICAgICAgaWQgPSAxMTtcbiAgICAgICAgICAgIHkgPSBuZXcgQmlnTnVtYmVyKCB5LCBiICk7XG5cbiAgICAgICAgICAgIC8vIFJldHVybiBOYU4gaWYgeCBpcyBJbmZpbml0eSBvciBOYU4sIG9yIHkgaXMgTmFOIG9yIHplcm8uXG4gICAgICAgICAgICBpZiAoICF4LmMgfHwgIXkucyB8fCB5LmMgJiYgIXkuY1swXSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlcihOYU4pO1xuXG4gICAgICAgICAgICAvLyBSZXR1cm4geCBpZiB5IGlzIEluZmluaXR5IG9yIHggaXMgemVyby5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoICF5LmMgfHwgeC5jICYmICF4LmNbMF0gKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIoeCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggTU9EVUxPX01PREUgPT0gOSApIHtcblxuICAgICAgICAgICAgICAgIC8vIEV1Y2xpZGlhbiBkaXZpc2lvbjogcSA9IHNpZ24oeSkgKiBmbG9vcih4IC8gYWJzKHkpKVxuICAgICAgICAgICAgICAgIC8vIHIgPSB4IC0gcXkgICAgd2hlcmUgIDAgPD0gciA8IGFicyh5KVxuICAgICAgICAgICAgICAgIHMgPSB5LnM7XG4gICAgICAgICAgICAgICAgeS5zID0gMTtcbiAgICAgICAgICAgICAgICBxID0gZGl2KCB4LCB5LCAwLCAzICk7XG4gICAgICAgICAgICAgICAgeS5zID0gcztcbiAgICAgICAgICAgICAgICBxLnMgKj0gcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcSA9IGRpdiggeCwgeSwgMCwgTU9EVUxPX01PREUgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHgubWludXMoIHEudGltZXMoeSkgKTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIG5lZ2F0ZWQsXG4gICAgICAgICAqIGkuZS4gbXVsdGlwbGllZCBieSAtMS5cbiAgICAgICAgICovXG4gICAgICAgIFAubmVnYXRlZCA9IFAubmVnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHggPSBuZXcgQmlnTnVtYmVyKHRoaXMpO1xuICAgICAgICAgICAgeC5zID0gLXgucyB8fCBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiAgbiArIDAgPSBuXG4gICAgICAgICAqICBuICsgTiA9IE5cbiAgICAgICAgICogIG4gKyBJID0gSVxuICAgICAgICAgKiAgMCArIG4gPSBuXG4gICAgICAgICAqICAwICsgMCA9IDBcbiAgICAgICAgICogIDAgKyBOID0gTlxuICAgICAgICAgKiAgMCArIEkgPSBJXG4gICAgICAgICAqICBOICsgbiA9IE5cbiAgICAgICAgICogIE4gKyAwID0gTlxuICAgICAgICAgKiAgTiArIE4gPSBOXG4gICAgICAgICAqICBOICsgSSA9IE5cbiAgICAgICAgICogIEkgKyBuID0gSVxuICAgICAgICAgKiAgSSArIDAgPSBJXG4gICAgICAgICAqICBJICsgTiA9IE5cbiAgICAgICAgICogIEkgKyBJID0gSVxuICAgICAgICAgKlxuICAgICAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBwbHVzIHRoZSB2YWx1ZSBvZlxuICAgICAgICAgKiBCaWdOdW1iZXIoeSwgYikuXG4gICAgICAgICAqL1xuICAgICAgICBQLnBsdXMgPSBQLmFkZCA9IGZ1bmN0aW9uICggeSwgYiApIHtcbiAgICAgICAgICAgIHZhciB0LFxuICAgICAgICAgICAgICAgIHggPSB0aGlzLFxuICAgICAgICAgICAgICAgIGEgPSB4LnM7XG5cbiAgICAgICAgICAgIGlkID0gMTI7XG4gICAgICAgICAgICB5ID0gbmV3IEJpZ051bWJlciggeSwgYiApO1xuICAgICAgICAgICAgYiA9IHkucztcblxuICAgICAgICAgICAgLy8gRWl0aGVyIE5hTj9cbiAgICAgICAgICAgIGlmICggIWEgfHwgIWIgKSByZXR1cm4gbmV3IEJpZ051bWJlcihOYU4pO1xuXG4gICAgICAgICAgICAvLyBTaWducyBkaWZmZXI/XG4gICAgICAgICAgICAgaWYgKCBhICE9IGIgKSB7XG4gICAgICAgICAgICAgICAgeS5zID0gLWI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHgubWludXMoeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB4ZSA9IHguZSAvIExPR19CQVNFLFxuICAgICAgICAgICAgICAgIHllID0geS5lIC8gTE9HX0JBU0UsXG4gICAgICAgICAgICAgICAgeGMgPSB4LmMsXG4gICAgICAgICAgICAgICAgeWMgPSB5LmM7XG5cbiAgICAgICAgICAgIGlmICggIXhlIHx8ICF5ZSApIHtcblxuICAgICAgICAgICAgICAgIC8vIFJldHVybiDCsUluZmluaXR5IGlmIGVpdGhlciDCsUluZmluaXR5LlxuICAgICAgICAgICAgICAgIGlmICggIXhjIHx8ICF5YyApIHJldHVybiBuZXcgQmlnTnVtYmVyKCBhIC8gMCApO1xuXG4gICAgICAgICAgICAgICAgLy8gRWl0aGVyIHplcm8/XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIHkgaWYgeSBpcyBub24temVybywgeCBpZiB4IGlzIG5vbi16ZXJvLCBvciB6ZXJvIGlmIGJvdGggYXJlIHplcm8uXG4gICAgICAgICAgICAgICAgaWYgKCAheGNbMF0gfHwgIXljWzBdICkgcmV0dXJuIHljWzBdID8geSA6IG5ldyBCaWdOdW1iZXIoIHhjWzBdID8geCA6IGEgKiAwICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHhlID0gYml0Rmxvb3IoeGUpO1xuICAgICAgICAgICAgeWUgPSBiaXRGbG9vcih5ZSk7XG4gICAgICAgICAgICB4YyA9IHhjLnNsaWNlKCk7XG5cbiAgICAgICAgICAgIC8vIFByZXBlbmQgemVyb3MgdG8gZXF1YWxpc2UgZXhwb25lbnRzLiBGYXN0ZXIgdG8gdXNlIHJldmVyc2UgdGhlbiBkbyB1bnNoaWZ0cy5cbiAgICAgICAgICAgIGlmICggYSA9IHhlIC0geWUgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBhID4gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgeWUgPSB4ZTtcbiAgICAgICAgICAgICAgICAgICAgdCA9IHljO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGEgPSAtYTtcbiAgICAgICAgICAgICAgICAgICAgdCA9IHhjO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHQucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIGZvciAoIDsgYS0tOyB0LnB1c2goMCkgKTtcbiAgICAgICAgICAgICAgICB0LnJldmVyc2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYSA9IHhjLmxlbmd0aDtcbiAgICAgICAgICAgIGIgPSB5Yy5sZW5ndGg7XG5cbiAgICAgICAgICAgIC8vIFBvaW50IHhjIHRvIHRoZSBsb25nZXIgYXJyYXksIGFuZCBiIHRvIHRoZSBzaG9ydGVyIGxlbmd0aC5cbiAgICAgICAgICAgIGlmICggYSAtIGIgPCAwICkgdCA9IHljLCB5YyA9IHhjLCB4YyA9IHQsIGIgPSBhO1xuXG4gICAgICAgICAgICAvLyBPbmx5IHN0YXJ0IGFkZGluZyBhdCB5Yy5sZW5ndGggLSAxIGFzIHRoZSBmdXJ0aGVyIGRpZ2l0cyBvZiB4YyBjYW4gYmUgaWdub3JlZC5cbiAgICAgICAgICAgIGZvciAoIGEgPSAwOyBiOyApIHtcbiAgICAgICAgICAgICAgICBhID0gKCB4Y1stLWJdID0geGNbYl0gKyB5Y1tiXSArIGEgKSAvIEJBU0UgfCAwO1xuICAgICAgICAgICAgICAgIHhjW2JdICU9IEJBU0U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICAgICAgeGMudW5zaGlmdChhKTtcbiAgICAgICAgICAgICAgICArK3llO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBObyBuZWVkIHRvIGNoZWNrIGZvciB6ZXJvLCBhcyAreCArICt5ICE9IDAgJiYgLXggKyAteSAhPSAwXG4gICAgICAgICAgICAvLyB5ZSA9IE1BWF9FWFAgKyAxIHBvc3NpYmxlXG4gICAgICAgICAgICByZXR1cm4gbm9ybWFsaXNlKCB5LCB4YywgeWUgKTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVybiB0aGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGRpZ2l0cyBvZiB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIuXG4gICAgICAgICAqXG4gICAgICAgICAqIFt6XSB7Ym9vbGVhbnxudW1iZXJ9IFdoZXRoZXIgdG8gY291bnQgaW50ZWdlci1wYXJ0IHRyYWlsaW5nIHplcm9zOiB0cnVlLCBmYWxzZSwgMSBvciAwLlxuICAgICAgICAgKi9cbiAgICAgICAgUC5wcmVjaXNpb24gPSBQLnNkID0gZnVuY3Rpb24gKHopIHtcbiAgICAgICAgICAgIHZhciBuLCB2LFxuICAgICAgICAgICAgICAgIHggPSB0aGlzLFxuICAgICAgICAgICAgICAgIGMgPSB4LmM7XG5cbiAgICAgICAgICAgIC8vICdwcmVjaXNpb24oKSBhcmd1bWVudCBub3QgYSBib29sZWFuIG9yIGJpbmFyeSBkaWdpdDoge3p9J1xuICAgICAgICAgICAgaWYgKCB6ICE9IG51bGwgJiYgeiAhPT0gISF6ICYmIHogIT09IDEgJiYgeiAhPT0gMCApIHtcbiAgICAgICAgICAgICAgICBpZiAoRVJST1JTKSByYWlzZSggMTMsICdhcmd1bWVudCcgKyBub3RCb29sLCB6ICk7XG4gICAgICAgICAgICAgICAgaWYgKCB6ICE9ICEheiApIHogPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoICFjICkgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB2ID0gYy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgbiA9IHYgKiBMT0dfQkFTRSArIDE7XG5cbiAgICAgICAgICAgIGlmICggdiA9IGNbdl0gKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBTdWJ0cmFjdCB0aGUgbnVtYmVyIG9mIHRyYWlsaW5nIHplcm9zIG9mIHRoZSBsYXN0IGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgZm9yICggOyB2ICUgMTAgPT0gMDsgdiAvPSAxMCwgbi0tICk7XG5cbiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIG51bWJlciBvZiBkaWdpdHMgb2YgdGhlIGZpcnN0IGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgZm9yICggdiA9IGNbMF07IHYgPj0gMTA7IHYgLz0gMTAsIG4rKyApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIHogJiYgeC5lICsgMSA+IG4gKSBuID0geC5lICsgMTtcblxuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH07XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciByb3VuZGVkIHRvIGEgbWF4aW11bSBvZlxuICAgICAgICAgKiBkcCBkZWNpbWFsIHBsYWNlcyB1c2luZyByb3VuZGluZyBtb2RlIHJtLCBvciB0byAwIGFuZCBST1VORElOR19NT0RFIHJlc3BlY3RpdmVseSBpZlxuICAgICAgICAgKiBvbWl0dGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBbZHBdIHtudW1iZXJ9IERlY2ltYWwgcGxhY2VzLiBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXG4gICAgICAgICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogJ3JvdW5kKCkgZGVjaW1hbCBwbGFjZXMgb3V0IG9mIHJhbmdlOiB7ZHB9J1xuICAgICAgICAgKiAncm91bmQoKSBkZWNpbWFsIHBsYWNlcyBub3QgYW4gaW50ZWdlcjoge2RwfSdcbiAgICAgICAgICogJ3JvdW5kKCkgcm91bmRpbmcgbW9kZSBub3QgYW4gaW50ZWdlcjoge3JtfSdcbiAgICAgICAgICogJ3JvdW5kKCkgcm91bmRpbmcgbW9kZSBvdXQgb2YgcmFuZ2U6IHtybX0nXG4gICAgICAgICAqL1xuICAgICAgICBQLnJvdW5kID0gZnVuY3Rpb24gKCBkcCwgcm0gKSB7XG4gICAgICAgICAgICB2YXIgbiA9IG5ldyBCaWdOdW1iZXIodGhpcyk7XG5cbiAgICAgICAgICAgIGlmICggZHAgPT0gbnVsbCB8fCBpc1ZhbGlkSW50KCBkcCwgMCwgTUFYLCAxNSApICkge1xuICAgICAgICAgICAgICAgIHJvdW5kKCBuLCB+fmRwICsgdGhpcy5lICsgMSwgcm0gPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgIWlzVmFsaWRJbnQoIHJtLCAwLCA4LCAxNSwgcm91bmRpbmdNb2RlICkgPyBST1VORElOR19NT0RFIDogcm0gfCAwICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgc2hpZnRlZCBieSBrIHBsYWNlc1xuICAgICAgICAgKiAocG93ZXJzIG9mIDEwKS4gU2hpZnQgdG8gdGhlIHJpZ2h0IGlmIG4gPiAwLCBhbmQgdG8gdGhlIGxlZnQgaWYgbiA8IDAuXG4gICAgICAgICAqXG4gICAgICAgICAqIGsge251bWJlcn0gSW50ZWdlciwgLU1BWF9TQUZFX0lOVEVHRVIgdG8gTUFYX1NBRkVfSU5URUdFUiBpbmNsdXNpdmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIGsgaXMgb3V0IG9mIHJhbmdlIGFuZCBFUlJPUlMgaXMgZmFsc2UsIHRoZSByZXN1bHQgd2lsbCBiZSDCsTAgaWYgayA8IDAsIG9yIMKxSW5maW5pdHlcbiAgICAgICAgICogb3RoZXJ3aXNlLlxuICAgICAgICAgKlxuICAgICAgICAgKiAnc2hpZnQoKSBhcmd1bWVudCBub3QgYW4gaW50ZWdlcjoge2t9J1xuICAgICAgICAgKiAnc2hpZnQoKSBhcmd1bWVudCBvdXQgb2YgcmFuZ2U6IHtrfSdcbiAgICAgICAgICovXG4gICAgICAgIFAuc2hpZnQgPSBmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgdmFyIG4gPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWRJbnQoIGssIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSLCAxNiwgJ2FyZ3VtZW50JyApXG5cbiAgICAgICAgICAgICAgLy8gayA8IDFlKzIxLCBvciB0cnVuY2F0ZShrKSB3aWxsIHByb2R1Y2UgZXhwb25lbnRpYWwgbm90YXRpb24uXG4gICAgICAgICAgICAgID8gbi50aW1lcyggJzFlJyArIHRydW5jYXRlKGspIClcbiAgICAgICAgICAgICAgOiBuZXcgQmlnTnVtYmVyKCBuLmMgJiYgbi5jWzBdICYmICggayA8IC1NQVhfU0FGRV9JTlRFR0VSIHx8IGsgPiBNQVhfU0FGRV9JTlRFR0VSIClcbiAgICAgICAgICAgICAgICA/IG4ucyAqICggayA8IDAgPyAwIDogMSAvIDAgKVxuICAgICAgICAgICAgICAgIDogbiApO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogIHNxcnQoLW4pID0gIE5cbiAgICAgICAgICogIHNxcnQoIE4pID0gIE5cbiAgICAgICAgICogIHNxcnQoLUkpID0gIE5cbiAgICAgICAgICogIHNxcnQoIEkpID0gIElcbiAgICAgICAgICogIHNxcnQoIDApID0gIDBcbiAgICAgICAgICogIHNxcnQoLTApID0gLTBcbiAgICAgICAgICpcbiAgICAgICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgc3F1YXJlIHJvb3Qgb2YgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyLFxuICAgICAgICAgKiByb3VuZGVkIGFjY29yZGluZyB0byBERUNJTUFMX1BMQUNFUyBhbmQgUk9VTkRJTkdfTU9ERS5cbiAgICAgICAgICovXG4gICAgICAgIFAuc3F1YXJlUm9vdCA9IFAuc3FydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBtLCBuLCByLCByZXAsIHQsXG4gICAgICAgICAgICAgICAgeCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYyA9IHguYyxcbiAgICAgICAgICAgICAgICBzID0geC5zLFxuICAgICAgICAgICAgICAgIGUgPSB4LmUsXG4gICAgICAgICAgICAgICAgZHAgPSBERUNJTUFMX1BMQUNFUyArIDQsXG4gICAgICAgICAgICAgICAgaGFsZiA9IG5ldyBCaWdOdW1iZXIoJzAuNScpO1xuXG4gICAgICAgICAgICAvLyBOZWdhdGl2ZS9OYU4vSW5maW5pdHkvemVybz9cbiAgICAgICAgICAgIGlmICggcyAhPT0gMSB8fCAhYyB8fCAhY1swXSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJpZ051bWJlciggIXMgfHwgcyA8IDAgJiYgKCAhYyB8fCBjWzBdICkgPyBOYU4gOiBjID8geCA6IDEgLyAwICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEluaXRpYWwgZXN0aW1hdGUuXG4gICAgICAgICAgICBzID0gTWF0aC5zcXJ0KCAreCApO1xuXG4gICAgICAgICAgICAvLyBNYXRoLnNxcnQgdW5kZXJmbG93L292ZXJmbG93P1xuICAgICAgICAgICAgLy8gUGFzcyB4IHRvIE1hdGguc3FydCBhcyBpbnRlZ2VyLCB0aGVuIGFkanVzdCB0aGUgZXhwb25lbnQgb2YgdGhlIHJlc3VsdC5cbiAgICAgICAgICAgIGlmICggcyA9PSAwIHx8IHMgPT0gMSAvIDAgKSB7XG4gICAgICAgICAgICAgICAgbiA9IGNvZWZmVG9TdHJpbmcoYyk7XG4gICAgICAgICAgICAgICAgaWYgKCAoIG4ubGVuZ3RoICsgZSApICUgMiA9PSAwICkgbiArPSAnMCc7XG4gICAgICAgICAgICAgICAgcyA9IE1hdGguc3FydChuKTtcbiAgICAgICAgICAgICAgICBlID0gYml0Rmxvb3IoICggZSArIDEgKSAvIDIgKSAtICggZSA8IDAgfHwgZSAlIDIgKTtcblxuICAgICAgICAgICAgICAgIGlmICggcyA9PSAxIC8gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgbiA9ICcxZScgKyBlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG4gPSBzLnRvRXhwb25lbnRpYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgbiA9IG4uc2xpY2UoIDAsIG4uaW5kZXhPZignZScpICsgMSApICsgZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByID0gbmV3IEJpZ051bWJlcihuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgciA9IG5ldyBCaWdOdW1iZXIoIHMgKyAnJyApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgemVyby5cbiAgICAgICAgICAgIC8vIHIgY291bGQgYmUgemVybyBpZiBNSU5fRVhQIGlzIGNoYW5nZWQgYWZ0ZXIgdGhlIHRoaXMgdmFsdWUgd2FzIGNyZWF0ZWQuXG4gICAgICAgICAgICAvLyBUaGlzIHdvdWxkIGNhdXNlIGEgZGl2aXNpb24gYnkgemVybyAoeC90KSBhbmQgaGVuY2UgSW5maW5pdHkgYmVsb3csIHdoaWNoIHdvdWxkIGNhdXNlXG4gICAgICAgICAgICAvLyBjb2VmZlRvU3RyaW5nIHRvIHRocm93LlxuICAgICAgICAgICAgaWYgKCByLmNbMF0gKSB7XG4gICAgICAgICAgICAgICAgZSA9IHIuZTtcbiAgICAgICAgICAgICAgICBzID0gZSArIGRwO1xuICAgICAgICAgICAgICAgIGlmICggcyA8IDMgKSBzID0gMDtcblxuICAgICAgICAgICAgICAgIC8vIE5ld3Rvbi1SYXBoc29uIGl0ZXJhdGlvbi5cbiAgICAgICAgICAgICAgICBmb3IgKCA7IDsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHQgPSByO1xuICAgICAgICAgICAgICAgICAgICByID0gaGFsZi50aW1lcyggdC5wbHVzKCBkaXYoIHgsIHQsIGRwLCAxICkgKSApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggY29lZmZUb1N0cmluZyggdC5jICAgKS5zbGljZSggMCwgcyApID09PSAoIG4gPVxuICAgICAgICAgICAgICAgICAgICAgICAgIGNvZWZmVG9TdHJpbmcoIHIuYyApICkuc2xpY2UoIDAsIHMgKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGV4cG9uZW50IG9mIHIgbWF5IGhlcmUgYmUgb25lIGxlc3MgdGhhbiB0aGUgZmluYWwgcmVzdWx0IGV4cG9uZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZS5nIDAuMDAwOTk5OSAoZS00KSAtLT4gMC4wMDEgKGUtMyksIHNvIGFkanVzdCBzIHNvIHRoZSByb3VuZGluZyBkaWdpdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFyZSBpbmRleGVkIGNvcnJlY3RseS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggci5lIDwgZSApIC0tcztcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBuLnNsaWNlKCBzIC0gMywgcyArIDEgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIDR0aCByb3VuZGluZyBkaWdpdCBtYXkgYmUgaW4gZXJyb3IgYnkgLTEgc28gaWYgdGhlIDQgcm91bmRpbmcgZGlnaXRzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhcmUgOTk5OSBvciA0OTk5IChpLmUuIGFwcHJvYWNoaW5nIGEgcm91bmRpbmcgYm91bmRhcnkpIGNvbnRpbnVlIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaXRlcmF0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBuID09ICc5OTk5JyB8fCAhcmVwICYmIG4gPT0gJzQ5OTknICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT24gdGhlIGZpcnN0IGl0ZXJhdGlvbiBvbmx5LCBjaGVjayB0byBzZWUgaWYgcm91bmRpbmcgdXAgZ2l2ZXMgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXhhY3QgcmVzdWx0IGFzIHRoZSBuaW5lcyBtYXkgaW5maW5pdGVseSByZXBlYXQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhcmVwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3VuZCggdCwgdC5lICsgREVDSU1BTF9QTEFDRVMgKyAyLCAwICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0LnRpbWVzKHQpLmVxKHgpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRwICs9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyArPSA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgcm91bmRpbmcgZGlnaXRzIGFyZSBudWxsLCAwezAsNH0gb3IgNTB7MCwzfSwgY2hlY2sgZm9yIGV4YWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVzdWx0LiBJZiBub3QsIHRoZW4gdGhlcmUgYXJlIGZ1cnRoZXIgZGlnaXRzIGFuZCBtIHdpbGwgYmUgdHJ1dGh5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIStuIHx8ICErbi5zbGljZSgxKSAmJiBuLmNoYXJBdCgwKSA9PSAnNScgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVHJ1bmNhdGUgdG8gdGhlIGZpcnN0IHJvdW5kaW5nIGRpZ2l0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3VuZCggciwgci5lICsgREVDSU1BTF9QTEFDRVMgKyAyLCAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSAhci50aW1lcyhyKS5lcSh4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJvdW5kKCByLCByLmUgKyBERUNJTUFMX1BMQUNFUyArIDEsIFJPVU5ESU5HX01PREUsIG0gKTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqICBuICogMCA9IDBcbiAgICAgICAgICogIG4gKiBOID0gTlxuICAgICAgICAgKiAgbiAqIEkgPSBJXG4gICAgICAgICAqICAwICogbiA9IDBcbiAgICAgICAgICogIDAgKiAwID0gMFxuICAgICAgICAgKiAgMCAqIE4gPSBOXG4gICAgICAgICAqICAwICogSSA9IE5cbiAgICAgICAgICogIE4gKiBuID0gTlxuICAgICAgICAgKiAgTiAqIDAgPSBOXG4gICAgICAgICAqICBOICogTiA9IE5cbiAgICAgICAgICogIE4gKiBJID0gTlxuICAgICAgICAgKiAgSSAqIG4gPSBJXG4gICAgICAgICAqICBJICogMCA9IE5cbiAgICAgICAgICogIEkgKiBOID0gTlxuICAgICAgICAgKiAgSSAqIEkgPSBJXG4gICAgICAgICAqXG4gICAgICAgICAqIFJldHVybiBhIG5ldyBCaWdOdW1iZXIgd2hvc2UgdmFsdWUgaXMgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIHRpbWVzIHRoZSB2YWx1ZSBvZlxuICAgICAgICAgKiBCaWdOdW1iZXIoeSwgYikuXG4gICAgICAgICAqL1xuICAgICAgICBQLnRpbWVzID0gUC5tdWwgPSBmdW5jdGlvbiAoIHksIGIgKSB7XG4gICAgICAgICAgICB2YXIgYywgZSwgaSwgaiwgaywgbSwgeGNMLCB4bG8sIHhoaSwgeWNMLCB5bG8sIHloaSwgemMsXG4gICAgICAgICAgICAgICAgYmFzZSwgc3FydEJhc2UsXG4gICAgICAgICAgICAgICAgeCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgeGMgPSB4LmMsXG4gICAgICAgICAgICAgICAgeWMgPSAoIGlkID0gMTcsIHkgPSBuZXcgQmlnTnVtYmVyKCB5LCBiICkgKS5jO1xuXG4gICAgICAgICAgICAvLyBFaXRoZXIgTmFOLCDCsUluZmluaXR5IG9yIMKxMD9cbiAgICAgICAgICAgIGlmICggIXhjIHx8ICF5YyB8fCAheGNbMF0gfHwgIXljWzBdICkge1xuXG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIE5hTiBpZiBlaXRoZXIgaXMgTmFOLCBvciBvbmUgaXMgMCBhbmQgdGhlIG90aGVyIGlzIEluZmluaXR5LlxuICAgICAgICAgICAgICAgIGlmICggIXgucyB8fCAheS5zIHx8IHhjICYmICF4Y1swXSAmJiAheWMgfHwgeWMgJiYgIXljWzBdICYmICF4YyApIHtcbiAgICAgICAgICAgICAgICAgICAgeS5jID0geS5lID0geS5zID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB5LnMgKj0geC5zO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiDCsUluZmluaXR5IGlmIGVpdGhlciBpcyDCsUluZmluaXR5LlxuICAgICAgICAgICAgICAgICAgICBpZiAoICF4YyB8fCAheWMgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5LmMgPSB5LmUgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiDCsTAgaWYgZWl0aGVyIGlzIMKxMC5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkuYyA9IFswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHkuZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZSA9IGJpdEZsb29yKCB4LmUgLyBMT0dfQkFTRSApICsgYml0Rmxvb3IoIHkuZSAvIExPR19CQVNFICk7XG4gICAgICAgICAgICB5LnMgKj0geC5zO1xuICAgICAgICAgICAgeGNMID0geGMubGVuZ3RoO1xuICAgICAgICAgICAgeWNMID0geWMubGVuZ3RoO1xuXG4gICAgICAgICAgICAvLyBFbnN1cmUgeGMgcG9pbnRzIHRvIGxvbmdlciBhcnJheSBhbmQgeGNMIHRvIGl0cyBsZW5ndGguXG4gICAgICAgICAgICBpZiAoIHhjTCA8IHljTCApIHpjID0geGMsIHhjID0geWMsIHljID0gemMsIGkgPSB4Y0wsIHhjTCA9IHljTCwgeWNMID0gaTtcblxuICAgICAgICAgICAgLy8gSW5pdGlhbGlzZSB0aGUgcmVzdWx0IGFycmF5IHdpdGggemVyb3MuXG4gICAgICAgICAgICBmb3IgKCBpID0geGNMICsgeWNMLCB6YyA9IFtdOyBpLS07IHpjLnB1c2goMCkgKTtcblxuICAgICAgICAgICAgYmFzZSA9IEJBU0U7XG4gICAgICAgICAgICBzcXJ0QmFzZSA9IFNRUlRfQkFTRTtcblxuICAgICAgICAgICAgZm9yICggaSA9IHljTDsgLS1pID49IDA7ICkge1xuICAgICAgICAgICAgICAgIGMgPSAwO1xuICAgICAgICAgICAgICAgIHlsbyA9IHljW2ldICUgc3FydEJhc2U7XG4gICAgICAgICAgICAgICAgeWhpID0geWNbaV0gLyBzcXJ0QmFzZSB8IDA7XG5cbiAgICAgICAgICAgICAgICBmb3IgKCBrID0geGNMLCBqID0gaSArIGs7IGogPiBpOyApIHtcbiAgICAgICAgICAgICAgICAgICAgeGxvID0geGNbLS1rXSAlIHNxcnRCYXNlO1xuICAgICAgICAgICAgICAgICAgICB4aGkgPSB4Y1trXSAvIHNxcnRCYXNlIHwgMDtcbiAgICAgICAgICAgICAgICAgICAgbSA9IHloaSAqIHhsbyArIHhoaSAqIHlsbztcbiAgICAgICAgICAgICAgICAgICAgeGxvID0geWxvICogeGxvICsgKCAoIG0gJSBzcXJ0QmFzZSApICogc3FydEJhc2UgKSArIHpjW2pdICsgYztcbiAgICAgICAgICAgICAgICAgICAgYyA9ICggeGxvIC8gYmFzZSB8IDAgKSArICggbSAvIHNxcnRCYXNlIHwgMCApICsgeWhpICogeGhpO1xuICAgICAgICAgICAgICAgICAgICB6Y1tqLS1dID0geGxvICUgYmFzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB6Y1tqXSA9IGM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgICAgICAgKytlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB6Yy5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbm9ybWFsaXNlKCB5LCB6YywgZSApO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogUmV0dXJuIGEgbmV3IEJpZ051bWJlciB3aG9zZSB2YWx1ZSBpcyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgcm91bmRlZCB0byBhIG1heGltdW0gb2ZcbiAgICAgICAgICogc2Qgc2lnbmlmaWNhbnQgZGlnaXRzIHVzaW5nIHJvdW5kaW5nIG1vZGUgcm0sIG9yIFJPVU5ESU5HX01PREUgaWYgcm0gaXMgb21pdHRlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogW3NkXSB7bnVtYmVyfSBTaWduaWZpY2FudCBkaWdpdHMuIEludGVnZXIsIDEgdG8gTUFYIGluY2x1c2l2ZS5cbiAgICAgICAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxuICAgICAgICAgKlxuICAgICAgICAgKiAndG9EaWdpdHMoKSBwcmVjaXNpb24gb3V0IG9mIHJhbmdlOiB7c2R9J1xuICAgICAgICAgKiAndG9EaWdpdHMoKSBwcmVjaXNpb24gbm90IGFuIGludGVnZXI6IHtzZH0nXG4gICAgICAgICAqICd0b0RpZ2l0cygpIHJvdW5kaW5nIG1vZGUgbm90IGFuIGludGVnZXI6IHtybX0nXG4gICAgICAgICAqICd0b0RpZ2l0cygpIHJvdW5kaW5nIG1vZGUgb3V0IG9mIHJhbmdlOiB7cm19J1xuICAgICAgICAgKi9cbiAgICAgICAgUC50b0RpZ2l0cyA9IGZ1bmN0aW9uICggc2QsIHJtICkge1xuICAgICAgICAgICAgdmFyIG4gPSBuZXcgQmlnTnVtYmVyKHRoaXMpO1xuICAgICAgICAgICAgc2QgPSBzZCA9PSBudWxsIHx8ICFpc1ZhbGlkSW50KCBzZCwgMSwgTUFYLCAxOCwgJ3ByZWNpc2lvbicgKSA/IG51bGwgOiBzZCB8IDA7XG4gICAgICAgICAgICBybSA9IHJtID09IG51bGwgfHwgIWlzVmFsaWRJbnQoIHJtLCAwLCA4LCAxOCwgcm91bmRpbmdNb2RlICkgPyBST1VORElOR19NT0RFIDogcm0gfCAwO1xuICAgICAgICAgICAgcmV0dXJuIHNkID8gcm91bmQoIG4sIHNkLCBybSApIDogbjtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGluIGV4cG9uZW50aWFsIG5vdGF0aW9uIGFuZFxuICAgICAgICAgKiByb3VuZGVkIHVzaW5nIFJPVU5ESU5HX01PREUgdG8gZHAgZml4ZWQgZGVjaW1hbCBwbGFjZXMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cbiAgICAgICAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxuICAgICAgICAgKlxuICAgICAgICAgKiAndG9FeHBvbmVudGlhbCgpIGRlY2ltYWwgcGxhY2VzIG5vdCBhbiBpbnRlZ2VyOiB7ZHB9J1xuICAgICAgICAgKiAndG9FeHBvbmVudGlhbCgpIGRlY2ltYWwgcGxhY2VzIG91dCBvZiByYW5nZToge2RwfSdcbiAgICAgICAgICogJ3RvRXhwb25lbnRpYWwoKSByb3VuZGluZyBtb2RlIG5vdCBhbiBpbnRlZ2VyOiB7cm19J1xuICAgICAgICAgKiAndG9FeHBvbmVudGlhbCgpIHJvdW5kaW5nIG1vZGUgb3V0IG9mIHJhbmdlOiB7cm19J1xuICAgICAgICAgKi9cbiAgICAgICAgUC50b0V4cG9uZW50aWFsID0gZnVuY3Rpb24gKCBkcCwgcm0gKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0KCB0aGlzLFxuICAgICAgICAgICAgICBkcCAhPSBudWxsICYmIGlzVmFsaWRJbnQoIGRwLCAwLCBNQVgsIDE5ICkgPyB+fmRwICsgMSA6IG51bGwsIHJtLCAxOSApO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaW4gZml4ZWQtcG9pbnQgbm90YXRpb24gcm91bmRpbmdcbiAgICAgICAgICogdG8gZHAgZml4ZWQgZGVjaW1hbCBwbGFjZXMgdXNpbmcgcm91bmRpbmcgbW9kZSBybSwgb3IgUk9VTkRJTkdfTU9ERSBpZiBybSBpcyBvbWl0dGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBOb3RlOiBhcyB3aXRoIEphdmFTY3JpcHQncyBudW1iZXIgdHlwZSwgKC0wKS50b0ZpeGVkKDApIGlzICcwJyxcbiAgICAgICAgICogYnV0IGUuZy4gKC0wLjAwMDAxKS50b0ZpeGVkKDApIGlzICctMCcuXG4gICAgICAgICAqXG4gICAgICAgICAqIFtkcF0ge251bWJlcn0gRGVjaW1hbCBwbGFjZXMuIEludGVnZXIsIDAgdG8gTUFYIGluY2x1c2l2ZS5cbiAgICAgICAgICogW3JtXSB7bnVtYmVyfSBSb3VuZGluZyBtb2RlLiBJbnRlZ2VyLCAwIHRvIDggaW5jbHVzaXZlLlxuICAgICAgICAgKlxuICAgICAgICAgKiAndG9GaXhlZCgpIGRlY2ltYWwgcGxhY2VzIG5vdCBhbiBpbnRlZ2VyOiB7ZHB9J1xuICAgICAgICAgKiAndG9GaXhlZCgpIGRlY2ltYWwgcGxhY2VzIG91dCBvZiByYW5nZToge2RwfSdcbiAgICAgICAgICogJ3RvRml4ZWQoKSByb3VuZGluZyBtb2RlIG5vdCBhbiBpbnRlZ2VyOiB7cm19J1xuICAgICAgICAgKiAndG9GaXhlZCgpIHJvdW5kaW5nIG1vZGUgb3V0IG9mIHJhbmdlOiB7cm19J1xuICAgICAgICAgKi9cbiAgICAgICAgUC50b0ZpeGVkID0gZnVuY3Rpb24gKCBkcCwgcm0gKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0KCB0aGlzLCBkcCAhPSBudWxsICYmIGlzVmFsaWRJbnQoIGRwLCAwLCBNQVgsIDIwIClcbiAgICAgICAgICAgICAgPyB+fmRwICsgdGhpcy5lICsgMSA6IG51bGwsIHJtLCAyMCApO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgaW4gZml4ZWQtcG9pbnQgbm90YXRpb24gcm91bmRlZFxuICAgICAgICAgKiB1c2luZyBybSBvciBST1VORElOR19NT0RFIHRvIGRwIGRlY2ltYWwgcGxhY2VzLCBhbmQgZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgcHJvcGVydGllc1xuICAgICAgICAgKiBvZiB0aGUgRk9STUFUIG9iamVjdCAoc2VlIEJpZ051bWJlci5jb25maWcpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBGT1JNQVQgPSB7XG4gICAgICAgICAqICAgICAgZGVjaW1hbFNlcGFyYXRvciA6ICcuJyxcbiAgICAgICAgICogICAgICBncm91cFNlcGFyYXRvciA6ICcsJyxcbiAgICAgICAgICogICAgICBncm91cFNpemUgOiAzLFxuICAgICAgICAgKiAgICAgIHNlY29uZGFyeUdyb3VwU2l6ZSA6IDAsXG4gICAgICAgICAqICAgICAgZnJhY3Rpb25Hcm91cFNlcGFyYXRvciA6ICdcXHhBMCcsICAgIC8vIG5vbi1icmVha2luZyBzcGFjZVxuICAgICAgICAgKiAgICAgIGZyYWN0aW9uR3JvdXBTaXplIDogMFxuICAgICAgICAgKiB9O1xuICAgICAgICAgKlxuICAgICAgICAgKiBbZHBdIHtudW1iZXJ9IERlY2ltYWwgcGxhY2VzLiBJbnRlZ2VyLCAwIHRvIE1BWCBpbmNsdXNpdmUuXG4gICAgICAgICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogJ3RvRm9ybWF0KCkgZGVjaW1hbCBwbGFjZXMgbm90IGFuIGludGVnZXI6IHtkcH0nXG4gICAgICAgICAqICd0b0Zvcm1hdCgpIGRlY2ltYWwgcGxhY2VzIG91dCBvZiByYW5nZToge2RwfSdcbiAgICAgICAgICogJ3RvRm9ybWF0KCkgcm91bmRpbmcgbW9kZSBub3QgYW4gaW50ZWdlcjoge3JtfSdcbiAgICAgICAgICogJ3RvRm9ybWF0KCkgcm91bmRpbmcgbW9kZSBvdXQgb2YgcmFuZ2U6IHtybX0nXG4gICAgICAgICAqL1xuICAgICAgICBQLnRvRm9ybWF0ID0gZnVuY3Rpb24gKCBkcCwgcm0gKSB7XG4gICAgICAgICAgICB2YXIgc3RyID0gZm9ybWF0KCB0aGlzLCBkcCAhPSBudWxsICYmIGlzVmFsaWRJbnQoIGRwLCAwLCBNQVgsIDIxIClcbiAgICAgICAgICAgICAgPyB+fmRwICsgdGhpcy5lICsgMSA6IG51bGwsIHJtLCAyMSApO1xuXG4gICAgICAgICAgICBpZiAoIHRoaXMuYyApIHtcbiAgICAgICAgICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgICAgICAgICAgYXJyID0gc3RyLnNwbGl0KCcuJyksXG4gICAgICAgICAgICAgICAgICAgIGcxID0gK0ZPUk1BVC5ncm91cFNpemUsXG4gICAgICAgICAgICAgICAgICAgIGcyID0gK0ZPUk1BVC5zZWNvbmRhcnlHcm91cFNpemUsXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwU2VwYXJhdG9yID0gRk9STUFULmdyb3VwU2VwYXJhdG9yLFxuICAgICAgICAgICAgICAgICAgICBpbnRQYXJ0ID0gYXJyWzBdLFxuICAgICAgICAgICAgICAgICAgICBmcmFjdGlvblBhcnQgPSBhcnJbMV0sXG4gICAgICAgICAgICAgICAgICAgIGlzTmVnID0gdGhpcy5zIDwgMCxcbiAgICAgICAgICAgICAgICAgICAgaW50RGlnaXRzID0gaXNOZWcgPyBpbnRQYXJ0LnNsaWNlKDEpIDogaW50UGFydCxcbiAgICAgICAgICAgICAgICAgICAgbGVuID0gaW50RGlnaXRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGlmIChnMikgaSA9IGcxLCBnMSA9IGcyLCBnMiA9IGksIGxlbiAtPSBpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBnMSA+IDAgJiYgbGVuID4gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgaSA9IGxlbiAlIGcxIHx8IGcxO1xuICAgICAgICAgICAgICAgICAgICBpbnRQYXJ0ID0gaW50RGlnaXRzLnN1YnN0ciggMCwgaSApO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIDsgaSA8IGxlbjsgaSArPSBnMSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludFBhcnQgKz0gZ3JvdXBTZXBhcmF0b3IgKyBpbnREaWdpdHMuc3Vic3RyKCBpLCBnMSApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBnMiA+IDAgKSBpbnRQYXJ0ICs9IGdyb3VwU2VwYXJhdG9yICsgaW50RGlnaXRzLnNsaWNlKGkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOZWcpIGludFBhcnQgPSAnLScgKyBpbnRQYXJ0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0ciA9IGZyYWN0aW9uUGFydFxuICAgICAgICAgICAgICAgICAgPyBpbnRQYXJ0ICsgRk9STUFULmRlY2ltYWxTZXBhcmF0b3IgKyAoICggZzIgPSArRk9STUFULmZyYWN0aW9uR3JvdXBTaXplIClcbiAgICAgICAgICAgICAgICAgICAgPyBmcmFjdGlvblBhcnQucmVwbGFjZSggbmV3IFJlZ0V4cCggJ1xcXFxkeycgKyBnMiArICd9XFxcXEInLCAnZycgKSxcbiAgICAgICAgICAgICAgICAgICAgICAnJCYnICsgRk9STUFULmZyYWN0aW9uR3JvdXBTZXBhcmF0b3IgKVxuICAgICAgICAgICAgICAgICAgICA6IGZyYWN0aW9uUGFydCApXG4gICAgICAgICAgICAgICAgICA6IGludFBhcnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiBSZXR1cm4gYSBzdHJpbmcgYXJyYXkgcmVwcmVzZW50aW5nIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciBhcyBhIHNpbXBsZSBmcmFjdGlvbiB3aXRoXG4gICAgICAgICAqIGFuIGludGVnZXIgbnVtZXJhdG9yIGFuZCBhbiBpbnRlZ2VyIGRlbm9taW5hdG9yLiBUaGUgZGVub21pbmF0b3Igd2lsbCBiZSBhIHBvc2l0aXZlXG4gICAgICAgICAqIG5vbi16ZXJvIHZhbHVlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgc3BlY2lmaWVkIG1heGltdW0gZGVub21pbmF0b3IuIElmIGEgbWF4aW11bVxuICAgICAgICAgKiBkZW5vbWluYXRvciBpcyBub3Qgc3BlY2lmaWVkLCB0aGUgZGVub21pbmF0b3Igd2lsbCBiZSB0aGUgbG93ZXN0IHZhbHVlIG5lY2Vzc2FyeSB0b1xuICAgICAgICAgKiByZXByZXNlbnQgdGhlIG51bWJlciBleGFjdGx5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBbbWRdIHtudW1iZXJ8c3RyaW5nfEJpZ051bWJlcn0gSW50ZWdlciA+PSAxIGFuZCA8IEluZmluaXR5LiBUaGUgbWF4aW11bSBkZW5vbWluYXRvci5cbiAgICAgICAgICpcbiAgICAgICAgICogJ3RvRnJhY3Rpb24oKSBtYXggZGVub21pbmF0b3Igbm90IGFuIGludGVnZXI6IHttZH0nXG4gICAgICAgICAqICd0b0ZyYWN0aW9uKCkgbWF4IGRlbm9taW5hdG9yIG91dCBvZiByYW5nZToge21kfSdcbiAgICAgICAgICovXG4gICAgICAgIFAudG9GcmFjdGlvbiA9IGZ1bmN0aW9uIChtZCkge1xuICAgICAgICAgICAgdmFyIGFyciwgZDAsIGQyLCBlLCBleHAsIG4sIG4wLCBxLCBzLFxuICAgICAgICAgICAgICAgIGsgPSBFUlJPUlMsXG4gICAgICAgICAgICAgICAgeCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgeGMgPSB4LmMsXG4gICAgICAgICAgICAgICAgZCA9IG5ldyBCaWdOdW1iZXIoT05FKSxcbiAgICAgICAgICAgICAgICBuMSA9IGQwID0gbmV3IEJpZ051bWJlcihPTkUpLFxuICAgICAgICAgICAgICAgIGQxID0gbjAgPSBuZXcgQmlnTnVtYmVyKE9ORSk7XG5cbiAgICAgICAgICAgIGlmICggbWQgIT0gbnVsbCApIHtcbiAgICAgICAgICAgICAgICBFUlJPUlMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBuID0gbmV3IEJpZ051bWJlcihtZCk7XG4gICAgICAgICAgICAgICAgRVJST1JTID0gaztcblxuICAgICAgICAgICAgICAgIGlmICggISggayA9IG4uaXNJbnQoKSApIHx8IG4ubHQoT05FKSApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoRVJST1JTKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYWlzZSggMjIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdtYXggZGVub21pbmF0b3IgJyArICggayA/ICdvdXQgb2YgcmFuZ2UnIDogJ25vdCBhbiBpbnRlZ2VyJyApLCBtZCApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRVJST1JTIGlzIGZhbHNlOlxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBtZCBpcyBhIGZpbml0ZSBub24taW50ZWdlciA+PSAxLCByb3VuZCBpdCB0byBhbiBpbnRlZ2VyIGFuZCB1c2UgaXQuXG4gICAgICAgICAgICAgICAgICAgIG1kID0gIWsgJiYgbi5jICYmIHJvdW5kKCBuLCBuLmUgKyAxLCAxICkuZ3RlKE9ORSkgPyBuIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggIXhjICkgcmV0dXJuIHgudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHMgPSBjb2VmZlRvU3RyaW5nKHhjKTtcblxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGluaXRpYWwgZGVub21pbmF0b3IuXG4gICAgICAgICAgICAvLyBkIGlzIGEgcG93ZXIgb2YgMTAgYW5kIHRoZSBtaW5pbXVtIG1heCBkZW5vbWluYXRvciB0aGF0IHNwZWNpZmllcyB0aGUgdmFsdWUgZXhhY3RseS5cbiAgICAgICAgICAgIGUgPSBkLmUgPSBzLmxlbmd0aCAtIHguZSAtIDE7XG4gICAgICAgICAgICBkLmNbMF0gPSBQT1dTX1RFTlsgKCBleHAgPSBlICUgTE9HX0JBU0UgKSA8IDAgPyBMT0dfQkFTRSArIGV4cCA6IGV4cCBdO1xuICAgICAgICAgICAgbWQgPSAhbWQgfHwgbi5jbXAoZCkgPiAwID8gKCBlID4gMCA/IGQgOiBuMSApIDogbjtcblxuICAgICAgICAgICAgZXhwID0gTUFYX0VYUDtcbiAgICAgICAgICAgIE1BWF9FWFAgPSAxIC8gMDtcbiAgICAgICAgICAgIG4gPSBuZXcgQmlnTnVtYmVyKHMpO1xuXG4gICAgICAgICAgICAvLyBuMCA9IGQxID0gMFxuICAgICAgICAgICAgbjAuY1swXSA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoIDsgOyApICB7XG4gICAgICAgICAgICAgICAgcSA9IGRpdiggbiwgZCwgMCwgMSApO1xuICAgICAgICAgICAgICAgIGQyID0gZDAucGx1cyggcS50aW1lcyhkMSkgKTtcbiAgICAgICAgICAgICAgICBpZiAoIGQyLmNtcChtZCkgPT0gMSApIGJyZWFrO1xuICAgICAgICAgICAgICAgIGQwID0gZDE7XG4gICAgICAgICAgICAgICAgZDEgPSBkMjtcbiAgICAgICAgICAgICAgICBuMSA9IG4wLnBsdXMoIHEudGltZXMoIGQyID0gbjEgKSApO1xuICAgICAgICAgICAgICAgIG4wID0gZDI7XG4gICAgICAgICAgICAgICAgZCA9IG4ubWludXMoIHEudGltZXMoIGQyID0gZCApICk7XG4gICAgICAgICAgICAgICAgbiA9IGQyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkMiA9IGRpdiggbWQubWludXMoZDApLCBkMSwgMCwgMSApO1xuICAgICAgICAgICAgbjAgPSBuMC5wbHVzKCBkMi50aW1lcyhuMSkgKTtcbiAgICAgICAgICAgIGQwID0gZDAucGx1cyggZDIudGltZXMoZDEpICk7XG4gICAgICAgICAgICBuMC5zID0gbjEucyA9IHgucztcbiAgICAgICAgICAgIGUgKj0gMjtcblxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHdoaWNoIGZyYWN0aW9uIGlzIGNsb3NlciB0byB4LCBuMC9kMCBvciBuMS9kMVxuICAgICAgICAgICAgYXJyID0gZGl2KCBuMSwgZDEsIGUsIFJPVU5ESU5HX01PREUgKS5taW51cyh4KS5hYnMoKS5jbXAoXG4gICAgICAgICAgICAgICAgICBkaXYoIG4wLCBkMCwgZSwgUk9VTkRJTkdfTU9ERSApLm1pbnVzKHgpLmFicygpICkgPCAxXG4gICAgICAgICAgICAgICAgICAgID8gWyBuMS50b1N0cmluZygpLCBkMS50b1N0cmluZygpIF1cbiAgICAgICAgICAgICAgICAgICAgOiBbIG4wLnRvU3RyaW5nKCksIGQwLnRvU3RyaW5nKCkgXTtcblxuICAgICAgICAgICAgTUFYX0VYUCA9IGV4cDtcbiAgICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiBSZXR1cm4gdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGNvbnZlcnRlZCB0byBhIG51bWJlciBwcmltaXRpdmUuXG4gICAgICAgICAqL1xuICAgICAgICBQLnRvTnVtYmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHggPSB0aGlzO1xuXG4gICAgICAgICAgICAvLyBFbnN1cmUgemVybyBoYXMgY29ycmVjdCBzaWduLlxuICAgICAgICAgICAgcmV0dXJuICt4IHx8ICggeC5zID8geC5zICogMCA6IE5hTiApO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogUmV0dXJuIGEgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciByYWlzZWQgdG8gdGhlIHBvd2VyIG4uXG4gICAgICAgICAqIElmIG4gaXMgbmVnYXRpdmUgcm91bmQgYWNjb3JkaW5nIHRvIERFQ0lNQUxfUExBQ0VTIGFuZCBST1VORElOR19NT0RFLlxuICAgICAgICAgKiBJZiBQT1dfUFJFQ0lTSU9OIGlzIG5vdCAwLCByb3VuZCB0byBQT1dfUFJFQ0lTSU9OIHVzaW5nIFJPVU5ESU5HX01PREUuXG4gICAgICAgICAqXG4gICAgICAgICAqIG4ge251bWJlcn0gSW50ZWdlciwgLTkwMDcxOTkyNTQ3NDA5OTIgdG8gOTAwNzE5OTI1NDc0MDk5MiBpbmNsdXNpdmUuXG4gICAgICAgICAqIChQZXJmb3JtcyA1NCBsb29wIGl0ZXJhdGlvbnMgZm9yIG4gb2YgOTAwNzE5OTI1NDc0MDk5Mi4pXG4gICAgICAgICAqXG4gICAgICAgICAqICdwb3coKSBleHBvbmVudCBub3QgYW4gaW50ZWdlcjoge259J1xuICAgICAgICAgKiAncG93KCkgZXhwb25lbnQgb3V0IG9mIHJhbmdlOiB7bn0nXG4gICAgICAgICAqL1xuICAgICAgICBQLnRvUG93ZXIgPSBQLnBvdyA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICB2YXIgaywgeSxcbiAgICAgICAgICAgICAgICBpID0gbWF0aGZsb29yKCBuIDwgMCA/IC1uIDogK24gKSxcbiAgICAgICAgICAgICAgICB4ID0gdGhpcztcblxuICAgICAgICAgICAgLy8gUGFzcyDCsUluZmluaXR5IHRvIE1hdGgucG93IGlmIGV4cG9uZW50IGlzIG91dCBvZiByYW5nZS5cbiAgICAgICAgICAgIGlmICggIWlzVmFsaWRJbnQoIG4sIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSLCAyMywgJ2V4cG9uZW50JyApICYmXG4gICAgICAgICAgICAgICggIWlzRmluaXRlKG4pIHx8IGkgPiBNQVhfU0FGRV9JTlRFR0VSICYmICggbiAvPSAwICkgfHxcbiAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KG4pICE9IG4gJiYgISggbiA9IE5hTiApICkgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCaWdOdW1iZXIoIE1hdGgucG93KCAreCwgbiApICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRydW5jYXRpbmcgZWFjaCBjb2VmZmljaWVudCBhcnJheSB0byBhIGxlbmd0aCBvZiBrIGFmdGVyIGVhY2ggbXVsdGlwbGljYXRpb24gZXF1YXRlc1xuICAgICAgICAgICAgLy8gdG8gdHJ1bmNhdGluZyBzaWduaWZpY2FudCBkaWdpdHMgdG8gUE9XX1BSRUNJU0lPTiArIFsyOCwgNDFdLCBpLmUuIHRoZXJlIHdpbGwgYmUgYVxuICAgICAgICAgICAgLy8gbWluaW11bSBvZiAyOCBndWFyZCBkaWdpdHMgcmV0YWluZWQuIChVc2luZyArIDEuNSB3b3VsZCBnaXZlIFs5LCAyMV0gZ3VhcmQgZGlnaXRzLilcbiAgICAgICAgICAgIGsgPSBQT1dfUFJFQ0lTSU9OID8gbWF0aGNlaWwoIFBPV19QUkVDSVNJT04gLyBMT0dfQkFTRSArIDIgKSA6IDA7XG4gICAgICAgICAgICB5ID0gbmV3IEJpZ051bWJlcihPTkUpO1xuXG4gICAgICAgICAgICBmb3IgKCA7IDsgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIGkgJSAyICkge1xuICAgICAgICAgICAgICAgICAgICB5ID0geS50aW1lcyh4KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAheS5jICkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGlmICggayAmJiB5LmMubGVuZ3RoID4gayApIHkuYy5sZW5ndGggPSBrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGkgPSBtYXRoZmxvb3IoIGkgLyAyICk7XG4gICAgICAgICAgICAgICAgaWYgKCAhaSApIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgeCA9IHgudGltZXMoeCk7XG4gICAgICAgICAgICAgICAgaWYgKCBrICYmIHguYyAmJiB4LmMubGVuZ3RoID4gayApIHguYy5sZW5ndGggPSBrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIG4gPCAwICkgeSA9IE9ORS5kaXYoeSk7XG4gICAgICAgICAgICByZXR1cm4gayA/IHJvdW5kKCB5LCBQT1dfUFJFQ0lTSU9OLCBST1VORElOR19NT0RFICkgOiB5O1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdmFsdWUgb2YgdGhpcyBCaWdOdW1iZXIgcm91bmRlZCB0byBzZCBzaWduaWZpY2FudCBkaWdpdHNcbiAgICAgICAgICogdXNpbmcgcm91bmRpbmcgbW9kZSBybSBvciBST1VORElOR19NT0RFLiBJZiBzZCBpcyBsZXNzIHRoYW4gdGhlIG51bWJlciBvZiBkaWdpdHNcbiAgICAgICAgICogbmVjZXNzYXJ5IHRvIHJlcHJlc2VudCB0aGUgaW50ZWdlciBwYXJ0IG9mIHRoZSB2YWx1ZSBpbiBmaXhlZC1wb2ludCBub3RhdGlvbiwgdGhlbiB1c2VcbiAgICAgICAgICogZXhwb25lbnRpYWwgbm90YXRpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIFtzZF0ge251bWJlcn0gU2lnbmlmaWNhbnQgZGlnaXRzLiBJbnRlZ2VyLCAxIHRvIE1BWCBpbmNsdXNpdmUuXG4gICAgICAgICAqIFtybV0ge251bWJlcn0gUm91bmRpbmcgbW9kZS4gSW50ZWdlciwgMCB0byA4IGluY2x1c2l2ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogJ3RvUHJlY2lzaW9uKCkgcHJlY2lzaW9uIG5vdCBhbiBpbnRlZ2VyOiB7c2R9J1xuICAgICAgICAgKiAndG9QcmVjaXNpb24oKSBwcmVjaXNpb24gb3V0IG9mIHJhbmdlOiB7c2R9J1xuICAgICAgICAgKiAndG9QcmVjaXNpb24oKSByb3VuZGluZyBtb2RlIG5vdCBhbiBpbnRlZ2VyOiB7cm19J1xuICAgICAgICAgKiAndG9QcmVjaXNpb24oKSByb3VuZGluZyBtb2RlIG91dCBvZiByYW5nZToge3JtfSdcbiAgICAgICAgICovXG4gICAgICAgIFAudG9QcmVjaXNpb24gPSBmdW5jdGlvbiAoIHNkLCBybSApIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXQoIHRoaXMsIHNkICE9IG51bGwgJiYgaXNWYWxpZEludCggc2QsIDEsIE1BWCwgMjQsICdwcmVjaXNpb24nIClcbiAgICAgICAgICAgICAgPyBzZCB8IDAgOiBudWxsLCBybSwgMjQgKTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFJldHVybiBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHZhbHVlIG9mIHRoaXMgQmlnTnVtYmVyIGluIGJhc2UgYiwgb3IgYmFzZSAxMCBpZiBiIGlzXG4gICAgICAgICAqIG9taXR0ZWQuIElmIGEgYmFzZSBpcyBzcGVjaWZpZWQsIGluY2x1ZGluZyBiYXNlIDEwLCByb3VuZCBhY2NvcmRpbmcgdG8gREVDSU1BTF9QTEFDRVMgYW5kXG4gICAgICAgICAqIFJPVU5ESU5HX01PREUuIElmIGEgYmFzZSBpcyBub3Qgc3BlY2lmaWVkLCBhbmQgdGhpcyBCaWdOdW1iZXIgaGFzIGEgcG9zaXRpdmUgZXhwb25lbnRcbiAgICAgICAgICogdGhhdCBpcyBlcXVhbCB0byBvciBncmVhdGVyIHRoYW4gVE9fRVhQX1BPUywgb3IgYSBuZWdhdGl2ZSBleHBvbmVudCBlcXVhbCB0byBvciBsZXNzIHRoYW5cbiAgICAgICAgICogVE9fRVhQX05FRywgcmV0dXJuIGV4cG9uZW50aWFsIG5vdGF0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBbYl0ge251bWJlcn0gSW50ZWdlciwgMiB0byA2NCBpbmNsdXNpdmUuXG4gICAgICAgICAqXG4gICAgICAgICAqICd0b1N0cmluZygpIGJhc2Ugbm90IGFuIGludGVnZXI6IHtifSdcbiAgICAgICAgICogJ3RvU3RyaW5nKCkgYmFzZSBvdXQgb2YgcmFuZ2U6IHtifSdcbiAgICAgICAgICovXG4gICAgICAgIFAudG9TdHJpbmcgPSBmdW5jdGlvbiAoYikge1xuICAgICAgICAgICAgdmFyIHN0cixcbiAgICAgICAgICAgICAgICBuID0gdGhpcyxcbiAgICAgICAgICAgICAgICBzID0gbi5zLFxuICAgICAgICAgICAgICAgIGUgPSBuLmU7XG5cbiAgICAgICAgICAgIC8vIEluZmluaXR5IG9yIE5hTj9cbiAgICAgICAgICAgIGlmICggZSA9PT0gbnVsbCApIHtcblxuICAgICAgICAgICAgICAgIGlmIChzKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ciA9ICdJbmZpbml0eSc7XG4gICAgICAgICAgICAgICAgICAgIGlmICggcyA8IDAgKSBzdHIgPSAnLScgKyBzdHI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gJ05hTic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHIgPSBjb2VmZlRvU3RyaW5nKCBuLmMgKTtcblxuICAgICAgICAgICAgICAgIGlmICggYiA9PSBudWxsIHx8ICFpc1ZhbGlkSW50KCBiLCAyLCA2NCwgMjUsICdiYXNlJyApICkge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBlIDw9IFRPX0VYUF9ORUcgfHwgZSA+PSBUT19FWFBfUE9TXG4gICAgICAgICAgICAgICAgICAgICAgPyB0b0V4cG9uZW50aWFsKCBzdHIsIGUgKVxuICAgICAgICAgICAgICAgICAgICAgIDogdG9GaXhlZFBvaW50KCBzdHIsIGUgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHIgPSBjb252ZXJ0QmFzZSggdG9GaXhlZFBvaW50KCBzdHIsIGUgKSwgYiB8IDAsIDEwLCBzICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCBzIDwgMCAmJiBuLmNbMF0gKSBzdHIgPSAnLScgKyBzdHI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvKlxuICAgICAgICAgKiBSZXR1cm4gYSBuZXcgQmlnTnVtYmVyIHdob3NlIHZhbHVlIGlzIHRoZSB2YWx1ZSBvZiB0aGlzIEJpZ051bWJlciB0cnVuY2F0ZWQgdG8gYSB3aG9sZVxuICAgICAgICAgKiBudW1iZXIuXG4gICAgICAgICAqL1xuICAgICAgICBQLnRydW5jYXRlZCA9IFAudHJ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQoIG5ldyBCaWdOdW1iZXIodGhpcyksIHRoaXMuZSArIDEsIDEgKTtcbiAgICAgICAgfTtcblxuXG5cbiAgICAgICAgLypcbiAgICAgICAgICogUmV0dXJuIGFzIHRvU3RyaW5nLCBidXQgZG8gbm90IGFjY2VwdCBhIGJhc2UgYXJndW1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICBQLnZhbHVlT2YgPSBQLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gICAgICAgIH07XG5cblxuICAgICAgICAvLyBBbGlhc2VzIGZvciBCaWdEZWNpbWFsIG1ldGhvZHMuXG4gICAgICAgIC8vUC5hZGQgPSBQLnBsdXM7ICAgICAgICAgLy8gUC5hZGQgaW5jbHVkZWQgYWJvdmVcbiAgICAgICAgLy9QLnN1YnRyYWN0ID0gUC5taW51czsgICAvLyBQLnN1YiBpbmNsdWRlZCBhYm92ZVxuICAgICAgICAvL1AubXVsdGlwbHkgPSBQLnRpbWVzOyAgIC8vIFAubXVsIGluY2x1ZGVkIGFib3ZlXG4gICAgICAgIC8vUC5kaXZpZGUgPSBQLmRpdjtcbiAgICAgICAgLy9QLnJlbWFpbmRlciA9IFAubW9kO1xuICAgICAgICAvL1AuY29tcGFyZVRvID0gUC5jbXA7XG4gICAgICAgIC8vUC5uZWdhdGUgPSBQLm5lZztcblxuXG4gICAgICAgIGlmICggY29uZmlnT2JqICE9IG51bGwgKSBCaWdOdW1iZXIuY29uZmlnKGNvbmZpZ09iaik7XG5cbiAgICAgICAgcmV0dXJuIEJpZ051bWJlcjtcbiAgICB9XG5cblxuICAgIC8vIFBSSVZBVEUgSEVMUEVSIEZVTkNUSU9OU1xuXG5cbiAgICBmdW5jdGlvbiBiaXRGbG9vcihuKSB7XG4gICAgICAgIHZhciBpID0gbiB8IDA7XG4gICAgICAgIHJldHVybiBuID4gMCB8fCBuID09PSBpID8gaSA6IGkgLSAxO1xuICAgIH1cblxuXG4gICAgLy8gUmV0dXJuIGEgY29lZmZpY2llbnQgYXJyYXkgYXMgYSBzdHJpbmcgb2YgYmFzZSAxMCBkaWdpdHMuXG4gICAgZnVuY3Rpb24gY29lZmZUb1N0cmluZyhhKSB7XG4gICAgICAgIHZhciBzLCB6LFxuICAgICAgICAgICAgaSA9IDEsXG4gICAgICAgICAgICBqID0gYS5sZW5ndGgsXG4gICAgICAgICAgICByID0gYVswXSArICcnO1xuXG4gICAgICAgIGZvciAoIDsgaSA8IGo7ICkge1xuICAgICAgICAgICAgcyA9IGFbaSsrXSArICcnO1xuICAgICAgICAgICAgeiA9IExPR19CQVNFIC0gcy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKCA7IHotLTsgcyA9ICcwJyArIHMgKTtcbiAgICAgICAgICAgIHIgKz0gcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERldGVybWluZSB0cmFpbGluZyB6ZXJvcy5cbiAgICAgICAgZm9yICggaiA9IHIubGVuZ3RoOyByLmNoYXJDb2RlQXQoLS1qKSA9PT0gNDg7ICk7XG4gICAgICAgIHJldHVybiByLnNsaWNlKCAwLCBqICsgMSB8fCAxICk7XG4gICAgfVxuXG5cbiAgICAvLyBDb21wYXJlIHRoZSB2YWx1ZSBvZiBCaWdOdW1iZXJzIHggYW5kIHkuXG4gICAgZnVuY3Rpb24gY29tcGFyZSggeCwgeSApIHtcbiAgICAgICAgdmFyIGEsIGIsXG4gICAgICAgICAgICB4YyA9IHguYyxcbiAgICAgICAgICAgIHljID0geS5jLFxuICAgICAgICAgICAgaSA9IHgucyxcbiAgICAgICAgICAgIGogPSB5LnMsXG4gICAgICAgICAgICBrID0geC5lLFxuICAgICAgICAgICAgbCA9IHkuZTtcblxuICAgICAgICAvLyBFaXRoZXIgTmFOP1xuICAgICAgICBpZiAoICFpIHx8ICFqICkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgYSA9IHhjICYmICF4Y1swXTtcbiAgICAgICAgYiA9IHljICYmICF5Y1swXTtcblxuICAgICAgICAvLyBFaXRoZXIgemVybz9cbiAgICAgICAgaWYgKCBhIHx8IGIgKSByZXR1cm4gYSA/IGIgPyAwIDogLWogOiBpO1xuXG4gICAgICAgIC8vIFNpZ25zIGRpZmZlcj9cbiAgICAgICAgaWYgKCBpICE9IGogKSByZXR1cm4gaTtcblxuICAgICAgICBhID0gaSA8IDA7XG4gICAgICAgIGIgPSBrID09IGw7XG5cbiAgICAgICAgLy8gRWl0aGVyIEluZmluaXR5P1xuICAgICAgICBpZiAoICF4YyB8fCAheWMgKSByZXR1cm4gYiA/IDAgOiAheGMgXiBhID8gMSA6IC0xO1xuXG4gICAgICAgIC8vIENvbXBhcmUgZXhwb25lbnRzLlxuICAgICAgICBpZiAoICFiICkgcmV0dXJuIGsgPiBsIF4gYSA/IDEgOiAtMTtcblxuICAgICAgICBqID0gKCBrID0geGMubGVuZ3RoICkgPCAoIGwgPSB5Yy5sZW5ndGggKSA/IGsgOiBsO1xuXG4gICAgICAgIC8vIENvbXBhcmUgZGlnaXQgYnkgZGlnaXQuXG4gICAgICAgIGZvciAoIGkgPSAwOyBpIDwgajsgaSsrICkgaWYgKCB4Y1tpXSAhPSB5Y1tpXSApIHJldHVybiB4Y1tpXSA+IHljW2ldIF4gYSA/IDEgOiAtMTtcblxuICAgICAgICAvLyBDb21wYXJlIGxlbmd0aHMuXG4gICAgICAgIHJldHVybiBrID09IGwgPyAwIDogayA+IGwgXiBhID8gMSA6IC0xO1xuICAgIH1cblxuXG4gICAgLypcbiAgICAgKiBSZXR1cm4gdHJ1ZSBpZiBuIGlzIGEgdmFsaWQgbnVtYmVyIGluIHJhbmdlLCBvdGhlcndpc2UgZmFsc2UuXG4gICAgICogVXNlIGZvciBhcmd1bWVudCB2YWxpZGF0aW9uIHdoZW4gRVJST1JTIGlzIGZhbHNlLlxuICAgICAqIE5vdGU6IHBhcnNlSW50KCcxZSsxJykgPT0gMSBidXQgcGFyc2VGbG9hdCgnMWUrMScpID09IDEwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGludFZhbGlkYXRvck5vRXJyb3JzKCBuLCBtaW4sIG1heCApIHtcbiAgICAgICAgcmV0dXJuICggbiA9IHRydW5jYXRlKG4pICkgPj0gbWluICYmIG4gPD0gbWF4O1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gaXNBcnJheShvYmopIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgfVxuXG5cbiAgICAvKlxuICAgICAqIENvbnZlcnQgc3RyaW5nIG9mIGJhc2VJbiB0byBhbiBhcnJheSBvZiBudW1iZXJzIG9mIGJhc2VPdXQuXG4gICAgICogRWcuIGNvbnZlcnRCYXNlKCcyNTUnLCAxMCwgMTYpIHJldHVybnMgWzE1LCAxNV0uXG4gICAgICogRWcuIGNvbnZlcnRCYXNlKCdmZicsIDE2LCAxMCkgcmV0dXJucyBbMiwgNSwgNV0uXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9CYXNlT3V0KCBzdHIsIGJhc2VJbiwgYmFzZU91dCApIHtcbiAgICAgICAgdmFyIGosXG4gICAgICAgICAgICBhcnIgPSBbMF0sXG4gICAgICAgICAgICBhcnJMLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBsZW4gPSBzdHIubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoIDsgaSA8IGxlbjsgKSB7XG4gICAgICAgICAgICBmb3IgKCBhcnJMID0gYXJyLmxlbmd0aDsgYXJyTC0tOyBhcnJbYXJyTF0gKj0gYmFzZUluICk7XG4gICAgICAgICAgICBhcnJbIGogPSAwIF0gKz0gQUxQSEFCRVQuaW5kZXhPZiggc3RyLmNoYXJBdCggaSsrICkgKTtcblxuICAgICAgICAgICAgZm9yICggOyBqIDwgYXJyLmxlbmd0aDsgaisrICkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCBhcnJbal0gPiBiYXNlT3V0IC0gMSApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBhcnJbaiArIDFdID09IG51bGwgKSBhcnJbaiArIDFdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYXJyW2ogKyAxXSArPSBhcnJbal0gLyBiYXNlT3V0IHwgMDtcbiAgICAgICAgICAgICAgICAgICAgYXJyW2pdICU9IGJhc2VPdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFyci5yZXZlcnNlKCk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiB0b0V4cG9uZW50aWFsKCBzdHIsIGUgKSB7XG4gICAgICAgIHJldHVybiAoIHN0ci5sZW5ndGggPiAxID8gc3RyLmNoYXJBdCgwKSArICcuJyArIHN0ci5zbGljZSgxKSA6IHN0ciApICtcbiAgICAgICAgICAoIGUgPCAwID8gJ2UnIDogJ2UrJyApICsgZTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHRvRml4ZWRQb2ludCggc3RyLCBlICkge1xuICAgICAgICB2YXIgbGVuLCB6O1xuXG4gICAgICAgIC8vIE5lZ2F0aXZlIGV4cG9uZW50P1xuICAgICAgICBpZiAoIGUgPCAwICkge1xuXG4gICAgICAgICAgICAvLyBQcmVwZW5kIHplcm9zLlxuICAgICAgICAgICAgZm9yICggeiA9ICcwLic7ICsrZTsgeiArPSAnMCcgKTtcbiAgICAgICAgICAgIHN0ciA9IHogKyBzdHI7XG5cbiAgICAgICAgLy8gUG9zaXRpdmUgZXhwb25lbnRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlbiA9IHN0ci5sZW5ndGg7XG5cbiAgICAgICAgICAgIC8vIEFwcGVuZCB6ZXJvcy5cbiAgICAgICAgICAgIGlmICggKytlID4gbGVuICkge1xuICAgICAgICAgICAgICAgIGZvciAoIHogPSAnMCcsIGUgLT0gbGVuOyAtLWU7IHogKz0gJzAnICk7XG4gICAgICAgICAgICAgICAgc3RyICs9IHo7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBlIDwgbGVuICkge1xuICAgICAgICAgICAgICAgIHN0ciA9IHN0ci5zbGljZSggMCwgZSApICsgJy4nICsgc3RyLnNsaWNlKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHRydW5jYXRlKG4pIHtcbiAgICAgICAgbiA9IHBhcnNlRmxvYXQobik7XG4gICAgICAgIHJldHVybiBuIDwgMCA/IG1hdGhjZWlsKG4pIDogbWF0aGZsb29yKG4pO1xuICAgIH1cblxuXG4gICAgLy8gRVhQT1JUXG5cblxuICAgIEJpZ051bWJlciA9IGFub3RoZXIoKTtcblxuICAgIC8vIEFNRC5cbiAgICBpZiAoIHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgICAgICBkZWZpbmUoIGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJpZ051bWJlcjsgfSApO1xuXG4gICAgLy8gTm9kZSBhbmQgb3RoZXIgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cy5cbiAgICB9IGVsc2UgaWYgKCB0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IEJpZ051bWJlcjtcbiAgICAgICAgaWYgKCAhY3J5cHRvICkgdHJ5IHsgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7IH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAvLyBCcm93c2VyLlxuICAgIH0gZWxzZSB7XG4gICAgICAgIGdsb2JhbC5CaWdOdW1iZXIgPSBCaWdOdW1iZXI7XG4gICAgfVxufSkodGhpcyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFhNTEh0dHBSZXF1ZXN0O1xuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcImNvbnRyYWN0X25hbWVcIjogXCJhZ2VudFwiLFxuICBcImFiaVwiOiBbXG4gICAge1xuICAgICAgXCJjb25zdGFudFwiOiBmYWxzZSxcbiAgICAgIFwiaW5wdXRzXCI6IFtdLFxuICAgICAgXCJuYW1lXCI6IFwicHJvbWV0aEV4ZWN1dGVcIixcbiAgICAgIFwib3V0cHV0c1wiOiBbXSxcbiAgICAgIFwicGF5YWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29uc3RhbnRcIjogdHJ1ZSxcbiAgICAgIFwiaW5wdXRzXCI6IFtdLFxuICAgICAgXCJuYW1lXCI6IFwicHJvbWV0aENvc3RcIixcbiAgICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MTI4XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQxMjhcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJwYXlhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICAgIH1cbiAgXSxcbiAgXCJ1bmxpbmtlZF9iaW5hcnlcIjogXCIweDYwNjA2MDQwNTIzNDE1NjEwMDBmNTc2MDAwODBmZDViNWI2MGNjODA2MTAwMWU2MDAwMzk2MDAwZjMwMDYwNjA2MDQwNTI2M2ZmZmZmZmZmN2MwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwNjAwMDM1MDQxNjYzNDY4NjAzMGY4MTE0NjA0NjU3ODA2M2I0Nzg4ODZkMTQ2MDU4NTc1YjYwMDA4MGZkNWIzNDE1NjA1MDU3NjAwMDgwZmQ1YjYwNTY2MDk1NTY1YjAwNWIzNDE1NjA2MjU3NjAwMDgwZmQ1YjYwNjg2MDk4NTY1YjYwNDA1MTZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmY5MjgzMTY4MTUyOTExNjYwMjA4MjAxNTI2MDQwOTA4MTAxOTA1MTgwOTEwMzkwZjM1YjViNTY1YjYwMDA4MDViOTA5MTU2MDBhMTY1NjI3YTdhNzIzMDU4MjBiNGNjMTc0ZTllN2MxYjQ4MGY5ZjYwMWZlMzZkZTEzMWQzYTRmMGYwNmNlZjg5N2ZlNzE1NjdiYjkwNWY2M2JjMDAyOVwiLFxuICBcIm5ldHdvcmtzXCI6IHt9LFxuICBcInNjaGVtYV92ZXJzaW9uXCI6IFwiMC4wLjVcIixcbiAgXCJ1cGRhdGVkX2F0XCI6IDE1MDgwNTIxMjQ3Mzdcbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwiY29udHJhY3RfbmFtZVwiOiBcInByb21ldGhcIixcbiAgXCJhYmlcIjogW1xuICAgIHtcbiAgICAgIFwiY29uc3RhbnRcIjogdHJ1ZSxcbiAgICAgIFwiaW5wdXRzXCI6IFtdLFxuICAgICAgXCJuYW1lXCI6IFwicHJvbWV0aEFnZW50XCIsXG4gICAgICBcIm91dHB1dHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiXCIsXG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInBheWFibGVcIjogZmFsc2UsXG4gICAgICBcInR5cGVcIjogXCJmdW5jdGlvblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvbnN0YW50XCI6IGZhbHNlLFxuICAgICAgXCJpbnB1dHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiZXhwZWN0ZWRHYXNcIixcbiAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MTI4XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcImV4cGVjdGVkUGF5b3V0XCIsXG4gICAgICAgICAgXCJ0eXBlXCI6IFwidWludDEyOFwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcIm5hbWVcIjogXCJleGVjdXRlXCIsXG4gICAgICBcIm91dHB1dHNcIjogW10sXG4gICAgICBcInBheWFibGVcIjogZmFsc2UsXG4gICAgICBcInR5cGVcIjogXCJmdW5jdGlvblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImNvbnN0YW50XCI6IGZhbHNlLFxuICAgICAgXCJpbnB1dHNcIjogW10sXG4gICAgICBcIm5hbWVcIjogXCJsb2FkRnVuZHNcIixcbiAgICAgIFwib3V0cHV0c1wiOiBbXSxcbiAgICAgIFwicGF5YWJsZVwiOiB0cnVlLFxuICAgICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb25zdGFudFwiOiB0cnVlLFxuICAgICAgXCJpbnB1dHNcIjogW10sXG4gICAgICBcIm5hbWVcIjogXCJsb29rdXBcIixcbiAgICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MTI4XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQxMjhcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJwYXlhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpbnB1dHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiX2NvbnRyYWN0QWRkcmVzc1wiLFxuICAgICAgICAgIFwidHlwZVwiOiBcImFkZHJlc3NcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJwYXlhYmxlXCI6IHRydWUsXG4gICAgICBcInR5cGVcIjogXCJjb25zdHJ1Y3RvclwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInBheWFibGVcIjogdHJ1ZSxcbiAgICAgIFwidHlwZVwiOiBcImZhbGxiYWNrXCJcbiAgICB9XG4gIF0sXG4gIFwidW5saW5rZWRfYmluYXJ5XCI6IFwiMHg2MDYwNjA0MDUyNjA0MDUxNjAyMDgwNjEwMzY1ODMzOTgxMDE2MDQwNTI4MDgwNTE5MTUwNTA1YjYwMDA4MDU0NjAwMTYwYTA2MDAyMGEwMzE5MTY2MDAxNjBhMDYwMDIwYTAzODMxNjE3OTA1NTViNTA1YjYxMDMxZDgwNjEwMDQ4NjAwMDM5NjAwMGYzMDA2MDYwNjA0MDUyMzYxNTYxMDA0NjU3NjNmZmZmZmZmZjYwZTA2MDAyMGE2MDAwMzUwNDE2NjM1NDM3MGJjYjgxMTQ2MTAwNGE1NzgwNjM5YWMxNzA1NzE0NjEwMDc5NTc4MDYzYjJmM2QyOTkxNDYxMDBhMDU3ODA2M2Y1ZTM1NDJiMTQ2MTAwYWE1NzViNWI1YjAwNWIzNDE1NjEwMDU1NTc2MDAwODBmZDViNjEwMDVkNjEwMGUxNTY1YjYwNDA1MTYwMDE2MGEwNjAwMjBhMDM5MDkxMTY4MTUyNjAyMDAxNjA0MDUxODA5MTAzOTBmMzViMzQxNTYxMDA4NDU3NjAwMDgwZmQ1YjYxMDA0NjYwMDE2MDgwNjAwMjBhMDM2MDA0MzU4MTE2OTA2MDI0MzUxNjYxMDBmMDU2NWIwMDViNjEwMDQ2NjEwMjY5NTY1YjAwNWIzNDE1NjEwMGI1NTc2MDAwODBmZDViNjEwMGJkNjEwMjZjNTY1YjYwNDA1MTYwMDE2MDgwNjAwMjBhMDM5MjgzMTY4MTUyOTExNjYwMjA4MjAxNTI2MDQwOTA4MTAxOTA1MTgwOTEwMzkwZjM1YjYwMDA1NDYwMDE2MGEwNjAwMjBhMDMxNjgxNTY1YjYwMDA4MDU0ODE5MDYwMDE2MGEwNjAwMjBhMDMxNjYzYjQ3ODg4NmQ2MTA3ZDA2MDQwNTE4MjYzZmZmZmZmZmYxNjYwZTA2MDAyMGEwMjgxNTI2MDA0MDE2MDQwODA1MTgwODMwMzgxNjAwMDg4ODAzYjE1MTU2MTAxMzQ1NzYwMDA4MGZkNWI4N2YxMTUxNTYxMDE0MTU3NjAwMDgwZmQ1YjUwNTA1MDUwNjA0MDUxODA1MTkwNjAyMDAxODA1MTkwNTA5MTUwOTE1MDMwNjAwMTYwYTA2MDAyMGEwMzE2MzE4MzYwMDE2MDgwNjAwMjBhMDMxNjExODA2MTAxODg1NzUwODI2MDAxNjA4MDYwMDIwYTAzMTY4MTYwMDE2MDgwNjAwMjBhMDMxNjEwNWI4MDYxMDFhODU3NTA4MTYxZWE2MDAxNjAwMTYwODA2MDAyMGEwMzE2ODQ2MDAxNjA4MDYwMDIwYTAzMTYxMDViODA2MTAxYmY1NzUwODE2MTYxYTgwMTYwMDE2MDgwNjAwMjBhMDMxNjVhMTA1YjE1NjEwMWM5NTc2MTAyNjM1NjViNjAwMTYwYTA2MDAyMGEwMzMzMTY2MDAxNjA4MDYwMDIwYTAzODIxNjgwMTU2MTA4ZmMwMjkwNjA0MDUxNjAwMDYwNDA1MTgwODMwMzgxODU4ODg4ZjE5MzUwNTA1MDUwMTUxNTYxMDIwNDU3NjAwMDgwZmQ1YjYwMDA1NDYwMDE2MGEwNjAwMjBhMDMxNjYzNDY4NjAzMGY2MDAxNjA4MDYwMDIwYTAzNjEwM2U4ODUwMTE2NjA0MDUxODI2M2ZmZmZmZmZmMTY2MGUwNjAwMjBhMDI4MTUyNjAwNDAxNjAwMDYwNDA1MTgwODMwMzgxNjAwMDg4ODAzYjE1MTU2MTAyNTE1NzYwMDA4MGZkNWI4N2YxMTUxNTYxMDI1ZTU3NjAwMDgwZmQ1YjUwNTA1MDUwNWI1MDUwNTA1MDU2NWI1YjU2NWI2MDAwODA1NDgxOTA4MTkwODE5MDYwMDE2MGEwNjAwMjBhMDMxNjYzYjQ3ODg4NmQ4MjYwNDA1MTYwNDAwMTUyNjA0MDUxODE2M2ZmZmZmZmZmMTY2MGUwNjAwMjBhMDI4MTUyNjAwNDAxNjA0MDgwNTE4MDgzMDM4MTYwMDA4NzgwM2IxNTE1NjEwMmI5NTc2MDAwODBmZDViNjEwMmM2NWEwM2YxMTUxNTYxMDJjYTU3NjAwMDgwZmQ1YjUwNTA1MDYwNDA1MTgwNTE5MDYwMjAwMTgwNTE2MWVhNjA5MDkyMDE5NTUwOTA5MzUwODQ5MjUwODM5MTUwNTA1YjUwNTA5MDkxNTYwMGExNjU2MjdhN2E3MjMwNTgyMDJiOGZkNmQ0Yjk0OGI4YmQ5MjMwMjJkNTg4NWRkNjQ4ZTQwYTNkZTc3NWY5MjAyMDhmMWI5MzNjNTM0OTk5YjkwMDI5XCIsXG4gIFwibmV0d29ya3NcIjoge1xuICAgIFwiMTUwNzk5MTEzOTk4M1wiOiB7XG4gICAgICBcImV2ZW50c1wiOiB7fSxcbiAgICAgIFwibGlua3NcIjoge30sXG4gICAgICBcImFkZHJlc3NcIjogXCIweDM1ODQwYzAwOWM3ZGFiNTQ0ZmMzMGVmMTliZjk3ZjU2ZWQzNmUzNjBcIixcbiAgICAgIFwidXBkYXRlZF9hdFwiOiAxNTA3OTkxMzU3ODEzXG4gICAgfSxcbiAgICBcIjE1MDc5OTIxOTU1OTRcIjoge1xuICAgICAgXCJldmVudHNcIjoge30sXG4gICAgICBcImxpbmtzXCI6IHt9LFxuICAgICAgXCJhZGRyZXNzXCI6IFwiMHgwMzEyY2Y3ZTA1NjFhZGY5NDExNjVmY2MxYjcxNTljNjU4MGYwM2Q0XCIsXG4gICAgICBcInVwZGF0ZWRfYXRcIjogMTUwNzk5MjIwNjc4MFxuICAgIH0sXG4gICAgXCIxNTA3OTkzMjE4Mzk4XCI6IHtcbiAgICAgIFwiZXZlbnRzXCI6IHt9LFxuICAgICAgXCJsaW5rc1wiOiB7fSxcbiAgICAgIFwiYWRkcmVzc1wiOiBcIjB4ZWYwZDY0YjJjNWJiYzgzMjMwOTgyMTAyYjcwYzk2YjE1MDVjYTBiOVwiLFxuICAgICAgXCJ1cGRhdGVkX2F0XCI6IDE1MDc5OTMyMjE4NDBcbiAgICB9XG4gIH0sXG4gIFwic2NoZW1hX3ZlcnNpb25cIjogXCIwLjAuNVwiLFxuICBcInVwZGF0ZWRfYXRcIjogMTUwODA1MjEyNDc0MVxufSIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJjb250cmFjdF9uYW1lXCI6IFwicHJvbWV0aGV1c1wiLFxuICBcImFiaVwiOiBbXG4gICAge1xuICAgICAgXCJjb25zdGFudFwiOiBmYWxzZSxcbiAgICAgIFwiaW5wdXRzXCI6IFtdLFxuICAgICAgXCJuYW1lXCI6IFwic2F5SGlcIixcbiAgICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJwYXlhYmxlXCI6IGZhbHNlLFxuICAgICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJjb25zdGFudFwiOiB0cnVlLFxuICAgICAgXCJpbnB1dHNcIjogW10sXG4gICAgICBcIm5hbWVcIjogXCJwcm9tZXRoQ291bnRcIixcbiAgICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicGF5YWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29uc3RhbnRcIjogdHJ1ZSxcbiAgICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwibmFtZVwiOiBcIlwiLFxuICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJuYW1lXCI6IFwicHJvbWV0aHNcIixcbiAgICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICBcInR5cGVcIjogXCJhZGRyZXNzXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwicGF5YWJsZVwiOiBmYWxzZSxcbiAgICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiY29uc3RhbnRcIjogZmFsc2UsXG4gICAgICBcImlucHV0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcIm5hbWVcIjogXCJfY29udHJhY3RBZGRyZXNzXCIsXG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcIm5hbWVcIjogXCJjcmVhdGVQcm9tZXRoXCIsXG4gICAgICBcIm91dHB1dHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiXCIsXG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInBheWFibGVcIjogZmFsc2UsXG4gICAgICBcInR5cGVcIjogXCJmdW5jdGlvblwiXG4gICAgfVxuICBdLFxuICBcInVubGlua2VkX2JpbmFyeVwiOiBcIjB4NjA2MDYwNDA1MjM0MTU2MTAwMGY1NzYwMDA4MGZkNWI1YjYxMDY3MzgwNjEwMDFmNjAwMDM5NjAwMGYzMDA2MDYwNjA0MDUyNjNmZmZmZmZmZjdjMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDYwMDAzNTA0MTY2MzBjNDljMzZjODExNDYxMDA1ZTU3ODA2M2ExMjMwMWY1MTQ2MTAwZTk1NzgwNjNhZGQwNmQ0YzE0NjEwMTBlNTc4MDYzZWZjZTA2ODgxNDYxMDE0MDU3NWI2MDAwODBmZDViMzQxNTYxMDA2OTU3NjAwMDgwZmQ1YjYxMDA3MTYxMDE3YjU2NWI2MDQwNTE2MDIwODA4MjUyODE5MDgxMDE4MzgxODE1MTgxNTI2MDIwMDE5MTUwODA1MTkwNjAyMDAxOTA4MDgzODM2MDAwNWI4MzgxMTAxNTYxMDBhZTU3ODA4MjAxNTE4MTg0MDE1MjViNjAyMDAxNjEwMDk1NTY1YjUwNTA1MDUwOTA1MDkwODEwMTkwNjAxZjE2ODAxNTYxMDBkYjU3ODA4MjAzODA1MTYwMDE4MzYwMjAwMzYxMDEwMDBhMDMxOTE2ODE1MjYwMjAwMTkxNTA1YjUwOTI1MDUwNTA2MDQwNTE4MDkxMDM5MGYzNWIzNDE1NjEwMGY0NTc2MDAwODBmZDViNjEwMGZjNjEwMWJkNTY1YjYwNDA1MTkwODE1MjYwMjAwMTYwNDA1MTgwOTEwMzkwZjM1YjM0MTU2MTAxMTk1NzYwMDA4MGZkNWI2MTAxMjQ2MDA0MzU2MTAxYzQ1NjViNjA0MDUxNjAwMTYwYTA2MDAyMGEwMzkwOTExNjgxNTI2MDIwMDE2MDQwNTE4MDkxMDM5MGYzNWIzNDE1NjEwMTRiNTc2MDAwODBmZDViNjEwMTI0NjAwMTYwYTA2MDAyMGEwMzYwMDQzNTE2NjEwMWY2NTY1YjYwNDA1MTYwMDE2MGEwNjAwMjBhMDM5MDkxMTY4MTUyNjAyMDAxNjA0MDUxODA5MTAzOTBmMzViNjEwMTgzNjEwMjc1NTY1YjYwNDA4MDUxOTA4MTAxNjA0MDUyNjAwYzgxNTI3ZjQ4NjU2YzZjNmYyMDc3NmY3MjZjNjQyMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2MDIwODIwMTUyOTA1MDViOTA1NjViNjAwMDU0NWI5MDU2NWI2MDAwODA1NDgyOTA4MTEwNjEwMWQyNTdmZTViOTA2MDAwNTI2MDIwNjAwMDIwOTAwMTYwMDA1YjkxNTA1NDkwNjEwMTAwMGE5MDA0NjAwMTYwYTA2MDAyMGEwMzE2ODE1NjViNjAwMDgwODI2MTAyMDI2MTAyODc1NjViNjAwMTYwYTA2MDAyMGEwMzkwOTExNjgxNTI2MDIwMDE2MDQwNTE4MDkxMDM5MDYwMDBmMDgwMTUxNTYxMDIyODU3NjAwMDgwZmQ1YjkwNTA2MDAwODA1NDgwNjAwMTAxODI4MTYxMDIzZTkxOTA2MTAyOTc1NjViOTE2MDAwNTI2MDIwNjAwMDIwOTAwMTYwMDA1YjgxNTQ2MDAxNjBhMDYwMDIwYTAzODA4NjE2NjEwMTAwOTM5MDkzMGE5MjgzMDI5MjAyMTkxNjE3OTA1NTUwOTA1MDgwNWI1MDkxOTA1MDU2NWI2MDIwNjA0MDUxOTA4MTAxNjA0MDUyNjAwMDgxNTI5MDU2NWI2MDQwNTE2MTAzNjU4MDYxMDJlMzgzMzkwMTkwNTY1YjgxNTQ4MTgzNTU4MTgxMTUxMTYxMDJiYjU3NjAwMDgzODE1MjYwMjA5MDIwNjEwMmJiOTE4MTAxOTA4MzAxNjEwMmMxNTY1YjViNTA1MDUwNTY1YjYxMDFiYTkxOTA1YjgwODIxMTE1NjEwMmRiNTc2MDAwODE1NTYwMDEwMTYxMDJjNzU2NWI1MDkwNTY1YjkwNTYwMDYwNjA2MDQwNTI2MDQwNTE2MDIwODA2MTAzNjU4MzM5ODEwMTYwNDA1MjgwODA1MTkxNTA1MDViNjAwMDgwNTQ2MDAxNjBhMDYwMDIwYTAzMTkxNjYwMDE2MGEwNjAwMjBhMDM4MzE2MTc5MDU1NWI1MDViNjEwMzFkODA2MTAwNDg2MDAwMzk2MDAwZjMwMDYwNjA2MDQwNTIzNjE1NjEwMDQ2NTc2M2ZmZmZmZmZmNjBlMDYwMDIwYTYwMDAzNTA0MTY2MzU0MzcwYmNiODExNDYxMDA0YTU3ODA2MzlhYzE3MDU3MTQ2MTAwNzk1NzgwNjNiMmYzZDI5OTE0NjEwMGEwNTc4MDYzZjVlMzU0MmIxNDYxMDBhYTU3NWI1YjViMDA1YjM0MTU2MTAwNTU1NzYwMDA4MGZkNWI2MTAwNWQ2MTAwZTE1NjViNjA0MDUxNjAwMTYwYTA2MDAyMGEwMzkwOTExNjgxNTI2MDIwMDE2MDQwNTE4MDkxMDM5MGYzNWIzNDE1NjEwMDg0NTc2MDAwODBmZDViNjEwMDQ2NjAwMTYwODA2MDAyMGEwMzYwMDQzNTgxMTY5MDYwMjQzNTE2NjEwMGYwNTY1YjAwNWI2MTAwNDY2MTAyNjk1NjViMDA1YjM0MTU2MTAwYjU1NzYwMDA4MGZkNWI2MTAwYmQ2MTAyNmM1NjViNjA0MDUxNjAwMTYwODA2MDAyMGEwMzkyODMxNjgxNTI5MTE2NjAyMDgyMDE1MjYwNDA5MDgxMDE5MDUxODA5MTAzOTBmMzViNjAwMDU0NjAwMTYwYTA2MDAyMGEwMzE2ODE1NjViNjAwMDgwNTQ4MTkwNjAwMTYwYTA2MDAyMGEwMzE2NjNiNDc4ODg2ZDYxMDdkMDYwNDA1MTgyNjNmZmZmZmZmZjE2NjBlMDYwMDIwYTAyODE1MjYwMDQwMTYwNDA4MDUxODA4MzAzODE2MDAwODg4MDNiMTUxNTYxMDEzNDU3NjAwMDgwZmQ1Yjg3ZjExNTE1NjEwMTQxNTc2MDAwODBmZDViNTA1MDUwNTA2MDQwNTE4MDUxOTA2MDIwMDE4MDUxOTA1MDkxNTA5MTUwMzA2MDAxNjBhMDYwMDIwYTAzMTYzMTgzNjAwMTYwODA2MDAyMGEwMzE2MTE4MDYxMDE4ODU3NTA4MjYwMDE2MDgwNjAwMjBhMDMxNjgxNjAwMTYwODA2MDAyMGEwMzE2MTA1YjgwNjEwMWE4NTc1MDgxNjFlYTYwMDE2MDAxNjA4MDYwMDIwYTAzMTY4NDYwMDE2MDgwNjAwMjBhMDMxNjEwNWI4MDYxMDFiZjU3NTA4MTYxNjFhODAxNjAwMTYwODA2MDAyMGEwMzE2NWExMDViMTU2MTAxYzk1NzYxMDI2MzU2NWI2MDAxNjBhMDYwMDIwYTAzMzMxNjYwMDE2MDgwNjAwMjBhMDM4MjE2ODAxNTYxMDhmYzAyOTA2MDQwNTE2MDAwNjA0MDUxODA4MzAzODE4NTg4ODhmMTkzNTA1MDUwNTAxNTE1NjEwMjA0NTc2MDAwODBmZDViNjAwMDU0NjAwMTYwYTA2MDAyMGEwMzE2NjM0Njg2MDMwZjYwMDE2MDgwNjAwMjBhMDM2MTAzZTg4NTAxMTY2MDQwNTE4MjYzZmZmZmZmZmYxNjYwZTA2MDAyMGEwMjgxNTI2MDA0MDE2MDAwNjA0MDUxODA4MzAzODE2MDAwODg4MDNiMTUxNTYxMDI1MTU3NjAwMDgwZmQ1Yjg3ZjExNTE1NjEwMjVlNTc2MDAwODBmZDViNTA1MDUwNTA1YjUwNTA1MDUwNTY1YjViNTY1YjYwMDA4MDU0ODE5MDgxOTA4MTkwNjAwMTYwYTA2MDAyMGEwMzE2NjNiNDc4ODg2ZDgyNjA0MDUxNjA0MDAxNTI2MDQwNTE4MTYzZmZmZmZmZmYxNjYwZTA2MDAyMGEwMjgxNTI2MDA0MDE2MDQwODA1MTgwODMwMzgxNjAwMDg3ODAzYjE1MTU2MTAyYjk1NzYwMDA4MGZkNWI2MTAyYzY1YTAzZjExNTE1NjEwMmNhNTc2MDAwODBmZDViNTA1MDUwNjA0MDUxODA1MTkwNjAyMDAxODA1MTYxZWE2MDkwOTIwMTk1NTA5MDkzNTA4NDkyNTA4MzkxNTA1MDViNTA1MDkwOTE1NjAwYTE2NTYyN2E3YTcyMzA1ODIwMTJkYjg4MjMwZWQwN2JkZWM2YWE1YzdjN2Y0MzE5NjMxYjNjOWI1NjJjYTY3MTU5NzJlNDM2MWUxZDhlYmIxNzAwMjlhMTY1NjI3YTdhNzIzMDU4MjBiYjhmZGJkOTRhYmM0N2ZjNTVlMWQ4MzRjNmE3YjdjNTE5YzczZjdiMjcxOTA1ZDJkYmIxZDVhMmEyYzhhZTJkMDAyOVwiLFxuICBcIm5ldHdvcmtzXCI6IHtcbiAgICBcIjE1MDc5OTM2MDAzNzhcIjoge1xuICAgICAgXCJldmVudHNcIjoge30sXG4gICAgICBcImxpbmtzXCI6IHt9LFxuICAgICAgXCJhZGRyZXNzXCI6IFwiMHhhMWI3NWEyODhhNDc0NWYzOWRkNDBlM2U4MjUzNDQzZGUwZjc1NWJiXCIsXG4gICAgICBcInVwZGF0ZWRfYXRcIjogMTUwNzk5MzkwNzM5OVxuICAgIH0sXG4gICAgXCIxNTA3OTkzOTE2NDcxXCI6IHtcbiAgICAgIFwiZXZlbnRzXCI6IHt9LFxuICAgICAgXCJsaW5rc1wiOiB7fSxcbiAgICAgIFwiYWRkcmVzc1wiOiBcIjB4NGU2MWFhZDMyZDNlZjU1OTdkMmZkNmJhOTJkYTI2YTVlZGJhZWY1N1wiLFxuICAgICAgXCJ1cGRhdGVkX2F0XCI6IDE1MDc5OTM5MjExOTdcbiAgICB9LFxuICAgIFwiMTUwNzk5NTI4ODYwN1wiOiB7XG4gICAgICBcImV2ZW50c1wiOiB7fSxcbiAgICAgIFwibGlua3NcIjoge30sXG4gICAgICBcImFkZHJlc3NcIjogXCIweDYxZDg2ZWJkOTA1NTk1ZDA4MzlmNmQ3NTgxM2RjNDMzMjQ3ZmFjZWVcIixcbiAgICAgIFwidXBkYXRlZF9hdFwiOiAxNTA3OTk1MjkyMzIxXG4gICAgfSxcbiAgICBcIjE1MDc5OTU3Njg2NjZcIjoge1xuICAgICAgXCJldmVudHNcIjoge30sXG4gICAgICBcImxpbmtzXCI6IHt9LFxuICAgICAgXCJhZGRyZXNzXCI6IFwiMHg3MmZiMTg4ZTAwN2NkM2M4Mjc4OGNmYzg2NWI0MTFmZjJhYjc2MTg0XCIsXG4gICAgICBcInVwZGF0ZWRfYXRcIjogMTUwNzk5NTc3NDEwOFxuICAgIH0sXG4gICAgXCIxNTA3OTk3Mjc5Njk0XCI6IHtcbiAgICAgIFwiZXZlbnRzXCI6IHt9LFxuICAgICAgXCJsaW5rc1wiOiB7fSxcbiAgICAgIFwiYWRkcmVzc1wiOiBcIjB4NjE2ODUzMWIxZDkzNjRkOWQzYTcyMzA2MWQzNGQyNTdhNzRlNjgzOVwiLFxuICAgICAgXCJ1cGRhdGVkX2F0XCI6IDE1MDc5OTcyOTAxOTNcbiAgICB9LFxuICAgIFwiMTUwNzk5ODc4Mzc0NlwiOiB7XG4gICAgICBcImV2ZW50c1wiOiB7fSxcbiAgICAgIFwibGlua3NcIjoge30sXG4gICAgICBcImFkZHJlc3NcIjogXCIweDAzOWFkN2JjOGFlMmZiMTg2MGIzNTRhYTJlNGIwZGRiYjc5ZjFiZWNcIixcbiAgICAgIFwidXBkYXRlZF9hdFwiOiAxNTA3OTk4ODYwNDA2XG4gICAgfSxcbiAgICBcIjE1MDgwMDI5MzgxNTZcIjoge1xuICAgICAgXCJldmVudHNcIjoge30sXG4gICAgICBcImxpbmtzXCI6IHt9LFxuICAgICAgXCJhZGRyZXNzXCI6IFwiMHhhODZkZDA4NTc3M2U4ZmYxODRiYzZiNGEyM2JkMzY5ODdjMjQzODBlXCIsXG4gICAgICBcInVwZGF0ZWRfYXRcIjogMTUwODAwMjk0NzM0N1xuICAgIH0sXG4gICAgXCIxNTA4MDA0OTE0NDA0XCI6IHtcbiAgICAgIFwiZXZlbnRzXCI6IHt9LFxuICAgICAgXCJsaW5rc1wiOiB7fSxcbiAgICAgIFwiYWRkcmVzc1wiOiBcIjB4MzRjYmUyZGY3Y2FjZjdkNjgwODUxZGQwZDZiMThkNzdkYmMzNTI5MlwiLFxuICAgICAgXCJ1cGRhdGVkX2F0XCI6IDE1MDgwMDQ5MTc4MTBcbiAgICB9LFxuICAgIFwiMTUwODAwNTQyMjAyOFwiOiB7XG4gICAgICBcImV2ZW50c1wiOiB7fSxcbiAgICAgIFwibGlua3NcIjoge30sXG4gICAgICBcImFkZHJlc3NcIjogXCIweGM3NzY5Mjc4YzU4YzlkNTYzZDQwMWYzMjY2OTYwY2Q4ZGEyZThhNDFcIixcbiAgICAgIFwidXBkYXRlZF9hdFwiOiAxNTA4MDA1NDMxMTIxXG4gICAgfSxcbiAgICBcIjE1MDgwMDc4ODEzODlcIjoge1xuICAgICAgXCJldmVudHNcIjoge30sXG4gICAgICBcImxpbmtzXCI6IHt9LFxuICAgICAgXCJhZGRyZXNzXCI6IFwiMHg2MjA0YTU1MjhjZWEzNDY2MDhjMTMzYTQ4Zjk4NmE0OTM4MmIwNjJhXCIsXG4gICAgICBcInVwZGF0ZWRfYXRcIjogMTUwODAwNzk5NzIwNVxuICAgIH0sXG4gICAgXCIxNTA4MDA5MjkxNzA1XCI6IHtcbiAgICAgIFwiZXZlbnRzXCI6IHt9LFxuICAgICAgXCJsaW5rc1wiOiB7fSxcbiAgICAgIFwiYWRkcmVzc1wiOiBcIjB4NGYyZjk0YmM0ODk4ZDFhOTA3NjNlOWE5ZDFkOTRkYjU1MzczODE1NVwiLFxuICAgICAgXCJ1cGRhdGVkX2F0XCI6IDE1MDgwMDkzNDM4ODhcbiAgICB9LFxuICAgIFwiMTUwODAwOTc2NTQ0MVwiOiB7XG4gICAgICBcImV2ZW50c1wiOiB7fSxcbiAgICAgIFwibGlua3NcIjoge30sXG4gICAgICBcImFkZHJlc3NcIjogXCIweGVlYWJhODcwN2E5NjI4MGEwNWRmOGM1M2U5OGRhN2ZmMzg0NzAwOWVcIixcbiAgICAgIFwidXBkYXRlZF9hdFwiOiAxNTA4MDA5Nzc5NTA3XG4gICAgfSxcbiAgICBcIjE1MDgwMTEzNTQxMTlcIjoge1xuICAgICAgXCJldmVudHNcIjoge30sXG4gICAgICBcImxpbmtzXCI6IHt9LFxuICAgICAgXCJhZGRyZXNzXCI6IFwiMHg4NWQ2MTUyNDRkZjU3ZDFjYmU1MDIyNjRlNGM2NzgxOWEyN2NlOWU0XCIsXG4gICAgICBcInVwZGF0ZWRfYXRcIjogMTUwODAxMTM2NzM5N1xuICAgIH0sXG4gICAgXCIxNTA4MDEyOTg4NTg0XCI6IHtcbiAgICAgIFwiZXZlbnRzXCI6IHt9LFxuICAgICAgXCJsaW5rc1wiOiB7fSxcbiAgICAgIFwiYWRkcmVzc1wiOiBcIjB4YzM2NzI5MzhhMmZlYjRlNTFhYzkzZWU5MDRkMDgzZjcxYTEwZGYwMVwiLFxuICAgICAgXCJ1cGRhdGVkX2F0XCI6IDE1MDgwMTMxMDYzNjdcbiAgICB9LFxuICAgIFwiMTUwODAxNDE2NTg3OFwiOiB7XG4gICAgICBcImV2ZW50c1wiOiB7fSxcbiAgICAgIFwibGlua3NcIjoge30sXG4gICAgICBcImFkZHJlc3NcIjogXCIweDljZWZkYzkzMTE2ZmE4NjlmNjVjNTM0NTg5NTQyMDAwZjljYzczNWJcIixcbiAgICAgIFwidXBkYXRlZF9hdFwiOiAxNTA4MDE0MTg1MDYzXG4gICAgfSxcbiAgICBcIjE1MDgwMTU3ODI1MjhcIjoge1xuICAgICAgXCJldmVudHNcIjoge30sXG4gICAgICBcImxpbmtzXCI6IHt9LFxuICAgICAgXCJhZGRyZXNzXCI6IFwiMHhmNmJlMTM1MDUzMjRjZmU5ZjhkZWYyODVmN2VlNDcwNGE3ZmQwYTg2XCIsXG4gICAgICBcInVwZGF0ZWRfYXRcIjogMTUwODAxNTc5NzIxMVxuICAgIH0sXG4gICAgXCIxNTA4MDE2MjA4NjI4XCI6IHtcbiAgICAgIFwiZXZlbnRzXCI6IHt9LFxuICAgICAgXCJsaW5rc1wiOiB7fSxcbiAgICAgIFwiYWRkcmVzc1wiOiBcIjB4MDljMmYyNmFlOTk3OWZhODVkYjcxNWQ1ZWIzZWMzMWY3YmEyNTdjMVwiLFxuICAgICAgXCJ1cGRhdGVkX2F0XCI6IDE1MDgwMTYyMjEyMjBcbiAgICB9LFxuICAgIFwiMTUwODAzNjA0MTg2MFwiOiB7XG4gICAgICBcImV2ZW50c1wiOiB7fSxcbiAgICAgIFwibGlua3NcIjoge30sXG4gICAgICBcImFkZHJlc3NcIjogXCIweDMzNWU0ZjcwMzA1MzQxZmQ2MGJjOGZmYWI5NTMxNDM4ZjQyNTlmYjdcIixcbiAgICAgIFwidXBkYXRlZF9hdFwiOiAxNTA4MDM2MDUxMzY2XG4gICAgfSxcbiAgICBcIjE1MDgwMzcwNjYwOTJcIjoge1xuICAgICAgXCJldmVudHNcIjoge30sXG4gICAgICBcImxpbmtzXCI6IHt9LFxuICAgICAgXCJhZGRyZXNzXCI6IFwiMHg1Y2E3MzMwMzMyOTZlYmY5OTg3M2U2YzU0OWQ4ODA0Y2VlYTkwMGIzXCIsXG4gICAgICBcInVwZGF0ZWRfYXRcIjogMTUwODAzNzA4MjY3NFxuICAgIH0sXG4gICAgXCIxNTA4MDM3ODM5NDE4XCI6IHtcbiAgICAgIFwiZXZlbnRzXCI6IHt9LFxuICAgICAgXCJsaW5rc1wiOiB7fSxcbiAgICAgIFwiYWRkcmVzc1wiOiBcIjB4OTBjNzgxYjliYWFlZmM4NzU1ZDdlMjVlZTZiYzdhNzI4Mzg2ZDEwZVwiLFxuICAgICAgXCJ1cGRhdGVkX2F0XCI6IDE1MDgwMzc4NDM0ODdcbiAgICB9LFxuICAgIFwiMTUwODA0MTc3MDMzMVwiOiB7XG4gICAgICBcImV2ZW50c1wiOiB7fSxcbiAgICAgIFwibGlua3NcIjoge30sXG4gICAgICBcImFkZHJlc3NcIjogXCIweGE3OTg1MWNiZTg3MDMwZGEyYmY5ZmVjMTI5ZjQyMDMwYjk1MDcyOWZcIixcbiAgICAgIFwidXBkYXRlZF9hdFwiOiAxNTA4MDQxNzk5NTc3XG4gICAgfSxcbiAgICBcIjE1MDgwNDI1MDMyMDJcIjoge1xuICAgICAgXCJldmVudHNcIjoge30sXG4gICAgICBcImxpbmtzXCI6IHt9LFxuICAgICAgXCJhZGRyZXNzXCI6IFwiMHgzNmVlNjk2Njc2MTliMWNlOGQ5YjgwN2RiNDFjMDliOTJhNDAzOTVhXCIsXG4gICAgICBcInVwZGF0ZWRfYXRcIjogMTUwODA0MjUyNzE1MFxuICAgIH0sXG4gICAgXCIxNTA4MDQ0MzUzNDA1XCI6IHtcbiAgICAgIFwiZXZlbnRzXCI6IHt9LFxuICAgICAgXCJsaW5rc1wiOiB7fSxcbiAgICAgIFwiYWRkcmVzc1wiOiBcIjB4N2I1ZjI0MmMyYTU5NTYwYzU4OWUwNjVkMjQ3MjliZTVjZTY4MGYyMlwiLFxuICAgICAgXCJ1cGRhdGVkX2F0XCI6IDE1MDgwNDQzNzAxMDNcbiAgICB9XG4gIH0sXG4gIFwic2NoZW1hX3ZlcnNpb25cIjogXCIwLjAuNVwiLFxuICBcInVwZGF0ZWRfYXRcIjogMTUwODA0NDM3MDEwM1xufSJdfQ==
